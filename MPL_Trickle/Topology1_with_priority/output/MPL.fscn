EC:<Id:1;Ev:1;H:0;W:1>{ SC: ( ( pid_4:cp0 , pid_10:dp0 , pid_15:dp0 ) , ( pid_21:cp0 , pid_27:dp0 , pid_32:dp0 ) , ( pid_38:cp0 , pid_44:dp0 , pid_49:dp0 ) , ( pid_55:cp0 , pid_61:dp0 , pid_66:dp0 ) )
	ALIAS{
		:ppid_-1:pid_0 = run::#PARAMETERS#; // model is spec::Trickle;
		:ppid_-1:pid_1 = spec::Trickle;
		:ppid_1:pid_2 = run::Trickle.n1; // model is spec::Trickle.Node;
			BUFFER NUMBER = 1;
			/*BUFFER{
				:ppid_1:pid_2:bufferNode = spec::Trickle.Node.bufferNode;
			}*/
			DATA{
				:ppid_1:pid_2:my_buff[0].seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_2:my_buff[0].fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_2:my_buff[0].offset = spec::Trickle.DATA_MESSAGE.offset;
				:ppid_1:pid_2:my_buff[1].seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_2:my_buff[1].fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_2:my_buff[1].offset = spec::Trickle.DATA_MESSAGE.offset;
				:ppid_1:pid_2:firmware[0] = spec::Trickle.Node.firmware;
				:ppid_1:pid_2:firmware[1] = spec::Trickle.Node.firmware;
				:ppid_1:pid_2:myseq_buff[0] = spec::Trickle.Node.myseq_buff;
				:ppid_1:pid_2:myseq_buff[1] = spec::Trickle.Node.myseq_buff;
				:ppid_1:pid_2:mydp_run[0] = spec::Trickle.Node.mydp_run;
				:ppid_1:pid_2:mydp_run[1] = spec::Trickle.Node.mydp_run;
				:ppid_1:pid_2:$time = spec::Trickle.Node.$time;
				:ppid_1:pid_2:z = spec::Trickle.Node.z;
				:ppid_1:pid_2:coverageProp = spec::Trickle.Node.coverageProp;
				:ppid_1:pid_2:seq_buff[0] = spec::Trickle.Node.seq_buff;
				:ppid_1:pid_2:seq_buff[1] = spec::Trickle.Node.seq_buff;
				:ppid_1:pid_2:i = spec::Trickle.Node.i;
				:ppid_1:pid_2:localTime = spec::Trickle.Node.localTime;
				:ppid_1:pid_2:localPC = spec::Trickle.Node.localPC;
				:ppid_1:pid_2:localPtC = spec::Trickle.Node.localPtC;
				:ppid_1:pid_2:new_seq_buff = spec::Trickle.Node.new_seq_buff;
				:ppid_1:pid_2:new_seq = spec::Trickle.Node.new_seq;
				:ppid_1:pid_2:new_fragment = spec::Trickle.Node.new_fragment;
				:ppid_1:pid_2:new_offset = spec::Trickle.Node.new_offset;
				:ppid_1:pid_2:timeEmit = spec::Trickle.Node.timeEmit;
			}
			INTERFACE{
				:ppid_1:pid_2:ControlMsg = spec::Trickle.Node.ControlMsg;
				:ppid_1:pid_2:DataMsg = spec::Trickle.Node.DataMsg;
				:ppid_1:pid_2:Log = spec::Trickle.Node.Log;
			}
		:ppid_2:pid_3 = spec::Trickle.Node.ControlProcess;
			DATA{
				:ppid_2:pid_3:k = spec::Trickle.Node.ControlProcess.k;
				:ppid_2:pid_3:c = spec::Trickle.Node.ControlProcess.c;
				:ppid_2:pid_3:e = spec::Trickle.Node.ControlProcess.e;
				:ppid_2:pid_3:tau = spec::Trickle.Node.ControlProcess.tau;
				:ppid_2:pid_3:tau_l = spec::Trickle.Node.ControlProcess.tau_l;
				:ppid_2:pid_3:tau_h = spec::Trickle.Node.ControlProcess.tau_h;
				:ppid_2:pid_3:i = spec::Trickle.Node.ControlProcess.i;
				:ppid_2:pid_3:t = spec::Trickle.Node.ControlProcess.t;
				:ppid_2:pid_3:consistent = spec::Trickle.Node.ControlProcess.consistent;
				:ppid_2:pid_3:cl = spec::Trickle.Node.ControlProcess.cl;
			}
		:ppid_3:pid_4 = spec::Trickle.Node.ControlProcess.cp0;
		:ppid_3:pid_5 = spec::Trickle.Node.ControlProcess.cp0_init;
		:ppid_3:pid_6 = spec::Trickle.Node.ControlProcess.cp1;
		:ppid_3:pid_7 = spec::Trickle.Node.ControlProcess.cp2;
		:ppid_3:pid_8 = spec::Trickle.Node.ControlProcess.cp3;
		:ppid_2:pid_9 = run::Trickle.n1.DataProcess1; // model is spec::Trickle.Node.DataProcess;
			DATA{
				:ppid_2:pid_9:mySeq = spec::Trickle.Node.DataProcess.mySeq;
				:ppid_2:pid_9:k = spec::Trickle.Node.DataProcess.k;
				:ppid_2:pid_9:c = spec::Trickle.Node.DataProcess.c;
				:ppid_2:pid_9:e = spec::Trickle.Node.DataProcess.e;
				:ppid_2:pid_9:tau = spec::Trickle.Node.DataProcess.tau;
				:ppid_2:pid_9:tau_l = spec::Trickle.Node.DataProcess.tau_l;
				:ppid_2:pid_9:tau_h = spec::Trickle.Node.DataProcess.tau_h;
				:ppid_2:pid_9:i = spec::Trickle.Node.DataProcess.i;
				:ppid_2:pid_9:t = spec::Trickle.Node.DataProcess.t;
				:ppid_2:pid_9:consistent = spec::Trickle.Node.DataProcess.consistent;
				:ppid_2:pid_9:cl = spec::Trickle.Node.DataProcess.cl;
				:ppid_2:pid_9:d.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_2:pid_9:d.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_2:pid_9:d.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_9:pid_10 = spec::Trickle.Node.DataProcess.dp0;
		:ppid_9:pid_11 = spec::Trickle.Node.DataProcess.dp1;
		:ppid_9:pid_12 = spec::Trickle.Node.DataProcess.dp2;
		:ppid_9:pid_13 = spec::Trickle.Node.DataProcess.dp3;
		:ppid_2:pid_14 = run::Trickle.n1.DataProcess2; // model is spec::Trickle.Node.DataProcess;
			DATA{
				:ppid_2:pid_14:mySeq = spec::Trickle.Node.DataProcess.mySeq;
				:ppid_2:pid_14:k = spec::Trickle.Node.DataProcess.k;
				:ppid_2:pid_14:c = spec::Trickle.Node.DataProcess.c;
				:ppid_2:pid_14:e = spec::Trickle.Node.DataProcess.e;
				:ppid_2:pid_14:tau = spec::Trickle.Node.DataProcess.tau;
				:ppid_2:pid_14:tau_l = spec::Trickle.Node.DataProcess.tau_l;
				:ppid_2:pid_14:tau_h = spec::Trickle.Node.DataProcess.tau_h;
				:ppid_2:pid_14:i = spec::Trickle.Node.DataProcess.i;
				:ppid_2:pid_14:t = spec::Trickle.Node.DataProcess.t;
				:ppid_2:pid_14:consistent = spec::Trickle.Node.DataProcess.consistent;
				:ppid_2:pid_14:cl = spec::Trickle.Node.DataProcess.cl;
				:ppid_2:pid_14:d.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_2:pid_14:d.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_2:pid_14:d.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_14:pid_15 = spec::Trickle.Node.DataProcess.dp0;
		:ppid_14:pid_16 = spec::Trickle.Node.DataProcess.dp1;
		:ppid_14:pid_17 = spec::Trickle.Node.DataProcess.dp2;
		:ppid_14:pid_18 = spec::Trickle.Node.DataProcess.dp3;
		:ppid_1:pid_19 = run::Trickle.n2; // model is spec::Trickle.Node;
			BUFFER NUMBER = 1;
			/*BUFFER{
				:ppid_1:pid_19:bufferNode = spec::Trickle.Node.bufferNode;
			}*/
			DATA{
				:ppid_1:pid_19:my_buff[0].seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_19:my_buff[0].fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_19:my_buff[0].offset = spec::Trickle.DATA_MESSAGE.offset;
				:ppid_1:pid_19:my_buff[1].seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_19:my_buff[1].fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_19:my_buff[1].offset = spec::Trickle.DATA_MESSAGE.offset;
				:ppid_1:pid_19:firmware[0] = spec::Trickle.Node.firmware;
				:ppid_1:pid_19:firmware[1] = spec::Trickle.Node.firmware;
				:ppid_1:pid_19:myseq_buff[0] = spec::Trickle.Node.myseq_buff;
				:ppid_1:pid_19:myseq_buff[1] = spec::Trickle.Node.myseq_buff;
				:ppid_1:pid_19:mydp_run[0] = spec::Trickle.Node.mydp_run;
				:ppid_1:pid_19:mydp_run[1] = spec::Trickle.Node.mydp_run;
				:ppid_1:pid_19:$time = spec::Trickle.Node.$time;
				:ppid_1:pid_19:z = spec::Trickle.Node.z;
				:ppid_1:pid_19:coverageProp = spec::Trickle.Node.coverageProp;
				:ppid_1:pid_19:seq_buff[0] = spec::Trickle.Node.seq_buff;
				:ppid_1:pid_19:seq_buff[1] = spec::Trickle.Node.seq_buff;
				:ppid_1:pid_19:i = spec::Trickle.Node.i;
				:ppid_1:pid_19:localTime = spec::Trickle.Node.localTime;
				:ppid_1:pid_19:localPC = spec::Trickle.Node.localPC;
				:ppid_1:pid_19:localPtC = spec::Trickle.Node.localPtC;
				:ppid_1:pid_19:new_seq_buff = spec::Trickle.Node.new_seq_buff;
				:ppid_1:pid_19:new_seq = spec::Trickle.Node.new_seq;
				:ppid_1:pid_19:new_fragment = spec::Trickle.Node.new_fragment;
				:ppid_1:pid_19:new_offset = spec::Trickle.Node.new_offset;
				:ppid_1:pid_19:timeEmit = spec::Trickle.Node.timeEmit;
			}
			INTERFACE{
				:ppid_1:pid_19:ControlMsg = spec::Trickle.Node.ControlMsg;
				:ppid_1:pid_19:DataMsg = spec::Trickle.Node.DataMsg;
				:ppid_1:pid_19:Log = spec::Trickle.Node.Log;
			}
		:ppid_19:pid_20 = spec::Trickle.Node.ControlProcess;
			DATA{
				:ppid_19:pid_20:k = spec::Trickle.Node.ControlProcess.k;
				:ppid_19:pid_20:c = spec::Trickle.Node.ControlProcess.c;
				:ppid_19:pid_20:e = spec::Trickle.Node.ControlProcess.e;
				:ppid_19:pid_20:tau = spec::Trickle.Node.ControlProcess.tau;
				:ppid_19:pid_20:tau_l = spec::Trickle.Node.ControlProcess.tau_l;
				:ppid_19:pid_20:tau_h = spec::Trickle.Node.ControlProcess.tau_h;
				:ppid_19:pid_20:i = spec::Trickle.Node.ControlProcess.i;
				:ppid_19:pid_20:t = spec::Trickle.Node.ControlProcess.t;
				:ppid_19:pid_20:consistent = spec::Trickle.Node.ControlProcess.consistent;
				:ppid_19:pid_20:cl = spec::Trickle.Node.ControlProcess.cl;
			}
		:ppid_20:pid_21 = spec::Trickle.Node.ControlProcess.cp0;
		:ppid_20:pid_22 = spec::Trickle.Node.ControlProcess.cp0_init;
		:ppid_20:pid_23 = spec::Trickle.Node.ControlProcess.cp1;
		:ppid_20:pid_24 = spec::Trickle.Node.ControlProcess.cp2;
		:ppid_20:pid_25 = spec::Trickle.Node.ControlProcess.cp3;
		:ppid_19:pid_26 = run::Trickle.n2.DataProcess1; // model is spec::Trickle.Node.DataProcess;
			DATA{
				:ppid_19:pid_26:mySeq = spec::Trickle.Node.DataProcess.mySeq;
				:ppid_19:pid_26:k = spec::Trickle.Node.DataProcess.k;
				:ppid_19:pid_26:c = spec::Trickle.Node.DataProcess.c;
				:ppid_19:pid_26:e = spec::Trickle.Node.DataProcess.e;
				:ppid_19:pid_26:tau = spec::Trickle.Node.DataProcess.tau;
				:ppid_19:pid_26:tau_l = spec::Trickle.Node.DataProcess.tau_l;
				:ppid_19:pid_26:tau_h = spec::Trickle.Node.DataProcess.tau_h;
				:ppid_19:pid_26:i = spec::Trickle.Node.DataProcess.i;
				:ppid_19:pid_26:t = spec::Trickle.Node.DataProcess.t;
				:ppid_19:pid_26:consistent = spec::Trickle.Node.DataProcess.consistent;
				:ppid_19:pid_26:cl = spec::Trickle.Node.DataProcess.cl;
				:ppid_19:pid_26:d.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_19:pid_26:d.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_19:pid_26:d.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_26:pid_27 = spec::Trickle.Node.DataProcess.dp0;
		:ppid_26:pid_28 = spec::Trickle.Node.DataProcess.dp1;
		:ppid_26:pid_29 = spec::Trickle.Node.DataProcess.dp2;
		:ppid_26:pid_30 = spec::Trickle.Node.DataProcess.dp3;
		:ppid_19:pid_31 = run::Trickle.n2.DataProcess2; // model is spec::Trickle.Node.DataProcess;
			DATA{
				:ppid_19:pid_31:mySeq = spec::Trickle.Node.DataProcess.mySeq;
				:ppid_19:pid_31:k = spec::Trickle.Node.DataProcess.k;
				:ppid_19:pid_31:c = spec::Trickle.Node.DataProcess.c;
				:ppid_19:pid_31:e = spec::Trickle.Node.DataProcess.e;
				:ppid_19:pid_31:tau = spec::Trickle.Node.DataProcess.tau;
				:ppid_19:pid_31:tau_l = spec::Trickle.Node.DataProcess.tau_l;
				:ppid_19:pid_31:tau_h = spec::Trickle.Node.DataProcess.tau_h;
				:ppid_19:pid_31:i = spec::Trickle.Node.DataProcess.i;
				:ppid_19:pid_31:t = spec::Trickle.Node.DataProcess.t;
				:ppid_19:pid_31:consistent = spec::Trickle.Node.DataProcess.consistent;
				:ppid_19:pid_31:cl = spec::Trickle.Node.DataProcess.cl;
				:ppid_19:pid_31:d.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_19:pid_31:d.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_19:pid_31:d.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_31:pid_32 = spec::Trickle.Node.DataProcess.dp0;
		:ppid_31:pid_33 = spec::Trickle.Node.DataProcess.dp1;
		:ppid_31:pid_34 = spec::Trickle.Node.DataProcess.dp2;
		:ppid_31:pid_35 = spec::Trickle.Node.DataProcess.dp3;
		:ppid_1:pid_36 = run::Trickle.n3; // model is spec::Trickle.Node;
			BUFFER NUMBER = 1;
			/*BUFFER{
				:ppid_1:pid_36:bufferNode = spec::Trickle.Node.bufferNode;
			}*/
			DATA{
				:ppid_1:pid_36:my_buff[0].seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_36:my_buff[0].fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_36:my_buff[0].offset = spec::Trickle.DATA_MESSAGE.offset;
				:ppid_1:pid_36:my_buff[1].seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_36:my_buff[1].fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_36:my_buff[1].offset = spec::Trickle.DATA_MESSAGE.offset;
				:ppid_1:pid_36:firmware[0] = spec::Trickle.Node.firmware;
				:ppid_1:pid_36:firmware[1] = spec::Trickle.Node.firmware;
				:ppid_1:pid_36:myseq_buff[0] = spec::Trickle.Node.myseq_buff;
				:ppid_1:pid_36:myseq_buff[1] = spec::Trickle.Node.myseq_buff;
				:ppid_1:pid_36:mydp_run[0] = spec::Trickle.Node.mydp_run;
				:ppid_1:pid_36:mydp_run[1] = spec::Trickle.Node.mydp_run;
				:ppid_1:pid_36:$time = spec::Trickle.Node.$time;
				:ppid_1:pid_36:z = spec::Trickle.Node.z;
				:ppid_1:pid_36:coverageProp = spec::Trickle.Node.coverageProp;
				:ppid_1:pid_36:seq_buff[0] = spec::Trickle.Node.seq_buff;
				:ppid_1:pid_36:seq_buff[1] = spec::Trickle.Node.seq_buff;
				:ppid_1:pid_36:i = spec::Trickle.Node.i;
				:ppid_1:pid_36:localTime = spec::Trickle.Node.localTime;
				:ppid_1:pid_36:localPC = spec::Trickle.Node.localPC;
				:ppid_1:pid_36:localPtC = spec::Trickle.Node.localPtC;
				:ppid_1:pid_36:new_seq_buff = spec::Trickle.Node.new_seq_buff;
				:ppid_1:pid_36:new_seq = spec::Trickle.Node.new_seq;
				:ppid_1:pid_36:new_fragment = spec::Trickle.Node.new_fragment;
				:ppid_1:pid_36:new_offset = spec::Trickle.Node.new_offset;
				:ppid_1:pid_36:timeEmit = spec::Trickle.Node.timeEmit;
			}
			INTERFACE{
				:ppid_1:pid_36:ControlMsg = spec::Trickle.Node.ControlMsg;
				:ppid_1:pid_36:DataMsg = spec::Trickle.Node.DataMsg;
				:ppid_1:pid_36:Log = spec::Trickle.Node.Log;
			}
		:ppid_36:pid_37 = spec::Trickle.Node.ControlProcess;
			DATA{
				:ppid_36:pid_37:k = spec::Trickle.Node.ControlProcess.k;
				:ppid_36:pid_37:c = spec::Trickle.Node.ControlProcess.c;
				:ppid_36:pid_37:e = spec::Trickle.Node.ControlProcess.e;
				:ppid_36:pid_37:tau = spec::Trickle.Node.ControlProcess.tau;
				:ppid_36:pid_37:tau_l = spec::Trickle.Node.ControlProcess.tau_l;
				:ppid_36:pid_37:tau_h = spec::Trickle.Node.ControlProcess.tau_h;
				:ppid_36:pid_37:i = spec::Trickle.Node.ControlProcess.i;
				:ppid_36:pid_37:t = spec::Trickle.Node.ControlProcess.t;
				:ppid_36:pid_37:consistent = spec::Trickle.Node.ControlProcess.consistent;
				:ppid_36:pid_37:cl = spec::Trickle.Node.ControlProcess.cl;
			}
		:ppid_37:pid_38 = spec::Trickle.Node.ControlProcess.cp0;
		:ppid_37:pid_39 = spec::Trickle.Node.ControlProcess.cp0_init;
		:ppid_37:pid_40 = spec::Trickle.Node.ControlProcess.cp1;
		:ppid_37:pid_41 = spec::Trickle.Node.ControlProcess.cp2;
		:ppid_37:pid_42 = spec::Trickle.Node.ControlProcess.cp3;
		:ppid_36:pid_43 = run::Trickle.n3.DataProcess1; // model is spec::Trickle.Node.DataProcess;
			DATA{
				:ppid_36:pid_43:mySeq = spec::Trickle.Node.DataProcess.mySeq;
				:ppid_36:pid_43:k = spec::Trickle.Node.DataProcess.k;
				:ppid_36:pid_43:c = spec::Trickle.Node.DataProcess.c;
				:ppid_36:pid_43:e = spec::Trickle.Node.DataProcess.e;
				:ppid_36:pid_43:tau = spec::Trickle.Node.DataProcess.tau;
				:ppid_36:pid_43:tau_l = spec::Trickle.Node.DataProcess.tau_l;
				:ppid_36:pid_43:tau_h = spec::Trickle.Node.DataProcess.tau_h;
				:ppid_36:pid_43:i = spec::Trickle.Node.DataProcess.i;
				:ppid_36:pid_43:t = spec::Trickle.Node.DataProcess.t;
				:ppid_36:pid_43:consistent = spec::Trickle.Node.DataProcess.consistent;
				:ppid_36:pid_43:cl = spec::Trickle.Node.DataProcess.cl;
				:ppid_36:pid_43:d.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_36:pid_43:d.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_36:pid_43:d.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_43:pid_44 = spec::Trickle.Node.DataProcess.dp0;
		:ppid_43:pid_45 = spec::Trickle.Node.DataProcess.dp1;
		:ppid_43:pid_46 = spec::Trickle.Node.DataProcess.dp2;
		:ppid_43:pid_47 = spec::Trickle.Node.DataProcess.dp3;
		:ppid_36:pid_48 = run::Trickle.n3.DataProcess2; // model is spec::Trickle.Node.DataProcess;
			DATA{
				:ppid_36:pid_48:mySeq = spec::Trickle.Node.DataProcess.mySeq;
				:ppid_36:pid_48:k = spec::Trickle.Node.DataProcess.k;
				:ppid_36:pid_48:c = spec::Trickle.Node.DataProcess.c;
				:ppid_36:pid_48:e = spec::Trickle.Node.DataProcess.e;
				:ppid_36:pid_48:tau = spec::Trickle.Node.DataProcess.tau;
				:ppid_36:pid_48:tau_l = spec::Trickle.Node.DataProcess.tau_l;
				:ppid_36:pid_48:tau_h = spec::Trickle.Node.DataProcess.tau_h;
				:ppid_36:pid_48:i = spec::Trickle.Node.DataProcess.i;
				:ppid_36:pid_48:t = spec::Trickle.Node.DataProcess.t;
				:ppid_36:pid_48:consistent = spec::Trickle.Node.DataProcess.consistent;
				:ppid_36:pid_48:cl = spec::Trickle.Node.DataProcess.cl;
				:ppid_36:pid_48:d.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_36:pid_48:d.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_36:pid_48:d.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_48:pid_49 = spec::Trickle.Node.DataProcess.dp0;
		:ppid_48:pid_50 = spec::Trickle.Node.DataProcess.dp1;
		:ppid_48:pid_51 = spec::Trickle.Node.DataProcess.dp2;
		:ppid_48:pid_52 = spec::Trickle.Node.DataProcess.dp3;
		:ppid_1:pid_53 = run::Trickle.n4; // model is spec::Trickle.Node;
			BUFFER NUMBER = 1;
			/*BUFFER{
				:ppid_1:pid_53:bufferNode = spec::Trickle.Node.bufferNode;
			}*/
			DATA{
				:ppid_1:pid_53:my_buff[0].seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_53:my_buff[0].fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_53:my_buff[0].offset = spec::Trickle.DATA_MESSAGE.offset;
				:ppid_1:pid_53:my_buff[1].seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_53:my_buff[1].fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_53:my_buff[1].offset = spec::Trickle.DATA_MESSAGE.offset;
				:ppid_1:pid_53:firmware[0] = spec::Trickle.Node.firmware;
				:ppid_1:pid_53:firmware[1] = spec::Trickle.Node.firmware;
				:ppid_1:pid_53:myseq_buff[0] = spec::Trickle.Node.myseq_buff;
				:ppid_1:pid_53:myseq_buff[1] = spec::Trickle.Node.myseq_buff;
				:ppid_1:pid_53:mydp_run[0] = spec::Trickle.Node.mydp_run;
				:ppid_1:pid_53:mydp_run[1] = spec::Trickle.Node.mydp_run;
				:ppid_1:pid_53:$time = spec::Trickle.Node.$time;
				:ppid_1:pid_53:z = spec::Trickle.Node.z;
				:ppid_1:pid_53:coverageProp = spec::Trickle.Node.coverageProp;
				:ppid_1:pid_53:seq_buff[0] = spec::Trickle.Node.seq_buff;
				:ppid_1:pid_53:seq_buff[1] = spec::Trickle.Node.seq_buff;
				:ppid_1:pid_53:i = spec::Trickle.Node.i;
				:ppid_1:pid_53:localTime = spec::Trickle.Node.localTime;
				:ppid_1:pid_53:localPC = spec::Trickle.Node.localPC;
				:ppid_1:pid_53:localPtC = spec::Trickle.Node.localPtC;
				:ppid_1:pid_53:new_seq_buff = spec::Trickle.Node.new_seq_buff;
				:ppid_1:pid_53:new_seq = spec::Trickle.Node.new_seq;
				:ppid_1:pid_53:new_fragment = spec::Trickle.Node.new_fragment;
				:ppid_1:pid_53:new_offset = spec::Trickle.Node.new_offset;
				:ppid_1:pid_53:timeEmit = spec::Trickle.Node.timeEmit;
			}
			INTERFACE{
				:ppid_1:pid_53:ControlMsg = spec::Trickle.Node.ControlMsg;
				:ppid_1:pid_53:DataMsg = spec::Trickle.Node.DataMsg;
				:ppid_1:pid_53:Log = spec::Trickle.Node.Log;
			}
		:ppid_53:pid_54 = spec::Trickle.Node.ControlProcess;
			DATA{
				:ppid_53:pid_54:k = spec::Trickle.Node.ControlProcess.k;
				:ppid_53:pid_54:c = spec::Trickle.Node.ControlProcess.c;
				:ppid_53:pid_54:e = spec::Trickle.Node.ControlProcess.e;
				:ppid_53:pid_54:tau = spec::Trickle.Node.ControlProcess.tau;
				:ppid_53:pid_54:tau_l = spec::Trickle.Node.ControlProcess.tau_l;
				:ppid_53:pid_54:tau_h = spec::Trickle.Node.ControlProcess.tau_h;
				:ppid_53:pid_54:i = spec::Trickle.Node.ControlProcess.i;
				:ppid_53:pid_54:t = spec::Trickle.Node.ControlProcess.t;
				:ppid_53:pid_54:consistent = spec::Trickle.Node.ControlProcess.consistent;
				:ppid_53:pid_54:cl = spec::Trickle.Node.ControlProcess.cl;
			}
		:ppid_54:pid_55 = spec::Trickle.Node.ControlProcess.cp0;
		:ppid_54:pid_56 = spec::Trickle.Node.ControlProcess.cp0_init;
		:ppid_54:pid_57 = spec::Trickle.Node.ControlProcess.cp1;
		:ppid_54:pid_58 = spec::Trickle.Node.ControlProcess.cp2;
		:ppid_54:pid_59 = spec::Trickle.Node.ControlProcess.cp3;
		:ppid_53:pid_60 = run::Trickle.n4.DataProcess1; // model is spec::Trickle.Node.DataProcess;
			DATA{
				:ppid_53:pid_60:mySeq = spec::Trickle.Node.DataProcess.mySeq;
				:ppid_53:pid_60:k = spec::Trickle.Node.DataProcess.k;
				:ppid_53:pid_60:c = spec::Trickle.Node.DataProcess.c;
				:ppid_53:pid_60:e = spec::Trickle.Node.DataProcess.e;
				:ppid_53:pid_60:tau = spec::Trickle.Node.DataProcess.tau;
				:ppid_53:pid_60:tau_l = spec::Trickle.Node.DataProcess.tau_l;
				:ppid_53:pid_60:tau_h = spec::Trickle.Node.DataProcess.tau_h;
				:ppid_53:pid_60:i = spec::Trickle.Node.DataProcess.i;
				:ppid_53:pid_60:t = spec::Trickle.Node.DataProcess.t;
				:ppid_53:pid_60:consistent = spec::Trickle.Node.DataProcess.consistent;
				:ppid_53:pid_60:cl = spec::Trickle.Node.DataProcess.cl;
				:ppid_53:pid_60:d.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_53:pid_60:d.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_53:pid_60:d.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_60:pid_61 = spec::Trickle.Node.DataProcess.dp0;
		:ppid_60:pid_62 = spec::Trickle.Node.DataProcess.dp1;
		:ppid_60:pid_63 = spec::Trickle.Node.DataProcess.dp2;
		:ppid_60:pid_64 = spec::Trickle.Node.DataProcess.dp3;
		:ppid_53:pid_65 = run::Trickle.n4.DataProcess2; // model is spec::Trickle.Node.DataProcess;
			DATA{
				:ppid_53:pid_65:mySeq = spec::Trickle.Node.DataProcess.mySeq;
				:ppid_53:pid_65:k = spec::Trickle.Node.DataProcess.k;
				:ppid_53:pid_65:c = spec::Trickle.Node.DataProcess.c;
				:ppid_53:pid_65:e = spec::Trickle.Node.DataProcess.e;
				:ppid_53:pid_65:tau = spec::Trickle.Node.DataProcess.tau;
				:ppid_53:pid_65:tau_l = spec::Trickle.Node.DataProcess.tau_l;
				:ppid_53:pid_65:tau_h = spec::Trickle.Node.DataProcess.tau_h;
				:ppid_53:pid_65:i = spec::Trickle.Node.DataProcess.i;
				:ppid_53:pid_65:t = spec::Trickle.Node.DataProcess.t;
				:ppid_53:pid_65:consistent = spec::Trickle.Node.DataProcess.consistent;
				:ppid_53:pid_65:cl = spec::Trickle.Node.DataProcess.cl;
				:ppid_53:pid_65:d.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_53:pid_65:d.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_53:pid_65:d.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_65:pid_66 = spec::Trickle.Node.DataProcess.dp0;
		:ppid_65:pid_67 = spec::Trickle.Node.DataProcess.dp1;
		:ppid_65:pid_68 = spec::Trickle.Node.DataProcess.dp2;
		:ppid_65:pid_69 = spec::Trickle.Node.DataProcess.dp3;
	}
	PC: true
	PtC: true
	DATA{
		:pid_2:my_buff[0].seq = 1;
		:pid_2:my_buff[0].fragment = FRAGMENT_0;
		:pid_2:my_buff[0].offset = 0;
		:pid_2:my_buff[1].seq = 2;
		:pid_2:my_buff[1].fragment = FRAGMENT_1;
		:pid_2:my_buff[1].offset = 1;
		:pid_2:firmware[0] = FRAGMENT_0;
		:pid_2:firmware[1] = FRAGMENT_1;
		:pid_2:myseq_buff[0] = 1;
		:pid_2:myseq_buff[1] = 1;
		:pid_2:mydp_run[0] = true;
		:pid_2:mydp_run[1] = true;
		:pid_2:$time = 0;
		:pid_2:z = $delta#initial;
		:pid_2:coverageProp = false;
		:pid_2:seq_buff[0] = seq_buff[0]_0;
		:pid_2:seq_buff[1] = seq_buff[1]_0;
		:pid_2:i = i_0;
		:pid_2:localTime = 0;
		:pid_2:localPC = true;
		:pid_2:localPtC = true;
		:pid_2:new_seq_buff = new_seq_buff_0;
		:pid_2:new_seq = new_seq_0;
		:pid_2:new_fragment = new_fragment_0;
		:pid_2:new_offset = new_offset_0;
		:pid_2:timeEmit = timeEmit_0;
		:pid_3:k = k_0;
		:pid_3:c = c_0;
		:pid_3:e = e_0;
		:pid_3:tau = tau_0;
		:pid_3:tau_l = tau_l_0;
		:pid_3:tau_h = tau_h_0;
		:pid_3:i = i_0;
		:pid_3:t = t_0;
		:pid_3:consistent = consistent_0;
		:pid_3:cl = 0;
		:pid_9:mySeq = 1;
		:pid_9:k = k_0;
		:pid_9:c = c_0;
		:pid_9:e = e_0;
		:pid_9:tau = tau_0;
		:pid_9:tau_l = tau_l_0;
		:pid_9:tau_h = tau_h_0;
		:pid_9:i = i_0;
		:pid_9:t = t_0;
		:pid_9:consistent = consistent_0;
		:pid_9:cl = 0;
		:pid_9:d.seq = d.seq_0;
		:pid_9:d.fragment = d.fragment_0;
		:pid_9:d.offset = d.offset_0;
		:pid_14:mySeq = 2;
		:pid_14:k = k_1;
		:pid_14:c = c_1;
		:pid_14:e = e_1;
		:pid_14:tau = tau_1;
		:pid_14:tau_l = tau_l_1;
		:pid_14:tau_h = tau_h_1;
		:pid_14:i = i_1;
		:pid_14:t = t_1;
		:pid_14:consistent = consistent_1;
		:pid_14:cl = 0;
		:pid_14:d.seq = d.seq_1;
		:pid_14:d.fragment = d.fragment_1;
		:pid_14:d.offset = d.offset_1;
		:pid_19:my_buff[0].seq = 0;
		:pid_19:my_buff[0].fragment = UNDEF_FRAGMENT;
		:pid_19:my_buff[0].offset = 0;
		:pid_19:my_buff[1].seq = 0;
		:pid_19:my_buff[1].fragment = UNDEF_FRAGMENT;
		:pid_19:my_buff[1].offset = 1;
		:pid_19:firmware[0] = UNDEF_FRAGMENT;
		:pid_19:firmware[1] = UNDEF_FRAGMENT;
		:pid_19:myseq_buff[0] = 0;
		:pid_19:myseq_buff[1] = 0;
		:pid_19:mydp_run[0] = false;
		:pid_19:mydp_run[1] = false;
		:pid_19:$time = 0;
		:pid_19:z = $delta#initial;
		:pid_19:coverageProp = false;
		:pid_19:seq_buff[0] = seq_buff[0]_1;
		:pid_19:seq_buff[1] = seq_buff[1]_1;
		:pid_19:i = i_1;
		:pid_19:localTime = 0;
		:pid_19:localPC = true;
		:pid_19:localPtC = true;
		:pid_19:new_seq_buff = new_seq_buff_1;
		:pid_19:new_seq = new_seq_1;
		:pid_19:new_fragment = new_fragment_1;
		:pid_19:new_offset = new_offset_1;
		:pid_19:timeEmit = timeEmit_1;
		:pid_20:k = k_1;
		:pid_20:c = c_1;
		:pid_20:e = e_1;
		:pid_20:tau = tau_1;
		:pid_20:tau_l = tau_l_1;
		:pid_20:tau_h = tau_h_1;
		:pid_20:i = i_1;
		:pid_20:t = t_1;
		:pid_20:consistent = consistent_1;
		:pid_20:cl = 0;
		:pid_26:mySeq = 1;
		:pid_26:k = k_2;
		:pid_26:c = c_2;
		:pid_26:e = e_2;
		:pid_26:tau = tau_2;
		:pid_26:tau_l = tau_l_2;
		:pid_26:tau_h = tau_h_2;
		:pid_26:i = i_2;
		:pid_26:t = t_2;
		:pid_26:consistent = consistent_2;
		:pid_26:cl = 0;
		:pid_26:d.seq = d.seq_2;
		:pid_26:d.fragment = d.fragment_2;
		:pid_26:d.offset = d.offset_2;
		:pid_31:mySeq = 2;
		:pid_31:k = k_3;
		:pid_31:c = c_3;
		:pid_31:e = e_3;
		:pid_31:tau = tau_3;
		:pid_31:tau_l = tau_l_3;
		:pid_31:tau_h = tau_h_3;
		:pid_31:i = i_3;
		:pid_31:t = t_3;
		:pid_31:consistent = consistent_3;
		:pid_31:cl = 0;
		:pid_31:d.seq = d.seq_3;
		:pid_31:d.fragment = d.fragment_3;
		:pid_31:d.offset = d.offset_3;
		:pid_36:my_buff[0].seq = 0;
		:pid_36:my_buff[0].fragment = UNDEF_FRAGMENT;
		:pid_36:my_buff[0].offset = 0;
		:pid_36:my_buff[1].seq = 0;
		:pid_36:my_buff[1].fragment = UNDEF_FRAGMENT;
		:pid_36:my_buff[1].offset = 1;
		:pid_36:firmware[0] = UNDEF_FRAGMENT;
		:pid_36:firmware[1] = UNDEF_FRAGMENT;
		:pid_36:myseq_buff[0] = 0;
		:pid_36:myseq_buff[1] = 0;
		:pid_36:mydp_run[0] = false;
		:pid_36:mydp_run[1] = false;
		:pid_36:$time = 0;
		:pid_36:z = $delta#initial;
		:pid_36:coverageProp = false;
		:pid_36:seq_buff[0] = seq_buff[0]_2;
		:pid_36:seq_buff[1] = seq_buff[1]_2;
		:pid_36:i = i_2;
		:pid_36:localTime = 0;
		:pid_36:localPC = true;
		:pid_36:localPtC = true;
		:pid_36:new_seq_buff = new_seq_buff_2;
		:pid_36:new_seq = new_seq_2;
		:pid_36:new_fragment = new_fragment_2;
		:pid_36:new_offset = new_offset_2;
		:pid_36:timeEmit = timeEmit_2;
		:pid_37:k = k_2;
		:pid_37:c = c_2;
		:pid_37:e = e_2;
		:pid_37:tau = tau_2;
		:pid_37:tau_l = tau_l_2;
		:pid_37:tau_h = tau_h_2;
		:pid_37:i = i_2;
		:pid_37:t = t_2;
		:pid_37:consistent = consistent_2;
		:pid_37:cl = 0;
		:pid_43:mySeq = 1;
		:pid_43:k = k_4;
		:pid_43:c = c_4;
		:pid_43:e = e_4;
		:pid_43:tau = tau_4;
		:pid_43:tau_l = tau_l_4;
		:pid_43:tau_h = tau_h_4;
		:pid_43:i = i_4;
		:pid_43:t = t_4;
		:pid_43:consistent = consistent_4;
		:pid_43:cl = 0;
		:pid_43:d.seq = d.seq_4;
		:pid_43:d.fragment = d.fragment_4;
		:pid_43:d.offset = d.offset_4;
		:pid_48:mySeq = 2;
		:pid_48:k = k_5;
		:pid_48:c = c_5;
		:pid_48:e = e_5;
		:pid_48:tau = tau_5;
		:pid_48:tau_l = tau_l_5;
		:pid_48:tau_h = tau_h_5;
		:pid_48:i = i_5;
		:pid_48:t = t_5;
		:pid_48:consistent = consistent_5;
		:pid_48:cl = 0;
		:pid_48:d.seq = d.seq_5;
		:pid_48:d.fragment = d.fragment_5;
		:pid_48:d.offset = d.offset_5;
		:pid_53:my_buff[0].seq = 0;
		:pid_53:my_buff[0].fragment = UNDEF_FRAGMENT;
		:pid_53:my_buff[0].offset = 0;
		:pid_53:my_buff[1].seq = 0;
		:pid_53:my_buff[1].fragment = UNDEF_FRAGMENT;
		:pid_53:my_buff[1].offset = 1;
		:pid_53:firmware[0] = UNDEF_FRAGMENT;
		:pid_53:firmware[1] = UNDEF_FRAGMENT;
		:pid_53:myseq_buff[0] = 0;
		:pid_53:myseq_buff[1] = 0;
		:pid_53:mydp_run[0] = false;
		:pid_53:mydp_run[1] = false;
		:pid_53:$time = 0;
		:pid_53:z = $delta#initial;
		:pid_53:coverageProp = false;
		:pid_53:seq_buff[0] = seq_buff[0]_3;
		:pid_53:seq_buff[1] = seq_buff[1]_3;
		:pid_53:i = i_3;
		:pid_53:localTime = 0;
		:pid_53:localPC = true;
		:pid_53:localPtC = true;
		:pid_53:new_seq_buff = new_seq_buff_3;
		:pid_53:new_seq = new_seq_3;
		:pid_53:new_fragment = new_fragment_3;
		:pid_53:new_offset = new_offset_3;
		:pid_53:timeEmit = timeEmit_3;
		:pid_54:k = k_3;
		:pid_54:c = c_3;
		:pid_54:e = e_3;
		:pid_54:tau = tau_3;
		:pid_54:tau_l = tau_l_3;
		:pid_54:tau_h = tau_h_3;
		:pid_54:i = i_3;
		:pid_54:t = t_3;
		:pid_54:consistent = consistent_3;
		:pid_54:cl = 0;
		:pid_60:mySeq = 1;
		:pid_60:k = k_6;
		:pid_60:c = c_6;
		:pid_60:e = e_6;
		:pid_60:tau = tau_6;
		:pid_60:tau_l = tau_l_6;
		:pid_60:tau_h = tau_h_6;
		:pid_60:i = i_6;
		:pid_60:t = t_6;
		:pid_60:consistent = consistent_6;
		:pid_60:cl = 0;
		:pid_60:d.seq = d.seq_6;
		:pid_60:d.fragment = d.fragment_6;
		:pid_60:d.offset = d.offset_6;
		:pid_65:mySeq = 2;
		:pid_65:k = k_7;
		:pid_65:c = c_7;
		:pid_65:e = e_7;
		:pid_65:tau = tau_7;
		:pid_65:tau_l = tau_l_7;
		:pid_65:tau_h = tau_h_7;
		:pid_65:i = i_7;
		:pid_65:t = t_7;
		:pid_65:consistent = consistent_7;
		:pid_65:cl = 0;
		:pid_65:d.seq = d.seq_7;
		:pid_65:d.fragment = d.fragment_7;
		:pid_65:d.offset = d.offset_7;
	}
	BUFFER{
		:pid_2:bufferNode:<FIFO>#0{ }
		:pid_19:bufferNode:<FIFO>#0{ }
		:pid_36:bufferNode:<FIFO>#0{ }
		:pid_53:bufferNode:<FIFO>#0{ }
	}
	EC:<Id:2;Ev:2;H:1;W:1>{ SC: ( ( pid_5:cp0_init , pid_10:dp0 , pid_15:dp0 ) , ( pid_22:cp0_init , pid_27:dp0 , pid_32:dp0 ) , ( pid_39:cp0_init , pid_44:dp0 , pid_49:dp0 ) , ( pid_56:cp0_init , pid_61:dp0 , pid_66:dp0 ) )
		EXE: { |,| { |;| (:pid_55 , run) (:pid_55 , cp_init) } { |;| (:pid_38 , 
	run) (:pid_38 , cp_init) } { |;| (:pid_21 , run) (:pid_21 , cp_init) } { |;| 
	(:pid_4 , run) (:pid_4 , cp_init) } }
		DATA{
			:pid_3:k = 2;
			:pid_3:c = 0;
			:pid_3:e = 0;
			:pid_3:tau = 4;
			:pid_3:tau_l = 4;
			:pid_3:tau_h = 8;
			:pid_20:k = 2;
			:pid_20:c = 0;
			:pid_20:e = 0;
			:pid_20:tau = 4;
			:pid_20:tau_l = 4;
			:pid_20:tau_h = 8;
			:pid_37:k = 2;
			:pid_37:c = 0;
			:pid_37:e = 0;
			:pid_37:tau = 4;
			:pid_37:tau_l = 4;
			:pid_37:tau_h = 8;
			:pid_54:k = 2;
			:pid_54:c = 0;
			:pid_54:e = 0;
			:pid_54:tau = 4;
			:pid_54:tau_l = 4;
			:pid_54:tau_h = 8;
		}
		EC:<Id:5;Ev:5;H:2;W:3>{ SC: ( ( pid_6:cp1 , pid_10:dp0 , pid_15:dp0 ) , ( pid_22:cp0_init , pid_27:dp0 , pid_32:dp0 ) , ( pid_39:cp0_init , pid_44:dp0 , pid_49:dp0 ) , ( pid_56:cp0_init , pid_61:dp0 , pid_66:dp0 ) )
			EXE: { |;| (:pid_2 , run) (:pid_3 , run) (:pid_5 , run) (:pid_5 , 
	cp_init) }
			TRACE: { |;| (:pid_2 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_0 }) (:pid_5 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_4 }) 
	(:pid_5 , ${ output#env inst::Trickle.Node.Log 0 } @ z_0) }
			NC: ((t_4 < 4) && (0 <= (t_4 + -2)))
			PC: ((t_4 < 4) && (0 <= (t_4 + -2)))
			DATA{
				:pid_2:mydp_run[0] = false;
				:pid_2:mydp_run[1] = false;
				:pid_2:$time = z_0;
				:pid_2:z = z_0;
				:pid_2:coverageProp = true;
				:pid_2:localTime = z_0;
				:pid_2:localPC = ((t_4 < 4) && (0 <= (t_4 + -2)));
				:pid_2:localPtC = ($delta#initial > 0);
				:pid_3:t = t_4;
				:pid_3:cl = 0;
				:pid_9:cl = z_0;
				:pid_14:cl = z_0;
			}
			EC:<Id:24;Ev:24;H:3;W:19>{ SC: ( ( pid_6:cp1 , pid_10:dp0 , pid_15:dp0 ) , ( pid_22:cp0_init , pid_27:dp0 , pid_32:dp0 ) , ( pid_39:cp0_init , pid_44:dp0 , pid_49:dp0 ) , ( pid_57:cp1 , pid_61:dp0 , pid_66:dp0 ) )
				EXE: { |;| (:pid_53 , run) (:pid_54 , run) (:pid_56 , run) 
	(:pid_56 , cp_init) }
				TRACE: { |;| (:pid_53 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_15 }) (:pid_56 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_18 }) 
	(:pid_56 , ${ output#env inst::Trickle.Node.Log 0 } @ z_15) }
				NC: ((t_18 < 4) && (0 <= (t_18 + -2)))
				PC: ((t_18 < 4) && (t_4 < 4) && (0 <= (t_18 + -2)) && (0 <= (t_4 + -2)))
				DATA{
					:pid_53:$time = z_15;
					:pid_53:z = z_15;
					:pid_53:localTime = z_15;
					:pid_53:localPC = ((t_18 < 4) && (0 <= (t_18 + -2)));
					:pid_53:localPtC = ($delta#initial > 0);
					:pid_54:t = t_18;
					:pid_54:cl = 0;
					:pid_60:cl = z_15;
					:pid_65:cl = z_15;
				}
				EC:<Id:128;Ev:61;H:4;W:104>{ SC: ( ( pid_6:cp1 , pid_10:dp0 , pid_15:dp0 ) , ( pid_22:cp0_init , pid_27:dp0 , pid_32:dp0 ) , ( pid_39:cp0_init , pid_44:dp0 , pid_49:dp0 ) , ( pid_58:cp2 , pid_61:dp0 , pid_66:dp0 ) )
					EXE: { |;| (:pid_53 , run) (:pid_54 , run) (:pid_57 , run) 
	(:pid_57 , cp_sendCM) }
					TRACE: { |;| (:pid_53 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_91 }) (:pid_57 , ${ output inst::Trickle.Node.ControlMsg [ 
	0 , 0 ] ${ + param::Trickle.Node.z_15 param::Trickle.Node.z_91 } } @ (z_15 + 
	z_91)) }
					DATA{
						:pid_53:$time = (z_15 + z_91);
						:pid_53:z = z_91;
						:pid_53:localTime = (z_15 + z_91);
						:pid_53:localPC = ((t_18 < 4) && (0 <= (t_18 + -2)));
						:pid_53:localPtC = ((z_91 == t_18) && ($delta#initial > 0) && (z_15 > 0));
						:pid_54:cl = z_91;
						:pid_60:cl = (z_15 + z_91);
						:pid_65:cl = (z_15 + z_91);
					}
					BUFFER{
						:pid_19:bufferNode:<FIFO>#0{
							:pid_53:ControlMsg([ 0 , 0 ] , (z_15 + z_91));
						}
					}
					EC:<Id:331;Ev:163;H:5;W:270>{ SC: ( ( pid_6:cp1 , pid_10:dp0 , pid_15:dp0 ) , ( pid_22:cp0_init , pid_27:dp0 , pid_32:dp0 ) , ( pid_39:cp0_init , pid_44:dp0 , pid_49:dp0 ) , ( pid_57:cp1 , pid_61:dp0 , pid_66:dp0 ) )
						EXE: { |;| (:pid_53 , run) (:pid_54 , run) (:pid_58 , 
	run) (:pid_58 , cp_resetTau) }
						TRACE: { |;| (:pid_53 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_239 }) (:pid_58 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_171 }) }
						NC: ((t_171 < 8) && (0 <= (t_171 + -4)))
						PC: ((t_171 < 8) && (t_18 < 4) && (t_4 < 4) && (0 <= (t_171 + -4)) && (0 <= (t_18 + 
	-2)) && (0 <= (t_4 + -2)))
						DATA{
							:pid_53:$time = (z_15 + z_239 + z_91);
							:pid_53:z = z_239;
							:pid_53:localTime = (z_15 + z_239 + z_91);
							:pid_53:localPC = ((t_171 < 8) && (t_18 < 4) && (0 <= (t_171 + -4)) && (0 <= (t_18 + -2)));
							:pid_53:localPtC = (((z_239 + z_91) == 4) && (z_91 == t_18) && ((z_239 + z_91) > t_18) && ($delta#initial > 0) && (z_15 > 0) && (z_91 > 0));
							:pid_54:e = 1;
							:pid_54:tau = 8;
							:pid_54:t = t_171;
							:pid_54:cl = 0;
							:pid_60:cl = (z_15 + z_239 + z_91);
							:pid_65:cl = (z_15 + z_239 + z_91);
						}
						EC:<Id:860;Ev:175;H:6;W:270>{ SC: ( ( pid_6:cp1 , pid_10:dp0 , pid_15:dp0 ) , ( pid_22:cp0_init , pid_27:dp0 , pid_32:dp0 ) , ( pid_39:cp0_init , pid_44:dp0 , pid_49:dp0 ) , ( pid_57:cp1 , pid_61:dp0 , pid_66:dp0 ) )
							EXE: (:pid_2 , run)
							DATA{
								:pid_2:localPtC = (($delta#initial > 0) && (z_0 > 0));
							}
							EC:<Id:923;Ev:217;H:7;W:748>{ SC: ( ( pid_6:cp1 , pid_10:dp0 , pid_15:dp0 ) , ( pid_22:cp0_init , pid_27:dp0 , pid_32:dp0 ) , ( pid_40:cp1 , pid_44:dp0 , pid_49:dp0 ) , ( pid_57:cp1 , pid_61:dp0 , pid_66:dp0 ) )
								EXE: { |;| (:pid_36 , run) (:pid_37 , run) 
	(:pid_39 , run) (:pid_39 , cp_init) }
								TRACE: { |;| (:pid_36 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_694 }) (:pid_39 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_434 }) 
	(:pid_39 , ${ output#env inst::Trickle.Node.Log 0 } @ z_694) }
								NC: ((t_434 < 4) && (0 <= (t_434 + -2)))
								PC: ((t_171 < 8) && (t_18 < 4) && (t_4 < 4) && (t_434 < 4) && (0 <= (t_171 + -4)) && 
	(0 <= (t_18 + -2)) && (0 <= (t_4 + -2)) && (0 <= (t_434 + -2)))
								DATA{
									:pid_36:$time = z_694;
									:pid_36:z = z_694;
									:pid_36:localTime = z_694;
									:pid_36:localPC = ((t_434 < 4) && (0 <= (t_434 + -2)));
									:pid_36:localPtC = ($delta#initial > 0);
									:pid_37:t = t_434;
									:pid_37:cl = 0;
									:pid_43:cl = z_694;
									:pid_48:cl = z_694;
								}
								EC:<Id:1128;Ev:307;H:8;W:748>{ SC: ( ( pid_6:cp1 , pid_10:dp0 , pid_15:dp0 ) , ( pid_22:cp0_init , pid_27:dp0 , pid_32:dp0 ) , ( pid_40:cp1 , pid_44:dp0 , pid_49:dp0 ) , ( pid_57:cp1 , pid_61:dp0 , pid_66:dp0 ) )
									EXE: (:pid_2 , run)
									DATA{
										:pid_2:localPtC = (($delta#initial > 0) && (z_0 > 0));
									}
									EC:<Id:1584;Ev:388;H:9;W:1277>{ SC: ( ( pid_6:cp1 , pid_10:dp0 , pid_15:dp0 ) , ( pid_23:cp1 , pid_27:dp0 , pid_32:dp0 ) , ( pid_40:cp1 , pid_44:dp0 , pid_49:dp0 ) , ( pid_57:cp1 , pid_61:dp0 , pid_66:dp0 ) )
										EXE: { |;| (:pid_19 , run) (:pid_20 , 
	run) (:pid_22 , run) (:pid_22 , cp_init) }
										TRACE: { |;| (:pid_19 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1221 }) (:pid_22 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_660 }) 
	(:pid_22 , ${ output#env inst::Trickle.Node.Log 0 } @ z_1221) }
										NC: ((t_660 < 4) && (0 <= (t_660 + -2)))
										PC: ((t_171 < 8) && (t_18 < 4) && (t_4 < 4) && (t_434 < 4) && (t_660 < 4) && (0 <= 
	(t_171 + -4)) && (0 <= (t_18 + -2)) && (0 <= (t_4 + -2)) && (0 <= (t_434 + -2)) 
	&& (0 <= (t_660 + -2)))
										DATA{
											:pid_19:$time = z_1221;
											:pid_19:z = z_1221;
											:pid_19:localTime = z_1221;
											:pid_19:localPC = ((t_660 < 4) && (0 <= (t_660 + -2)));
											:pid_19:localPtC = ($delta#initial > 0);
											:pid_20:t = t_660;
											:pid_20:cl = 0;
											:pid_26:cl = z_1221;
											:pid_31:cl = z_1221;
										}
										EC:<Id:1985;Ev:422;H:10;W:1597>{ SC: ( ( pid_6:cp1 , pid_10:dp0 , pid_15:dp0 ) , ( pid_23:cp1 , pid_27:dp0 , pid_32:dp0 ) , ( pid_40:cp1 , pid_44:dp0 , pid_49:dp0 ) , ( pid_57:cp1 , pid_61:dp0 , pid_66:dp0 ) )
											EXE: (:pid_36 , run)
											DATA{
												:pid_36:localPtC = (($delta#initial > 0) && (z_694 > 0));
											}
											EC:<Id:2138;Ev:504;H:11;W:1716>{ SC: ( ( pid_6:cp1 , pid_10:dp0 , pid_15:dp0 ) , ( pid_23:cp1 , pid_27:dp0 , pid_32:dp0 ) , ( pid_40:cp1 , pid_44:dp0 , pid_49:dp0 ) , ( pid_57:cp1 , pid_61:dp0 , pid_66:dp0 ) )
												EXE: (:pid_36 , run)
												DATA{
													:pid_36:localPtC = (($delta#initial > 0) && (z_694 > 0));
												}
												EC:<Id:2547;Ev:541;H:12;W:2043>{ SC: ( ( pid_6:cp1 , pid_10:dp0 , pid_15:dp0 ) , ( pid_23:cp1 , pid_27:dp0 , pid_32:dp0 ) , ( pid_40:cp1 , pid_44:dp0 , pid_49:dp0 ) , ( pid_57:cp1 , pid_61:dp0 , pid_66:dp0 ) )
													EXE: (:pid_53 , run)
													DATA{
														:pid_53:localPtC = (((z_239 + z_91) == 4) && (z_91 == t_18) && ((z_239 + z_91) > t_18) && ($delta#initial > 0) && (z_15 > 0) && (z_239 > 0) && (z_91 > 0));
													}
													EC:<Id:2746;Ev:604;H:13;W:2205>{ SC: ( ( pid_6:cp1 , pid_10:dp0 , pid_15:dp0 ) , ( pid_23:cp1 , pid_27:dp0 , pid_32:dp0 ) , ( pid_40:cp1 , pid_44:dp0 , pid_49:dp0 ) , ( pid_57:cp1 , pid_61:dp0 , pid_66:dp0 ) )
														EXE: { |;| (:pid_19 , 
	run) (:pid_20 , run) (:pid_23 , run) (:pid_23 , cp1_receiveCM_consistent) }
														TRACE: { |;| (:pid_19 , 
	${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_2157 }) (:pid_23 , ${ 
	input inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + param::Trickle.Node.z_15 
	param::Trickle.Node.z_91 } } @ (z_1221 + z_2157)) }
														DATA{
															:pid_19:$time = (z_1221 + z_2157);
															:pid_19:z = z_2157;
															:pid_19:seq_buff[0] = 0;
															:pid_19:seq_buff[1] = 0;
															:pid_19:localTime = (z_1221 + z_2157);
															:pid_19:localPC = ((t_660 < 4) && (0 <= (t_660 + -2)));
															:pid_19:localPtC = ((z_2157 < t_660) && ((z_15 + z_91) <= (z_1221 + z_2157)) && ($delta#initial > 0) && (z_1221 > 0));
															:pid_19:timeEmit = (z_15 + z_91);
															:pid_20:c = 1;
															:pid_20:i = 2;
															:pid_20:consistent = true;
															:pid_20:cl = z_2157;
															:pid_26:cl = (z_1221 + z_2157);
															:pid_31:cl = (z_1221 + z_2157);
														}
														BUFFER{
															:pid_19:bufferNode:<FIFO>#0{ }
														}
														EC:<Id:3041;Ev:656;H:14;W:2205>{ SC: ( ( pid_7:cp2 , pid_10:dp0 , pid_15:dp0 ) , ( pid_23:cp1 , pid_27:dp0 , pid_32:dp0 ) , ( pid_40:cp1 , pid_44:dp0 , pid_49:dp0 ) , ( pid_57:cp1 , pid_61:dp0 , pid_66:dp0 ) )
															EXE: { |;| (:pid_2 , 
	run) (:pid_3 , run) (:pid_6 , run) (:pid_6 , cp_sendCM) }
															TRACE: { |;| (:pid_2 
	, ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_2408 }) (:pid_6 , ${ 
	output inst::Trickle.Node.ControlMsg [ 1 , 1 ] ${ + param::Trickle.Node.z_0 
	param::Trickle.Node.z_2408 } } @ (z_0 + z_2408)) }
															DATA{
																:pid_2:$time = (z_0 + z_2408);
																:pid_2:z = z_2408;
																:pid_2:localTime = (z_0 + z_2408);
																:pid_2:localPC = ((t_4 < 4) && (0 <= (t_4 + -2)));
																:pid_2:localPtC = ((z_2408 == t_4) && ($delta#initial > 0) && (z_0 > 0));
																:pid_3:cl = z_2408;
																:pid_9:cl = (z_0 + z_2408);
																:pid_14:cl = (z_0 + z_2408);
															}
															BUFFER{
																:pid_19:bufferNode:<FIFO>#0{
																	:pid_2:ControlMsg([ 1 , 1 ] , (z_0 + z_2408));
																}
																:pid_36:bufferNode:<FIFO>#0{
																	:pid_2:ControlMsg([ 1 , 1 ] , (z_0 + z_2408));
																}
															}
															EC:<Id:3291;Ev:710;H:15;W:2635>{ SC: ( ( pid_7:cp2 , pid_10:dp0 , pid_15:dp0 ) , ( pid_23:cp1 , pid_27:dp0 , pid_32:dp0 ) , ( pid_40:cp1 , pid_44:dp0 , pid_49:dp0 ) , ( pid_57:cp1 , pid_61:dp0 , pid_66:dp0 ) )
																EXE: { |;| 
	(:pid_19 , run) (:pid_20 , run) (:pid_23 , run) (:pid_23 , 
	cp1_receiveCM_inconsistent) }
																TRACE: { |;| 
	(:pid_19 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_2617 }) 
	(:pid_23 , ${ input inst::Trickle.Node.ControlMsg [ 1 , 1 ] ${ + 
	param::Trickle.Node.z_0 param::Trickle.Node.z_2408 } } @ (z_1221 + z_2157 + 
	z_2617)) (:pid_23 , ${ newfresh inst::Trickle.Node.ControlProcess.t 
	param::Trickle.Node.ControlProcess.t_1042 }) }
																NC: ((t_1042 < 4)
	 && (0 <= (t_1042 + -2)))
																PC: ((t_1042 < 4) && (t_171 < 8) && (t_18 < 4) && (t_4 < 4) && (t_434 < 4) && (t_660 
	< 4) && (0 <= (t_1042 + -2)) && (0 <= (t_171 + -4)) && (0 <= (t_18 + -2)) && (0 
	<= (t_4 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_660 + -2)))
																DATA{
																	:pid_19:mydp_run[0] = true;
																	:pid_19:mydp_run[1] = true;
																	:pid_19:$time = (z_1221 + z_2157 + z_2617);
																	:pid_19:z = z_2617;
																	:pid_19:seq_buff[0] = 1;
																	:pid_19:seq_buff[1] = 1;
																	:pid_19:localTime = (z_1221 + z_2157 + z_2617);
																	:pid_19:localPC = ((t_1042 < 4) && (t_660 < 4) && (0 <= (t_1042 + -2)) && (0 <= (t_660 + -2)));
																	:pid_19:localPtC = (((z_2157 + z_2617) < t_660) && (z_2157 < t_660) && ((z_0 + z_2408) <= (z_1221 + z_2157 + z_2617)) && ((z_15 + z_91) <= (z_1221 + z_2157)) && ($delta#initial > 0) && (z_1221 > 0) && (z_2157 > 0));
																	:pid_19:timeEmit = (z_0 + z_2408);
																	:pid_20:c = 0;
																	:pid_20:e = 0;
																	:pid_20:i = 2;
																	:pid_20:t = t_1042;
																	:pid_20:consistent = false;
																	:pid_20:cl = 0;
																	:pid_26:cl = (z_1221 + z_2157 + z_2617);
																	:pid_31:cl = (z_1221 + z_2157 + z_2617);
																}
																BUFFER{
																	:pid_19:bufferNode:<FIFO>#0{ }
																}
																EC:<Id:3547;Ev:777;H:16;W:2837>{ SC: ( ( pid_7:cp2 , pid_10:dp0 , pid_15:dp0 ) , ( pid_23:cp1 , pid_27:dp0 , pid_32:dp0 ) , ( pid_41:cp2 , pid_44:dp0 , pid_49:dp0 ) , ( pid_57:cp1 , pid_61:dp0 , pid_66:dp0 ) )
																	EXE: { |;| 
	(:pid_36 , run) (:pid_37 , run) (:pid_40 , run) (:pid_40 , cp_sendCM) }
																	TRACE: { |;| 
	(:pid_36 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_2834 }) 
	(:pid_40 , ${ output inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + 
	param::Trickle.Node.z_2834 param::Trickle.Node.z_694 } } @ (z_2834 + z_694)) }
																	DATA{
																		:pid_36:$time = (z_2834 + z_694);
																		:pid_36:z = z_2834;
																		:pid_36:localTime = (z_2834 + z_694);
																		:pid_36:localPC = ((t_434 < 4) && (0 <= (t_434 + -2)));
																		:pid_36:localPtC = ((z_2834 == t_434) && ($delta#initial > 0) && (z_694 > 0));
																		:pid_37:cl = z_2834;
																		:pid_43:cl = (z_2834 + z_694);
																		:pid_48:cl = (z_2834 + z_694);
																	}
																	BUFFER{
																		:pid_2:bufferNode:<FIFO>#0{
																			:pid_36:ControlMsg([ 0 , 0 ] , (z_2834 + z_694));
																		}
																		:pid_19:bufferNode:<FIFO>#0{
																			:pid_36:ControlMsg([ 0 , 0 ] , (z_2834 + z_694));
																		}
																		:pid_53:bufferNode:<FIFO>#0{
																			:pid_36:ControlMsg([ 0 , 0 ] , (z_2834 + z_694));
																		}
																	}
																	EC:<Id:3870;Ev:857;H:17;W:3093>{ SC: ( ( pid_6:cp1 , pid_10:dp0 , pid_15:dp0 ) , ( pid_23:cp1 , pid_27:dp0 , pid_32:dp0 ) , ( pid_41:cp2 , pid_44:dp0 , pid_49:dp0 ) , ( pid_57:cp1 , pid_61:dp0 , pid_66:dp0 ) )
																		EXE: { 
	|;| (:pid_2 , run) (:pid_3 , run) (:pid_7 , run) (:pid_7 , 
	cp2_receiveCM_inconsistent) }
																		TRACE: { 
	|;| (:pid_2 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_3100 }) 
	(:pid_7 , ${ input inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + 
	param::Trickle.Node.z_2834 param::Trickle.Node.z_694 } } @ (z_0 + z_2408 + 
	z_3100)) (:pid_7 , ${ newfresh inst::Trickle.Node.ControlProcess.t 
	param::Trickle.Node.ControlProcess.t_1205 }) }
																		NC: 
	((t_1205 < 4) && (0 <= (t_1205 + -2)))
																		PC: ((t_1042 < 4) && (t_1205 < 4) && (t_171 < 8) && (t_18 < 4) && (t_4 < 4) && 
	(t_434 < 4) && (t_660 < 4) && (0 <= (t_1042 + -2)) && (0 <= (t_1205 + -2)) && (0 
	<= (t_171 + -4)) && (0 <= (t_18 + -2)) && (0 <= (t_4 + -2)) && (0 <= (t_434 + -2)
	) && (0 <= (t_660 + -2)))
																		DATA{
																			:pid_2:mydp_run[0] = true;
																			:pid_2:mydp_run[1] = true;
																			:pid_2:$time = (z_0 + z_2408 + z_3100);
																			:pid_2:z = z_3100;
																			:pid_2:seq_buff[0] = 0;
																			:pid_2:seq_buff[1] = 0;
																			:pid_2:localTime = (z_0 + z_2408 + z_3100);
																			:pid_2:localPC = ((t_1205 < 4) && (t_4 < 4) && (0 <= (t_1205 + -2)) && (0 <= (t_4 + -2)));
																			:pid_2:localPtC = ((z_2408 == t_4) && ((z_2408 + z_3100) < 4) && ((z_2834 + z_694) <= (z_0 + z_2408 + z_3100)) && ($delta#initial > 0) && (z_0 > 0) && (z_2408 > 0));
																			:pid_2:timeEmit = (z_2834 + z_694);
																			:pid_3:c = 0;
																			:pid_3:e = 0;
																			:pid_3:i = 2;
																			:pid_3:t = t_1205;
																			:pid_3:consistent = false;
																			:pid_3:cl = 0;
																			:pid_9:cl = (z_0 + z_2408 + z_3100);
																			:pid_14:cl = (z_0 + z_2408 + z_3100);
																		}
																		BUFFER{
																			:pid_2:bufferNode:<FIFO>#0{ }
																		}
																		EC:<Id:4280;Ev:891;H:18;W:3423>{ SC: ( ( pid_6:cp1 , pid_10:dp0 , pid_15:dp0 ) , ( pid_23:cp1 , pid_27:dp0 , pid_32:dp0 ) , ( pid_40:cp1 , pid_44:dp0 , pid_49:dp0 ) , ( pid_57:cp1 , pid_61:dp0 , pid_66:dp0 ) )
																			EXE: 
	{ |;| (:pid_36 , run) (:pid_37 , run) (:pid_41 , run) (:pid_41 , 
	cp2_receiveCM_inconsistent) }
																			
	TRACE: { |;| (:pid_36 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_3422 }) (:pid_41 , ${ input inst::Trickle.Node.ControlMsg 
	[ 1 , 1 ] ${ + param::Trickle.Node.z_0 param::Trickle.Node.z_2408 } } @ (z_2834 
	+ z_3422 + z_694)) (:pid_41 , ${ newfresh inst::Trickle.Node.ControlProcess.t 
	param::Trickle.Node.ControlProcess.t_1334 }) }
																			NC: 
	((t_1334 < 4) && (0 <= (t_1334 + -2)))
																			PC: ((t_1042 < 4) && (t_1205 < 4) && (t_1334 < 4) && (t_171 < 8) && (t_18 < 4) && 
	(t_4 < 4) && (t_434 < 4) && (t_660 < 4) && (0 <= (t_1042 + -2)) && (0 <= (t_1205 
	+ -2)) && (0 <= (t_1334 + -2)) && (0 <= (t_171 + -4)) && (0 <= (t_18 + -2)) && 
	(0 <= (t_4 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_660 + -2)))
																			DATA{
																				:pid_36:mydp_run[0] = true;
																				:pid_36:mydp_run[1] = true;
																				:pid_36:$time = (z_2834 + z_3422 + z_694);
																				:pid_36:z = z_3422;
																				:pid_36:seq_buff[0] = 1;
																				:pid_36:seq_buff[1] = 1;
																				:pid_36:localTime = (z_2834 + z_3422 + z_694);
																				:pid_36:localPC = ((t_1334 < 4) && (t_434 < 4) && (0 <= (t_1334 + -2)) && (0 <= (t_434 + -2)));
																				:pid_36:localPtC = ((z_2834 == t_434) && ((z_2834 + z_3422) < 4) && ((z_0 + z_2408) <= (z_2834 + z_3422 + z_694)) && ($delta#initial > 0) && (z_2834 > 0) && (z_694 > 0));
																				:pid_36:timeEmit = (z_0 + z_2408);
																				:pid_37:c = 0;
																				:pid_37:e = 0;
																				:pid_37:i = 2;
																				:pid_37:t = t_1334;
																				:pid_37:consistent = false;
																				:pid_37:cl = 0;
																				:pid_43:cl = (z_2834 + z_3422 + z_694);
																				:pid_48:cl = (z_2834 + z_3422 + z_694);
																			}
																			BUFFER{
																				:pid_36:bufferNode:<FIFO>#0{ }
																			}
																			EC:<Id:4466;Ev:937;H:19;W:3575>{ SC: ( ( pid_6:cp1 , pid_10:dp0 , pid_15:dp0 ) , ( pid_23:cp1 , pid_28:dp1 , pid_32:dp0 ) , ( pid_40:cp1 , pid_44:dp0 , pid_49:dp0 ) , ( pid_57:cp1 , pid_61:dp0 , pid_66:dp0 ) )
																				
	EXE: { |;| (:pid_19 , run) (:pid_26 , run) (:pid_27 , run) (:pid_27 , dp_init) }
																				
	TRACE: { |;| (:pid_19 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_3557 }) (:pid_27 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_6456 }) }
																				
	NC: ((t_6456 < 4) && (0 <= (t_6456 + -2)))
																				PC: ((t_1042 < 4) && (t_1205 < 4) && (t_1334 < 4) && (t_171 < 8) && (t_18 < 4) && 
	(t_4 < 4) && (t_434 < 4) && (t_660 < 4) && (t_6456 < 4) && (0 <= (t_1042 + -2)) 
	&& (0 <= (t_1205 + -2)) && (0 <= (t_1334 + -2)) && (0 <= (t_171 + -4)) && (0 <= 
	(t_18 + -2)) && (0 <= (t_4 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_660 + -2)) 
	&& (0 <= (t_6456 + -2)))
																				DATA{
																					:pid_19:$time = (z_1221 + z_2157 + z_2617 + z_3557);
																					:pid_19:z = z_3557;
																					:pid_19:localTime = (z_1221 + z_2157 + z_2617 + z_3557);
																					:pid_19:localPC = ((t_1042 < 4) && (t_660 < 4) && (t_6456 < 4) && (0 <= (t_1042 + -2)) && (0 <= (t_660 + -2)) && (0 <= (t_6456 + -2)));
																					:pid_19:localPtC = (((z_2157 + z_2617) < t_660) && (z_2157 < t_660) && ((z_0 + z_2408) <= (z_1221 + z_2157 + z_2617)) && ((z_15 + z_91) <= (z_1221 + z_2157)) && ($delta#initial > 0) && (z_1221 > 0) && (z_2157 > 0) && (z_2617 > 0));
																					:pid_20:cl = z_3557;
																					:pid_26:k = 2;
																					:pid_26:c = 0;
																					:pid_26:e = 0;
																					:pid_26:tau = 4;
																					:pid_26:tau_l = 4;
																					:pid_26:tau_h = 8;
																					:pid_26:t = t_6456;
																					:pid_26:cl = 0;
																					:pid_31:cl = (z_1221 + z_2157 + z_2617 + z_3557);
																				}
																				EC:<Id:4722;Ev:1021;H:20;W:3785>{ SC: ( ( pid_6:cp1 , pid_10:dp0 , pid_15:dp0 ) , ( pid_23:cp1 , pid_28:dp1 , pid_32:dp0 ) , ( pid_40:cp1 , pid_44:dp0 , pid_49:dp0 ) , ( pid_57:cp1 , pid_61:dp0 , pid_66:dp0 ) )
																					
	EXE: { |;| (:pid_19 , run) (:pid_20 , run) (:pid_23 , run) (:pid_23 , 
	cp1_receiveCM_consistent) }
																					
	TRACE: { |;| (:pid_19 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_3741 }) (:pid_23 , ${ input inst::Trickle.Node.ControlMsg 
	[ 0 , 0 ] ${ + param::Trickle.Node.z_2834 param::Trickle.Node.z_694 } } @ 
	(z_1221 + z_2157 + z_2617 + z_3557 + z_3741)) }
																					DATA{
																						:pid_19:$time = (z_1221 + z_2157 + z_2617 + z_3557 + z_3741);
																						:pid_19:z = z_3741;
																						:pid_19:seq_buff[0] = 0;
																						:pid_19:seq_buff[1] = 0;
																						:pid_19:localTime = (z_1221 + z_2157 + z_2617 + z_3557 + z_3741);
																						:pid_19:localPC = ((t_1042 < 4) && (t_660 < 4) && (t_6456 < 4) && (0 <= (t_1042 + -2)) && (0 <= (t_660 + -2)) && (0 <= (t_6456 + -2)));
																						:pid_19:localPtC = (((z_2157 + z_2617) < t_660) && ((z_3557 + z_3741) < t_1042) && (z_2157 < t_660) && ((z_0 + z_2408) <= (z_1221 + z_2157 + z_2617)) && ((z_15 + z_91) <= (z_1221 + z_2157)) && ((z_2834 + z_694) <= (z_1221 + z_2157 + z_2617 + z_3557 + z_3741)) && ($delta#initial > 0) && (z_1221 > 0) && (z_2157 > 0) && (z_2617 > 0) && (z_3557 > 0));
																						:pid_19:timeEmit = (z_2834 + z_694);
																						:pid_20:c = 1;
																						:pid_20:i = 2;
																						:pid_20:consistent = true;
																						:pid_20:cl = (z_3557 + z_3741);
																						:pid_26:cl = z_3741;
																						:pid_31:cl = (z_1221 + z_2157 + z_2617 + z_3557 + z_3741);
																					}
																					BUFFER{
																						:pid_19:bufferNode:<FIFO>#0{ }
																					}
																					EC:<Id:5218;Ev:1057;H:21;W:4197>{ SC: ( ( pid_6:cp1 , pid_10:dp0 , pid_15:dp0 ) , ( pid_23:cp1 , pid_28:dp1 , pid_32:dp0 ) , ( pid_40:cp1 , pid_44:dp0 , pid_49:dp0 ) , ( pid_58:cp2 , pid_61:dp0 , pid_66:dp0 ) )
																					
		EXE: { |;| (:pid_53 , run) (:pid_54 , run) (:pid_57 , run) (:pid_57 , 
	cp_sendCM) }
																					
		TRACE: { |;| (:pid_53 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_4079 }) (:pid_57 , ${ output inst::Trickle.Node.ControlMsg 
	[ 0 , 0 ] ${ + param::Trickle.Node.z_15 param::Trickle.Node.z_239 
	param::Trickle.Node.z_4079 param::Trickle.Node.z_91 } } @ (z_15 + z_239 + z_4079 
	+ z_91)) }
																						DATA{
																							:pid_53:$time = (z_15 + z_239 + z_4079 + z_91);
																							:pid_53:z = z_4079;
																							:pid_53:localTime = (z_15 + z_239 + z_4079 + z_91);
																							:pid_53:localPC = ((t_171 < 8) && (t_18 < 4) && (0 <= (t_171 + -4)) && (0 <= (t_18 + -2)));
																							:pid_53:localPtC = (((z_239 + z_91) == 4) && (z_4079 == t_171) && (z_91 == t_18) && ((z_239 + z_91) > t_18) && ($delta#initial > 0) && (z_15 > 0) && (z_239 > 0) && (z_91 > 0));
																							:pid_54:cl = z_4079;
																							:pid_60:cl = (z_15 + z_239 + z_4079 + z_91);
																							:pid_65:cl = (z_15 + z_239 + z_4079 + z_91);
																						}
																						BUFFER{
																							:pid_19:bufferNode:<FIFO>#0{
																								:pid_53:ControlMsg([ 0 , 0 ] , (z_15 + z_239 + z_4079 + z_91));
																							}
																						}
																						EC:<Id:5435;Ev:1172;H:22;W:4378>{ SC: ( ( pid_6:cp1 , pid_11:dp1 , pid_15:dp0 ) , ( pid_23:cp1 , pid_28:dp1 , pid_32:dp0 ) , ( pid_40:cp1 , pid_44:dp0 , pid_49:dp0 ) , ( pid_58:cp2 , pid_61:dp0 , pid_66:dp0 ) )
																					
			EXE: { |;| (:pid_2 , run) (:pid_9 , run) (:pid_10 , run) (:pid_10 , 
	dp_init) }
																					
			TRACE: { |;| (:pid_2 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_4220 }) (:pid_10 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_7603 }) }
																					
			NC: ((t_7603 < 4) && (0 <= (t_7603 + -2)))
																							PC: ((t_1042 < 4) && (t_1205 < 4) && (t_1334 < 4) && (t_171 < 8) && (t_18 < 4) && 
	(t_4 < 4) && (t_434 < 4) && (t_660 < 4) && (t_6456 < 4) && (t_7603 < 4) && (0 <= 
	(t_1042 + -2)) && (0 <= (t_1205 + -2)) && (0 <= (t_1334 + -2)) && (0 <= (t_171 + 
	-4)) && (0 <= (t_18 + -2)) && (0 <= (t_4 + -2)) && (0 <= (t_434 + -2)) && (0 <= 
	(t_660 + -2)) && (0 <= (t_6456 + -2)) && (0 <= (t_7603 + -2)))
																							DATA{
																								:pid_2:$time = (z_0 + z_2408 + z_3100 + z_4220);
																								:pid_2:z = z_4220;
																								:pid_2:localTime = (z_0 + z_2408 + z_3100 + z_4220);
																								:pid_2:localPC = ((t_1205 < 4) && (t_4 < 4) && (t_7603 < 4) && (0 <= (t_1205 + -2)) && (0 <= (t_4 + -2)) && (0 <= (t_7603 + -2)));
																								:pid_2:localPtC = ((z_2408 == t_4) && ((z_2408 + z_3100) < 4) && ((z_2834 + z_694) <= (z_0 + z_2408 + z_3100)) && ($delta#initial > 0) && (z_0 > 0) && (z_2408 > 0) && (z_3100 > 0));
																								:pid_3:cl = z_4220;
																								:pid_9:k = 2;
																								:pid_9:c = 0;
																								:pid_9:e = 0;
																								:pid_9:tau = 4;
																								:pid_9:tau_l = 4;
																								:pid_9:tau_h = 8;
																								:pid_9:t = t_7603;
																								:pid_9:cl = 0;
																								:pid_14:cl = (z_0 + z_2408 + z_3100 + z_4220);
																							}
																							EC:<Id:6126;Ev:1280;H:23;W:4954>{ SC: ( ( pid_6:cp1 , pid_11:dp1 , pid_15:dp0 ) , ( pid_23:cp1 , pid_28:dp1 , pid_33:dp1 ) , ( pid_40:cp1 , pid_44:dp0 , pid_49:dp0 ) , ( pid_58:cp2 , pid_61:dp0 , pid_66:dp0 ) )
																					
				EXE: { |;| (:pid_19 , run) (:pid_31 , run) (:pid_32 , run) (:pid_32 
	, dp_init) }
																					
				TRACE: { |;| (:pid_19 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_4681 }) (:pid_32 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_8365 }) }
																					
				NC: ((t_8365 < 4) && (0 <= (t_8365 + -2)))
																								PC: ((t_1042 < 4) && (t_1205 < 4) && (t_1334 < 4) && (t_171 < 8) && (t_18 < 4) && 
	(t_4 < 4) && (t_434 < 4) && (t_660 < 4) && (t_6456 < 4) && (t_7603 < 4) && 
	(t_8365 < 4) && (0 <= (t_1042 + -2)) && (0 <= (t_1205 + -2)) && (0 <= (t_1334 + 
	-2)) && (0 <= (t_171 + -4)) && (0 <= (t_18 + -2)) && (0 <= (t_4 + -2)) && (0 <= 
	(t_434 + -2)) && (0 <= (t_660 + -2)) && (0 <= (t_6456 + -2)) && (0 <= (t_7603 + 
	-2)) && (0 <= (t_8365 + -2)))
																								DATA{
																									:pid_19:$time = (z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681);
																									:pid_19:z = z_4681;
																									:pid_19:localTime = (z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681);
																									:pid_19:localPC = ((t_1042 < 4) && (t_660 < 4) && (t_6456 < 4) && (t_8365 < 4) && (0 <= (t_1042 + -2)) && (0 <= (t_660 + -2)) && (0 <= (t_6456 + -2)) && (0 <= (t_8365 + -2)));
																									:pid_19:localPtC = (((z_2157 + z_2617) < t_660) && ((z_3557 + z_3741) < t_1042) && (z_2157 < t_660) && ((z_0 + z_2408) <= (z_1221 + z_2157 + z_2617)) && ((z_15 + z_91) <= (z_1221 + z_2157)) && ((z_2834 + z_694) <= (z_1221 + z_2157 + z_2617 + z_3557 + z_3741)) && ($delta#initial > 0) && (z_1221 > 0) && (z_2157 > 0) && (z_2617 > 0) && (z_3557 > 0) && (z_3741 > 0));
																									:pid_20:cl = (z_3557 + z_3741 + z_4681);
																									:pid_26:cl = (z_3741 + z_4681);
																									:pid_31:k = 2;
																									:pid_31:c = 0;
																									:pid_31:e = 0;
																									:pid_31:tau = 4;
																									:pid_31:tau_l = 4;
																									:pid_31:tau_h = 8;
																									:pid_31:t = t_8365;
																									:pid_31:cl = 0;
																								}
																								EC:<Id:6831;Ev:1315;H:24;W:5551>{ SC: ( ( pid_6:cp1 , pid_11:dp1 , pid_15:dp0 ) , ( pid_23:cp1 , pid_28:dp1 , pid_33:dp1 ) , ( pid_40:cp1 , pid_44:dp0 , pid_49:dp0 ) , ( pid_58:cp2 , pid_61:dp0 , pid_66:dp0 ) )
																					
					EXE: { |;| (:pid_53 , run) (:pid_54 , run) (:pid_58 , run) 
	(:pid_58 , cp2_receiveCM_consistent) }
																					
					TRACE: { |;| (:pid_53 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_5115 }) (:pid_58 , ${ input inst::Trickle.Node.ControlMsg 
	[ 0 , 0 ] ${ + param::Trickle.Node.z_2834 param::Trickle.Node.z_694 } } @ (z_15 
	+ z_239 + z_4079 + z_5115 + z_91)) }
																									DATA{
																										:pid_53:$time = (z_15 + z_239 + z_4079 + z_5115 + z_91);
																										:pid_53:z = z_5115;
																										:pid_53:seq_buff[0] = 0;
																										:pid_53:seq_buff[1] = 0;
																										:pid_53:localTime = (z_15 + z_239 + z_4079 + z_5115 + z_91);
																										:pid_53:localPC = ((t_171 < 8) && (t_18 < 4) && (0 <= (t_171 + -4)) && (0 <= (t_18 + -2)));
																										:pid_53:localPtC = (((z_239 + z_91) == 4) && (z_4079 == t_171) && (z_91 == t_18) && ((z_4079 + z_5115) < 8) && ((z_2834 + z_694) <= (z_15 + z_239 + z_4079 + z_5115 + z_91)) && ((z_239 + z_91) > t_18) && ($delta#initial > 0) && (z_15 > 0) && (z_239 > 0) && (z_4079 > 0) && (z_91 > 0));
																										:pid_53:timeEmit = (z_2834 + z_694);
																										:pid_54:c = 1;
																										:pid_54:i = 2;
																										:pid_54:consistent = true;
																										:pid_54:cl = (z_4079 + z_5115);
																										:pid_60:cl = (z_15 + z_239 + z_4079 + z_5115 + z_91);
																										:pid_65:cl = (z_15 + z_239 + z_4079 + z_5115 + z_91);
																									}
																									BUFFER{
																										:pid_53:bufferNode:<FIFO>#0{ }
																									}
																									EC:<Id:7046;Ev:1384;H:25;W:5731>{ SC: ( ( pid_6:cp1 , pid_11:dp1 , pid_15:dp0 ) , ( pid_23:cp1 , pid_28:dp1 , pid_33:dp1 ) , ( pid_40:cp1 , pid_44:dp0 , pid_49:dp0 ) , ( pid_57:cp1 , pid_61:dp0 , pid_66:dp0 ) )
																					
						EXE: { |;| (:pid_53 , run) (:pid_54 , run) (:pid_58 , run) 
	(:pid_58 , cp_resetTau) }
																					
						TRACE: { |;| (:pid_53 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_5255 }) (:pid_58 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_1985 }) 
	}
																					
						NC: ((t_1985 < 8) && (0 <= (t_1985 + -4)))
																										PC: ((t_1042 < 4) && (t_1205 < 4) && (t_1334 < 4) && (t_171 < 8) && (t_18 < 4) && 
	(t_1985 < 8) && (t_4 < 4) && (t_434 < 4) && (t_660 < 4) && (t_6456 < 4) && 
	(t_7603 < 4) && (t_8365 < 4) && (0 <= (t_1042 + -2)) && (0 <= (t_1205 + -2)) && 
	(0 <= (t_1334 + -2)) && (0 <= (t_171 + -4)) && (0 <= (t_18 + -2)) && (0 <= 
	(t_1985 + -4)) && (0 <= (t_4 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_660 + -2))
	 && (0 <= (t_6456 + -2)) && (0 <= (t_7603 + -2)) && (0 <= (t_8365 + -2)))
																										DATA{
																											:pid_53:$time = (z_15 + z_239 + z_4079 + z_5115 + z_5255 + z_91);
																											:pid_53:z = z_5255;
																											:pid_53:localTime = (z_15 + z_239 + z_4079 + z_5115 + z_5255 + z_91);
																											:pid_53:localPC = ((t_171 < 8) && (t_18 < 4) && (t_1985 < 8) && (0 <= (t_171 + -4)) && (0 <= (t_18 + -2)) && (0 <= (t_1985 + -4)));
																											:pid_53:localPtC = (((z_239 + z_91) == 4) && ((z_4079 + z_5115 + z_5255) == 8) && (z_4079 == t_171) && (z_91 == t_18) && ((z_4079 + z_5115) < 8) && ((z_2834 + z_694) <= (z_15 + z_239 + z_4079 + z_5115 + z_91)) && ((z_239 + z_91) > t_18) && ((z_4079 + z_5115 + z_5255) > t_171) && ($delta#initial > 0) && (z_15 > 0) && (z_239 > 0) && (z_4079 > 0) && (z_5115 > 0) && (z_91 > 0));
																											:pid_54:e = 2;
																											:pid_54:tau = 8;
																											:pid_54:t = t_1985;
																											:pid_54:cl = 0;
																											:pid_60:cl = (z_15 + z_239 + z_4079 + z_5115 + z_5255 + z_91);
																											:pid_65:cl = (z_15 + z_239 + z_4079 + z_5115 + z_5255 + z_91);
																										}
																										EC:<Id:7442;Ev:1454;H:26;W:6058>{ SC: ( ( pid_6:cp1 , pid_11:dp1 , pid_15:dp0 ) , ( pid_23:cp1 , pid_28:dp1 , pid_33:dp1 ) , ( pid_40:cp1 , pid_44:dp0 , pid_49:dp0 ) , ( pid_57:cp1 , pid_61:dp0 , pid_66:dp0 ) )
																					
							EXE: (:pid_53 , run)
																											DATA{
																												:pid_53:localPtC = (((z_239 + z_91) == 4) && ((z_4079 + z_5115 + z_5255) == 8) && (z_4079 == t_171) && (z_91 == t_18) && ((z_4079 + z_5115) < 8) && ((z_2834 + z_694) <= (z_15 + z_239 + z_4079 + z_5115 + z_91)) && ((z_239 + z_91) > t_18) && ((z_4079 + z_5115 + z_5255) > t_171) && ($delta#initial > 0) && (z_15 > 0) && (z_239 > 0) && (z_4079 > 0) && (z_5115 > 0) && (z_5255 > 0) && (z_91 > 0));
																											}
																											EC:<Id:7949;Ev:1514;H:27;W:6495>{ SC: ( ( pid_6:cp1 , pid_11:dp1 , pid_15:dp0 ) , ( pid_23:cp1 , pid_28:dp1 , pid_33:dp1 ) , ( pid_40:cp1 , pid_44:dp0 , pid_49:dp0 ) , ( pid_57:cp1 , pid_61:dp0 , pid_66:dp0 ) )
																					
								EXE: { |;| (:pid_19 , run) (:pid_20 , run) (:pid_23 
	, run) (:pid_23 , cp1_receiveCM_consistent) }
																					
								TRACE: { |;| (:pid_19 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_5809 }) (:pid_23 , ${ input 
	inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + param::Trickle.Node.z_15 
	param::Trickle.Node.z_239 param::Trickle.Node.z_4079 param::Trickle.Node.z_91 } }
	 @ (z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809)) }
																												DATA{
																													:pid_19:$time = (z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809);
																													:pid_19:z = z_5809;
																													:pid_19:seq_buff[0] = 0;
																													:pid_19:seq_buff[1] = 0;
																													:pid_19:localTime = (z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809);
																													:pid_19:localPC = ((t_1042 < 4) && (t_660 < 4) && (t_6456 < 4) && (t_8365 < 4) && (0 <= (t_1042 + -2)) && (0 <= (t_660 + -2)) && (0 <= (t_6456 + -2)) && (0 <= (t_8365 + -2)));
																													:pid_19:localPtC = (((z_2157 + z_2617) < t_660) && ((z_3557 + z_3741) < t_1042) && ((z_3557 + z_3741 + z_4681 + z_5809) < t_1042) && (z_2157 < t_660) && ((z_0 + z_2408) <= (z_1221 + z_2157 + z_2617)) && ((z_15 + z_239 + z_4079 + z_91) <= (z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809)) && ((z_15 + z_91) <= (z_1221 + z_2157)) && ((z_2834 + z_694) <= (z_1221 + z_2157 + z_2617 + z_3557 + z_3741)) && ($delta#initial > 0) && (z_1221 > 0) && (z_2157 > 0) && (z_2617 > 0) && (z_3557 > 0) && (z_3741 > 0) && (z_4681 > 0));
																													:pid_19:timeEmit = (z_15 + z_239 + z_4079 + z_91);
																													:pid_20:c = 2;
																													:pid_20:i = 2;
																													:pid_20:cl = (z_3557 + z_3741 + z_4681 + z_5809);
																													:pid_26:cl = (z_3741 + z_4681 + z_5809);
																													:pid_31:cl = z_5809;
																												}
																												BUFFER{
																													:pid_19:bufferNode:<FIFO>#0{ }
																												}
																												EC:<Id:8359;Ev:1605;H:28;W:6495>{ SC: ( ( pid_6:cp1 , pid_11:dp1 , pid_16:dp1 ) , ( pid_23:cp1 , pid_28:dp1 , pid_33:dp1 ) , ( pid_40:cp1 , pid_44:dp0 , pid_49:dp0 ) , ( pid_57:cp1 , pid_61:dp0 , pid_66:dp0 ) )
																					
									EXE: { |;| (:pid_2 , run) (:pid_14 , run) 
	(:pid_15 , run) (:pid_15 , dp_init) }
																					
									TRACE: { |;| (:pid_2 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_6048 }) (:pid_15 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_10392 }) }
																					
									NC: ((t_10392 < 4) && (0 <= (t_10392 + -2)))
																													PC: ((t_1042 < 4) && (t_1205 < 4) && (t_1334 < 4) && (t_171 < 8) && (t_18 < 4) && 
	(t_1985 < 8) && (t_4 < 4) && (t_434 < 4) && (t_660 < 4) && (t_10392 < 4) && 
	(t_6456 < 4) && (t_7603 < 4) && (t_8365 < 4) && (0 <= (t_1042 + -2)) && (0 <= 
	(t_1205 + -2)) && (0 <= (t_1334 + -2)) && (0 <= (t_171 + -4)) && (0 <= (t_18 + 
	-2)) && (0 <= (t_1985 + -4)) && (0 <= (t_4 + -2)) && (0 <= (t_434 + -2)) && (0 
	<= (t_660 + -2)) && (0 <= (t_10392 + -2)) && (0 <= (t_6456 + -2)) && (0 <= 
	(t_7603 + -2)) && (0 <= (t_8365 + -2)))
																													DATA{
																														:pid_2:$time = (z_0 + z_2408 + z_3100 + z_4220 + z_6048);
																														:pid_2:z = z_6048;
																														:pid_2:localTime = (z_0 + z_2408 + z_3100 + z_4220 + z_6048);
																														:pid_2:localPC = ((t_1205 < 4) && (t_4 < 4) && (t_10392 < 4) && (t_7603 < 4) && (0 <= (t_1205 + -2)) && (0 <= (t_4 + -2)) && (0 <= (t_10392 + -2)) && (0 <= (t_7603 + -2)));
																														:pid_2:localPtC = ((z_2408 == t_4) && ((z_2408 + z_3100) < 4) && ((z_2834 + z_694) <= (z_0 + z_2408 + z_3100)) && ($delta#initial > 0) && (z_0 > 0) && (z_2408 > 0) && (z_3100 > 0) && (z_4220 > 0));
																														:pid_3:cl = (z_4220 + z_6048);
																														:pid_9:cl = z_6048;
																														:pid_14:k = 2;
																														:pid_14:c = 0;
																														:pid_14:e = 0;
																														:pid_14:tau = 4;
																														:pid_14:tau_l = 4;
																														:pid_14:tau_h = 8;
																														:pid_14:t = t_10392;
																														:pid_14:cl = 0;
																													}
																													EC:<Id:8949;Ev:1636;H:29;W:6495>{ SC: ( ( pid_6:cp1 , pid_11:dp1 , pid_17:dp2 ) , ( pid_23:cp1 , pid_28:dp1 , pid_33:dp1 ) , ( pid_40:cp1 , pid_44:dp0 , pid_49:dp0 ) , ( pid_57:cp1 , pid_61:dp0 , pid_66:dp0 ) )
																					
										EXE: { |;| (:pid_2 , run) (:pid_14 , run) 
	(:pid_16 , run) (:pid_16 , dp_sendDM) }
																					
										TRACE: { |;| (:pid_2 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_6412 }) (:pid_16 , ${ output 
	inst::Trickle.Node.DataMsg [ 2 , 2 , 1 ] ${ + param::Trickle.Node.z_0 
	param::Trickle.Node.z_2408 param::Trickle.Node.z_3100 param::Trickle.Node.z_4220 
	param::Trickle.Node.z_6048 param::Trickle.Node.z_6412 } } @ (z_0 + z_2408 + 
	z_3100 + z_4220 + z_6048 + z_6412)) }
																														DATA{
																															:pid_2:$time = (z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412);
																															:pid_2:z = z_6412;
																															:pid_2:localTime = (z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412);
																															:pid_2:localPC = ((t_1205 < 4) && (t_4 < 4) && (t_10392 < 4) && (t_7603 < 4) && (0 <= (t_1205 + -2)) && (0 <= (t_4 + -2)) && (0 <= (t_10392 + -2)) && (0 <= (t_7603 + -2)));
																															:pid_2:localPtC = ((z_2408 == t_4) && (z_6412 == t_10392) && ((z_2408 + z_3100) < 4) && ((z_2834 + z_694) <= (z_0 + z_2408 + z_3100)) && ($delta#initial > 0) && (z_0 > 0) && (z_2408 > 0) && (z_3100 > 0) && (z_4220 > 0) && (z_6048 > 0));
																															:pid_3:cl = (z_4220 + z_6048 + z_6412);
																															:pid_9:cl = (z_6048 + z_6412);
																															:pid_14:cl = z_6412;
																														}
																														BUFFER{
																															:pid_19:bufferNode:<FIFO>#0{
																																:pid_2:DataMsg([ 2 , 2 , 1 ] , (z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412));
																															}
																															:pid_36:bufferNode:<FIFO>#0{
																																:pid_2:DataMsg([ 2 , 2 , 1 ] , (z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412));
																															}
																														}
																														EC:<Id:9155;Ev:1772;H:30;W:7519>{ SC: ( ( pid_6:cp1 , pid_11:dp1 , pid_17:dp2 ) , ( pid_23:cp1 , pid_28:dp1 , pid_33:dp1 ) , ( pid_40:cp1 , pid_44:dp0 , pid_49:dp0 ) , ( pid_57:cp1 , pid_61:dp0 , pid_66:dp0 ) )
																					
											EXE: { |;| (:pid_19 , run) (:pid_26 , 
	run) (:pid_28 , run) (:pid_28 , dp1_receiveDM_inconsistent) }
																					
											TRACE: { |;| (:pid_19 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_6537 }) (:pid_28 , ${ input 
	inst::Trickle.Node.DataMsg [ 2 , 2 , 1 ] ${ + param::Trickle.Node.z_0 
	param::Trickle.Node.z_2408 param::Trickle.Node.z_3100 param::Trickle.Node.z_4220 
	param::Trickle.Node.z_6048 param::Trickle.Node.z_6412 } } @ (z_1221 + z_2157 + 
	z_2617 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537)) (:pid_28 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_11000 }) }
																					
											NC: ((t_11000 < 4) && (0 <= (t_11000 + 
	-2)))
																															PC: ((t_1042 < 4) && (t_1205 < 4) && (t_1334 < 4) && (t_171 < 8) && (t_18 < 4) && 
	(t_1985 < 8) && (t_4 < 4) && (t_434 < 4) && (t_660 < 4) && (t_10392 < 4) && 
	(t_11000 < 4) && (t_6456 < 4) && (t_7603 < 4) && (t_8365 < 4) && (0 <= (t_1042 + 
	-2)) && (0 <= (t_1205 + -2)) && (0 <= (t_1334 + -2)) && (0 <= (t_171 + -4)) && 
	(0 <= (t_18 + -2)) && (0 <= (t_1985 + -4)) && (0 <= (t_4 + -2)) && (0 <= (t_434 
	+ -2)) && (0 <= (t_660 + -2)) && (0 <= (t_10392 + -2)) && (0 <= (t_11000 + -2)) 
	&& (0 <= (t_6456 + -2)) && (0 <= (t_7603 + -2)) && (0 <= (t_8365 + -2)))
																															DATA{
																																:pid_19:$time = (z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537);
																																:pid_19:z = z_6537;
																																:pid_19:localTime = (z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537);
																																:pid_19:localPC = ((t_1042 < 4) && (t_660 < 4) && (t_11000 < 4) && (t_6456 < 4) && (t_8365 < 4) && (0 <= (t_1042 + -2)) && (0 <= (t_660 + -2)) && (0 <= (t_11000 + -2)) && (0 <= (t_6456 + -2)) && (0 <= (t_8365 + -2)));
																																:pid_19:localPtC = (((z_2157 + z_2617) < t_660) && ((z_3557 + z_3741) < t_1042) && ((z_3557 + z_3741 + z_4681 + z_5809) < t_1042) && ((z_3741 + z_4681 + z_5809 + z_6537) < t_6456) && (z_2157 < t_660) && ((z_0 + z_2408) <= (z_1221 + z_2157 + z_2617)) && ((z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412) <= (z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537)) && ((z_15 + z_239 + z_4079 + z_91) <= (z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809)) && ((z_15 + z_91) <= (z_1221 + z_2157)) && ((z_2834 + z_694) <= (z_1221 + z_2157 + z_2617 + z_3557 + z_3741)) && ($delta#initial > 0) && (z_1221 > 0) && (z_2157 > 0) && (z_2617 > 0) && (z_3557 > 0) && (z_3741 > 0) && (z_4681 > 0) && (z_5809 > 0));
																																:pid_19:timeEmit = (z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412);
																																:pid_20:cl = (z_3557 + z_3741 + z_4681 + z_5809 + z_6537);
																																:pid_26:c = 0;
																																:pid_26:e = 0;
																																:pid_26:t = t_11000;
																																:pid_26:consistent = false;
																																:pid_26:cl = 0;
																																:pid_26:d.seq = 2;
																																:pid_26:d.fragment = FRAGMENT_1;
																																:pid_26:d.offset = 1;
																																:pid_31:cl = (z_5809 + z_6537);
																															}
																															BUFFER{
																																:pid_19:bufferNode:<FIFO>#0{ }
																															}
																															EC:<Id:10055;Ev:1883;H:31;W:8283>{ SC: ( ( pid_6:cp1 , pid_11:dp1 , pid_17:dp2 ) , ( pid_23:cp1 , pid_28:dp1 , pid_33:dp1 ) , ( pid_41:cp2 , pid_44:dp0 , pid_49:dp0 ) , ( pid_57:cp1 , pid_61:dp0 , pid_66:dp0 ) )
																					
												EXE: { |;| (:pid_36 , run) (:pid_37 
	, run) (:pid_40 , run) (:pid_40 , cp_sendCM) }
																					
												TRACE: { |;| (:pid_36 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_7082 }) (:pid_40 , ${ output 
	inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + param::Trickle.Node.z_2834 
	param::Trickle.Node.z_3422 param::Trickle.Node.z_694 param::Trickle.Node.z_7082 }
	 } @ (z_2834 + z_3422 + z_694 + z_7082)) }
																																DATA{
																																	:pid_36:$time = (z_2834 + z_3422 + z_694 + z_7082);
																																	:pid_36:z = z_7082;
																																	:pid_36:localTime = (z_2834 + z_3422 + z_694 + z_7082);
																																	:pid_36:localPC = ((t_1334 < 4) && (t_434 < 4) && (0 <= (t_1334 + -2)) && (0 <= (t_434 + -2)));
																																	:pid_36:localPtC = ((z_2834 == t_434) && (z_7082 == t_1334) && ((z_2834 + z_3422) < 4) && ((z_0 + z_2408) <= (z_2834 + z_3422 + z_694)) && ($delta#initial > 0) && (z_2834 > 0) && (z_3422 > 0) && (z_694 > 0));
																																	:pid_37:cl = z_7082;
																																	:pid_43:cl = (z_2834 + z_3422 + z_694 + z_7082);
																																	:pid_48:cl = (z_2834 + z_3422 + z_694 + z_7082);
																																}
																																BUFFER{
																																	:pid_2:bufferNode:<FIFO>#0{
																																		:pid_36:ControlMsg([ 0 , 0 ] , (z_2834 + z_3422 + z_694 + z_7082));
																																	}
																																	:pid_19:bufferNode:<FIFO>#0{
																																		:pid_36:ControlMsg([ 0 , 0 ] , (z_2834 + z_3422 + z_694 + z_7082));
																																	}
																																	:pid_53:bufferNode:<FIFO>#0{
																																		:pid_36:ControlMsg([ 0 , 0 ] , (z_2834 + z_3422 + z_694 + z_7082));
																																	}
																																}
																																EC:<Id:10804;Ev:1924;H:32;W:8921>{ SC: ( ( pid_6:cp1 , pid_11:dp1 , pid_17:dp2 ) , ( pid_23:cp1 , pid_28:dp1 , pid_33:dp1 ) , ( pid_40:cp1 , pid_44:dp0 , pid_49:dp0 ) , ( pid_57:cp1 , pid_61:dp0 , pid_66:dp0 ) )
																					
													EXE: { |;| (:pid_36 , run) 
	(:pid_37 , run) (:pid_41 , run) (:pid_41 , cp_resetTau) }
																					
													TRACE: { |;| (:pid_36 , ${ 
	newfresh inst::Trickle.Node.z param::Trickle.Node.z_7526 }) (:pid_41 , ${ 
	newfresh inst::Trickle.Node.ControlProcess.t 
	param::Trickle.Node.ControlProcess.t_2878 }) }
																					
													NC: ((t_2878 < 8) && (0 <= 
	(t_2878 + -4)))
																																	PC: ((t_1042 < 4) && (t_1205 < 4) && (t_1334 < 4) && (t_171 < 8) && (t_18 < 4) && 
	(t_1985 < 8) && (t_2878 < 8) && (t_4 < 4) && (t_434 < 4) && (t_660 < 4) && 
	(t_10392 < 4) && (t_11000 < 4) && (t_6456 < 4) && (t_7603 < 4) && (t_8365 < 4) 
	&& (0 <= (t_1042 + -2)) && (0 <= (t_1205 + -2)) && (0 <= (t_1334 + -2)) && (0 <= 
	(t_171 + -4)) && (0 <= (t_18 + -2)) && (0 <= (t_1985 + -4)) && (0 <= (t_2878 + 
	-4)) && (0 <= (t_4 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_660 + -2)) && (0 <= 
	(t_10392 + -2)) && (0 <= (t_11000 + -2)) && (0 <= (t_6456 + -2)) && (0 <= 
	(t_7603 + -2)) && (0 <= (t_8365 + -2)))
																																	DATA{
																																		:pid_36:$time = (z_2834 + z_3422 + z_694 + z_7082 + z_7526);
																																		:pid_36:z = z_7526;
																																		:pid_36:localTime = (z_2834 + z_3422 + z_694 + z_7082 + z_7526);
																																		:pid_36:localPC = ((t_1334 < 4) && (t_2878 < 8) && (t_434 < 4) && (0 <= (t_1334 + -2)) && (0 <= (t_2878 + -4)) && (0 <= (t_434 + -2)));
																																		:pid_36:localPtC = (((z_7082 + z_7526) == 4) && (z_2834 == t_434) && (z_7082 == t_1334) && ((z_2834 + z_3422) < 4) && ((z_0 + z_2408) <= (z_2834 + z_3422 + z_694)) && ((z_7082 + z_7526) > t_1334) && ($delta#initial > 0) && (z_2834 > 0) && (z_3422 > 0) && (z_694 > 0) && (z_7082 > 0));
																																		:pid_37:e = 1;
																																		:pid_37:tau = 8;
																																		:pid_37:t = t_2878;
																																		:pid_37:cl = 0;
																																		:pid_43:cl = (z_2834 + z_3422 + z_694 + z_7082 + z_7526);
																																		:pid_48:cl = (z_2834 + z_3422 + z_694 + z_7082 + z_7526);
																																	}
																																	EC:<Id:11058;Ev:2008;H:33;W:9134>{ SC: ( ( pid_6:cp1 , pid_11:dp1 , pid_17:dp2 ) , ( pid_23:cp1 , pid_28:dp1 , pid_33:dp1 ) , ( pid_40:cp1 , pid_44:dp0 , pid_49:dp0 ) , ( pid_57:cp1 , pid_61:dp0 , pid_66:dp0 ) )
																					
														EXE: { |;| (:pid_19 , run) 
	(:pid_20 , run) (:pid_23 , run) (:pid_23 , cp1_receiveCM_consistent) }
																					
														TRACE: { |;| (:pid_19 , ${ 
	newfresh inst::Trickle.Node.z param::Trickle.Node.z_7689 }) (:pid_23 , ${ input 
	inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + param::Trickle.Node.z_2834 
	param::Trickle.Node.z_3422 param::Trickle.Node.z_694 param::Trickle.Node.z_7082 }
	 } @ (z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + 
	z_7689)) }
																																		DATA{
																																			:pid_19:$time = (z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689);
																																			:pid_19:z = z_7689;
																																			:pid_19:seq_buff[0] = 0;
																																			:pid_19:seq_buff[1] = 0;
																																			:pid_19:localTime = (z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689);
																																			:pid_19:localPC = ((t_1042 < 4) && (t_660 < 4) && (t_11000 < 4) && (t_6456 < 4) && (t_8365 < 4) && (0 <= (t_1042 + -2)) && (0 <= (t_660 + -2)) && (0 <= (t_11000 + -2)) && (0 <= (t_6456 + -2)) && (0 <= (t_8365 + -2)));
																																			:pid_19:localPtC = (((z_2157 + z_2617) < t_660) && ((z_3557 + z_3741) < t_1042) && ((z_3557 + z_3741 + z_4681 + z_5809) < t_1042) && ((z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689) < t_1042) && ((z_3741 + z_4681 + z_5809 + z_6537) < t_6456) && (z_2157 < t_660) && ((z_0 + z_2408) <= (z_1221 + z_2157 + z_2617)) && ((z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412) <= (z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537)) && ((z_15 + z_239 + z_4079 + z_91) <= (z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809)) && ((z_15 + z_91) <= (z_1221 + z_2157)) && ((z_2834 + z_3422 + z_694 + z_7082) <= (z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689)) && ((z_2834 + z_694) <= (z_1221 + z_2157 + z_2617 + z_3557 + z_3741)) && ($delta#initial > 0) && (z_1221 > 0) && (z_2157 > 0) && (z_2617 > 0) && (z_3557 > 0) && (z_3741 > 0) && (z_4681 > 0) && (z_5809 > 0) && (z_6537 > 0));
																																			:pid_19:timeEmit = (z_2834 + z_3422 + z_694 + z_7082);
																																			:pid_20:c = 3;
																																			:pid_20:i = 2;
																																			:pid_20:cl = (z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689);
																																			:pid_26:cl = z_7689;
																																			:pid_31:cl = (z_5809 + z_6537 + z_7689);
																																		}
																																		BUFFER{
																																			:pid_19:bufferNode:<FIFO>#0{ }
																																		}
																																		EC:<Id:11574;Ev:2067;H:34;W:9566>{ SC: ( ( pid_6:cp1 , pid_11:dp1 , pid_17:dp2 ) , ( pid_24:cp2 , pid_28:dp1 , pid_33:dp1 ) , ( pid_40:cp1 , pid_44:dp0 , pid_49:dp0 ) , ( pid_57:cp1 , pid_61:dp0 , pid_66:dp0 ) )
																					
															EXE: { |;| (:pid_19 , 
	run) (:pid_20 , run) (:pid_23 , run) (:pid_23 , cp1_reach_k) }
																					
															TRACE: (:pid_19 , ${ 
	newfresh inst::Trickle.Node.z param::Trickle.Node.z_8025 })
																																			DATA{
																																				:pid_19:$time = (z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689 + z_8025);
																																				:pid_19:z = z_8025;
																																				:pid_19:localTime = (z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689 + z_8025);
																																				:pid_19:localPC = ((t_1042 < 4) && (t_660 < 4) && (t_11000 < 4) && (t_6456 < 4) && (t_8365 < 4) && (0 <= (t_1042 + -2)) && (0 <= (t_660 + -2)) && (0 <= (t_11000 + -2)) && (0 <= (t_6456 + -2)) && (0 <= (t_8365 + -2)));
																																				:pid_19:localPtC = (((z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689 + z_8025) == t_1042) && ((z_2157 + z_2617) < t_660) && ((z_3557 + z_3741) < t_1042) && ((z_3557 + z_3741 + z_4681 + z_5809) < t_1042) && ((z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689) < t_1042) && ((z_3741 + z_4681 + z_5809 + z_6537) < t_6456) && (z_2157 < t_660) && ((z_0 + z_2408) <= (z_1221 + z_2157 + z_2617)) && ((z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412) <= (z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537)) && ((z_15 + z_239 + z_4079 + z_91) <= (z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809)) && ((z_15 + z_91) <= (z_1221 + z_2157)) && ((z_2834 + z_3422 + z_694 + z_7082) <= (z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689)) && ((z_2834 + z_694) <= (z_1221 + z_2157 + z_2617 + z_3557 + z_3741)) && ($delta#initial > 0) && (z_1221 > 0) && (z_2157 > 0) && (z_2617 > 0) && (z_3557 > 0) && (z_3741 > 0) && (z_4681 > 0) && (z_5809 > 0) && (z_6537 > 0) && (z_7689 > 0));
																																				:pid_20:cl = (z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689 + z_8025);
																																				:pid_26:cl = (z_7689 + z_8025);
																																				:pid_31:cl = (z_5809 + z_6537 + z_7689 + z_8025);
																																			}
																																			EC:<Id:11940;Ev:2148;H:35;W:9873>{ SC: ( ( pid_6:cp1 , pid_11:dp1 , pid_17:dp2 ) , ( pid_24:cp2 , pid_28:dp1 , pid_33:dp1 ) , ( pid_40:cp1 , pid_44:dp0 , pid_49:dp0 ) , ( pid_57:cp1 , pid_61:dp0 , pid_66:dp0 ) )
																					
																EXE: { |;| (:pid_53 
	, run) (:pid_54 , run) (:pid_57 , run) (:pid_57 , cp1_receiveCM_consistent) }
																					
																TRACE: { |;| 
	(:pid_53 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_8263 }) 
	(:pid_57 , ${ input inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + 
	param::Trickle.Node.z_2834 param::Trickle.Node.z_3422 param::Trickle.Node.z_694 
	param::Trickle.Node.z_7082 } } @ (z_15 + z_239 + z_4079 + z_5115 + z_5255 + 
	z_8263 + z_91)) }
																																				DATA{
																																					:pid_53:$time = (z_15 + z_239 + z_4079 + z_5115 + z_5255 + z_8263 + z_91);
																																					:pid_53:z = z_8263;
																																					:pid_53:localTime = (z_15 + z_239 + z_4079 + z_5115 + z_5255 + z_8263 + z_91);
																																					:pid_53:localPC = ((t_171 < 8) && (t_18 < 4) && (t_1985 < 8) && (0 <= (t_171 + -4)) && (0 <= (t_18 + -2)) && (0 <= (t_1985 + -4)));
																																					:pid_53:localPtC = (((z_239 + z_91) == 4) && ((z_4079 + z_5115 + z_5255) == 8) && (z_4079 == t_171) && (z_91 == t_18) && ((z_4079 + z_5115) < 8) && (z_8263 < t_1985) && ((z_2834 + z_3422 + z_694 + z_7082) <= (z_15 + z_239 + z_4079 + z_5115 + z_5255 + z_8263 + z_91)) && ((z_2834 + z_694) <= (z_15 + z_239 + z_4079 + z_5115 + z_91)) && ((z_239 + z_91) > t_18) && ((z_4079 + z_5115 + z_5255) > t_171) && ($delta#initial > 0) && (z_15 > 0) && (z_239 > 0) && (z_4079 > 0) && (z_5115 > 0) && (z_5255 > 0) && (z_91 > 0));
																																					:pid_53:timeEmit = (z_2834 + z_3422 + z_694 + z_7082);
																																					:pid_54:c = 2;
																																					:pid_54:i = 2;
																																					:pid_54:cl = z_8263;
																																					:pid_60:cl = (z_15 + z_239 + z_4079 + z_5115 + z_5255 + z_8263 + z_91);
																																					:pid_65:cl = (z_15 + z_239 + z_4079 + z_5115 + z_5255 + z_8263 + z_91);
																																				}
																																				BUFFER{
																																					:pid_53:bufferNode:<FIFO>#0{ }
																																				}
																																				EC:<Id:12431;Ev:2216;H:36;W:10283>{ SC: ( ( pid_6:cp1 , pid_11:dp1 , pid_17:dp2 ) , ( pid_24:cp2 , pid_28:dp1 , pid_33:dp1 ) , ( pid_40:cp1 , pid_44:dp0 , pid_50:dp1 ) , ( pid_57:cp1 , pid_61:dp0 , pid_66:dp0 ) )
																					
																	EXE: { |;| 
	(:pid_36 , run) (:pid_48 , run) (:pid_49 , run) (:pid_49 , dp_init) }
																					
																	TRACE: { |;| 
	(:pid_36 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_8586 }) 
	(:pid_49 , ${ newfresh inst::Trickle.Node.DataProcess.t 
	param::Trickle.Node.DataProcess.t_13109 }) }
																					
																	NC: ((t_13109 < 
	4) && (0 <= (t_13109 + -2)))
																																					PC: ((t_1042 < 4) && (t_1205 < 4) && (t_1334 < 4) && (t_171 < 8) && (t_18 < 4) && 
	(t_1985 < 8) && (t_2878 < 8) && (t_4 < 4) && (t_434 < 4) && (t_660 < 4) && 
	(t_10392 < 4) && (t_11000 < 4) && (t_13109 < 4) && (t_6456 < 4) && (t_7603 < 4) 
	&& (t_8365 < 4) && (0 <= (t_1042 + -2)) && (0 <= (t_1205 + -2)) && (0 <= (t_1334 
	+ -2)) && (0 <= (t_171 + -4)) && (0 <= (t_18 + -2)) && (0 <= (t_1985 + -4)) && 
	(0 <= (t_2878 + -4)) && (0 <= (t_4 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_660 
	+ -2)) && (0 <= (t_10392 + -2)) && (0 <= (t_11000 + -2)) && (0 <= (t_13109 + -2))
	 && (0 <= (t_6456 + -2)) && (0 <= (t_7603 + -2)) && (0 <= (t_8365 + -2)))
																																					DATA{
																																						:pid_36:$time = (z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586);
																																						:pid_36:z = z_8586;
																																						:pid_36:localTime = (z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586);
																																						:pid_36:localPC = ((t_1334 < 4) && (t_2878 < 8) && (t_434 < 4) && (t_13109 < 4) && (0 <= (t_1334 + -2)) && (0 <= (t_2878 + -4)) && (0 <= (t_434 + -2)) && (0 <= (t_13109 + -2)));
																																						:pid_36:localPtC = (((z_7082 + z_7526) == 4) && (z_2834 == t_434) && (z_7082 == t_1334) && ((z_2834 + z_3422) < 4) && ((z_0 + z_2408) <= (z_2834 + z_3422 + z_694)) && ((z_7082 + z_7526) > t_1334) && ($delta#initial > 0) && (z_2834 > 0) && (z_3422 > 0) && (z_694 > 0) && (z_7082 > 0) && (z_7526 > 0));
																																						:pid_37:cl = z_8586;
																																						:pid_43:cl = (z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586);
																																						:pid_48:k = 2;
																																						:pid_48:c = 0;
																																						:pid_48:e = 0;
																																						:pid_48:tau = 4;
																																						:pid_48:tau_l = 4;
																																						:pid_48:tau_h = 8;
																																						:pid_48:t = t_13109;
																																						:pid_48:cl = 0;
																																					}
																																					EC:<Id:12851;Ev:2316;H:37;W:10635>{ SC: ( ( pid_6:cp1 , pid_11:dp1 , pid_17:dp2 ) , ( pid_24:cp2 , pid_28:dp1 , pid_33:dp1 ) , ( pid_40:cp1 , pid_44:dp0 , pid_50:dp1 ) , ( pid_57:cp1 , pid_61:dp0 , pid_66:dp0 ) )
																					
																		EXE: { |;| 
	(:pid_36 , run) (:pid_48 , run) (:pid_50 , run) (:pid_50 , 
	dp1_receiveDM_consistent) }
																					
																		TRACE: { |;| 
	(:pid_36 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_8858 }) 
	(:pid_50 , ${ input inst::Trickle.Node.DataMsg [ 2 , 2 , 1 ] ${ + 
	param::Trickle.Node.z_0 param::Trickle.Node.z_2408 param::Trickle.Node.z_3100 
	param::Trickle.Node.z_4220 param::Trickle.Node.z_6048 param::Trickle.Node.z_6412 
	} } @ (z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858)) }
																																						DATA{
																																							:pid_36:my_buff[1].seq = 2;
																																							:pid_36:my_buff[1].fragment = FRAGMENT_1;
																																							:pid_36:my_buff[1].offset = 1;
																																							:pid_36:firmware[1] = FRAGMENT_1;
																																							:pid_36:myseq_buff[1] = 1;
																																							:pid_36:$time = (z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858);
																																							:pid_36:z = z_8858;
																																							:pid_36:localTime = (z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858);
																																							:pid_36:localPC = ((t_1334 < 4) && (t_2878 < 8) && (t_434 < 4) && (t_13109 < 4) && (0 <= (t_1334 + -2)) && (0 <= (t_2878 + -4)) && (0 <= (t_434 + -2)) && (0 <= (t_13109 + -2)));
																																							:pid_36:localPtC = (((z_7082 + z_7526) == 4) && (z_2834 == t_434) && (z_7082 == t_1334) && ((z_2834 + z_3422) < 4) && (z_8858 < t_13109) && ((z_0 + z_2408) <= (z_2834 + z_3422 + z_694)) && ((z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412) <= (z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858)) && ((z_7082 + z_7526) > t_1334) && ($delta#initial > 0) && (z_2834 > 0) && (z_3422 > 0) && (z_694 > 0) && (z_7082 > 0) && (z_7526 > 0) && (z_8586 > 0));
																																							:pid_36:timeEmit = (z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412);
																																							:pid_37:cl = (z_8586 + z_8858);
																																							:pid_43:cl = (z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858);
																																							:pid_48:c = 1;
																																							:pid_48:consistent = true;
																																							:pid_48:cl = z_8858;
																																							:pid_48:d.seq = 2;
																																							:pid_48:d.fragment = FRAGMENT_1;
																																							:pid_48:d.offset = 1;
																																						}
																																						BUFFER{
																																							:pid_36:bufferNode:<FIFO>#0{ }
																																						}
																																						EC:<Id:13446;Ev:2339;H:38;W:11130>{ SC: ( ( pid_6:cp1 , pid_11:dp1 , pid_17:dp2 ) , ( pid_24:cp2 , pid_28:dp1 , pid_33:dp1 ) , ( pid_40:cp1 , pid_44:dp0 , pid_50:dp1 ) , ( pid_57:cp1 , pid_61:dp0 , pid_66:dp0 ) )
																					
																			EXE: { 
	|;| (:pid_2 , run) (:pid_3 , run) (:pid_6 , run) (:pid_6 , 
	cp1_receiveCM_inconsistent) }
																					
																			TRACE: { 
	|;| (:pid_2 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_9256 }) 
	(:pid_6 , ${ input inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + 
	param::Trickle.Node.z_2834 param::Trickle.Node.z_3422 param::Trickle.Node.z_694 
	param::Trickle.Node.z_7082 } } @ (z_0 + z_2408 + z_3100 + z_4220 + z_6048 + 
	z_6412 + z_9256)) (:pid_6 , ${ newfresh inst::Trickle.Node.ControlProcess.t 
	param::Trickle.Node.ControlProcess.t_3652 }) }
																					
																			NC: 
	((t_3652 < 4) && (0 <= (t_3652 + -2)))
																																							PC: ((t_1042 < 4) && (t_1205 < 4) && (t_1334 < 4) && (t_171 < 8) && (t_18 < 4) && 
	(t_1985 < 8) && (t_2878 < 8) && (t_3652 < 4) && (t_4 < 4) && (t_434 < 4) && 
	(t_660 < 4) && (t_10392 < 4) && (t_11000 < 4) && (t_13109 < 4) && (t_6456 < 4) 
	&& (t_7603 < 4) && (t_8365 < 4) && (0 <= (t_1042 + -2)) && (0 <= (t_1205 + -2)) 
	&& (0 <= (t_1334 + -2)) && (0 <= (t_171 + -4)) && (0 <= (t_18 + -2)) && (0 <= 
	(t_1985 + -4)) && (0 <= (t_2878 + -4)) && (0 <= (t_3652 + -2)) && (0 <= (t_4 + 
	-2)) && (0 <= (t_434 + -2)) && (0 <= (t_660 + -2)) && (0 <= (t_10392 + -2)) && 
	(0 <= (t_11000 + -2)) && (0 <= (t_13109 + -2)) && (0 <= (t_6456 + -2)) && (0 <= 
	(t_7603 + -2)) && (0 <= (t_8365 + -2)))
																																							DATA{
																																								:pid_2:$time = (z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256);
																																								:pid_2:z = z_9256;
																																								:pid_2:localTime = (z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256);
																																								:pid_2:localPC = ((t_1205 < 4) && (t_3652 < 4) && (t_4 < 4) && (t_10392 < 4) && (t_7603 < 4) && (0 <= (t_1205 + -2)) && (0 <= (t_3652 + -2)) && (0 <= (t_4 + -2)) && (0 <= (t_10392 + -2)) && (0 <= (t_7603 + -2)));
																																								:pid_2:localPtC = ((z_2408 == t_4) && (z_6412 == t_10392) && ((z_2408 + z_3100) < 4) && ((z_4220 + z_6048 + z_6412 + z_9256) < t_1205) && ((z_2834 + z_3422 + z_694 + z_7082) <= (z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256)) && ((z_2834 + z_694) <= (z_0 + z_2408 + z_3100)) && ($delta#initial > 0) && (z_0 > 0) && (z_2408 > 0) && (z_3100 > 0) && (z_4220 > 0) && (z_6048 > 0) && (z_6412 > 0));
																																								:pid_2:timeEmit = (z_2834 + z_3422 + z_694 + z_7082);
																																								:pid_3:c = 0;
																																								:pid_3:e = 0;
																																								:pid_3:i = 2;
																																								:pid_3:t = t_3652;
																																								:pid_3:cl = 0;
																																								:pid_9:cl = (z_6048 + z_6412 + z_9256);
																																								:pid_14:cl = (z_6412 + z_9256);
																																							}
																																							BUFFER{
																																								:pid_2:bufferNode:<FIFO>#0{ }
																																							}
																																							EC:<Id:13578;Ev:2364;H:39;W:11130>{ SC: ( ( pid_6:cp1 , pid_11:dp1 , pid_16:dp1 ) , ( pid_24:cp2 , pid_28:dp1 , pid_33:dp1 ) , ( pid_40:cp1 , pid_44:dp0 , pid_50:dp1 ) , ( pid_57:cp1 , pid_61:dp0 , pid_66:dp0 ) )
																					
																				EXE: 
	{ |;| (:pid_2 , run) (:pid_14 , run) (:pid_17 , run) (:pid_17 , dp_resetTau) }
																					
																				
	TRACE: { |;| (:pid_2 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_9348 }) (:pid_17 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_13696 }) }
																					
																				NC: 
	((t_13696 < 8) && (0 <= (t_13696 + -4)))
																																								PC: ((t_1042 < 4) && (t_1205 < 4) && (t_1334 < 4) && (t_171 < 8) && (t_18 < 4) && 
	(t_1985 < 8) && (t_2878 < 8) && (t_3652 < 4) && (t_4 < 4) && (t_434 < 4) && 
	(t_660 < 4) && (t_10392 < 4) && (t_11000 < 4) && (t_13109 < 4) && (t_13696 < 8) 
	&& (t_6456 < 4) && (t_7603 < 4) && (t_8365 < 4) && (0 <= (t_1042 + -2)) && (0 <= 
	(t_1205 + -2)) && (0 <= (t_1334 + -2)) && (0 <= (t_171 + -4)) && (0 <= (t_18 + 
	-2)) && (0 <= (t_1985 + -4)) && (0 <= (t_2878 + -4)) && (0 <= (t_3652 + -2)) && 
	(0 <= (t_4 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_660 + -2)) && (0 <= 
	(t_10392 + -2)) && (0 <= (t_11000 + -2)) && (0 <= (t_13109 + -2)) && (0 <= 
	(t_13696 + -4)) && (0 <= (t_6456 + -2)) && (0 <= (t_7603 + -2)) && (0 <= (t_8365 
	+ -2)))
																																								DATA{
																																									:pid_2:$time = (z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348);
																																									:pid_2:z = z_9348;
																																									:pid_2:localTime = (z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348);
																																									:pid_2:localPC = ((t_1205 < 4) && (t_3652 < 4) && (t_4 < 4) && (t_10392 < 4) && (t_13696 < 8) && (t_7603 < 4) && (0 <= (t_1205 + -2)) && (0 <= (t_3652 + -2)) && (0 <= (t_4 + -2)) && (0 <= (t_10392 + -2)) && (0 <= (t_13696 + -4)) && (0 <= (t_7603 + -2)));
																																									:pid_2:localPtC = (((z_6412 + z_9256 + z_9348) == 4) && (z_2408 == t_4) && (z_6412 == t_10392) && ((z_2408 + z_3100) < 4) && ((z_4220 + z_6048 + z_6412 + z_9256) < t_1205) && ((z_2834 + z_3422 + z_694 + z_7082) <= (z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256)) && ((z_2834 + z_694) <= (z_0 + z_2408 + z_3100)) && ((z_6412 + z_9256 + z_9348) > t_10392) && ($delta#initial > 0) && (z_0 > 0) && (z_2408 > 0) && (z_3100 > 0) && (z_4220 > 0) && (z_6048 > 0) && (z_6412 > 0) && (z_9256 > 0));
																																									:pid_3:cl = z_9348;
																																									:pid_9:cl = (z_6048 + z_6412 + z_9256 + z_9348);
																																									:pid_14:e = 1;
																																									:pid_14:tau = 8;
																																									:pid_14:t = t_13696;
																																									:pid_14:cl = 0;
																																								}
																																								EC:<Id:13728;Ev:2495;H:40;W:11130>{ SC: ( ( pid_6:cp1 , pid_11:dp1 , pid_17:dp2 ) , ( pid_24:cp2 , pid_28:dp1 , pid_33:dp1 ) , ( pid_40:cp1 , pid_44:dp0 , pid_50:dp1 ) , ( pid_57:cp1 , pid_61:dp0 , pid_66:dp0 ) )
																					
																					
	EXE: { |;| (:pid_2 , run) (:pid_14 , run) (:pid_16 , run) (:pid_16 , dp_sendDM) }
																					
																					
	TRACE: { |;| (:pid_2 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_9448 }) (:pid_16 , ${ output inst::Trickle.Node.DataMsg [ 
	2 , 2 , 1 ] ${ + param::Trickle.Node.z_0 param::Trickle.Node.z_2408 
	param::Trickle.Node.z_3100 param::Trickle.Node.z_4220 param::Trickle.Node.z_6048 
	param::Trickle.Node.z_6412 param::Trickle.Node.z_9256 param::Trickle.Node.z_9348 
	param::Trickle.Node.z_9448 } } @ (z_0 + z_2408 + z_3100 + z_4220 + z_6048 + 
	z_6412 + z_9256 + z_9348 + z_9448)) }
																																									DATA{
																																										:pid_2:$time = (z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448);
																																										:pid_2:z = z_9448;
																																										:pid_2:localTime = (z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448);
																																										:pid_2:localPC = ((t_1205 < 4) && (t_3652 < 4) && (t_4 < 4) && (t_10392 < 4) && (t_13696 < 8) && (t_7603 < 4) && (0 <= (t_1205 + -2)) && (0 <= (t_3652 + -2)) && (0 <= (t_4 + -2)) && (0 <= (t_10392 + -2)) && (0 <= (t_13696 + -4)) && (0 <= (t_7603 + -2)));
																																										:pid_2:localPtC = (((z_6412 + z_9256 + z_9348) == 4) && (z_2408 == t_4) && (z_6412 == t_10392) && (z_9448 == t_13696) && ((z_2408 + z_3100) < 4) && ((z_4220 + z_6048 + z_6412 + z_9256) < t_1205) && ((z_2834 + z_3422 + z_694 + z_7082) <= (z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256)) && ((z_2834 + z_694) <= (z_0 + z_2408 + z_3100)) && ((z_6412 + z_9256 + z_9348) > t_10392) && ($delta#initial > 0) && (z_0 > 0) && (z_2408 > 0) && (z_3100 > 0) && (z_4220 > 0) && (z_6048 > 0) && (z_6412 > 0) && (z_9256 > 0) && (z_9348 > 0));
																																										:pid_3:cl = (z_9348 + z_9448);
																																										:pid_9:cl = (z_6048 + z_6412 + z_9256 + z_9348 + z_9448);
																																										:pid_14:cl = z_9448;
																																									}
																																									BUFFER{
																																										:pid_19:bufferNode:<FIFO>#0{
																																											:pid_2:DataMsg([ 2 , 2 , 1 ] , (z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448));
																																										}
																																										:pid_36:bufferNode:<FIFO>#0{
																																											:pid_2:DataMsg([ 2 , 2 , 1 ] , (z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448));
																																										}
																																									}
																																									EC:<Id:14545;Ev:2613;H:41;W:12050>{ SC: ( ( pid_6:cp1 , pid_11:dp1 , pid_17:dp2 ) , ( pid_24:cp2 , pid_28:dp1 , pid_33:dp1 ) , ( pid_40:cp1 , pid_45:dp1 , pid_50:dp1 ) , ( pid_57:cp1 , pid_61:dp0 , pid_66:dp0 ) )
																					
																						
	EXE: { |;| (:pid_36 , run) (:pid_43 , run) (:pid_44 , run) (:pid_44 , dp_init) }
																					
																						
	TRACE: { |;| (:pid_36 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_9974 }) (:pid_44 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_14231 }) }
																					
																						
	NC: ((t_14231 < 4) && (0 <= (t_14231 + -2)))
																																										PC: ((t_1042 < 4) && (t_1205 < 4) && (t_1334 < 4) && (t_171 < 8) && (t_18 < 4) && 
	(t_1985 < 8) && (t_2878 < 8) && (t_3652 < 4) && (t_4 < 4) && (t_434 < 4) && 
	(t_660 < 4) && (t_10392 < 4) && (t_11000 < 4) && (t_13109 < 4) && (t_13696 < 8) 
	&& (t_14231 < 4) && (t_6456 < 4) && (t_7603 < 4) && (t_8365 < 4) && (0 <= 
	(t_1042 + -2)) && (0 <= (t_1205 + -2)) && (0 <= (t_1334 + -2)) && (0 <= (t_171 + 
	-4)) && (0 <= (t_18 + -2)) && (0 <= (t_1985 + -4)) && (0 <= (t_2878 + -4)) && (0 
	<= (t_3652 + -2)) && (0 <= (t_4 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_660 + 
	-2)) && (0 <= (t_10392 + -2)) && (0 <= (t_11000 + -2)) && (0 <= (t_13109 + -2)) 
	&& (0 <= (t_13696 + -4)) && (0 <= (t_14231 + -2)) && (0 <= (t_6456 + -2)) && (0 
	<= (t_7603 + -2)) && (0 <= (t_8365 + -2)))
																																										DATA{
																																											:pid_36:$time = (z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974);
																																											:pid_36:z = z_9974;
																																											:pid_36:localTime = (z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974);
																																											:pid_36:localPC = ((t_1334 < 4) && (t_2878 < 8) && (t_434 < 4) && (t_13109 < 4) && (t_14231 < 4) && (0 <= (t_1334 + -2)) && (0 <= (t_2878 + -4)) && (0 <= (t_434 + -2)) && (0 <= (t_13109 + -2)) && (0 <= (t_14231 + -2)));
																																											:pid_36:localPtC = (((z_7082 + z_7526) == 4) && (z_2834 == t_434) && (z_7082 == t_1334) && ((z_2834 + z_3422) < 4) && (z_8858 < t_13109) && ((z_0 + z_2408) <= (z_2834 + z_3422 + z_694)) && ((z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412) <= (z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858)) && ((z_7082 + z_7526) > t_1334) && ($delta#initial > 0) && (z_2834 > 0) && (z_3422 > 0) && (z_694 > 0) && (z_7082 > 0) && (z_7526 > 0) && (z_8586 > 0) && (z_8858 > 0));
																																											:pid_37:cl = (z_8586 + z_8858 + z_9974);
																																											:pid_43:k = 2;
																																											:pid_43:c = 0;
																																											:pid_43:e = 0;
																																											:pid_43:tau = 4;
																																											:pid_43:tau_l = 4;
																																											:pid_43:tau_h = 8;
																																											:pid_43:t = t_14231;
																																											:pid_43:cl = 0;
																																											:pid_48:cl = (z_8858 + z_9974);
																																										}
																																										EC:<Id:15279;Ev:2631;H:42;W:12666>{ SC: ( ( pid_6:cp1 , pid_11:dp1 , pid_17:dp2 ) , ( pid_24:cp2 , pid_28:dp1 , pid_33:dp1 ) , ( pid_40:cp1 , pid_45:dp1 , pid_50:dp1 ) , ( pid_57:cp1 , pid_61:dp0 , pid_66:dp0 ) )
																					
																						
		EXE: { |;| (:pid_36 , run) (:pid_43 , run) (:pid_45 , run) (:pid_45 , 
	dp1_receiveDM_inconsistent) }
																					
																						
		TRACE: { |;| (:pid_36 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_10446 }) (:pid_45 , ${ input inst::Trickle.Node.DataMsg [ 
	2 , 2 , 1 ] ${ + param::Trickle.Node.z_0 param::Trickle.Node.z_2408 
	param::Trickle.Node.z_3100 param::Trickle.Node.z_4220 param::Trickle.Node.z_6048 
	param::Trickle.Node.z_6412 param::Trickle.Node.z_9256 param::Trickle.Node.z_9348 
	param::Trickle.Node.z_9448 } } @ (z_10446 + z_2834 + z_3422 + z_694 + z_7082 + 
	z_7526 + z_8586 + z_8858 + z_9974)) (:pid_45 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_14620 }) }
																					
																						
		NC: ((t_14620 < 4) && (0 <= (t_14620 + -2)))
																																											PC: ((t_1042 < 4) && (t_1205 < 4) && (t_1334 < 4) && (t_171 < 8) && (t_18 < 4) && 
	(t_1985 < 8) && (t_2878 < 8) && (t_3652 < 4) && (t_4 < 4) && (t_434 < 4) && 
	(t_660 < 4) && (t_10392 < 4) && (t_11000 < 4) && (t_13109 < 4) && (t_13696 < 8) 
	&& (t_14231 < 4) && (t_14620 < 4) && (t_6456 < 4) && (t_7603 < 4) && (t_8365 < 4)
	 && (0 <= (t_1042 + -2)) && (0 <= (t_1205 + -2)) && (0 <= (t_1334 + -2)) && (0 
	<= (t_171 + -4)) && (0 <= (t_18 + -2)) && (0 <= (t_1985 + -4)) && (0 <= (t_2878 
	+ -4)) && (0 <= (t_3652 + -2)) && (0 <= (t_4 + -2)) && (0 <= (t_434 + -2)) && (0 
	<= (t_660 + -2)) && (0 <= (t_10392 + -2)) && (0 <= (t_11000 + -2)) && (0 <= 
	(t_13109 + -2)) && (0 <= (t_13696 + -4)) && (0 <= (t_14231 + -2)) && (0 <= 
	(t_14620 + -2)) && (0 <= (t_6456 + -2)) && (0 <= (t_7603 + -2)) && (0 <= (t_8365 
	+ -2)))
																																											DATA{
																																												:pid_36:$time = (z_10446 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974);
																																												:pid_36:z = z_10446;
																																												:pid_36:localTime = (z_10446 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974);
																																												:pid_36:localPC = ((t_1334 < 4) && (t_2878 < 8) && (t_434 < 4) && (t_13109 < 4) && (t_14231 < 4) && (t_14620 < 4) && (0 <= (t_1334 + -2)) && (0 <= (t_2878 + -4)) && (0 <= (t_434 + -2)) && (0 <= (t_13109 + -2)) && (0 <= (t_14231 + -2)) && (0 <= (t_14620 + -2)));
																																												:pid_36:localPtC = (((z_7082 + z_7526) == 4) && (z_2834 == t_434) && (z_7082 == t_1334) && ((z_2834 + z_3422) < 4) && (z_10446 < t_14231) && (z_8858 < t_13109) && ((z_0 + z_2408) <= (z_2834 + z_3422 + z_694)) && ((z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412) <= (z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858)) && ((z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448) <= (z_10446 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974)) && ((z_7082 + z_7526) > t_1334) && ($delta#initial > 0) && (z_2834 > 0) && (z_3422 > 0) && (z_694 > 0) && (z_7082 > 0) && (z_7526 > 0) && (z_8586 > 0) && (z_8858 > 0) && (z_9974 > 0));
																																												:pid_36:timeEmit = (z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448);
																																												:pid_37:cl = (z_10446 + z_8586 + z_8858 + z_9974);
																																												:pid_43:c = 0;
																																												:pid_43:e = 0;
																																												:pid_43:t = t_14620;
																																												:pid_43:consistent = false;
																																												:pid_43:cl = 0;
																																												:pid_43:d.seq = 2;
																																												:pid_43:d.fragment = FRAGMENT_1;
																																												:pid_43:d.offset = 1;
																																												:pid_48:cl = (z_10446 + z_8858 + z_9974);
																																											}
																																											BUFFER{
																																												:pid_36:bufferNode:<FIFO>#0{ }
																																											}
																																											EC:<Id:15391;Ev:2694;H:43;W:12666>{ SC: ( ( pid_6:cp1 , pid_11:dp1 , pid_16:dp1 ) , ( pid_24:cp2 , pid_28:dp1 , pid_33:dp1 ) , ( pid_40:cp1 , pid_45:dp1 , pid_50:dp1 ) , ( pid_57:cp1 , pid_61:dp0 , pid_66:dp0 ) )
																					
																						
			EXE: { |;| (:pid_2 , run) (:pid_14 , run) (:pid_17 , run) (:pid_17 , 
	dp_resetTau) }
																					
																						
			TRACE: { |;| (:pid_2 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_10516 }) (:pid_17 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_14674 }) }
																					
																						
			NC: ((t_14674 < 8) && (0 <= (t_14674 + -4)))
																																												PC: ((t_1042 < 4) && (t_1205 < 4) && (t_1334 < 4) && (t_171 < 8) && (t_18 < 4) && 
	(t_1985 < 8) && (t_2878 < 8) && (t_3652 < 4) && (t_4 < 4) && (t_434 < 4) && 
	(t_660 < 4) && (t_10392 < 4) && (t_11000 < 4) && (t_13109 < 4) && (t_13696 < 8) 
	&& (t_14231 < 4) && (t_14620 < 4) && (t_14674 < 8) && (t_6456 < 4) && (t_7603 < 
	4) && (t_8365 < 4) && (0 <= (t_1042 + -2)) && (0 <= (t_1205 + -2)) && (0 <= 
	(t_1334 + -2)) && (0 <= (t_171 + -4)) && (0 <= (t_18 + -2)) && (0 <= (t_1985 + 
	-4)) && (0 <= (t_2878 + -4)) && (0 <= (t_3652 + -2)) && (0 <= (t_4 + -2)) && (0 
	<= (t_434 + -2)) && (0 <= (t_660 + -2)) && (0 <= (t_10392 + -2)) && (0 <= 
	(t_11000 + -2)) && (0 <= (t_13109 + -2)) && (0 <= (t_13696 + -4)) && (0 <= 
	(t_14231 + -2)) && (0 <= (t_14620 + -2)) && (0 <= (t_14674 + -4)) && (0 <= 
	(t_6456 + -2)) && (0 <= (t_7603 + -2)) && (0 <= (t_8365 + -2)))
																																												DATA{
																																													:pid_2:$time = (z_0 + z_10516 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448);
																																													:pid_2:z = z_10516;
																																													:pid_2:localTime = (z_0 + z_10516 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448);
																																													:pid_2:localPC = ((t_1205 < 4) && (t_3652 < 4) && (t_4 < 4) && (t_10392 < 4) && (t_13696 < 8) && (t_14674 < 8) && (t_7603 < 4) && (0 <= (t_1205 + -2)) && (0 <= (t_3652 + -2)) && (0 <= (t_4 + -2)) && (0 <= (t_10392 + -2)) && (0 <= (t_13696 + -4)) && (0 <= (t_14674 + -4)) && (0 <= (t_7603 + -2)));
																																													:pid_2:localPtC = (((z_10516 + z_9448) == 8) && ((z_6412 + z_9256 + z_9348) == 4) && (z_2408 == t_4) && (z_6412 == t_10392) && (z_9448 == t_13696) && ((z_2408 + z_3100) < 4) && ((z_4220 + z_6048 + z_6412 + z_9256) < t_1205) && ((z_2834 + z_3422 + z_694 + z_7082) <= (z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256)) && ((z_2834 + z_694) <= (z_0 + z_2408 + z_3100)) && ((z_10516 + z_9448) > t_13696) && ((z_6412 + z_9256 + z_9348) > t_10392) && ($delta#initial > 0) && (z_0 > 0) && (z_2408 > 0) && (z_3100 > 0) && (z_4220 > 0) && (z_6048 > 0) && (z_6412 > 0) && (z_9256 > 0) && (z_9348 > 0) && (z_9448 > 0));
																																													:pid_3:cl = (z_10516 + z_9348 + z_9448);
																																													:pid_9:cl = (z_10516 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448);
																																													:pid_14:e = 2;
																																													:pid_14:tau = 8;
																																													:pid_14:t = t_14674;
																																													:pid_14:cl = 0;
																																												}
																																												EC:<Id:15774;Ev:2769;H:44;W:13080>{ SC: ( ( pid_6:cp1 , pid_11:dp1 , pid_16:dp1 ) , ( pid_23:cp1 , pid_28:dp1 , pid_33:dp1 ) , ( pid_40:cp1 , pid_45:dp1 , pid_50:dp1 ) , ( pid_57:cp1 , pid_61:dp0 , pid_66:dp0 ) )
																					
																						
				EXE: { |;| (:pid_19 , run) (:pid_20 , run) (:pid_24 , run) (:pid_24 
	, cp_resetTau) }
																					
																						
				TRACE: { |;| (:pid_19 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_10769 }) (:pid_24 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_4251 }) 
	}
																					
																						
				NC: ((t_4251 < 8) && (0 <= (t_4251 + -4)))
																																													PC: ((t_1042 < 4) && (t_1205 < 4) && (t_1334 < 4) && (t_171 < 8) && (t_18 < 4) && 
	(t_1985 < 8) && (t_2878 < 8) && (t_3652 < 4) && (t_4 < 4) && (t_4251 < 8) && 
	(t_434 < 4) && (t_660 < 4) && (t_10392 < 4) && (t_11000 < 4) && (t_13109 < 4) && 
	(t_13696 < 8) && (t_14231 < 4) && (t_14620 < 4) && (t_14674 < 8) && (t_6456 < 4) 
	&& (t_7603 < 4) && (t_8365 < 4) && (0 <= (t_1042 + -2)) && (0 <= (t_1205 + -2)) 
	&& (0 <= (t_1334 + -2)) && (0 <= (t_171 + -4)) && (0 <= (t_18 + -2)) && (0 <= 
	(t_1985 + -4)) && (0 <= (t_2878 + -4)) && (0 <= (t_3652 + -2)) && (0 <= (t_4 + 
	-2)) && (0 <= (t_4251 + -4)) && (0 <= (t_434 + -2)) && (0 <= (t_660 + -2)) && (0 
	<= (t_10392 + -2)) && (0 <= (t_11000 + -2)) && (0 <= (t_13109 + -2)) && (0 <= 
	(t_13696 + -4)) && (0 <= (t_14231 + -2)) && (0 <= (t_14620 + -2)) && (0 <= 
	(t_14674 + -4)) && (0 <= (t_6456 + -2)) && (0 <= (t_7603 + -2)) && (0 <= (t_8365 
	+ -2)))
																																													DATA{
																																														:pid_19:$time = (z_10769 + z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689 + z_8025);
																																														:pid_19:z = z_10769;
																																														:pid_19:localTime = (z_10769 + z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689 + z_8025);
																																														:pid_19:localPC = ((t_1042 < 4) && (t_4251 < 8) && (t_660 < 4) && (t_11000 < 4) && (t_6456 < 4) && (t_8365 < 4) && (0 <= (t_1042 + -2)) && (0 <= (t_4251 + -4)) && (0 <= (t_660 + -2)) && (0 <= (t_11000 + -2)) && (0 <= (t_6456 + -2)) && (0 <= (t_8365 + -2)));
																																														:pid_19:localPtC = (((z_10769 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689 + z_8025) == 4) && ((z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689 + z_8025) == t_1042) && ((z_2157 + z_2617) < t_660) && ((z_3557 + z_3741) < t_1042) && ((z_3557 + z_3741 + z_4681 + z_5809) < t_1042) && ((z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689) < t_1042) && ((z_3741 + z_4681 + z_5809 + z_6537) < t_6456) && (z_2157 < t_660) && ((z_0 + z_2408) <= (z_1221 + z_2157 + z_2617)) && ((z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412) <= (z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537)) && ((z_15 + z_239 + z_4079 + z_91) <= (z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809)) && ((z_15 + z_91) <= (z_1221 + z_2157)) && ((z_2834 + z_3422 + z_694 + z_7082) <= (z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689)) && ((z_2834 + z_694) <= (z_1221 + z_2157 + z_2617 + z_3557 + z_3741)) && ((z_10769 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689 + z_8025) > t_1042) && ($delta#initial > 0) && (z_1221 > 0) && (z_2157 > 0) && (z_2617 > 0) && (z_3557 > 0) && (z_3741 > 0) && (z_4681 > 0) && (z_5809 > 0) && (z_6537 > 0) && (z_7689 > 0) && (z_8025 > 0));
																																														:pid_20:e = 1;
																																														:pid_20:tau = 8;
																																														:pid_20:t = t_4251;
																																														:pid_20:cl = 0;
																																														:pid_26:cl = (z_10769 + z_7689 + z_8025);
																																														:pid_31:cl = (z_10769 + z_5809 + z_6537 + z_7689 + z_8025);
																																													}
																																													EC:<Id:16228;Ev:2826;H:45;W:13459>{ SC: ( ( pid_6:cp1 , pid_11:dp1 , pid_16:dp1 ) , ( pid_23:cp1 , pid_28:dp1 , pid_33:dp1 ) , ( pid_40:cp1 , pid_45:dp1 , pid_50:dp1 ) , ( pid_57:cp1 , pid_61:dp0 , pid_66:dp0 ) )
																					
																						
					EXE: { |;| (:pid_19 , run) (:pid_31 , run) (:pid_33 , run) 
	(:pid_33 , dp1_receiveDM_consistent) }
																					
																						
					TRACE: { |;| (:pid_19 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_11069 }) (:pid_33 , ${ input inst::Trickle.Node.DataMsg [ 
	2 , 2 , 1 ] ${ + param::Trickle.Node.z_0 param::Trickle.Node.z_2408 
	param::Trickle.Node.z_3100 param::Trickle.Node.z_4220 param::Trickle.Node.z_6048 
	param::Trickle.Node.z_6412 param::Trickle.Node.z_9256 param::Trickle.Node.z_9348 
	param::Trickle.Node.z_9448 } } @ (z_10769 + z_11069 + z_1221 + z_2157 + z_2617 + 
	z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689 + z_8025)) }
																																														DATA{
																																															:pid_19:my_buff[1].seq = 2;
																																															:pid_19:my_buff[1].fragment = FRAGMENT_1;
																																															:pid_19:my_buff[1].offset = 1;
																																															:pid_19:firmware[1] = FRAGMENT_1;
																																															:pid_19:myseq_buff[1] = 1;
																																															:pid_19:$time = (z_10769 + z_11069 + z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689 + z_8025);
																																															:pid_19:z = z_11069;
																																															:pid_19:localTime = (z_10769 + z_11069 + z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689 + z_8025);
																																															:pid_19:localPC = ((t_1042 < 4) && (t_4251 < 8) && (t_660 < 4) && (t_11000 < 4) && (t_6456 < 4) && (t_8365 < 4) && (0 <= (t_1042 + -2)) && (0 <= (t_4251 + -4)) && (0 <= (t_660 + -2)) && (0 <= (t_11000 + -2)) && (0 <= (t_6456 + -2)) && (0 <= (t_8365 + -2)));
																																															:pid_19:localPtC = (((z_10769 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689 + z_8025) == 4) && ((z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689 + z_8025) == t_1042) && ((z_10769 + z_11069 + z_5809 + z_6537 + z_7689 + z_8025) < t_8365) && ((z_2157 + z_2617) < t_660) && ((z_3557 + z_3741) < t_1042) && ((z_3557 + z_3741 + z_4681 + z_5809) < t_1042) && ((z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689) < t_1042) && ((z_3741 + z_4681 + z_5809 + z_6537) < t_6456) && (z_2157 < t_660) && ((z_0 + z_2408) <= (z_1221 + z_2157 + z_2617)) && ((z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412) <= (z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537)) && ((z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448) <= (z_10769 + z_11069 + z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689 + z_8025)) && ((z_15 + z_239 + z_4079 + z_91) <= (z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809)) && ((z_15 + z_91) <= (z_1221 + z_2157)) && ((z_2834 + z_3422 + z_694 + z_7082) <= (z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689)) && ((z_2834 + z_694) <= (z_1221 + z_2157 + z_2617 + z_3557 + z_3741)) && ((z_10769 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689 + z_8025) > t_1042) && ($delta#initial > 0) && (z_10769 > 0) && (z_1221 > 0) && (z_2157 > 0) && (z_2617 > 0) && (z_3557 > 0) && (z_3741 > 0) && (z_4681 > 0) && (z_5809 > 0) && (z_6537 > 0) && (z_7689 > 0) && (z_8025 > 0));
																																															:pid_19:timeEmit = (z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448);
																																															:pid_20:cl = z_11069;
																																															:pid_26:cl = (z_10769 + z_11069 + z_7689 + z_8025);
																																															:pid_31:c = 1;
																																															:pid_31:consistent = true;
																																															:pid_31:cl = (z_10769 + z_11069 + z_5809 + z_6537 + z_7689 + z_8025);
																																															:pid_31:d.seq = 2;
																																															:pid_31:d.fragment = FRAGMENT_1;
																																															:pid_31:d.offset = 1;
																																														}
																																														BUFFER{
																																															:pid_19:bufferNode:<FIFO>#0{ }
																																														}
																																														EC:<Id:16559;Ev:2905;H:46;W:13733>{ SC: ( ( pid_6:cp1 , pid_11:dp1 , pid_16:dp1 ) , ( pid_23:cp1 , pid_28:dp1 , pid_33:dp1 ) , ( pid_40:cp1 , pid_45:dp1 , pid_50:dp1 ) , ( pid_58:cp2 , pid_61:dp0 , pid_66:dp0 ) )
																					
																						
						EXE: { |;| (:pid_53 , run) (:pid_54 , run) (:pid_57 , run) 
	(:pid_57 , cp1_reach_k) }
																					
																						
						TRACE: (:pid_53 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_11299 })
																																															DATA{
																																																:pid_53:$time = (z_11299 + z_15 + z_239 + z_4079 + z_5115 + z_5255 + z_8263 + z_91);
																																																:pid_53:z = z_11299;
																																																:pid_53:localTime = (z_11299 + z_15 + z_239 + z_4079 + z_5115 + z_5255 + z_8263 + z_91);
																																																:pid_53:localPC = ((t_171 < 8) && (t_18 < 4) && (t_1985 < 8) && (0 <= (t_171 + -4)) && (0 <= (t_18 + -2)) && (0 <= (t_1985 + -4)));
																																																:pid_53:localPtC = (((z_11299 + z_8263) == t_1985) && ((z_239 + z_91) == 4) && ((z_4079 + z_5115 + z_5255) == 8) && (z_4079 == t_171) && (z_91 == t_18) && ((z_4079 + z_5115) < 8) && (z_8263 < t_1985) && ((z_2834 + z_3422 + z_694 + z_7082) <= (z_15 + z_239 + z_4079 + z_5115 + z_5255 + z_8263 + z_91)) && ((z_2834 + z_694) <= (z_15 + z_239 + z_4079 + z_5115 + z_91)) && ((z_239 + z_91) > t_18) && ((z_4079 + z_5115 + z_5255) > t_171) && ($delta#initial > 0) && (z_15 > 0) && (z_239 > 0) && (z_4079 > 0) && (z_5115 > 0) && (z_5255 > 0) && (z_8263 > 0) && (z_91 > 0));
																																																:pid_54:cl = (z_11299 + z_8263);
																																																:pid_60:cl = (z_11299 + z_15 + z_239 + z_4079 + z_5115 + z_5255 + z_8263 + z_91);
																																																:pid_65:cl = (z_11299 + z_15 + z_239 + z_4079 + z_5115 + z_5255 + z_8263 + z_91);
																																															}
																																															EC:<Id:17049;Ev:2955;H:47;W:14144>{ SC: ( ( pid_6:cp1 , pid_12:dp2 , pid_16:dp1 ) , ( pid_23:cp1 , pid_28:dp1 , pid_33:dp1 ) , ( pid_40:cp1 , pid_45:dp1 , pid_50:dp1 ) , ( pid_58:cp2 , pid_61:dp0 , pid_66:dp0 ) )
																					
																						
							EXE: { |;| (:pid_2 , run) (:pid_9 , run) (:pid_11 , run) 
	(:pid_11 , dp_sendDM) }
																					
																						
							TRACE: { |;| (:pid_2 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_11612 }) (:pid_11 , ${ output inst::Trickle.Node.DataMsg [ 
	1 , 1 , 0 ] ${ + param::Trickle.Node.z_0 param::Trickle.Node.z_10516 
	param::Trickle.Node.z_11612 param::Trickle.Node.z_2408 
	param::Trickle.Node.z_3100 param::Trickle.Node.z_4220 param::Trickle.Node.z_6048 
	param::Trickle.Node.z_6412 param::Trickle.Node.z_9256 param::Trickle.Node.z_9348 
	param::Trickle.Node.z_9448 } } @ (z_0 + z_10516 + z_11612 + z_2408 + z_3100 + 
	z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448)) }
																																																DATA{
																																																	:pid_2:$time = (z_0 + z_10516 + z_11612 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448);
																																																	:pid_2:z = z_11612;
																																																	:pid_2:localTime = (z_0 + z_10516 + z_11612 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448);
																																																	:pid_2:localPC = ((t_1205 < 4) && (t_3652 < 4) && (t_4 < 4) && (t_10392 < 4) && (t_13696 < 8) && (t_14674 < 8) && (t_7603 < 4) && (0 <= (t_1205 + -2)) && (0 <= (t_3652 + -2)) && (0 <= (t_4 + -2)) && (0 <= (t_10392 + -2)) && (0 <= (t_13696 + -4)) && (0 <= (t_14674 + -4)) && (0 <= (t_7603 + -2)));
																																																	:pid_2:localPtC = (((z_10516 + z_11612 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448) == t_7603) && ((z_10516 + z_9448) == 8) && ((z_6412 + z_9256 + z_9348) == 4) && (z_2408 == t_4) && (z_6412 == t_10392) && (z_9448 == t_13696) && ((z_2408 + z_3100) < 4) && ((z_4220 + z_6048 + z_6412 + z_9256) < t_1205) && ((z_2834 + z_3422 + z_694 + z_7082) <= (z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256)) && ((z_2834 + z_694) <= (z_0 + z_2408 + z_3100)) && ((z_10516 + z_9448) > t_13696) && ((z_6412 + z_9256 + z_9348) > t_10392) && ($delta#initial > 0) && (z_0 > 0) && (z_10516 > 0) && (z_2408 > 0) && (z_3100 > 0) && (z_4220 > 0) && (z_6048 > 0) && (z_6412 > 0) && (z_9256 > 0) && (z_9348 > 0) && (z_9448 > 0));
																																																	:pid_3:cl = (z_10516 + z_11612 + z_9348 + z_9448);
																																																	:pid_9:cl = (z_10516 + z_11612 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448);
																																																	:pid_14:cl = z_11612;
																																																}
																																																BUFFER{
																																																	:pid_19:bufferNode:<FIFO>#0{
																																																		:pid_2:DataMsg([ 1 , 1 , 0 ] , (z_0 + z_10516 + z_11612 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448));
																																																	}
																																																	:pid_36:bufferNode:<FIFO>#0{
																																																		:pid_2:DataMsg([ 1 , 1 , 0 ] , (z_0 + z_10516 + z_11612 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448));
																																																	}
																																																}
																																																EC:<Id:17361;Ev:3047;H:48;W:14406>{ SC: ( ( pid_6:cp1 , pid_12:dp2 , pid_16:dp1 ) , ( pid_23:cp1 , pid_28:dp1 , pid_33:dp1 ) , ( pid_40:cp1 , pid_45:dp1 , pid_50:dp1 ) , ( pid_58:cp2 , pid_61:dp0 , pid_66:dp0 ) )
																					
																						
								EXE: { |;| (:pid_19 , run) (:pid_26 , run) (:pid_28 
	, run) (:pid_28 , dp1_receiveDM_consistent) }
																					
																						
								TRACE: { |;| (:pid_19 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_11813 }) (:pid_28 , ${ input 
	inst::Trickle.Node.DataMsg [ 1 , 1 , 0 ] ${ + param::Trickle.Node.z_0 
	param::Trickle.Node.z_10516 param::Trickle.Node.z_11612 
	param::Trickle.Node.z_2408 param::Trickle.Node.z_3100 param::Trickle.Node.z_4220 
	param::Trickle.Node.z_6048 param::Trickle.Node.z_6412 param::Trickle.Node.z_9256 
	param::Trickle.Node.z_9348 param::Trickle.Node.z_9448 } } @ (z_10769 + z_11069 + 
	z_11813 + z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537 
	+ z_7689 + z_8025)) }
																																																	/*FLAGS{ COVERAGE-ELEMENT }*/
																																																	INFO{
																																																		<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#1" as trace="tpid#1">
																																																	}
																																																	DATA{
																																																		:pid_19:my_buff[0].seq = 1;
																																																		:pid_19:my_buff[0].fragment = FRAGMENT_0;
																																																		:pid_19:my_buff[0].offset = 0;
																																																		:pid_19:firmware[0] = FRAGMENT_0;
																																																		:pid_19:myseq_buff[0] = 1;
																																																		:pid_19:$time = (z_10769 + z_11069 + z_11813 + z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689 + z_8025);
																																																		:pid_19:z = z_11813;
																																																		:pid_19:coverageProp = true;
																																																		:pid_19:localTime = (z_10769 + z_11069 + z_11813 + z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689 + z_8025);
																																																		:pid_19:localPC = ((t_1042 < 4) && (t_4251 < 8) && (t_660 < 4) && (t_11000 < 4) && (t_6456 < 4) && (t_8365 < 4) && (0 <= (t_1042 + -2)) && (0 <= (t_4251 + -4)) && (0 <= (t_660 + -2)) && (0 <= (t_11000 + -2)) && (0 <= (t_6456 + -2)) && (0 <= (t_8365 + -2)));
																																																		:pid_19:localPtC = (((z_10769 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689 + z_8025) == 4) && ((z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689 + z_8025) == t_1042) && ((z_10769 + z_11069 + z_11813 + z_7689 + z_8025) < t_11000) && ((z_10769 + z_11069 + z_5809 + z_6537 + z_7689 + z_8025) < t_8365) && ((z_2157 + z_2617) < t_660) && ((z_3557 + z_3741) < t_1042) && ((z_3557 + z_3741 + z_4681 + z_5809) < t_1042) && ((z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689) < t_1042) && ((z_3741 + z_4681 + z_5809 + z_6537) < t_6456) && (z_2157 < t_660) && ((z_0 + z_10516 + z_11612 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448) <= (z_10769 + z_11069 + z_11813 + z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689 + z_8025)) && ((z_0 + z_2408) <= (z_1221 + z_2157 + z_2617)) && ((z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412) <= (z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537)) && ((z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448) <= (z_10769 + z_11069 + z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689 + z_8025)) && ((z_15 + z_239 + z_4079 + z_91) <= (z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809)) && ((z_15 + z_91) <= (z_1221 + z_2157)) && ((z_2834 + z_3422 + z_694 + z_7082) <= (z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689)) && ((z_2834 + z_694) <= (z_1221 + z_2157 + z_2617 + z_3557 + z_3741)) && ((z_10769 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689 + z_8025) > t_1042) && ($delta#initial > 0) && (z_10769 > 0) && (z_11069 > 0) && (z_1221 > 0) && (z_2157 > 0) && (z_2617 > 0) && (z_3557 > 0) && (z_3741 > 0) && (z_4681 > 0) && (z_5809 > 0) && (z_6537 > 0) && (z_7689 > 0) && (z_8025 > 0));
																																																		:pid_19:timeEmit = (z_0 + z_10516 + z_11612 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448);
																																																		:pid_20:cl = (z_11069 + z_11813);
																																																		:pid_26:c = 1;
																																																		:pid_26:consistent = true;
																																																		:pid_26:cl = (z_10769 + z_11069 + z_11813 + z_7689 + z_8025);
																																																		:pid_26:d.seq = 1;
																																																		:pid_26:d.fragment = FRAGMENT_0;
																																																		:pid_26:d.offset = 0;
																																																		:pid_31:cl = (z_10769 + z_11069 + z_11813 + z_5809 + z_6537 + z_7689 + z_8025);
																																																	}
																																																	BUFFER{
																																																		:pid_19:bufferNode:<FIFO>#0{ }
																																																	}
																																																	EC:<Id:17967;Ev:3049;H:49;W:14406>{ SC: ( ( pid_6:cp1 , pid_12:dp2 , pid_18:dp3 ) , ( pid_23:cp1 , pid_28:dp1 , pid_33:dp1 ) , ( pid_40:cp1 , pid_45:dp1 , pid_50:dp1 ) , ( pid_58:cp2 , pid_61:dp0 , pid_66:dp0 ) )
																					
																						
									EXE: { |;| (:pid_2 , run) (:pid_14 , run) 
	(:pid_16 , run) (:pid_16 , dp_DATA_EXPIR) }
																					
																						
									TRACE: (:pid_2 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_12180 })
																																																		DATA{
																																																			:pid_2:$time = (z_0 + z_10516 + z_11612 + z_12180 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448);
																																																			:pid_2:z = z_12180;
																																																			:pid_2:localTime = (z_0 + z_10516 + z_11612 + z_12180 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448);
																																																			:pid_2:localPC = ((t_1205 < 4) && (t_3652 < 4) && (t_4 < 4) && (t_10392 < 4) && (t_13696 < 8) && (t_14674 < 8) && (t_7603 < 4) && (0 <= (t_1205 + -2)) && (0 <= (t_3652 + -2)) && (0 <= (t_4 + -2)) && (0 <= (t_10392 + -2)) && (0 <= (t_13696 + -4)) && (0 <= (t_14674 + -4)) && (0 <= (t_7603 + -2)));
																																																			:pid_2:localPtC = (((z_10516 + z_11612 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448) == t_7603) && ((z_10516 + z_9448) == 8) && ((z_6412 + z_9256 + z_9348) == 4) && (z_2408 == t_4) && (z_6412 == t_10392) && (z_9448 == t_13696) && ((z_2408 + z_3100) < 4) && ((z_4220 + z_6048 + z_6412 + z_9256) < t_1205) && ((z_2834 + z_3422 + z_694 + z_7082) <= (z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256)) && ((z_2834 + z_694) <= (z_0 + z_2408 + z_3100)) && ((z_10516 + z_9448) > t_13696) && ((z_6412 + z_9256 + z_9348) > t_10392) && ($delta#initial > 0) && (z_0 > 0) && (z_10516 > 0) && (z_11612 > 0) && (z_2408 > 0) && (z_3100 > 0) && (z_4220 > 0) && (z_6048 > 0) && (z_6412 > 0) && (z_9256 > 0) && (z_9348 > 0) && (z_9448 > 0));
																																																			:pid_3:cl = (z_10516 + z_11612 + z_12180 + z_9348 + z_9448);
																																																			:pid_9:cl = (z_10516 + z_11612 + z_12180 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448);
																																																			:pid_14:e = 2;
																																																			:pid_14:cl = (z_11612 + z_12180);
																																																		}
																																																		EC:<Id:17987;Ev:3068;H:50;W:14938>{ SC: ( ( pid_6:cp1 , pid_12:dp2 , pid_18:dp3 ) , ( pid_23:cp1 , pid_28:dp1 , pid_33:dp1 ) , ( pid_40:cp1 , pid_45:dp1 , pid_50:dp1 ) , ( pid_58:cp2 , pid_61:dp0 , pid_66:dp0 ) )
																					
																						
										EXE: { |;| (:pid_36 , run) (:pid_43 , run) 
	(:pid_45 , run) (:pid_45 , dp1_receiveDM_consistent) }
																					
																						
										TRACE: { |;| (:pid_36 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_12190 }) (:pid_45 , ${ input 
	inst::Trickle.Node.DataMsg [ 1 , 1 , 0 ] ${ + param::Trickle.Node.z_0 
	param::Trickle.Node.z_10516 param::Trickle.Node.z_11612 
	param::Trickle.Node.z_2408 param::Trickle.Node.z_3100 param::Trickle.Node.z_4220 
	param::Trickle.Node.z_6048 param::Trickle.Node.z_6412 param::Trickle.Node.z_9256 
	param::Trickle.Node.z_9348 param::Trickle.Node.z_9448 } } @ (z_10446 + z_12190 + 
	z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974)) }
																																																			/*FLAGS{ COVERAGE-ELEMENT }*/
																																																			INFO{
																																																				<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#2" as trace="tpid#2">
																																																			}
																																																			DATA{
																																																				:pid_36:my_buff[0].seq = 1;
																																																				:pid_36:my_buff[0].fragment = FRAGMENT_0;
																																																				:pid_36:my_buff[0].offset = 0;
																																																				:pid_36:firmware[0] = FRAGMENT_0;
																																																				:pid_36:myseq_buff[0] = 1;
																																																				:pid_36:$time = (z_10446 + z_12190 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974);
																																																				:pid_36:z = z_12190;
																																																				:pid_36:coverageProp = true;
																																																				:pid_36:localTime = (z_10446 + z_12190 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974);
																																																				:pid_36:localPC = ((t_1334 < 4) && (t_2878 < 8) && (t_434 < 4) && (t_13109 < 4) && (t_14231 < 4) && (t_14620 < 4) && (0 <= (t_1334 + -2)) && (0 <= (t_2878 + -4)) && (0 <= (t_434 + -2)) && (0 <= (t_13109 + -2)) && (0 <= (t_14231 + -2)) && (0 <= (t_14620 + -2)));
																																																				:pid_36:localPtC = (((z_7082 + z_7526) == 4) && (z_2834 == t_434) && (z_7082 == t_1334) && ((z_2834 + z_3422) < 4) && (z_10446 < t_14231) && (z_12190 < t_14620) && (z_8858 < t_13109) && ((z_0 + z_10516 + z_11612 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448) <= (z_10446 + z_12190 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974)) && ((z_0 + z_2408) <= (z_2834 + z_3422 + z_694)) && ((z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412) <= (z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858)) && ((z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448) <= (z_10446 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974)) && ((z_7082 + z_7526) > t_1334) && ($delta#initial > 0) && (z_10446 > 0) && (z_2834 > 0) && (z_3422 > 0) && (z_694 > 0) && (z_7082 > 0) && (z_7526 > 0) && (z_8586 > 0) && (z_8858 > 0) && (z_9974 > 0));
																																																				:pid_36:timeEmit = (z_0 + z_10516 + z_11612 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448);
																																																				:pid_37:cl = (z_10446 + z_12190 + z_8586 + z_8858 + z_9974);
																																																				:pid_43:c = 1;
																																																				:pid_43:consistent = true;
																																																				:pid_43:cl = z_12190;
																																																				:pid_43:d.seq = 1;
																																																				:pid_43:d.fragment = FRAGMENT_0;
																																																				:pid_43:d.offset = 0;
																																																				:pid_48:cl = (z_10446 + z_12190 + z_8858 + z_9974);
																																																			}
																																																			BUFFER{
																																																				:pid_36:bufferNode:<FIFO>#0{ }
																																																			}
																																																		}
																																																	}
																																																	EC:<Id:17968;Ev:3050;H:49;W:14921>{ SC: ( ( pid_6:cp1 , pid_11:dp1 , pid_16:dp1 ) , ( pid_23:cp1 , pid_28:dp1 , pid_33:dp1 ) , ( pid_40:cp1 , pid_45:dp1 , pid_50:dp1 ) , ( pid_58:cp2 , pid_61:dp0 , pid_66:dp0 ) )
																					
																						
									EXE: { |;| (:pid_2 , run) (:pid_9 , run) 
	(:pid_12 , run) (:pid_12 , dp_resetTau) }
																					
																						
									TRACE: { |;| (:pid_2 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_12180 }) (:pid_12 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_15953 }) }
																					
																						
									NC: ((t_15953 < 8) && (0 <= (t_15953 + -4)))
																																																		PC: ((t_1042 < 4) && (t_1205 < 4) && (t_1334 < 4) && (t_171 < 8) && (t_18 < 4) && 
	(t_1985 < 8) && (t_2878 < 8) && (t_3652 < 4) && (t_4 < 4) && (t_4251 < 8) && 
	(t_434 < 4) && (t_660 < 4) && (t_10392 < 4) && (t_11000 < 4) && (t_13109 < 4) && 
	(t_13696 < 8) && (t_14231 < 4) && (t_14620 < 4) && (t_14674 < 8) && (t_15953 < 8)
	 && (t_6456 < 4) && (t_7603 < 4) && (t_8365 < 4) && (0 <= (t_1042 + -2)) && (0 
	<= (t_1205 + -2)) && (0 <= (t_1334 + -2)) && (0 <= (t_171 + -4)) && (0 <= (t_18 
	+ -2)) && (0 <= (t_1985 + -4)) && (0 <= (t_2878 + -4)) && (0 <= (t_3652 + -2)) 
	&& (0 <= (t_4 + -2)) && (0 <= (t_4251 + -4)) && (0 <= (t_434 + -2)) && (0 <= 
	(t_660 + -2)) && (0 <= (t_10392 + -2)) && (0 <= (t_11000 + -2)) && (0 <= 
	(t_13109 + -2)) && (0 <= (t_13696 + -4)) && (0 <= (t_14231 + -2)) && (0 <= 
	(t_14620 + -2)) && (0 <= (t_14674 + -4)) && (0 <= (t_15953 + -4)) && (0 <= 
	(t_6456 + -2)) && (0 <= (t_7603 + -2)) && (0 <= (t_8365 + -2)))
																																																		DATA{
																																																			:pid_2:$time = (z_0 + z_10516 + z_11612 + z_12180 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448);
																																																			:pid_2:z = z_12180;
																																																			:pid_2:localTime = (z_0 + z_10516 + z_11612 + z_12180 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448);
																																																			:pid_2:localPC = ((t_1205 < 4) && (t_3652 < 4) && (t_4 < 4) && (t_10392 < 4) && (t_13696 < 8) && (t_14674 < 8) && (t_15953 < 8) && (t_7603 < 4) && (0 <= (t_1205 + -2)) && (0 <= (t_3652 + -2)) && (0 <= (t_4 + -2)) && (0 <= (t_10392 + -2)) && (0 <= (t_13696 + -4)) && (0 <= (t_14674 + -4)) && (0 <= (t_15953 + -4)) && (0 <= (t_7603 + -2)));
																																																			:pid_2:localPtC = (((z_10516 + z_11612 + z_12180 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448) == 4) && ((z_10516 + z_11612 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448) == t_7603) && ((z_10516 + z_9448) == 8) && ((z_6412 + z_9256 + z_9348) == 4) && (z_2408 == t_4) && (z_6412 == t_10392) && (z_9448 == t_13696) && ((z_2408 + z_3100) < 4) && ((z_4220 + z_6048 + z_6412 + z_9256) < t_1205) && ((z_2834 + z_3422 + z_694 + z_7082) <= (z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256)) && ((z_2834 + z_694) <= (z_0 + z_2408 + z_3100)) && ((z_10516 + z_11612 + z_12180 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448) > t_7603) && ((z_10516 + z_9448) > t_13696) && ((z_6412 + z_9256 + z_9348) > t_10392) && ($delta#initial > 0) && (z_0 > 0) && (z_10516 > 0) && (z_11612 > 0) && (z_2408 > 0) && (z_3100 > 0) && (z_4220 > 0) && (z_6048 > 0) && (z_6412 > 0) && (z_9256 > 0) && (z_9348 > 0) && (z_9448 > 0));
																																																			:pid_3:cl = (z_10516 + z_11612 + z_12180 + z_9348 + z_9448);
																																																			:pid_9:e = 1;
																																																			:pid_9:tau = 8;
																																																			:pid_9:t = t_15953;
																																																			:pid_9:cl = 0;
																																																			:pid_14:cl = (z_11612 + z_12180);
																																																		}
																																																		EC:<Id:17994;Ev:3066;H:50;W:14944>{ SC: ( ( pid_6:cp1 , pid_11:dp1 , pid_16:dp1 ) , ( pid_23:cp1 , pid_28:dp1 , pid_33:dp1 ) , ( pid_40:cp1 , pid_45:dp1 , pid_50:dp1 ) , ( pid_58:cp2 , pid_61:dp0 , pid_66:dp0 ) )
																					
																						
										EXE: { |;| (:pid_36 , run) (:pid_43 , run) 
	(:pid_45 , run) (:pid_45 , dp1_receiveDM_consistent) }
																					
																						
										TRACE: { |;| (:pid_36 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_12194 }) (:pid_45 , ${ input 
	inst::Trickle.Node.DataMsg [ 1 , 1 , 0 ] ${ + param::Trickle.Node.z_0 
	param::Trickle.Node.z_10516 param::Trickle.Node.z_11612 
	param::Trickle.Node.z_2408 param::Trickle.Node.z_3100 param::Trickle.Node.z_4220 
	param::Trickle.Node.z_6048 param::Trickle.Node.z_6412 param::Trickle.Node.z_9256 
	param::Trickle.Node.z_9348 param::Trickle.Node.z_9448 } } @ (z_10446 + z_12194 + 
	z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974)) }
																																																			/*FLAGS{ COVERAGE-ELEMENT }*/
																																																			INFO{
																																																				<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#2" as trace="tpid#2">
																																																			}
																																																			DATA{
																																																				:pid_36:my_buff[0].seq = 1;
																																																				:pid_36:my_buff[0].fragment = FRAGMENT_0;
																																																				:pid_36:my_buff[0].offset = 0;
																																																				:pid_36:firmware[0] = FRAGMENT_0;
																																																				:pid_36:myseq_buff[0] = 1;
																																																				:pid_36:$time = (z_10446 + z_12194 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974);
																																																				:pid_36:z = z_12194;
																																																				:pid_36:coverageProp = true;
																																																				:pid_36:localTime = (z_10446 + z_12194 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974);
																																																				:pid_36:localPC = ((t_1334 < 4) && (t_2878 < 8) && (t_434 < 4) && (t_13109 < 4) && (t_14231 < 4) && (t_14620 < 4) && (0 <= (t_1334 + -2)) && (0 <= (t_2878 + -4)) && (0 <= (t_434 + -2)) && (0 <= (t_13109 + -2)) && (0 <= (t_14231 + -2)) && (0 <= (t_14620 + -2)));
																																																				:pid_36:localPtC = (((z_7082 + z_7526) == 4) && (z_2834 == t_434) && (z_7082 == t_1334) && ((z_2834 + z_3422) < 4) && (z_10446 < t_14231) && (z_12194 < t_14620) && (z_8858 < t_13109) && ((z_0 + z_10516 + z_11612 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448) <= (z_10446 + z_12194 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974)) && ((z_0 + z_2408) <= (z_2834 + z_3422 + z_694)) && ((z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412) <= (z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858)) && ((z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448) <= (z_10446 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974)) && ((z_7082 + z_7526) > t_1334) && ($delta#initial > 0) && (z_10446 > 0) && (z_2834 > 0) && (z_3422 > 0) && (z_694 > 0) && (z_7082 > 0) && (z_7526 > 0) && (z_8586 > 0) && (z_8858 > 0) && (z_9974 > 0));
																																																				:pid_36:timeEmit = (z_0 + z_10516 + z_11612 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448);
																																																				:pid_37:cl = (z_10446 + z_12194 + z_8586 + z_8858 + z_9974);
																																																				:pid_43:c = 1;
																																																				:pid_43:consistent = true;
																																																				:pid_43:cl = z_12194;
																																																				:pid_43:d.seq = 1;
																																																				:pid_43:d.fragment = FRAGMENT_0;
																																																				:pid_43:d.offset = 0;
																																																				:pid_48:cl = (z_10446 + z_12194 + z_8858 + z_9974);
																																																			}
																																																			BUFFER{
																																																				:pid_36:bufferNode:<FIFO>#0{ }
																																																			}
																																																		}
																																																	}
																																																	EC:<Id:17969;Ev:3051;H:49;W:14922>{ SC: ( ( pid_6:cp1 , pid_12:dp2 , pid_16:dp1 ) , ( pid_24:cp2 , pid_28:dp1 , pid_33:dp1 ) , ( pid_40:cp1 , pid_45:dp1 , pid_50:dp1 ) , ( pid_58:cp2 , pid_61:dp0 , pid_66:dp0 ) )
																					
																						
									EXE: { |;| (:pid_19 , run) (:pid_20 , run) 
	(:pid_23 , run) (:pid_23 , cp1_reach_k) }
																					
																						
									TRACE: (:pid_19 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_12181 })
																																																		DATA{
																																																			:pid_19:$time = (z_10769 + z_11069 + z_11813 + z_12181 + z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689 + z_8025);
																																																			:pid_19:z = z_12181;
																																																			:pid_19:localTime = (z_10769 + z_11069 + z_11813 + z_12181 + z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689 + z_8025);
																																																			:pid_19:localPC = ((t_1042 < 4) && (t_4251 < 8) && (t_660 < 4) && (t_11000 < 4) && (t_6456 < 4) && (t_8365 < 4) && (0 <= (t_1042 + -2)) && (0 <= (t_4251 + -4)) && (0 <= (t_660 + -2)) && (0 <= (t_11000 + -2)) && (0 <= (t_6456 + -2)) && (0 <= (t_8365 + -2)));
																																																			:pid_19:localPtC = (((z_10769 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689 + z_8025) == 4) && ((z_11069 + z_11813 + z_12181) == t_4251) && ((z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689 + z_8025) == t_1042) && ((z_10769 + z_11069 + z_11813 + z_7689 + z_8025) < t_11000) && ((z_10769 + z_11069 + z_5809 + z_6537 + z_7689 + z_8025) < t_8365) && ((z_2157 + z_2617) < t_660) && ((z_3557 + z_3741) < t_1042) && ((z_3557 + z_3741 + z_4681 + z_5809) < t_1042) && ((z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689) < t_1042) && ((z_3741 + z_4681 + z_5809 + z_6537) < t_6456) && (z_2157 < t_660) && ((z_0 + z_10516 + z_11612 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448) <= (z_10769 + z_11069 + z_11813 + z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689 + z_8025)) && ((z_0 + z_2408) <= (z_1221 + z_2157 + z_2617)) && ((z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412) <= (z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537)) && ((z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448) <= (z_10769 + z_11069 + z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689 + z_8025)) && ((z_15 + z_239 + z_4079 + z_91) <= (z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809)) && ((z_15 + z_91) <= (z_1221 + z_2157)) && ((z_2834 + z_3422 + z_694 + z_7082) <= (z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689)) && ((z_2834 + z_694) <= (z_1221 + z_2157 + z_2617 + z_3557 + z_3741)) && ((z_10769 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689 + z_8025) > t_1042) && ($delta#initial > 0) && (z_10769 > 0) && (z_11069 > 0) && (z_11813 > 0) && (z_1221 > 0) && (z_2157 > 0) && (z_2617 > 0) && (z_3557 > 0) && (z_3741 > 0) && (z_4681 > 0) && (z_5809 > 0) && (z_6537 > 0) && (z_7689 > 0) && (z_8025 > 0));
																																																			:pid_20:cl = (z_11069 + z_11813 + z_12181);
																																																			:pid_26:cl = (z_10769 + z_11069 + z_11813 + z_12181 + z_7689 + z_8025);
																																																			:pid_31:cl = (z_10769 + z_11069 + z_11813 + z_12181 + z_5809 + z_6537 + z_7689 + z_8025);
																																																		}
																																																		EC:<Id:18002;Ev:0;H:50;W:14951>{ SC: ( ( pid_6:cp1 , pid_12:dp2 , pid_16:dp1 ) , ( pid_24:cp2 , pid_28:dp1 , pid_33:dp1 ) , ( pid_40:cp1 , pid_45:dp1 , pid_50:dp1 ) , ( pid_58:cp2 , pid_61:dp0 , pid_66:dp0 ) )
																					
																						
										EXE: { |;| (:pid_36 , run) (:pid_43 , run) 
	(:pid_45 , run) (:pid_45 , dp1_receiveDM_consistent) }
																					
																						
										TRACE: { |;| (:pid_36 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_12198 }) (:pid_45 , ${ input 
	inst::Trickle.Node.DataMsg [ 1 , 1 , 0 ] ${ + param::Trickle.Node.z_0 
	param::Trickle.Node.z_10516 param::Trickle.Node.z_11612 
	param::Trickle.Node.z_2408 param::Trickle.Node.z_3100 param::Trickle.Node.z_4220 
	param::Trickle.Node.z_6048 param::Trickle.Node.z_6412 param::Trickle.Node.z_9256 
	param::Trickle.Node.z_9348 param::Trickle.Node.z_9448 } } @ (z_10446 + z_12198 + 
	z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974)) }
																																																			/*FLAGS{ COVERAGE-ELEMENT }*/
																																																			INFO{
																																																				<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#2" as trace="tpid#2">
																																																			}
																																																			DATA{
																																																				:pid_36:my_buff[0].seq = 1;
																																																				:pid_36:my_buff[0].fragment = FRAGMENT_0;
																																																				:pid_36:my_buff[0].offset = 0;
																																																				:pid_36:firmware[0] = FRAGMENT_0;
																																																				:pid_36:myseq_buff[0] = 1;
																																																				:pid_36:$time = (z_10446 + z_12198 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974);
																																																				:pid_36:z = z_12198;
																																																				:pid_36:coverageProp = true;
																																																				:pid_36:localTime = (z_10446 + z_12198 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974);
																																																				:pid_36:localPC = ((t_1334 < 4) && (t_2878 < 8) && (t_434 < 4) && (t_13109 < 4) && (t_14231 < 4) && (t_14620 < 4) && (0 <= (t_1334 + -2)) && (0 <= (t_2878 + -4)) && (0 <= (t_434 + -2)) && (0 <= (t_13109 + -2)) && (0 <= (t_14231 + -2)) && (0 <= (t_14620 + -2)));
																																																				:pid_36:localPtC = (((z_7082 + z_7526) == 4) && (z_2834 == t_434) && (z_7082 == t_1334) && ((z_2834 + z_3422) < 4) && (z_10446 < t_14231) && (z_12198 < t_14620) && (z_8858 < t_13109) && ((z_0 + z_10516 + z_11612 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448) <= (z_10446 + z_12198 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974)) && ((z_0 + z_2408) <= (z_2834 + z_3422 + z_694)) && ((z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412) <= (z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858)) && ((z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448) <= (z_10446 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974)) && ((z_7082 + z_7526) > t_1334) && ($delta#initial > 0) && (z_10446 > 0) && (z_2834 > 0) && (z_3422 > 0) && (z_694 > 0) && (z_7082 > 0) && (z_7526 > 0) && (z_8586 > 0) && (z_8858 > 0) && (z_9974 > 0));
																																																				:pid_36:timeEmit = (z_0 + z_10516 + z_11612 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448);
																																																				:pid_37:cl = (z_10446 + z_12198 + z_8586 + z_8858 + z_9974);
																																																				:pid_43:c = 1;
																																																				:pid_43:consistent = true;
																																																				:pid_43:cl = z_12198;
																																																				:pid_43:d.seq = 1;
																																																				:pid_43:d.fragment = FRAGMENT_0;
																																																				:pid_43:d.offset = 0;
																																																				:pid_48:cl = (z_10446 + z_12198 + z_8858 + z_9974);
																																																			}
																																																			BUFFER{
																																																				:pid_36:bufferNode:<FIFO>#0{ }
																																																			}
																																																		}
																																																	}
																																																	EC:<Id:17970;Ev:3052;H:49;W:14923>{ SC: ( ( pid_6:cp1 , pid_12:dp2 , pid_16:dp1 ) , ( pid_23:cp1 , pid_28:dp1 , pid_33:dp1 ) , ( pid_40:cp1 , pid_45:dp1 , pid_51:dp2 ) , ( pid_58:cp2 , pid_61:dp0 , pid_66:dp0 ) )
																					
																						
									EXE: { |;| (:pid_36 , run) (:pid_48 , run) 
	(:pid_50 , run) (:pid_50 , dp_sendDM) }
																					
																						
									TRACE: { |;| (:pid_36 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_12182 }) (:pid_50 , ${ output 
	inst::Trickle.Node.DataMsg [ 2 , 2 , 1 ] ${ + param::Trickle.Node.z_10446 
	param::Trickle.Node.z_12182 param::Trickle.Node.z_2834 
	param::Trickle.Node.z_3422 param::Trickle.Node.z_694 param::Trickle.Node.z_7082 
	param::Trickle.Node.z_7526 param::Trickle.Node.z_8586 param::Trickle.Node.z_8858 
	param::Trickle.Node.z_9974 } } @ (z_10446 + z_12182 + z_2834 + z_3422 + z_694 + 
	z_7082 + z_7526 + z_8586 + z_8858 + z_9974)) }
																																																		DATA{
																																																			:pid_36:$time = (z_10446 + z_12182 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974);
																																																			:pid_36:z = z_12182;
																																																			:pid_36:localTime = (z_10446 + z_12182 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974);
																																																			:pid_36:localPC = ((t_1334 < 4) && (t_2878 < 8) && (t_434 < 4) && (t_13109 < 4) && (t_14231 < 4) && (t_14620 < 4) && (0 <= (t_1334 + -2)) && (0 <= (t_2878 + -4)) && (0 <= (t_434 + -2)) && (0 <= (t_13109 + -2)) && (0 <= (t_14231 + -2)) && (0 <= (t_14620 + -2)));
																																																			:pid_36:localPtC = (((z_10446 + z_12182 + z_8858 + z_9974) == t_13109) && ((z_7082 + z_7526) == 4) && (z_2834 == t_434) && (z_7082 == t_1334) && ((z_2834 + z_3422) < 4) && (z_10446 < t_14231) && (z_8858 < t_13109) && ((z_0 + z_2408) <= (z_2834 + z_3422 + z_694)) && ((z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412) <= (z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858)) && ((z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448) <= (z_10446 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974)) && ((z_7082 + z_7526) > t_1334) && ($delta#initial > 0) && (z_10446 > 0) && (z_2834 > 0) && (z_3422 > 0) && (z_694 > 0) && (z_7082 > 0) && (z_7526 > 0) && (z_8586 > 0) && (z_8858 > 0) && (z_9974 > 0));
																																																			:pid_37:cl = (z_10446 + z_12182 + z_8586 + z_8858 + z_9974);
																																																			:pid_43:cl = z_12182;
																																																			:pid_48:cl = (z_10446 + z_12182 + z_8858 + z_9974);
																																																		}
																																																		BUFFER{
																																																			:pid_2:bufferNode:<FIFO>#0{
																																																				:pid_36:DataMsg([ 2 , 2 , 1 ] , (z_10446 + z_12182 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974));
																																																			}
																																																			:pid_19:bufferNode:<FIFO>#0{
																																																				:pid_36:DataMsg([ 2 , 2 , 1 ] , (z_10446 + z_12182 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974));
																																																			}
																																																			:pid_53:bufferNode:<FIFO>#0{
																																																				:pid_36:DataMsg([ 2 , 2 , 1 ] , (z_10446 + z_12182 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974));
																																																			}
																																																		}
																																																		EC:<Id:18013;Ev:3069;H:50;W:14961>{ SC: ( ( pid_6:cp1 , pid_12:dp2 , pid_16:dp1 ) , ( pid_23:cp1 , pid_28:dp1 , pid_33:dp1 ) , ( pid_40:cp1 , pid_45:dp1 , pid_51:dp2 ) , ( pid_58:cp2 , pid_61:dp0 , pid_66:dp0 ) )
																					
																						
										EXE: { |;| (:pid_36 , run) (:pid_43 , run) 
	(:pid_45 , run) (:pid_45 , dp1_receiveDM_consistent) }
																					
																						
										TRACE: { |;| (:pid_36 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_12202 }) (:pid_45 , ${ input 
	inst::Trickle.Node.DataMsg [ 1 , 1 , 0 ] ${ + param::Trickle.Node.z_0 
	param::Trickle.Node.z_10516 param::Trickle.Node.z_11612 
	param::Trickle.Node.z_2408 param::Trickle.Node.z_3100 param::Trickle.Node.z_4220 
	param::Trickle.Node.z_6048 param::Trickle.Node.z_6412 param::Trickle.Node.z_9256 
	param::Trickle.Node.z_9348 param::Trickle.Node.z_9448 } } @ (z_10446 + z_12182 + 
	z_12202 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974)) 
	}
																																																			/*FLAGS{ COVERAGE-ELEMENT }*/
																																																			INFO{
																																																				<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#2" as trace="tpid#2">
																																																			}
																																																			DATA{
																																																				:pid_36:my_buff[0].seq = 1;
																																																				:pid_36:my_buff[0].fragment = FRAGMENT_0;
																																																				:pid_36:my_buff[0].offset = 0;
																																																				:pid_36:firmware[0] = FRAGMENT_0;
																																																				:pid_36:myseq_buff[0] = 1;
																																																				:pid_36:$time = (z_10446 + z_12182 + z_12202 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974);
																																																				:pid_36:z = z_12202;
																																																				:pid_36:coverageProp = true;
																																																				:pid_36:localTime = (z_10446 + z_12182 + z_12202 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974);
																																																				:pid_36:localPC = ((t_1334 < 4) && (t_2878 < 8) && (t_434 < 4) && (t_13109 < 4) && (t_14231 < 4) && (t_14620 < 4) && (0 <= (t_1334 + -2)) && (0 <= (t_2878 + -4)) && (0 <= (t_434 + -2)) && (0 <= (t_13109 + -2)) && (0 <= (t_14231 + -2)) && (0 <= (t_14620 + -2)));
																																																				:pid_36:localPtC = (((z_10446 + z_12182 + z_8858 + z_9974) == t_13109) && ((z_7082 + z_7526) == 4) && (z_2834 == t_434) && (z_7082 == t_1334) && ((z_12182 + z_12202) < t_14620) && ((z_2834 + z_3422) < 4) && (z_10446 < t_14231) && (z_8858 < t_13109) && ((z_0 + z_10516 + z_11612 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448) <= (z_10446 + z_12182 + z_12202 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974)) && ((z_0 + z_2408) <= (z_2834 + z_3422 + z_694)) && ((z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412) <= (z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858)) && ((z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448) <= (z_10446 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974)) && ((z_7082 + z_7526) > t_1334) && ($delta#initial > 0) && (z_10446 > 0) && (z_12182 > 0) && (z_2834 > 0) && (z_3422 > 0) && (z_694 > 0) && (z_7082 > 0) && (z_7526 > 0) && (z_8586 > 0) && (z_8858 > 0) && (z_9974 > 0));
																																																				:pid_36:timeEmit = (z_0 + z_10516 + z_11612 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448);
																																																				:pid_37:cl = (z_10446 + z_12182 + z_12202 + z_8586 + z_8858 + z_9974);
																																																				:pid_43:c = 1;
																																																				:pid_43:consistent = true;
																																																				:pid_43:cl = (z_12182 + z_12202);
																																																				:pid_43:d.seq = 1;
																																																				:pid_43:d.fragment = FRAGMENT_0;
																																																				:pid_43:d.offset = 0;
																																																				:pid_48:cl = (z_10446 + z_12182 + z_12202 + z_8858 + z_9974);
																																																			}
																																																			BUFFER{
																																																				:pid_36:bufferNode:<FIFO>#0{ }
																																																			}
																																																		}
																																																	}
																																																	EC:<Id:17972;Ev:3054;H:49;W:14925>{ SC: ( ( pid_6:cp1 , pid_12:dp2 , pid_16:dp1 ) , ( pid_23:cp1 , pid_28:dp1 , pid_33:dp1 ) , ( pid_40:cp1 , pid_45:dp1 , pid_50:dp1 ) , ( pid_58:cp2 , pid_61:dp0 , pid_66:dp0 ) )
																					
																						
									EXE: { |;| (:pid_36 , run) (:pid_43 , run) 
	(:pid_45 , run) (:pid_45 , dp1_receiveDM_consistent) }
																					
																						
									TRACE: { |;| (:pid_36 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_12182 }) (:pid_45 , ${ input 
	inst::Trickle.Node.DataMsg [ 1 , 1 , 0 ] ${ + param::Trickle.Node.z_0 
	param::Trickle.Node.z_10516 param::Trickle.Node.z_11612 
	param::Trickle.Node.z_2408 param::Trickle.Node.z_3100 param::Trickle.Node.z_4220 
	param::Trickle.Node.z_6048 param::Trickle.Node.z_6412 param::Trickle.Node.z_9256 
	param::Trickle.Node.z_9348 param::Trickle.Node.z_9448 } } @ (z_10446 + z_12182 + 
	z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974)) }
																																																		/*FLAGS{ COVERAGE-ELEMENT }*/
																																																		INFO{
																																																			<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#2" as trace="tpid#2">
																																																		}
																																																		DATA{
																																																			:pid_36:my_buff[0].seq = 1;
																																																			:pid_36:my_buff[0].fragment = FRAGMENT_0;
																																																			:pid_36:my_buff[0].offset = 0;
																																																			:pid_36:firmware[0] = FRAGMENT_0;
																																																			:pid_36:myseq_buff[0] = 1;
																																																			:pid_36:$time = (z_10446 + z_12182 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974);
																																																			:pid_36:z = z_12182;
																																																			:pid_36:coverageProp = true;
																																																			:pid_36:localTime = (z_10446 + z_12182 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974);
																																																			:pid_36:localPC = ((t_1334 < 4) && (t_2878 < 8) && (t_434 < 4) && (t_13109 < 4) && (t_14231 < 4) && (t_14620 < 4) && (0 <= (t_1334 + -2)) && (0 <= (t_2878 + -4)) && (0 <= (t_434 + -2)) && (0 <= (t_13109 + -2)) && (0 <= (t_14231 + -2)) && (0 <= (t_14620 + -2)));
																																																			:pid_36:localPtC = (((z_7082 + z_7526) == 4) && (z_2834 == t_434) && (z_7082 == t_1334) && ((z_2834 + z_3422) < 4) && (z_10446 < t_14231) && (z_12182 < t_14620) && (z_8858 < t_13109) && ((z_0 + z_10516 + z_11612 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448) <= (z_10446 + z_12182 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974)) && ((z_0 + z_2408) <= (z_2834 + z_3422 + z_694)) && ((z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412) <= (z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858)) && ((z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448) <= (z_10446 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974)) && ((z_7082 + z_7526) > t_1334) && ($delta#initial > 0) && (z_10446 > 0) && (z_2834 > 0) && (z_3422 > 0) && (z_694 > 0) && (z_7082 > 0) && (z_7526 > 0) && (z_8586 > 0) && (z_8858 > 0) && (z_9974 > 0));
																																																			:pid_36:timeEmit = (z_0 + z_10516 + z_11612 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448);
																																																			:pid_37:cl = (z_10446 + z_12182 + z_8586 + z_8858 + z_9974);
																																																			:pid_43:c = 1;
																																																			:pid_43:consistent = true;
																																																			:pid_43:cl = z_12182;
																																																			:pid_43:d.seq = 1;
																																																			:pid_43:d.fragment = FRAGMENT_0;
																																																			:pid_43:d.offset = 0;
																																																			:pid_48:cl = (z_10446 + z_12182 + z_8858 + z_9974);
																																																		}
																																																		BUFFER{
																																																			:pid_36:bufferNode:<FIFO>#0{ }
																																																		}
																																																	}
																																																	EC:<Id:17973;Ev:3055;H:49;W:14926>{ SC: ( ( pid_6:cp1 , pid_12:dp2 , pid_16:dp1 ) , ( pid_23:cp1 , pid_28:dp1 , pid_33:dp1 ) , ( pid_41:cp2 , pid_45:dp1 , pid_50:dp1 ) , ( pid_58:cp2 , pid_61:dp0 , pid_66:dp0 ) )
																					
																						
									EXE: { |;| (:pid_36 , run) (:pid_37 , run) 
	(:pid_40 , run) (:pid_40 , cp_sendCM) }
																					
																						
									TRACE: { |;| (:pid_36 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_12182 }) (:pid_40 , ${ output 
	inst::Trickle.Node.ControlMsg [ 0 , 1 ] ${ + param::Trickle.Node.z_10446 
	param::Trickle.Node.z_12182 param::Trickle.Node.z_2834 
	param::Trickle.Node.z_3422 param::Trickle.Node.z_694 param::Trickle.Node.z_7082 
	param::Trickle.Node.z_7526 param::Trickle.Node.z_8586 param::Trickle.Node.z_8858 
	param::Trickle.Node.z_9974 } } @ (z_10446 + z_12182 + z_2834 + z_3422 + z_694 + 
	z_7082 + z_7526 + z_8586 + z_8858 + z_9974)) }
																																																		DATA{
																																																			:pid_36:$time = (z_10446 + z_12182 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974);
																																																			:pid_36:z = z_12182;
																																																			:pid_36:localTime = (z_10446 + z_12182 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974);
																																																			:pid_36:localPC = ((t_1334 < 4) && (t_2878 < 8) && (t_434 < 4) && (t_13109 < 4) && (t_14231 < 4) && (t_14620 < 4) && (0 <= (t_1334 + -2)) && (0 <= (t_2878 + -4)) && (0 <= (t_434 + -2)) && (0 <= (t_13109 + -2)) && (0 <= (t_14231 + -2)) && (0 <= (t_14620 + -2)));
																																																			:pid_36:localPtC = (((z_10446 + z_12182 + z_8586 + z_8858 + z_9974) == t_2878) && ((z_7082 + z_7526) == 4) && (z_2834 == t_434) && (z_7082 == t_1334) && ((z_2834 + z_3422) < 4) && (z_10446 < t_14231) && (z_8858 < t_13109) && ((z_0 + z_2408) <= (z_2834 + z_3422 + z_694)) && ((z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412) <= (z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858)) && ((z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448) <= (z_10446 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974)) && ((z_7082 + z_7526) > t_1334) && ($delta#initial > 0) && (z_10446 > 0) && (z_2834 > 0) && (z_3422 > 0) && (z_694 > 0) && (z_7082 > 0) && (z_7526 > 0) && (z_8586 > 0) && (z_8858 > 0) && (z_9974 > 0));
																																																			:pid_37:cl = (z_10446 + z_12182 + z_8586 + z_8858 + z_9974);
																																																			:pid_43:cl = z_12182;
																																																			:pid_48:cl = (z_10446 + z_12182 + z_8858 + z_9974);
																																																		}
																																																		BUFFER{
																																																			:pid_2:bufferNode:<FIFO>#0{
																																																				:pid_36:ControlMsg([ 0 , 1 ] , (z_10446 + z_12182 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974));
																																																			}
																																																			:pid_19:bufferNode:<FIFO>#0{
																																																				:pid_36:ControlMsg([ 0 , 1 ] , (z_10446 + z_12182 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974));
																																																			}
																																																			:pid_53:bufferNode:<FIFO>#0{
																																																				:pid_36:ControlMsg([ 0 , 1 ] , (z_10446 + z_12182 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974));
																																																			}
																																																		}
																																																		EC:<Id:18040;Ev:3072;H:50;W:14985>{ SC: ( ( pid_6:cp1 , pid_12:dp2 , pid_16:dp1 ) , ( pid_23:cp1 , pid_28:dp1 , pid_33:dp1 ) , ( pid_41:cp2 , pid_45:dp1 , pid_50:dp1 ) , ( pid_58:cp2 , pid_61:dp0 , pid_66:dp0 ) )
																					
																						
										EXE: { |;| (:pid_36 , run) (:pid_43 , run) 
	(:pid_45 , run) (:pid_45 , dp1_receiveDM_consistent) }
																					
																						
										TRACE: { |;| (:pid_36 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_12214 }) (:pid_45 , ${ input 
	inst::Trickle.Node.DataMsg [ 1 , 1 , 0 ] ${ + param::Trickle.Node.z_0 
	param::Trickle.Node.z_10516 param::Trickle.Node.z_11612 
	param::Trickle.Node.z_2408 param::Trickle.Node.z_3100 param::Trickle.Node.z_4220 
	param::Trickle.Node.z_6048 param::Trickle.Node.z_6412 param::Trickle.Node.z_9256 
	param::Trickle.Node.z_9348 param::Trickle.Node.z_9448 } } @ (z_10446 + z_12182 + 
	z_12214 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974)) 
	}
																																																			/*FLAGS{ COVERAGE-ELEMENT }*/
																																																			INFO{
																																																				<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#2" as trace="tpid#2">
																																																			}
																																																			DATA{
																																																				:pid_36:my_buff[0].seq = 1;
																																																				:pid_36:my_buff[0].fragment = FRAGMENT_0;
																																																				:pid_36:my_buff[0].offset = 0;
																																																				:pid_36:firmware[0] = FRAGMENT_0;
																																																				:pid_36:myseq_buff[0] = 1;
																																																				:pid_36:$time = (z_10446 + z_12182 + z_12214 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974);
																																																				:pid_36:z = z_12214;
																																																				:pid_36:coverageProp = true;
																																																				:pid_36:localTime = (z_10446 + z_12182 + z_12214 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974);
																																																				:pid_36:localPC = ((t_1334 < 4) && (t_2878 < 8) && (t_434 < 4) && (t_13109 < 4) && (t_14231 < 4) && (t_14620 < 4) && (0 <= (t_1334 + -2)) && (0 <= (t_2878 + -4)) && (0 <= (t_434 + -2)) && (0 <= (t_13109 + -2)) && (0 <= (t_14231 + -2)) && (0 <= (t_14620 + -2)));
																																																				:pid_36:localPtC = (((z_10446 + z_12182 + z_8586 + z_8858 + z_9974) == t_2878) && ((z_7082 + z_7526) == 4) && (z_2834 == t_434) && (z_7082 == t_1334) && ((z_12182 + z_12214) < t_14620) && ((z_2834 + z_3422) < 4) && (z_10446 < t_14231) && (z_8858 < t_13109) && ((z_0 + z_10516 + z_11612 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448) <= (z_10446 + z_12182 + z_12214 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974)) && ((z_0 + z_2408) <= (z_2834 + z_3422 + z_694)) && ((z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412) <= (z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858)) && ((z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448) <= (z_10446 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974)) && ((z_7082 + z_7526) > t_1334) && ($delta#initial > 0) && (z_10446 > 0) && (z_12182 > 0) && (z_2834 > 0) && (z_3422 > 0) && (z_694 > 0) && (z_7082 > 0) && (z_7526 > 0) && (z_8586 > 0) && (z_8858 > 0) && (z_9974 > 0));
																																																				:pid_36:timeEmit = (z_0 + z_10516 + z_11612 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448);
																																																				:pid_37:cl = (z_10446 + z_12182 + z_12214 + z_8586 + z_8858 + z_9974);
																																																				:pid_43:c = 1;
																																																				:pid_43:consistent = true;
																																																				:pid_43:cl = (z_12182 + z_12214);
																																																				:pid_43:d.seq = 1;
																																																				:pid_43:d.fragment = FRAGMENT_0;
																																																				:pid_43:d.offset = 0;
																																																				:pid_48:cl = (z_10446 + z_12182 + z_12214 + z_8858 + z_9974);
																																																			}
																																																			BUFFER{
																																																				:pid_36:bufferNode:<FIFO>#0{ }
																																																			}
																																																		}
																																																	}
																																																	EC:<Id:17974;Ev:3056;H:49;W:14927>{ SC: ( ( pid_6:cp1 , pid_12:dp2 , pid_16:dp1 ) , ( pid_23:cp1 , pid_28:dp1 , pid_33:dp1 ) , ( pid_40:cp1 , pid_45:dp1 , pid_50:dp1 ) , ( pid_57:cp1 , pid_61:dp0 , pid_66:dp0 ) )
																					
																						
									EXE: { |;| (:pid_53 , run) (:pid_54 , run) 
	(:pid_58 , run) (:pid_58 , cp_resetTau) }
																					
																						
									TRACE: { |;| (:pid_53 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_12183 }) (:pid_58 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_4796 }) 
	}
																					
																						
									NC: ((t_4796 < 8) && (0 <= (t_4796 + -4)))
																																																		PC: ((t_1042 < 4) && (t_1205 < 4) && (t_1334 < 4) && (t_171 < 8) && (t_18 < 4) && 
	(t_1985 < 8) && (t_2878 < 8) && (t_3652 < 4) && (t_4 < 4) && (t_4251 < 8) && 
	(t_434 < 4) && (t_4796 < 8) && (t_660 < 4) && (t_10392 < 4) && (t_11000 < 4) && 
	(t_13109 < 4) && (t_13696 < 8) && (t_14231 < 4) && (t_14620 < 4) && (t_14674 < 8)
	 && (t_6456 < 4) && (t_7603 < 4) && (t_8365 < 4) && (0 <= (t_1042 + -2)) && (0 
	<= (t_1205 + -2)) && (0 <= (t_1334 + -2)) && (0 <= (t_171 + -4)) && (0 <= (t_18 
	+ -2)) && (0 <= (t_1985 + -4)) && (0 <= (t_2878 + -4)) && (0 <= (t_3652 + -2)) 
	&& (0 <= (t_4 + -2)) && (0 <= (t_4251 + -4)) && (0 <= (t_434 + -2)) && (0 <= 
	(t_4796 + -4)) && (0 <= (t_660 + -2)) && (0 <= (t_10392 + -2)) && (0 <= (t_11000 
	+ -2)) && (0 <= (t_13109 + -2)) && (0 <= (t_13696 + -4)) && (0 <= (t_14231 + -2))
	 && (0 <= (t_14620 + -2)) && (0 <= (t_14674 + -4)) && (0 <= (t_6456 + -2)) && (0 
	<= (t_7603 + -2)) && (0 <= (t_8365 + -2)))
																																																		DATA{
																																																			:pid_53:$time = (z_11299 + z_12183 + z_15 + z_239 + z_4079 + z_5115 + z_5255 + z_8263 + z_91);
																																																			:pid_53:z = z_12183;
																																																			:pid_53:localTime = (z_11299 + z_12183 + z_15 + z_239 + z_4079 + z_5115 + z_5255 + z_8263 + z_91);
																																																			:pid_53:localPC = ((t_171 < 8) && (t_18 < 4) && (t_1985 < 8) && (t_4796 < 8) && (0 <= (t_171 + -4)) && (0 <= (t_18 + -2)) && (0 <= (t_1985 + -4)) && (0 <= (t_4796 + -4)));
																																																			:pid_53:localPtC = (((z_11299 + z_12183 + z_8263) == 8) && ((z_11299 + z_8263) == t_1985) && ((z_239 + z_91) == 4) && ((z_4079 + z_5115 + z_5255) == 8) && (z_4079 == t_171) && (z_91 == t_18) && ((z_4079 + z_5115) < 8) && (z_8263 < t_1985) && ((z_2834 + z_3422 + z_694 + z_7082) <= (z_15 + z_239 + z_4079 + z_5115 + z_5255 + z_8263 + z_91)) && ((z_2834 + z_694) <= (z_15 + z_239 + z_4079 + z_5115 + z_91)) && ((z_11299 + z_12183 + z_8263) > t_1985) && ((z_239 + z_91) > t_18) && ((z_4079 + z_5115 + z_5255) > t_171) && ($delta#initial > 0) && (z_11299 > 0) && (z_15 > 0) && (z_239 > 0) && (z_4079 > 0) && (z_5115 > 0) && (z_5255 > 0) && (z_8263 > 0) && (z_91 > 0));
																																																			:pid_54:e = 3;
																																																			:pid_54:t = t_4796;
																																																			:pid_54:cl = 0;
																																																			:pid_60:cl = (z_11299 + z_12183 + z_15 + z_239 + z_4079 + z_5115 + z_5255 + z_8263 + z_91);
																																																			:pid_65:cl = (z_11299 + z_12183 + z_15 + z_239 + z_4079 + z_5115 + z_5255 + z_8263 + z_91);
																																																		}
																																																		EC:<Id:18049;Ev:0;H:50;W:14993>{ SC: ( ( pid_6:cp1 , pid_12:dp2 , pid_16:dp1 ) , ( pid_23:cp1 , pid_28:dp1 , pid_33:dp1 ) , ( pid_40:cp1 , pid_45:dp1 , pid_50:dp1 ) , ( pid_57:cp1 , pid_61:dp0 , pid_66:dp0 ) )
																					
																						
										EXE: { |;| (:pid_36 , run) (:pid_43 , run) 
	(:pid_45 , run) (:pid_45 , dp1_receiveDM_consistent) }
																					
																						
										TRACE: { |;| (:pid_36 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_12218 }) (:pid_45 , ${ input 
	inst::Trickle.Node.DataMsg [ 1 , 1 , 0 ] ${ + param::Trickle.Node.z_0 
	param::Trickle.Node.z_10516 param::Trickle.Node.z_11612 
	param::Trickle.Node.z_2408 param::Trickle.Node.z_3100 param::Trickle.Node.z_4220 
	param::Trickle.Node.z_6048 param::Trickle.Node.z_6412 param::Trickle.Node.z_9256 
	param::Trickle.Node.z_9348 param::Trickle.Node.z_9448 } } @ (z_10446 + z_12218 + 
	z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974)) }
																																																			/*FLAGS{ COVERAGE-ELEMENT }*/
																																																			INFO{
																																																				<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#2" as trace="tpid#2">
																																																			}
																																																			DATA{
																																																				:pid_36:my_buff[0].seq = 1;
																																																				:pid_36:my_buff[0].fragment = FRAGMENT_0;
																																																				:pid_36:my_buff[0].offset = 0;
																																																				:pid_36:firmware[0] = FRAGMENT_0;
																																																				:pid_36:myseq_buff[0] = 1;
																																																				:pid_36:$time = (z_10446 + z_12218 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974);
																																																				:pid_36:z = z_12218;
																																																				:pid_36:coverageProp = true;
																																																				:pid_36:localTime = (z_10446 + z_12218 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974);
																																																				:pid_36:localPC = ((t_1334 < 4) && (t_2878 < 8) && (t_434 < 4) && (t_13109 < 4) && (t_14231 < 4) && (t_14620 < 4) && (0 <= (t_1334 + -2)) && (0 <= (t_2878 + -4)) && (0 <= (t_434 + -2)) && (0 <= (t_13109 + -2)) && (0 <= (t_14231 + -2)) && (0 <= (t_14620 + -2)));
																																																				:pid_36:localPtC = (((z_7082 + z_7526) == 4) && (z_2834 == t_434) && (z_7082 == t_1334) && ((z_2834 + z_3422) < 4) && (z_10446 < t_14231) && (z_12218 < t_14620) && (z_8858 < t_13109) && ((z_0 + z_10516 + z_11612 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448) <= (z_10446 + z_12218 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974)) && ((z_0 + z_2408) <= (z_2834 + z_3422 + z_694)) && ((z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412) <= (z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858)) && ((z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448) <= (z_10446 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974)) && ((z_7082 + z_7526) > t_1334) && ($delta#initial > 0) && (z_10446 > 0) && (z_2834 > 0) && (z_3422 > 0) && (z_694 > 0) && (z_7082 > 0) && (z_7526 > 0) && (z_8586 > 0) && (z_8858 > 0) && (z_9974 > 0));
																																																				:pid_36:timeEmit = (z_0 + z_10516 + z_11612 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448);
																																																				:pid_37:cl = (z_10446 + z_12218 + z_8586 + z_8858 + z_9974);
																																																				:pid_43:c = 1;
																																																				:pid_43:consistent = true;
																																																				:pid_43:cl = z_12218;
																																																				:pid_43:d.seq = 1;
																																																				:pid_43:d.fragment = FRAGMENT_0;
																																																				:pid_43:d.offset = 0;
																																																				:pid_48:cl = (z_10446 + z_12218 + z_8858 + z_9974);
																																																			}
																																																			BUFFER{
																																																				:pid_36:bufferNode:<FIFO>#0{ }
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																											EC:<Id:15394;Ev:2697;H:43;W:12763>{ SC: ( ( pid_6:cp1 , pid_11:dp1 , pid_17:dp2 ) , ( pid_23:cp1 , pid_28:dp1 , pid_33:dp1 ) , ( pid_40:cp1 , pid_45:dp1 , pid_50:dp1 ) , ( pid_57:cp1 , pid_61:dp0 , pid_66:dp0 ) )
																					
																						
			EXE: { |;| (:pid_19 , run) (:pid_20 , run) (:pid_24 , run) (:pid_24 , 
	cp_resetTau) }
																					
																						
			TRACE: { |;| (:pid_19 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_10517 }) (:pid_24 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_4122 }) 
	}
																					
																						
			NC: ((t_4122 < 8) && (0 <= (t_4122 + -4)))
																																												PC: ((t_1042 < 4) && (t_1205 < 4) && (t_1334 < 4) && (t_171 < 8) && (t_18 < 4) && 
	(t_1985 < 8) && (t_2878 < 8) && (t_3652 < 4) && (t_4 < 4) && (t_4122 < 8) && 
	(t_434 < 4) && (t_660 < 4) && (t_10392 < 4) && (t_11000 < 4) && (t_13109 < 4) && 
	(t_13696 < 8) && (t_14231 < 4) && (t_14620 < 4) && (t_6456 < 4) && (t_7603 < 4) 
	&& (t_8365 < 4) && (0 <= (t_1042 + -2)) && (0 <= (t_1205 + -2)) && (0 <= (t_1334 
	+ -2)) && (0 <= (t_171 + -4)) && (0 <= (t_18 + -2)) && (0 <= (t_1985 + -4)) && 
	(0 <= (t_2878 + -4)) && (0 <= (t_3652 + -2)) && (0 <= (t_4 + -2)) && (0 <= 
	(t_4122 + -4)) && (0 <= (t_434 + -2)) && (0 <= (t_660 + -2)) && (0 <= (t_10392 + 
	-2)) && (0 <= (t_11000 + -2)) && (0 <= (t_13109 + -2)) && (0 <= (t_13696 + -4)) 
	&& (0 <= (t_14231 + -2)) && (0 <= (t_14620 + -2)) && (0 <= (t_6456 + -2)) && (0 
	<= (t_7603 + -2)) && (0 <= (t_8365 + -2)))
																																												DATA{
																																													:pid_19:$time = (z_10517 + z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689 + z_8025);
																																													:pid_19:z = z_10517;
																																													:pid_19:localTime = (z_10517 + z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689 + z_8025);
																																													:pid_19:localPC = ((t_1042 < 4) && (t_4122 < 8) && (t_660 < 4) && (t_11000 < 4) && (t_6456 < 4) && (t_8365 < 4) && (0 <= (t_1042 + -2)) && (0 <= (t_4122 + -4)) && (0 <= (t_660 + -2)) && (0 <= (t_11000 + -2)) && (0 <= (t_6456 + -2)) && (0 <= (t_8365 + -2)));
																																													:pid_19:localPtC = (((z_10517 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689 + z_8025) == 4) && ((z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689 + z_8025) == t_1042) && ((z_2157 + z_2617) < t_660) && ((z_3557 + z_3741) < t_1042) && ((z_3557 + z_3741 + z_4681 + z_5809) < t_1042) && ((z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689) < t_1042) && ((z_3741 + z_4681 + z_5809 + z_6537) < t_6456) && (z_2157 < t_660) && ((z_0 + z_2408) <= (z_1221 + z_2157 + z_2617)) && ((z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412) <= (z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537)) && ((z_15 + z_239 + z_4079 + z_91) <= (z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809)) && ((z_15 + z_91) <= (z_1221 + z_2157)) && ((z_2834 + z_3422 + z_694 + z_7082) <= (z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689)) && ((z_2834 + z_694) <= (z_1221 + z_2157 + z_2617 + z_3557 + z_3741)) && ((z_10517 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689 + z_8025) > t_1042) && ($delta#initial > 0) && (z_1221 > 0) && (z_2157 > 0) && (z_2617 > 0) && (z_3557 > 0) && (z_3741 > 0) && (z_4681 > 0) && (z_5809 > 0) && (z_6537 > 0) && (z_7689 > 0) && (z_8025 > 0));
																																													:pid_20:e = 1;
																																													:pid_20:tau = 8;
																																													:pid_20:t = t_4122;
																																													:pid_20:cl = 0;
																																													:pid_26:cl = (z_10517 + z_7689 + z_8025);
																																													:pid_31:cl = (z_10517 + z_5809 + z_6537 + z_7689 + z_8025);
																																												}
																																												EC:<Id:15796;Ev:2779;H:44;W:13099>{ SC: ( ( pid_6:cp1 , pid_11:dp1 , pid_17:dp2 ) , ( pid_23:cp1 , pid_28:dp1 , pid_33:dp1 ) , ( pid_40:cp1 , pid_45:dp1 , pid_50:dp1 ) , ( pid_57:cp1 , pid_61:dp0 , pid_66:dp0 ) )
																					
																						
				EXE: (:pid_36 , run)
																																													DATA{
																																														:pid_36:localPtC = (((z_7082 + z_7526) == 4) && (z_2834 == t_434) && (z_7082 == t_1334) && ((z_2834 + z_3422) < 4) && (z_10446 < t_14231) && (z_8858 < t_13109) && ((z_0 + z_2408) <= (z_2834 + z_3422 + z_694)) && ((z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412) <= (z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858)) && ((z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448) <= (z_10446 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974)) && ((z_7082 + z_7526) > t_1334) && ($delta#initial > 0) && (z_10446 > 0) && (z_2834 > 0) && (z_3422 > 0) && (z_694 > 0) && (z_7082 > 0) && (z_7526 > 0) && (z_8586 > 0) && (z_8858 > 0) && (z_9974 > 0));
																																													}
																																													EC:<Id:16293;Ev:2891;H:45;W:13514>{ SC: ( ( pid_6:cp1 , pid_11:dp1 , pid_17:dp2 ) , ( pid_23:cp1 , pid_28:dp1 , pid_33:dp1 ) , ( pid_40:cp1 , pid_45:dp1 , pid_50:dp1 ) , ( pid_57:cp1 , pid_61:dp0 , pid_66:dp0 ) )
																					
																						
					EXE: (:pid_36 , run)
																																														DATA{
																																															:pid_36:localPtC = (((z_7082 + z_7526) == 4) && (z_2834 == t_434) && (z_7082 == t_1334) && ((z_2834 + z_3422) < 4) && (z_10446 < t_14231) && (z_8858 < t_13109) && ((z_0 + z_2408) <= (z_2834 + z_3422 + z_694)) && ((z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412) <= (z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858)) && ((z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448) <= (z_10446 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974)) && ((z_7082 + z_7526) > t_1334) && ($delta#initial > 0) && (z_10446 > 0) && (z_2834 > 0) && (z_3422 > 0) && (z_694 > 0) && (z_7082 > 0) && (z_7526 > 0) && (z_8586 > 0) && (z_8858 > 0) && (z_9974 > 0));
																																														}
																																														EC:<Id:16965;Ev:2911;H:46;W:14074>{ SC: ( ( pid_6:cp1 , pid_11:dp1 , pid_17:dp2 ) , ( pid_23:cp1 , pid_28:dp1 , pid_33:dp1 ) , ( pid_40:cp1 , pid_45:dp1 , pid_50:dp1 ) , ( pid_57:cp1 , pid_61:dp0 , pid_66:dp0 ) )
																					
																						
						EXE: { |;| (:pid_19 , run) (:pid_31 , run) (:pid_33 , run) 
	(:pid_33 , dp1_receiveDM_consistent) }
																					
																						
						TRACE: { |;| (:pid_19 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_11557 }) (:pid_33 , ${ input inst::Trickle.Node.DataMsg [ 
	2 , 2 , 1 ] ${ + param::Trickle.Node.z_0 param::Trickle.Node.z_2408 
	param::Trickle.Node.z_3100 param::Trickle.Node.z_4220 param::Trickle.Node.z_6048 
	param::Trickle.Node.z_6412 param::Trickle.Node.z_9256 param::Trickle.Node.z_9348 
	param::Trickle.Node.z_9448 } } @ (z_10517 + z_11557 + z_1221 + z_2157 + z_2617 + 
	z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689 + z_8025)) }
																																															DATA{
																																																:pid_19:my_buff[1].seq = 2;
																																																:pid_19:my_buff[1].fragment = FRAGMENT_1;
																																																:pid_19:my_buff[1].offset = 1;
																																																:pid_19:firmware[1] = FRAGMENT_1;
																																																:pid_19:myseq_buff[1] = 1;
																																																:pid_19:$time = (z_10517 + z_11557 + z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689 + z_8025);
																																																:pid_19:z = z_11557;
																																																:pid_19:localTime = (z_10517 + z_11557 + z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689 + z_8025);
																																																:pid_19:localPC = ((t_1042 < 4) && (t_4122 < 8) && (t_660 < 4) && (t_11000 < 4) && (t_6456 < 4) && (t_8365 < 4) && (0 <= (t_1042 + -2)) && (0 <= (t_4122 + -4)) && (0 <= (t_660 + -2)) && (0 <= (t_11000 + -2)) && (0 <= (t_6456 + -2)) && (0 <= (t_8365 + -2)));
																																																:pid_19:localPtC = (((z_10517 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689 + z_8025) == 4) && ((z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689 + z_8025) == t_1042) && ((z_10517 + z_11557 + z_5809 + z_6537 + z_7689 + z_8025) < t_8365) && ((z_2157 + z_2617) < t_660) && ((z_3557 + z_3741) < t_1042) && ((z_3557 + z_3741 + z_4681 + z_5809) < t_1042) && ((z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689) < t_1042) && ((z_3741 + z_4681 + z_5809 + z_6537) < t_6456) && (z_2157 < t_660) && ((z_0 + z_2408) <= (z_1221 + z_2157 + z_2617)) && ((z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412) <= (z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537)) && ((z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448) <= (z_10517 + z_11557 + z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689 + z_8025)) && ((z_15 + z_239 + z_4079 + z_91) <= (z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809)) && ((z_15 + z_91) <= (z_1221 + z_2157)) && ((z_2834 + z_3422 + z_694 + z_7082) <= (z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689)) && ((z_2834 + z_694) <= (z_1221 + z_2157 + z_2617 + z_3557 + z_3741)) && ((z_10517 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689 + z_8025) > t_1042) && ($delta#initial > 0) && (z_10517 > 0) && (z_1221 > 0) && (z_2157 > 0) && (z_2617 > 0) && (z_3557 > 0) && (z_3741 > 0) && (z_4681 > 0) && (z_5809 > 0) && (z_6537 > 0) && (z_7689 > 0) && (z_8025 > 0));
																																																:pid_19:timeEmit = (z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448);
																																																:pid_20:cl = z_11557;
																																																:pid_26:cl = (z_10517 + z_11557 + z_7689 + z_8025);
																																																:pid_31:c = 1;
																																																:pid_31:consistent = true;
																																																:pid_31:cl = (z_10517 + z_11557 + z_5809 + z_6537 + z_7689 + z_8025);
																																																:pid_31:d.seq = 2;
																																																:pid_31:d.fragment = FRAGMENT_1;
																																																:pid_31:d.offset = 1;
																																															}
																																															BUFFER{
																																																:pid_19:bufferNode:<FIFO>#0{ }
																																															}
																																															EC:<Id:17090;Ev:2996;H:47;W:14179>{ SC: ( ( pid_6:cp1 , pid_12:dp2 , pid_17:dp2 ) , ( pid_23:cp1 , pid_28:dp1 , pid_33:dp1 ) , ( pid_40:cp1 , pid_45:dp1 , pid_50:dp1 ) , ( pid_57:cp1 , pid_61:dp0 , pid_66:dp0 ) )
																					
																						
							EXE: { |;| (:pid_2 , run) (:pid_9 , run) (:pid_11 , run) 
	(:pid_11 , dp_sendDM) }
																					
																						
							TRACE: { |;| (:pid_2 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_11636 }) (:pid_11 , ${ output inst::Trickle.Node.DataMsg [ 
	1 , 1 , 0 ] ${ + param::Trickle.Node.z_0 param::Trickle.Node.z_11636 
	param::Trickle.Node.z_2408 param::Trickle.Node.z_3100 param::Trickle.Node.z_4220 
	param::Trickle.Node.z_6048 param::Trickle.Node.z_6412 param::Trickle.Node.z_9256 
	param::Trickle.Node.z_9348 param::Trickle.Node.z_9448 } } @ (z_0 + z_11636 + 
	z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448)) }
																																																DATA{
																																																	:pid_2:$time = (z_0 + z_11636 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448);
																																																	:pid_2:z = z_11636;
																																																	:pid_2:localTime = (z_0 + z_11636 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448);
																																																	:pid_2:localPC = ((t_1205 < 4) && (t_3652 < 4) && (t_4 < 4) && (t_10392 < 4) && (t_13696 < 8) && (t_7603 < 4) && (0 <= (t_1205 + -2)) && (0 <= (t_3652 + -2)) && (0 <= (t_4 + -2)) && (0 <= (t_10392 + -2)) && (0 <= (t_13696 + -4)) && (0 <= (t_7603 + -2)));
																																																	:pid_2:localPtC = (((z_11636 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448) == t_7603) && ((z_6412 + z_9256 + z_9348) == 4) && (z_2408 == t_4) && (z_6412 == t_10392) && (z_9448 == t_13696) && ((z_2408 + z_3100) < 4) && ((z_4220 + z_6048 + z_6412 + z_9256) < t_1205) && ((z_2834 + z_3422 + z_694 + z_7082) <= (z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256)) && ((z_2834 + z_694) <= (z_0 + z_2408 + z_3100)) && ((z_6412 + z_9256 + z_9348) > t_10392) && ($delta#initial > 0) && (z_0 > 0) && (z_2408 > 0) && (z_3100 > 0) && (z_4220 > 0) && (z_6048 > 0) && (z_6412 > 0) && (z_9256 > 0) && (z_9348 > 0) && (z_9448 > 0));
																																																	:pid_3:cl = (z_11636 + z_9348 + z_9448);
																																																	:pid_9:cl = (z_11636 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448);
																																																	:pid_14:cl = (z_11636 + z_9448);
																																																}
																																																BUFFER{
																																																	:pid_19:bufferNode:<FIFO>#0{
																																																		:pid_2:DataMsg([ 1 , 1 , 0 ] , (z_0 + z_11636 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448));
																																																	}
																																																	:pid_36:bufferNode:<FIFO>#0{
																																																		:pid_2:DataMsg([ 1 , 1 , 0 ] , (z_0 + z_11636 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448));
																																																	}
																																																}
																																																EC:<Id:17640;Ev:3048;H:48;W:14644>{ SC: ( ( pid_6:cp1 , pid_12:dp2 , pid_17:dp2 ) , ( pid_23:cp1 , pid_28:dp1 , pid_33:dp1 ) , ( pid_40:cp1 , pid_45:dp1 , pid_50:dp1 ) , ( pid_57:cp1 , pid_61:dp0 , pid_66:dp0 ) )
																					
																						
								EXE: { |;| (:pid_19 , run) (:pid_26 , run) (:pid_28 
	, run) (:pid_28 , dp1_receiveDM_consistent) }
																					
																						
								TRACE: { |;| (:pid_19 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_11977 }) (:pid_28 , ${ input 
	inst::Trickle.Node.DataMsg [ 1 , 1 , 0 ] ${ + param::Trickle.Node.z_0 
	param::Trickle.Node.z_11636 param::Trickle.Node.z_2408 
	param::Trickle.Node.z_3100 param::Trickle.Node.z_4220 param::Trickle.Node.z_6048 
	param::Trickle.Node.z_6412 param::Trickle.Node.z_9256 param::Trickle.Node.z_9348 
	param::Trickle.Node.z_9448 } } @ (z_10517 + z_11557 + z_11977 + z_1221 + z_2157 
	+ z_2617 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689 + z_8025)) }
																																																	/*FLAGS{ COVERAGE-ELEMENT }*/
																																																	INFO{
																																																		<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#1" as trace="tpid#1">
																																																	}
																																																	DATA{
																																																		:pid_19:my_buff[0].seq = 1;
																																																		:pid_19:my_buff[0].fragment = FRAGMENT_0;
																																																		:pid_19:my_buff[0].offset = 0;
																																																		:pid_19:firmware[0] = FRAGMENT_0;
																																																		:pid_19:myseq_buff[0] = 1;
																																																		:pid_19:$time = (z_10517 + z_11557 + z_11977 + z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689 + z_8025);
																																																		:pid_19:z = z_11977;
																																																		:pid_19:coverageProp = true;
																																																		:pid_19:localTime = (z_10517 + z_11557 + z_11977 + z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689 + z_8025);
																																																		:pid_19:localPC = ((t_1042 < 4) && (t_4122 < 8) && (t_660 < 4) && (t_11000 < 4) && (t_6456 < 4) && (t_8365 < 4) && (0 <= (t_1042 + -2)) && (0 <= (t_4122 + -4)) && (0 <= (t_660 + -2)) && (0 <= (t_11000 + -2)) && (0 <= (t_6456 + -2)) && (0 <= (t_8365 + -2)));
																																																		:pid_19:localPtC = (((z_10517 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689 + z_8025) == 4) && ((z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689 + z_8025) == t_1042) && ((z_10517 + z_11557 + z_11977 + z_7689 + z_8025) < t_11000) && ((z_10517 + z_11557 + z_5809 + z_6537 + z_7689 + z_8025) < t_8365) && ((z_2157 + z_2617) < t_660) && ((z_3557 + z_3741) < t_1042) && ((z_3557 + z_3741 + z_4681 + z_5809) < t_1042) && ((z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689) < t_1042) && ((z_3741 + z_4681 + z_5809 + z_6537) < t_6456) && (z_2157 < t_660) && ((z_0 + z_11636 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448) <= (z_10517 + z_11557 + z_11977 + z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689 + z_8025)) && ((z_0 + z_2408) <= (z_1221 + z_2157 + z_2617)) && ((z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412) <= (z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537)) && ((z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448) <= (z_10517 + z_11557 + z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689 + z_8025)) && ((z_15 + z_239 + z_4079 + z_91) <= (z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809)) && ((z_15 + z_91) <= (z_1221 + z_2157)) && ((z_2834 + z_3422 + z_694 + z_7082) <= (z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689)) && ((z_2834 + z_694) <= (z_1221 + z_2157 + z_2617 + z_3557 + z_3741)) && ((z_10517 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689 + z_8025) > t_1042) && ($delta#initial > 0) && (z_10517 > 0) && (z_11557 > 0) && (z_1221 > 0) && (z_2157 > 0) && (z_2617 > 0) && (z_3557 > 0) && (z_3741 > 0) && (z_4681 > 0) && (z_5809 > 0) && (z_6537 > 0) && (z_7689 > 0) && (z_8025 > 0));
																																																		:pid_19:timeEmit = (z_0 + z_11636 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448);
																																																		:pid_20:cl = (z_11557 + z_11977);
																																																		:pid_26:c = 1;
																																																		:pid_26:consistent = true;
																																																		:pid_26:cl = (z_10517 + z_11557 + z_11977 + z_7689 + z_8025);
																																																		:pid_26:d.seq = 1;
																																																		:pid_26:d.fragment = FRAGMENT_0;
																																																		:pid_26:d.offset = 0;
																																																		:pid_31:cl = (z_10517 + z_11557 + z_11977 + z_5809 + z_6537 + z_7689 + z_8025);
																																																	}
																																																	BUFFER{
																																																		:pid_19:bufferNode:<FIFO>#0{ }
																																																	}
																																																	EC:<Id:17975;Ev:3057;H:49;W:14644>{ SC: ( ( pid_6:cp1 , pid_12:dp2 , pid_16:dp1 ) , ( pid_23:cp1 , pid_28:dp1 , pid_33:dp1 ) , ( pid_40:cp1 , pid_45:dp1 , pid_50:dp1 ) , ( pid_57:cp1 , pid_61:dp0 , pid_66:dp0 ) )
																					
																						
									EXE: { |;| (:pid_2 , run) (:pid_14 , run) 
	(:pid_17 , run) (:pid_17 , dp_resetTau) }
																					
																						
									TRACE: { |;| (:pid_2 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_12184 }) (:pid_17 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_15958 }) }
																					
																						
									NC: ((t_15958 < 8) && (0 <= (t_15958 + -4)))
																																																		PC: ((t_1042 < 4) && (t_1205 < 4) && (t_1334 < 4) && (t_171 < 8) && (t_18 < 4) && 
	(t_1985 < 8) && (t_2878 < 8) && (t_3652 < 4) && (t_4 < 4) && (t_4122 < 8) && 
	(t_434 < 4) && (t_660 < 4) && (t_10392 < 4) && (t_11000 < 4) && (t_13109 < 4) && 
	(t_13696 < 8) && (t_14231 < 4) && (t_14620 < 4) && (t_15958 < 8) && (t_6456 < 4) 
	&& (t_7603 < 4) && (t_8365 < 4) && (0 <= (t_1042 + -2)) && (0 <= (t_1205 + -2)) 
	&& (0 <= (t_1334 + -2)) && (0 <= (t_171 + -4)) && (0 <= (t_18 + -2)) && (0 <= 
	(t_1985 + -4)) && (0 <= (t_2878 + -4)) && (0 <= (t_3652 + -2)) && (0 <= (t_4 + 
	-2)) && (0 <= (t_4122 + -4)) && (0 <= (t_434 + -2)) && (0 <= (t_660 + -2)) && (0 
	<= (t_10392 + -2)) && (0 <= (t_11000 + -2)) && (0 <= (t_13109 + -2)) && (0 <= 
	(t_13696 + -4)) && (0 <= (t_14231 + -2)) && (0 <= (t_14620 + -2)) && (0 <= 
	(t_15958 + -4)) && (0 <= (t_6456 + -2)) && (0 <= (t_7603 + -2)) && (0 <= (t_8365 
	+ -2)))
																																																		DATA{
																																																			:pid_2:$time = (z_0 + z_11636 + z_12184 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448);
																																																			:pid_2:z = z_12184;
																																																			:pid_2:localTime = (z_0 + z_11636 + z_12184 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448);
																																																			:pid_2:localPC = ((t_1205 < 4) && (t_3652 < 4) && (t_4 < 4) && (t_10392 < 4) && (t_13696 < 8) && (t_15958 < 8) && (t_7603 < 4) && (0 <= (t_1205 + -2)) && (0 <= (t_3652 + -2)) && (0 <= (t_4 + -2)) && (0 <= (t_10392 + -2)) && (0 <= (t_13696 + -4)) && (0 <= (t_15958 + -4)) && (0 <= (t_7603 + -2)));
																																																			:pid_2:localPtC = (((z_11636 + z_12184 + z_9448) == 8) && ((z_11636 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448) == t_7603) && ((z_6412 + z_9256 + z_9348) == 4) && (z_2408 == t_4) && (z_6412 == t_10392) && (z_9448 == t_13696) && ((z_2408 + z_3100) < 4) && ((z_4220 + z_6048 + z_6412 + z_9256) < t_1205) && ((z_2834 + z_3422 + z_694 + z_7082) <= (z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256)) && ((z_2834 + z_694) <= (z_0 + z_2408 + z_3100)) && ((z_11636 + z_12184 + z_9448) > t_13696) && ((z_6412 + z_9256 + z_9348) > t_10392) && ($delta#initial > 0) && (z_0 > 0) && (z_11636 > 0) && (z_2408 > 0) && (z_3100 > 0) && (z_4220 > 0) && (z_6048 > 0) && (z_6412 > 0) && (z_9256 > 0) && (z_9348 > 0) && (z_9448 > 0));
																																																			:pid_3:cl = (z_11636 + z_12184 + z_9348 + z_9448);
																																																			:pid_9:cl = (z_11636 + z_12184 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448);
																																																			:pid_14:e = 2;
																																																			:pid_14:tau = 8;
																																																			:pid_14:t = t_15958;
																																																			:pid_14:cl = 0;
																																																		}
																																																		EC:<Id:18057;Ev:0;H:50;W:15000>{ SC: ( ( pid_6:cp1 , pid_12:dp2 , pid_16:dp1 ) , ( pid_23:cp1 , pid_28:dp1 , pid_33:dp1 ) , ( pid_40:cp1 , pid_45:dp1 , pid_50:dp1 ) , ( pid_57:cp1 , pid_61:dp0 , pid_66:dp0 ) )
																					
																						
										EXE: { |;| (:pid_36 , run) (:pid_43 , run) 
	(:pid_45 , run) (:pid_45 , dp1_receiveDM_consistent) }
																					
																						
										TRACE: { |;| (:pid_36 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_12222 }) (:pid_45 , ${ input 
	inst::Trickle.Node.DataMsg [ 1 , 1 , 0 ] ${ + param::Trickle.Node.z_0 
	param::Trickle.Node.z_11636 param::Trickle.Node.z_2408 
	param::Trickle.Node.z_3100 param::Trickle.Node.z_4220 param::Trickle.Node.z_6048 
	param::Trickle.Node.z_6412 param::Trickle.Node.z_9256 param::Trickle.Node.z_9348 
	param::Trickle.Node.z_9448 } } @ (z_10446 + z_12222 + z_2834 + z_3422 + z_694 + 
	z_7082 + z_7526 + z_8586 + z_8858 + z_9974)) }
																																																			/*FLAGS{ COVERAGE-ELEMENT }*/
																																																			INFO{
																																																				<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#2" as trace="tpid#2">
																																																			}
																																																			DATA{
																																																				:pid_36:my_buff[0].seq = 1;
																																																				:pid_36:my_buff[0].fragment = FRAGMENT_0;
																																																				:pid_36:my_buff[0].offset = 0;
																																																				:pid_36:firmware[0] = FRAGMENT_0;
																																																				:pid_36:myseq_buff[0] = 1;
																																																				:pid_36:$time = (z_10446 + z_12222 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974);
																																																				:pid_36:z = z_12222;
																																																				:pid_36:coverageProp = true;
																																																				:pid_36:localTime = (z_10446 + z_12222 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974);
																																																				:pid_36:localPC = ((t_1334 < 4) && (t_2878 < 8) && (t_434 < 4) && (t_13109 < 4) && (t_14231 < 4) && (t_14620 < 4) && (0 <= (t_1334 + -2)) && (0 <= (t_2878 + -4)) && (0 <= (t_434 + -2)) && (0 <= (t_13109 + -2)) && (0 <= (t_14231 + -2)) && (0 <= (t_14620 + -2)));
																																																				:pid_36:localPtC = (((z_7082 + z_7526) == 4) && (z_2834 == t_434) && (z_7082 == t_1334) && ((z_2834 + z_3422) < 4) && (z_10446 < t_14231) && (z_12222 < t_14620) && (z_8858 < t_13109) && ((z_0 + z_11636 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448) <= (z_10446 + z_12222 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974)) && ((z_0 + z_2408) <= (z_2834 + z_3422 + z_694)) && ((z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412) <= (z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858)) && ((z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448) <= (z_10446 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974)) && ((z_7082 + z_7526) > t_1334) && ($delta#initial > 0) && (z_10446 > 0) && (z_2834 > 0) && (z_3422 > 0) && (z_694 > 0) && (z_7082 > 0) && (z_7526 > 0) && (z_8586 > 0) && (z_8858 > 0) && (z_9974 > 0));
																																																				:pid_36:timeEmit = (z_0 + z_11636 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448);
																																																				:pid_37:cl = (z_10446 + z_12222 + z_8586 + z_8858 + z_9974);
																																																				:pid_43:c = 1;
																																																				:pid_43:consistent = true;
																																																				:pid_43:cl = z_12222;
																																																				:pid_43:d.seq = 1;
																																																				:pid_43:d.fragment = FRAGMENT_0;
																																																				:pid_43:d.offset = 0;
																																																				:pid_48:cl = (z_10446 + z_12222 + z_8858 + z_9974);
																																																			}
																																																			BUFFER{
																																																				:pid_36:bufferNode:<FIFO>#0{ }
																																																			}
																																																		}
																																																	}
																																																	EC:<Id:17976;Ev:3058;H:49;W:14928>{ SC: ( ( pid_6:cp1 , pid_11:dp1 , pid_17:dp2 ) , ( pid_23:cp1 , pid_28:dp1 , pid_33:dp1 ) , ( pid_40:cp1 , pid_45:dp1 , pid_50:dp1 ) , ( pid_57:cp1 , pid_61:dp0 , pid_66:dp0 ) )
																					
																						
									EXE: { |;| (:pid_2 , run) (:pid_9 , run) 
	(:pid_12 , run) (:pid_12 , dp_resetTau) }
																					
																						
									TRACE: { |;| (:pid_2 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_12184 }) (:pid_12 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_15957 }) }
																					
																						
									NC: ((t_15957 < 8) && (0 <= (t_15957 + -4)))
																																																		PC: ((t_1042 < 4) && (t_1205 < 4) && (t_1334 < 4) && (t_171 < 8) && (t_18 < 4) && 
	(t_1985 < 8) && (t_2878 < 8) && (t_3652 < 4) && (t_4 < 4) && (t_4122 < 8) && 
	(t_434 < 4) && (t_660 < 4) && (t_10392 < 4) && (t_11000 < 4) && (t_13109 < 4) && 
	(t_13696 < 8) && (t_14231 < 4) && (t_14620 < 4) && (t_15957 < 8) && (t_6456 < 4) 
	&& (t_7603 < 4) && (t_8365 < 4) && (0 <= (t_1042 + -2)) && (0 <= (t_1205 + -2)) 
	&& (0 <= (t_1334 + -2)) && (0 <= (t_171 + -4)) && (0 <= (t_18 + -2)) && (0 <= 
	(t_1985 + -4)) && (0 <= (t_2878 + -4)) && (0 <= (t_3652 + -2)) && (0 <= (t_4 + 
	-2)) && (0 <= (t_4122 + -4)) && (0 <= (t_434 + -2)) && (0 <= (t_660 + -2)) && (0 
	<= (t_10392 + -2)) && (0 <= (t_11000 + -2)) && (0 <= (t_13109 + -2)) && (0 <= 
	(t_13696 + -4)) && (0 <= (t_14231 + -2)) && (0 <= (t_14620 + -2)) && (0 <= 
	(t_15957 + -4)) && (0 <= (t_6456 + -2)) && (0 <= (t_7603 + -2)) && (0 <= (t_8365 
	+ -2)))
																																																		DATA{
																																																			:pid_2:$time = (z_0 + z_11636 + z_12184 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448);
																																																			:pid_2:z = z_12184;
																																																			:pid_2:localTime = (z_0 + z_11636 + z_12184 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448);
																																																			:pid_2:localPC = ((t_1205 < 4) && (t_3652 < 4) && (t_4 < 4) && (t_10392 < 4) && (t_13696 < 8) && (t_15957 < 8) && (t_7603 < 4) && (0 <= (t_1205 + -2)) && (0 <= (t_3652 + -2)) && (0 <= (t_4 + -2)) && (0 <= (t_10392 + -2)) && (0 <= (t_13696 + -4)) && (0 <= (t_15957 + -4)) && (0 <= (t_7603 + -2)));
																																																			:pid_2:localPtC = (((z_11636 + z_12184 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448) == 4) && ((z_11636 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448) == t_7603) && ((z_6412 + z_9256 + z_9348) == 4) && (z_2408 == t_4) && (z_6412 == t_10392) && (z_9448 == t_13696) && ((z_2408 + z_3100) < 4) && ((z_4220 + z_6048 + z_6412 + z_9256) < t_1205) && ((z_2834 + z_3422 + z_694 + z_7082) <= (z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256)) && ((z_2834 + z_694) <= (z_0 + z_2408 + z_3100)) && ((z_11636 + z_12184 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448) > t_7603) && ((z_6412 + z_9256 + z_9348) > t_10392) && ($delta#initial > 0) && (z_0 > 0) && (z_11636 > 0) && (z_2408 > 0) && (z_3100 > 0) && (z_4220 > 0) && (z_6048 > 0) && (z_6412 > 0) && (z_9256 > 0) && (z_9348 > 0) && (z_9448 > 0));
																																																			:pid_3:cl = (z_11636 + z_12184 + z_9348 + z_9448);
																																																			:pid_9:e = 1;
																																																			:pid_9:tau = 8;
																																																			:pid_9:t = t_15957;
																																																			:pid_9:cl = 0;
																																																			:pid_14:cl = (z_11636 + z_12184 + z_9448);
																																																		}
																																																		EC:<Id:18064;Ev:0;H:50;W:15006>{ SC: ( ( pid_6:cp1 , pid_11:dp1 , pid_17:dp2 ) , ( pid_23:cp1 , pid_28:dp1 , pid_33:dp1 ) , ( pid_40:cp1 , pid_45:dp1 , pid_50:dp1 ) , ( pid_57:cp1 , pid_61:dp0 , pid_66:dp0 ) )
																					
																						
										EXE: { |;| (:pid_36 , run) (:pid_43 , run) 
	(:pid_45 , run) (:pid_45 , dp1_receiveDM_consistent) }
																					
																						
										TRACE: { |;| (:pid_36 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_12226 }) (:pid_45 , ${ input 
	inst::Trickle.Node.DataMsg [ 1 , 1 , 0 ] ${ + param::Trickle.Node.z_0 
	param::Trickle.Node.z_11636 param::Trickle.Node.z_2408 
	param::Trickle.Node.z_3100 param::Trickle.Node.z_4220 param::Trickle.Node.z_6048 
	param::Trickle.Node.z_6412 param::Trickle.Node.z_9256 param::Trickle.Node.z_9348 
	param::Trickle.Node.z_9448 } } @ (z_10446 + z_12226 + z_2834 + z_3422 + z_694 + 
	z_7082 + z_7526 + z_8586 + z_8858 + z_9974)) }
																																																			/*FLAGS{ COVERAGE-ELEMENT }*/
																																																			INFO{
																																																				<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#2" as trace="tpid#2">
																																																			}
																																																			DATA{
																																																				:pid_36:my_buff[0].seq = 1;
																																																				:pid_36:my_buff[0].fragment = FRAGMENT_0;
																																																				:pid_36:my_buff[0].offset = 0;
																																																				:pid_36:firmware[0] = FRAGMENT_0;
																																																				:pid_36:myseq_buff[0] = 1;
																																																				:pid_36:$time = (z_10446 + z_12226 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974);
																																																				:pid_36:z = z_12226;
																																																				:pid_36:coverageProp = true;
																																																				:pid_36:localTime = (z_10446 + z_12226 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974);
																																																				:pid_36:localPC = ((t_1334 < 4) && (t_2878 < 8) && (t_434 < 4) && (t_13109 < 4) && (t_14231 < 4) && (t_14620 < 4) && (0 <= (t_1334 + -2)) && (0 <= (t_2878 + -4)) && (0 <= (t_434 + -2)) && (0 <= (t_13109 + -2)) && (0 <= (t_14231 + -2)) && (0 <= (t_14620 + -2)));
																																																				:pid_36:localPtC = (((z_7082 + z_7526) == 4) && (z_2834 == t_434) && (z_7082 == t_1334) && ((z_2834 + z_3422) < 4) && (z_10446 < t_14231) && (z_12226 < t_14620) && (z_8858 < t_13109) && ((z_0 + z_11636 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448) <= (z_10446 + z_12226 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974)) && ((z_0 + z_2408) <= (z_2834 + z_3422 + z_694)) && ((z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412) <= (z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858)) && ((z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448) <= (z_10446 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974)) && ((z_7082 + z_7526) > t_1334) && ($delta#initial > 0) && (z_10446 > 0) && (z_2834 > 0) && (z_3422 > 0) && (z_694 > 0) && (z_7082 > 0) && (z_7526 > 0) && (z_8586 > 0) && (z_8858 > 0) && (z_9974 > 0));
																																																				:pid_36:timeEmit = (z_0 + z_11636 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448);
																																																				:pid_37:cl = (z_10446 + z_12226 + z_8586 + z_8858 + z_9974);
																																																				:pid_43:c = 1;
																																																				:pid_43:consistent = true;
																																																				:pid_43:cl = z_12226;
																																																				:pid_43:d.seq = 1;
																																																				:pid_43:d.fragment = FRAGMENT_0;
																																																				:pid_43:d.offset = 0;
																																																				:pid_48:cl = (z_10446 + z_12226 + z_8858 + z_9974);
																																																			}
																																																			BUFFER{
																																																				:pid_36:bufferNode:<FIFO>#0{ }
																																																			}
																																																		}
																																																	}
																																																	EC:<Id:17977;Ev:3059;H:49;W:14929>{ SC: ( ( pid_6:cp1 , pid_12:dp2 , pid_17:dp2 ) , ( pid_24:cp2 , pid_28:dp1 , pid_33:dp1 ) , ( pid_40:cp1 , pid_45:dp1 , pid_50:dp1 ) , ( pid_57:cp1 , pid_61:dp0 , pid_66:dp0 ) )
																					
																						
									EXE: { |;| (:pid_19 , run) (:pid_20 , run) 
	(:pid_23 , run) (:pid_23 , cp1_reach_k) }
																					
																						
									TRACE: (:pid_19 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_12185 })
																																																		DATA{
																																																			:pid_19:$time = (z_10517 + z_11557 + z_11977 + z_12185 + z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689 + z_8025);
																																																			:pid_19:z = z_12185;
																																																			:pid_19:localTime = (z_10517 + z_11557 + z_11977 + z_12185 + z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689 + z_8025);
																																																			:pid_19:localPC = ((t_1042 < 4) && (t_4122 < 8) && (t_660 < 4) && (t_11000 < 4) && (t_6456 < 4) && (t_8365 < 4) && (0 <= (t_1042 + -2)) && (0 <= (t_4122 + -4)) && (0 <= (t_660 + -2)) && (0 <= (t_11000 + -2)) && (0 <= (t_6456 + -2)) && (0 <= (t_8365 + -2)));
																																																			:pid_19:localPtC = (((z_10517 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689 + z_8025) == 4) && ((z_11557 + z_11977 + z_12185) == t_4122) && ((z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689 + z_8025) == t_1042) && ((z_10517 + z_11557 + z_11977 + z_7689 + z_8025) < t_11000) && ((z_10517 + z_11557 + z_5809 + z_6537 + z_7689 + z_8025) < t_8365) && ((z_2157 + z_2617) < t_660) && ((z_3557 + z_3741) < t_1042) && ((z_3557 + z_3741 + z_4681 + z_5809) < t_1042) && ((z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689) < t_1042) && ((z_3741 + z_4681 + z_5809 + z_6537) < t_6456) && (z_2157 < t_660) && ((z_0 + z_11636 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448) <= (z_10517 + z_11557 + z_11977 + z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689 + z_8025)) && ((z_0 + z_2408) <= (z_1221 + z_2157 + z_2617)) && ((z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412) <= (z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537)) && ((z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448) <= (z_10517 + z_11557 + z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689 + z_8025)) && ((z_15 + z_239 + z_4079 + z_91) <= (z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809)) && ((z_15 + z_91) <= (z_1221 + z_2157)) && ((z_2834 + z_3422 + z_694 + z_7082) <= (z_1221 + z_2157 + z_2617 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689)) && ((z_2834 + z_694) <= (z_1221 + z_2157 + z_2617 + z_3557 + z_3741)) && ((z_10517 + z_3557 + z_3741 + z_4681 + z_5809 + z_6537 + z_7689 + z_8025) > t_1042) && ($delta#initial > 0) && (z_10517 > 0) && (z_11557 > 0) && (z_11977 > 0) && (z_1221 > 0) && (z_2157 > 0) && (z_2617 > 0) && (z_3557 > 0) && (z_3741 > 0) && (z_4681 > 0) && (z_5809 > 0) && (z_6537 > 0) && (z_7689 > 0) && (z_8025 > 0));
																																																			:pid_20:cl = (z_11557 + z_11977 + z_12185);
																																																			:pid_26:cl = (z_10517 + z_11557 + z_11977 + z_12185 + z_7689 + z_8025);
																																																			:pid_31:cl = (z_10517 + z_11557 + z_11977 + z_12185 + z_5809 + z_6537 + z_7689 + z_8025);
																																																		}
																																																		EC:<Id:18072;Ev:0;H:50;W:15013>{ SC: ( ( pid_6:cp1 , pid_12:dp2 , pid_17:dp2 ) , ( pid_24:cp2 , pid_28:dp1 , pid_33:dp1 ) , ( pid_40:cp1 , pid_45:dp1 , pid_50:dp1 ) , ( pid_57:cp1 , pid_61:dp0 , pid_66:dp0 ) )
																					
																						
										EXE: { |;| (:pid_36 , run) (:pid_43 , run) 
	(:pid_45 , run) (:pid_45 , dp1_receiveDM_consistent) }
																					
																						
										TRACE: { |;| (:pid_36 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_12230 }) (:pid_45 , ${ input 
	inst::Trickle.Node.DataMsg [ 1 , 1 , 0 ] ${ + param::Trickle.Node.z_0 
	param::Trickle.Node.z_11636 param::Trickle.Node.z_2408 
	param::Trickle.Node.z_3100 param::Trickle.Node.z_4220 param::Trickle.Node.z_6048 
	param::Trickle.Node.z_6412 param::Trickle.Node.z_9256 param::Trickle.Node.z_9348 
	param::Trickle.Node.z_9448 } } @ (z_10446 + z_12230 + z_2834 + z_3422 + z_694 + 
	z_7082 + z_7526 + z_8586 + z_8858 + z_9974)) }
																																																			/*FLAGS{ COVERAGE-ELEMENT }*/
																																																			INFO{
																																																				<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#2" as trace="tpid#2">
																																																			}
																																																			DATA{
																																																				:pid_36:my_buff[0].seq = 1;
																																																				:pid_36:my_buff[0].fragment = FRAGMENT_0;
																																																				:pid_36:my_buff[0].offset = 0;
																																																				:pid_36:firmware[0] = FRAGMENT_0;
																																																				:pid_36:myseq_buff[0] = 1;
																																																				:pid_36:$time = (z_10446 + z_12230 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974);
																																																				:pid_36:z = z_12230;
																																																				:pid_36:coverageProp = true;
																																																				:pid_36:localTime = (z_10446 + z_12230 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974);
																																																				:pid_36:localPC = ((t_1334 < 4) && (t_2878 < 8) && (t_434 < 4) && (t_13109 < 4) && (t_14231 < 4) && (t_14620 < 4) && (0 <= (t_1334 + -2)) && (0 <= (t_2878 + -4)) && (0 <= (t_434 + -2)) && (0 <= (t_13109 + -2)) && (0 <= (t_14231 + -2)) && (0 <= (t_14620 + -2)));
																																																				:pid_36:localPtC = (((z_7082 + z_7526) == 4) && (z_2834 == t_434) && (z_7082 == t_1334) && ((z_2834 + z_3422) < 4) && (z_10446 < t_14231) && (z_12230 < t_14620) && (z_8858 < t_13109) && ((z_0 + z_11636 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448) <= (z_10446 + z_12230 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974)) && ((z_0 + z_2408) <= (z_2834 + z_3422 + z_694)) && ((z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412) <= (z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858)) && ((z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448) <= (z_10446 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974)) && ((z_7082 + z_7526) > t_1334) && ($delta#initial > 0) && (z_10446 > 0) && (z_2834 > 0) && (z_3422 > 0) && (z_694 > 0) && (z_7082 > 0) && (z_7526 > 0) && (z_8586 > 0) && (z_8858 > 0) && (z_9974 > 0));
																																																				:pid_36:timeEmit = (z_0 + z_11636 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448);
																																																				:pid_37:cl = (z_10446 + z_12230 + z_8586 + z_8858 + z_9974);
																																																				:pid_43:c = 1;
																																																				:pid_43:consistent = true;
																																																				:pid_43:cl = z_12230;
																																																				:pid_43:d.seq = 1;
																																																				:pid_43:d.fragment = FRAGMENT_0;
																																																				:pid_43:d.offset = 0;
																																																				:pid_48:cl = (z_10446 + z_12230 + z_8858 + z_9974);
																																																			}
																																																			BUFFER{
																																																				:pid_36:bufferNode:<FIFO>#0{ }
																																																			}
																																																		}
																																																	}
																																																	EC:<Id:17978;Ev:3060;H:49;W:14930>{ SC: ( ( pid_6:cp1 , pid_12:dp2 , pid_17:dp2 ) , ( pid_23:cp1 , pid_28:dp1 , pid_33:dp1 ) , ( pid_40:cp1 , pid_45:dp1 , pid_51:dp2 ) , ( pid_57:cp1 , pid_61:dp0 , pid_66:dp0 ) )
																					
																						
									EXE: { |;| (:pid_36 , run) (:pid_48 , run) 
	(:pid_50 , run) (:pid_50 , dp_sendDM) }
																					
																						
									TRACE: { |;| (:pid_36 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_12186 }) (:pid_50 , ${ output 
	inst::Trickle.Node.DataMsg [ 2 , 2 , 1 ] ${ + param::Trickle.Node.z_10446 
	param::Trickle.Node.z_12186 param::Trickle.Node.z_2834 
	param::Trickle.Node.z_3422 param::Trickle.Node.z_694 param::Trickle.Node.z_7082 
	param::Trickle.Node.z_7526 param::Trickle.Node.z_8586 param::Trickle.Node.z_8858 
	param::Trickle.Node.z_9974 } } @ (z_10446 + z_12186 + z_2834 + z_3422 + z_694 + 
	z_7082 + z_7526 + z_8586 + z_8858 + z_9974)) }
																																																		DATA{
																																																			:pid_36:$time = (z_10446 + z_12186 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974);
																																																			:pid_36:z = z_12186;
																																																			:pid_36:localTime = (z_10446 + z_12186 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974);
																																																			:pid_36:localPC = ((t_1334 < 4) && (t_2878 < 8) && (t_434 < 4) && (t_13109 < 4) && (t_14231 < 4) && (t_14620 < 4) && (0 <= (t_1334 + -2)) && (0 <= (t_2878 + -4)) && (0 <= (t_434 + -2)) && (0 <= (t_13109 + -2)) && (0 <= (t_14231 + -2)) && (0 <= (t_14620 + -2)));
																																																			:pid_36:localPtC = (((z_10446 + z_12186 + z_8858 + z_9974) == t_13109) && ((z_7082 + z_7526) == 4) && (z_2834 == t_434) && (z_7082 == t_1334) && ((z_2834 + z_3422) < 4) && (z_10446 < t_14231) && (z_8858 < t_13109) && ((z_0 + z_2408) <= (z_2834 + z_3422 + z_694)) && ((z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412) <= (z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858)) && ((z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448) <= (z_10446 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974)) && ((z_7082 + z_7526) > t_1334) && ($delta#initial > 0) && (z_10446 > 0) && (z_2834 > 0) && (z_3422 > 0) && (z_694 > 0) && (z_7082 > 0) && (z_7526 > 0) && (z_8586 > 0) && (z_8858 > 0) && (z_9974 > 0));
																																																			:pid_37:cl = (z_10446 + z_12186 + z_8586 + z_8858 + z_9974);
																																																			:pid_43:cl = z_12186;
																																																			:pid_48:cl = (z_10446 + z_12186 + z_8858 + z_9974);
																																																		}
																																																		BUFFER{
																																																			:pid_2:bufferNode:<FIFO>#0{
																																																				:pid_36:DataMsg([ 2 , 2 , 1 ] , (z_10446 + z_12186 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974));
																																																			}
																																																			:pid_19:bufferNode:<FIFO>#0{
																																																				:pid_36:DataMsg([ 2 , 2 , 1 ] , (z_10446 + z_12186 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974));
																																																			}
																																																			:pid_53:bufferNode:<FIFO>#0{
																																																				:pid_36:DataMsg([ 2 , 2 , 1 ] , (z_10446 + z_12186 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974));
																																																			}
																																																		}
																																																		EC:<Id:18083;Ev:3074;H:50;W:15023>{ SC: ( ( pid_6:cp1 , pid_12:dp2 , pid_17:dp2 ) , ( pid_23:cp1 , pid_28:dp1 , pid_33:dp1 ) , ( pid_40:cp1 , pid_45:dp1 , pid_51:dp2 ) , ( pid_57:cp1 , pid_61:dp0 , pid_66:dp0 ) )
																					
																						
										EXE: { |;| (:pid_36 , run) (:pid_43 , run) 
	(:pid_45 , run) (:pid_45 , dp1_receiveDM_consistent) }
																					
																						
										TRACE: { |;| (:pid_36 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_12234 }) (:pid_45 , ${ input 
	inst::Trickle.Node.DataMsg [ 1 , 1 , 0 ] ${ + param::Trickle.Node.z_0 
	param::Trickle.Node.z_11636 param::Trickle.Node.z_2408 
	param::Trickle.Node.z_3100 param::Trickle.Node.z_4220 param::Trickle.Node.z_6048 
	param::Trickle.Node.z_6412 param::Trickle.Node.z_9256 param::Trickle.Node.z_9348 
	param::Trickle.Node.z_9448 } } @ (z_10446 + z_12186 + z_12234 + z_2834 + z_3422 
	+ z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974)) }
																																																			/*FLAGS{ COVERAGE-ELEMENT }*/
																																																			INFO{
																																																				<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#2" as trace="tpid#2">
																																																			}
																																																			DATA{
																																																				:pid_36:my_buff[0].seq = 1;
																																																				:pid_36:my_buff[0].fragment = FRAGMENT_0;
																																																				:pid_36:my_buff[0].offset = 0;
																																																				:pid_36:firmware[0] = FRAGMENT_0;
																																																				:pid_36:myseq_buff[0] = 1;
																																																				:pid_36:$time = (z_10446 + z_12186 + z_12234 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974);
																																																				:pid_36:z = z_12234;
																																																				:pid_36:coverageProp = true;
																																																				:pid_36:localTime = (z_10446 + z_12186 + z_12234 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974);
																																																				:pid_36:localPC = ((t_1334 < 4) && (t_2878 < 8) && (t_434 < 4) && (t_13109 < 4) && (t_14231 < 4) && (t_14620 < 4) && (0 <= (t_1334 + -2)) && (0 <= (t_2878 + -4)) && (0 <= (t_434 + -2)) && (0 <= (t_13109 + -2)) && (0 <= (t_14231 + -2)) && (0 <= (t_14620 + -2)));
																																																				:pid_36:localPtC = (((z_10446 + z_12186 + z_8858 + z_9974) == t_13109) && ((z_7082 + z_7526) == 4) && (z_2834 == t_434) && (z_7082 == t_1334) && ((z_12186 + z_12234) < t_14620) && ((z_2834 + z_3422) < 4) && (z_10446 < t_14231) && (z_8858 < t_13109) && ((z_0 + z_11636 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448) <= (z_10446 + z_12186 + z_12234 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974)) && ((z_0 + z_2408) <= (z_2834 + z_3422 + z_694)) && ((z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412) <= (z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858)) && ((z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448) <= (z_10446 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974)) && ((z_7082 + z_7526) > t_1334) && ($delta#initial > 0) && (z_10446 > 0) && (z_12186 > 0) && (z_2834 > 0) && (z_3422 > 0) && (z_694 > 0) && (z_7082 > 0) && (z_7526 > 0) && (z_8586 > 0) && (z_8858 > 0) && (z_9974 > 0));
																																																				:pid_36:timeEmit = (z_0 + z_11636 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448);
																																																				:pid_37:cl = (z_10446 + z_12186 + z_12234 + z_8586 + z_8858 + z_9974);
																																																				:pid_43:c = 1;
																																																				:pid_43:consistent = true;
																																																				:pid_43:cl = (z_12186 + z_12234);
																																																				:pid_43:d.seq = 1;
																																																				:pid_43:d.fragment = FRAGMENT_0;
																																																				:pid_43:d.offset = 0;
																																																				:pid_48:cl = (z_10446 + z_12186 + z_12234 + z_8858 + z_9974);
																																																			}
																																																			BUFFER{
																																																				:pid_36:bufferNode:<FIFO>#0{ }
																																																			}
																																																		}
																																																	}
																																																	EC:<Id:17980;Ev:3062;H:49;W:14932>{ SC: ( ( pid_6:cp1 , pid_12:dp2 , pid_17:dp2 ) , ( pid_23:cp1 , pid_28:dp1 , pid_33:dp1 ) , ( pid_40:cp1 , pid_45:dp1 , pid_50:dp1 ) , ( pid_57:cp1 , pid_61:dp0 , pid_66:dp0 ) )
																					
																						
									EXE: { |;| (:pid_36 , run) (:pid_43 , run) 
	(:pid_45 , run) (:pid_45 , dp1_receiveDM_consistent) }
																					
																						
									TRACE: { |;| (:pid_36 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_12186 }) (:pid_45 , ${ input 
	inst::Trickle.Node.DataMsg [ 1 , 1 , 0 ] ${ + param::Trickle.Node.z_0 
	param::Trickle.Node.z_11636 param::Trickle.Node.z_2408 
	param::Trickle.Node.z_3100 param::Trickle.Node.z_4220 param::Trickle.Node.z_6048 
	param::Trickle.Node.z_6412 param::Trickle.Node.z_9256 param::Trickle.Node.z_9348 
	param::Trickle.Node.z_9448 } } @ (z_10446 + z_12186 + z_2834 + z_3422 + z_694 + 
	z_7082 + z_7526 + z_8586 + z_8858 + z_9974)) }
																																																		/*FLAGS{ COVERAGE-ELEMENT }*/
																																																		INFO{
																																																			<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#2" as trace="tpid#2">
																																																		}
																																																		DATA{
																																																			:pid_36:my_buff[0].seq = 1;
																																																			:pid_36:my_buff[0].fragment = FRAGMENT_0;
																																																			:pid_36:my_buff[0].offset = 0;
																																																			:pid_36:firmware[0] = FRAGMENT_0;
																																																			:pid_36:myseq_buff[0] = 1;
																																																			:pid_36:$time = (z_10446 + z_12186 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974);
																																																			:pid_36:z = z_12186;
																																																			:pid_36:coverageProp = true;
																																																			:pid_36:localTime = (z_10446 + z_12186 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974);
																																																			:pid_36:localPC = ((t_1334 < 4) && (t_2878 < 8) && (t_434 < 4) && (t_13109 < 4) && (t_14231 < 4) && (t_14620 < 4) && (0 <= (t_1334 + -2)) && (0 <= (t_2878 + -4)) && (0 <= (t_434 + -2)) && (0 <= (t_13109 + -2)) && (0 <= (t_14231 + -2)) && (0 <= (t_14620 + -2)));
																																																			:pid_36:localPtC = (((z_7082 + z_7526) == 4) && (z_2834 == t_434) && (z_7082 == t_1334) && ((z_2834 + z_3422) < 4) && (z_10446 < t_14231) && (z_12186 < t_14620) && (z_8858 < t_13109) && ((z_0 + z_11636 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448) <= (z_10446 + z_12186 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974)) && ((z_0 + z_2408) <= (z_2834 + z_3422 + z_694)) && ((z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412) <= (z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858)) && ((z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448) <= (z_10446 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974)) && ((z_7082 + z_7526) > t_1334) && ($delta#initial > 0) && (z_10446 > 0) && (z_2834 > 0) && (z_3422 > 0) && (z_694 > 0) && (z_7082 > 0) && (z_7526 > 0) && (z_8586 > 0) && (z_8858 > 0) && (z_9974 > 0));
																																																			:pid_36:timeEmit = (z_0 + z_11636 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448);
																																																			:pid_37:cl = (z_10446 + z_12186 + z_8586 + z_8858 + z_9974);
																																																			:pid_43:c = 1;
																																																			:pid_43:consistent = true;
																																																			:pid_43:cl = z_12186;
																																																			:pid_43:d.seq = 1;
																																																			:pid_43:d.fragment = FRAGMENT_0;
																																																			:pid_43:d.offset = 0;
																																																			:pid_48:cl = (z_10446 + z_12186 + z_8858 + z_9974);
																																																		}
																																																		BUFFER{
																																																			:pid_36:bufferNode:<FIFO>#0{ }
																																																		}
																																																	}
																																																	EC:<Id:17981;Ev:3063;H:49;W:14933>{ SC: ( ( pid_6:cp1 , pid_12:dp2 , pid_17:dp2 ) , ( pid_23:cp1 , pid_28:dp1 , pid_33:dp1 ) , ( pid_41:cp2 , pid_45:dp1 , pid_50:dp1 ) , ( pid_57:cp1 , pid_61:dp0 , pid_66:dp0 ) )
																					
																						
									EXE: { |;| (:pid_36 , run) (:pid_37 , run) 
	(:pid_40 , run) (:pid_40 , cp_sendCM) }
																					
																						
									TRACE: { |;| (:pid_36 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_12186 }) (:pid_40 , ${ output 
	inst::Trickle.Node.ControlMsg [ 0 , 1 ] ${ + param::Trickle.Node.z_10446 
	param::Trickle.Node.z_12186 param::Trickle.Node.z_2834 
	param::Trickle.Node.z_3422 param::Trickle.Node.z_694 param::Trickle.Node.z_7082 
	param::Trickle.Node.z_7526 param::Trickle.Node.z_8586 param::Trickle.Node.z_8858 
	param::Trickle.Node.z_9974 } } @ (z_10446 + z_12186 + z_2834 + z_3422 + z_694 + 
	z_7082 + z_7526 + z_8586 + z_8858 + z_9974)) }
																																																		DATA{
																																																			:pid_36:$time = (z_10446 + z_12186 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974);
																																																			:pid_36:z = z_12186;
																																																			:pid_36:localTime = (z_10446 + z_12186 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974);
																																																			:pid_36:localPC = ((t_1334 < 4) && (t_2878 < 8) && (t_434 < 4) && (t_13109 < 4) && (t_14231 < 4) && (t_14620 < 4) && (0 <= (t_1334 + -2)) && (0 <= (t_2878 + -4)) && (0 <= (t_434 + -2)) && (0 <= (t_13109 + -2)) && (0 <= (t_14231 + -2)) && (0 <= (t_14620 + -2)));
																																																			:pid_36:localPtC = (((z_10446 + z_12186 + z_8586 + z_8858 + z_9974) == t_2878) && ((z_7082 + z_7526) == 4) && (z_2834 == t_434) && (z_7082 == t_1334) && ((z_2834 + z_3422) < 4) && (z_10446 < t_14231) && (z_8858 < t_13109) && ((z_0 + z_2408) <= (z_2834 + z_3422 + z_694)) && ((z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412) <= (z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858)) && ((z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448) <= (z_10446 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974)) && ((z_7082 + z_7526) > t_1334) && ($delta#initial > 0) && (z_10446 > 0) && (z_2834 > 0) && (z_3422 > 0) && (z_694 > 0) && (z_7082 > 0) && (z_7526 > 0) && (z_8586 > 0) && (z_8858 > 0) && (z_9974 > 0));
																																																			:pid_37:cl = (z_10446 + z_12186 + z_8586 + z_8858 + z_9974);
																																																			:pid_43:cl = z_12186;
																																																			:pid_48:cl = (z_10446 + z_12186 + z_8858 + z_9974);
																																																		}
																																																		BUFFER{
																																																			:pid_2:bufferNode:<FIFO>#0{
																																																				:pid_36:ControlMsg([ 0 , 1 ] , (z_10446 + z_12186 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974));
																																																			}
																																																			:pid_19:bufferNode:<FIFO>#0{
																																																				:pid_36:ControlMsg([ 0 , 1 ] , (z_10446 + z_12186 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974));
																																																			}
																																																			:pid_53:bufferNode:<FIFO>#0{
																																																				:pid_36:ControlMsg([ 0 , 1 ] , (z_10446 + z_12186 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974));
																																																			}
																																																		}
																																																		EC:<Id:18110;Ev:3071;H:50;W:15047>{ SC: ( ( pid_6:cp1 , pid_12:dp2 , pid_17:dp2 ) , ( pid_23:cp1 , pid_28:dp1 , pid_33:dp1 ) , ( pid_41:cp2 , pid_45:dp1 , pid_50:dp1 ) , ( pid_57:cp1 , pid_61:dp0 , pid_66:dp0 ) )
																					
																						
										EXE: { |;| (:pid_36 , run) (:pid_43 , run) 
	(:pid_45 , run) (:pid_45 , dp1_receiveDM_consistent) }
																					
																						
										TRACE: { |;| (:pid_36 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_12246 }) (:pid_45 , ${ input 
	inst::Trickle.Node.DataMsg [ 1 , 1 , 0 ] ${ + param::Trickle.Node.z_0 
	param::Trickle.Node.z_11636 param::Trickle.Node.z_2408 
	param::Trickle.Node.z_3100 param::Trickle.Node.z_4220 param::Trickle.Node.z_6048 
	param::Trickle.Node.z_6412 param::Trickle.Node.z_9256 param::Trickle.Node.z_9348 
	param::Trickle.Node.z_9448 } } @ (z_10446 + z_12186 + z_12246 + z_2834 + z_3422 
	+ z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974)) }
																																																			/*FLAGS{ COVERAGE-ELEMENT }*/
																																																			INFO{
																																																				<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#2" as trace="tpid#2">
																																																			}
																																																			DATA{
																																																				:pid_36:my_buff[0].seq = 1;
																																																				:pid_36:my_buff[0].fragment = FRAGMENT_0;
																																																				:pid_36:my_buff[0].offset = 0;
																																																				:pid_36:firmware[0] = FRAGMENT_0;
																																																				:pid_36:myseq_buff[0] = 1;
																																																				:pid_36:$time = (z_10446 + z_12186 + z_12246 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974);
																																																				:pid_36:z = z_12246;
																																																				:pid_36:coverageProp = true;
																																																				:pid_36:localTime = (z_10446 + z_12186 + z_12246 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974);
																																																				:pid_36:localPC = ((t_1334 < 4) && (t_2878 < 8) && (t_434 < 4) && (t_13109 < 4) && (t_14231 < 4) && (t_14620 < 4) && (0 <= (t_1334 + -2)) && (0 <= (t_2878 + -4)) && (0 <= (t_434 + -2)) && (0 <= (t_13109 + -2)) && (0 <= (t_14231 + -2)) && (0 <= (t_14620 + -2)));
																																																				:pid_36:localPtC = (((z_10446 + z_12186 + z_8586 + z_8858 + z_9974) == t_2878) && ((z_7082 + z_7526) == 4) && (z_2834 == t_434) && (z_7082 == t_1334) && ((z_12186 + z_12246) < t_14620) && ((z_2834 + z_3422) < 4) && (z_10446 < t_14231) && (z_8858 < t_13109) && ((z_0 + z_11636 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448) <= (z_10446 + z_12186 + z_12246 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974)) && ((z_0 + z_2408) <= (z_2834 + z_3422 + z_694)) && ((z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412) <= (z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858)) && ((z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448) <= (z_10446 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974)) && ((z_7082 + z_7526) > t_1334) && ($delta#initial > 0) && (z_10446 > 0) && (z_12186 > 0) && (z_2834 > 0) && (z_3422 > 0) && (z_694 > 0) && (z_7082 > 0) && (z_7526 > 0) && (z_8586 > 0) && (z_8858 > 0) && (z_9974 > 0));
																																																				:pid_36:timeEmit = (z_0 + z_11636 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448);
																																																				:pid_37:cl = (z_10446 + z_12186 + z_12246 + z_8586 + z_8858 + z_9974);
																																																				:pid_43:c = 1;
																																																				:pid_43:consistent = true;
																																																				:pid_43:cl = (z_12186 + z_12246);
																																																				:pid_43:d.seq = 1;
																																																				:pid_43:d.fragment = FRAGMENT_0;
																																																				:pid_43:d.offset = 0;
																																																				:pid_48:cl = (z_10446 + z_12186 + z_12246 + z_8858 + z_9974);
																																																			}
																																																			BUFFER{
																																																				:pid_36:bufferNode:<FIFO>#0{ }
																																																			}
																																																		}
																																																	}
																																																	EC:<Id:17982;Ev:3064;H:49;W:14934>{ SC: ( ( pid_6:cp1 , pid_12:dp2 , pid_17:dp2 ) , ( pid_23:cp1 , pid_28:dp1 , pid_33:dp1 ) , ( pid_40:cp1 , pid_45:dp1 , pid_50:dp1 ) , ( pid_58:cp2 , pid_61:dp0 , pid_66:dp0 ) )
																					
																						
									EXE: { |;| (:pid_53 , run) (:pid_54 , run) 
	(:pid_57 , run) (:pid_57 , cp1_reach_k) }
																					
																						
									TRACE: (:pid_53 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_12187 })
																																																		DATA{
																																																			:pid_53:$time = (z_12187 + z_15 + z_239 + z_4079 + z_5115 + z_5255 + z_8263 + z_91);
																																																			:pid_53:z = z_12187;
																																																			:pid_53:localTime = (z_12187 + z_15 + z_239 + z_4079 + z_5115 + z_5255 + z_8263 + z_91);
																																																			:pid_53:localPC = ((t_171 < 8) && (t_18 < 4) && (t_1985 < 8) && (0 <= (t_171 + -4)) && (0 <= (t_18 + -2)) && (0 <= (t_1985 + -4)));
																																																			:pid_53:localPtC = (((z_12187 + z_8263) == t_1985) && ((z_239 + z_91) == 4) && ((z_4079 + z_5115 + z_5255) == 8) && (z_4079 == t_171) && (z_91 == t_18) && ((z_4079 + z_5115) < 8) && (z_8263 < t_1985) && ((z_2834 + z_3422 + z_694 + z_7082) <= (z_15 + z_239 + z_4079 + z_5115 + z_5255 + z_8263 + z_91)) && ((z_2834 + z_694) <= (z_15 + z_239 + z_4079 + z_5115 + z_91)) && ((z_239 + z_91) > t_18) && ((z_4079 + z_5115 + z_5255) > t_171) && ($delta#initial > 0) && (z_15 > 0) && (z_239 > 0) && (z_4079 > 0) && (z_5115 > 0) && (z_5255 > 0) && (z_8263 > 0) && (z_91 > 0));
																																																			:pid_54:cl = (z_12187 + z_8263);
																																																			:pid_60:cl = (z_12187 + z_15 + z_239 + z_4079 + z_5115 + z_5255 + z_8263 + z_91);
																																																			:pid_65:cl = (z_12187 + z_15 + z_239 + z_4079 + z_5115 + z_5255 + z_8263 + z_91);
																																																		}
																																																		EC:<Id:18119;Ev:0;H:50;W:15055>{ SC: ( ( pid_6:cp1 , pid_12:dp2 , pid_17:dp2 ) , ( pid_23:cp1 , pid_28:dp1 , pid_33:dp1 ) , ( pid_40:cp1 , pid_45:dp1 , pid_50:dp1 ) , ( pid_58:cp2 , pid_61:dp0 , pid_66:dp0 ) )
																					
																						
										EXE: { |;| (:pid_36 , run) (:pid_43 , run) 
	(:pid_45 , run) (:pid_45 , dp1_receiveDM_consistent) }
																					
																						
										TRACE: { |;| (:pid_36 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_12250 }) (:pid_45 , ${ input 
	inst::Trickle.Node.DataMsg [ 1 , 1 , 0 ] ${ + param::Trickle.Node.z_0 
	param::Trickle.Node.z_11636 param::Trickle.Node.z_2408 
	param::Trickle.Node.z_3100 param::Trickle.Node.z_4220 param::Trickle.Node.z_6048 
	param::Trickle.Node.z_6412 param::Trickle.Node.z_9256 param::Trickle.Node.z_9348 
	param::Trickle.Node.z_9448 } } @ (z_10446 + z_12250 + z_2834 + z_3422 + z_694 + 
	z_7082 + z_7526 + z_8586 + z_8858 + z_9974)) }
																																																			/*FLAGS{ COVERAGE-ELEMENT }*/
																																																			INFO{
																																																				<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#2" as trace="tpid#2">
																																																			}
																																																			DATA{
																																																				:pid_36:my_buff[0].seq = 1;
																																																				:pid_36:my_buff[0].fragment = FRAGMENT_0;
																																																				:pid_36:my_buff[0].offset = 0;
																																																				:pid_36:firmware[0] = FRAGMENT_0;
																																																				:pid_36:myseq_buff[0] = 1;
																																																				:pid_36:$time = (z_10446 + z_12250 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974);
																																																				:pid_36:z = z_12250;
																																																				:pid_36:coverageProp = true;
																																																				:pid_36:localTime = (z_10446 + z_12250 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974);
																																																				:pid_36:localPC = ((t_1334 < 4) && (t_2878 < 8) && (t_434 < 4) && (t_13109 < 4) && (t_14231 < 4) && (t_14620 < 4) && (0 <= (t_1334 + -2)) && (0 <= (t_2878 + -4)) && (0 <= (t_434 + -2)) && (0 <= (t_13109 + -2)) && (0 <= (t_14231 + -2)) && (0 <= (t_14620 + -2)));
																																																				:pid_36:localPtC = (((z_7082 + z_7526) == 4) && (z_2834 == t_434) && (z_7082 == t_1334) && ((z_2834 + z_3422) < 4) && (z_10446 < t_14231) && (z_12250 < t_14620) && (z_8858 < t_13109) && ((z_0 + z_11636 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448) <= (z_10446 + z_12250 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974)) && ((z_0 + z_2408) <= (z_2834 + z_3422 + z_694)) && ((z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412) <= (z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858)) && ((z_0 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448) <= (z_10446 + z_2834 + z_3422 + z_694 + z_7082 + z_7526 + z_8586 + z_8858 + z_9974)) && ((z_7082 + z_7526) > t_1334) && ($delta#initial > 0) && (z_10446 > 0) && (z_2834 > 0) && (z_3422 > 0) && (z_694 > 0) && (z_7082 > 0) && (z_7526 > 0) && (z_8586 > 0) && (z_8858 > 0) && (z_9974 > 0));
																																																				:pid_36:timeEmit = (z_0 + z_11636 + z_2408 + z_3100 + z_4220 + z_6048 + z_6412 + z_9256 + z_9348 + z_9448);
																																																				:pid_37:cl = (z_10446 + z_12250 + z_8586 + z_8858 + z_9974);
																																																				:pid_43:c = 1;
																																																				:pid_43:consistent = true;
																																																				:pid_43:cl = z_12250;
																																																				:pid_43:d.seq = 1;
																																																				:pid_43:d.fragment = FRAGMENT_0;
																																																				:pid_43:d.offset = 0;
																																																				:pid_48:cl = (z_10446 + z_12250 + z_8858 + z_9974);
																																																			}
																																																			BUFFER{
																																																				:pid_36:bufferNode:<FIFO>#0{ }
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
