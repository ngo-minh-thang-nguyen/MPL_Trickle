@sew< workflow , 1.0 >:

// Symbolic Execution Workflow
// Diversity Tool Configuration
// CEA - LIST
workflow {
	workspace [
		root   = "Your_absolute_path_to_directory_Topology1"
		output = "output"
		log    = "log"
		debug  = "debug"
	] // end workspace
	director behavior#selection 'as main execution objective' {
		manifest [
			autoconf  = true
			autostart = true
		] // end manifest
		project 'path of input model' [
			source = "."
			model  = "MPL_modeling_T1.xlia"
		] // end project
		supervisor {
			limit 'of graph exploration' [
				step = -1
				eval = -1
			] // end limit
			queue 'defining the exploration/search strategy' [
				strategy = 'WEIGHT#BREADTH_FIRST_SEARCH'
				heuristic = true
			] // end queue
			redundancy 'detection strategy' [
				loop#detection#trivial = true
			] // end redundancy
			console [
				format = "\nstep:%1% , context:%2% , height:%3% , width:%4%"
				report = "\nstop:%1% , context:%2% , height:%3% , width:%4%\n"
			] // end console
		}
		worker [
			coverage#behavior behavior_coverage {
				property [
					stop  = true
					slice = true
					heuristic = true
					scope = 'GLOBALLY'
					scheduler = '|;|'//'|;|'
				] // end property
				trace [
					
					output = 'n3.ControlMsg'
					input = 'n1.ControlMsg'
					input = 'n2.ControlMsg'
					input = 'n4.ControlMsg'
					
					output = 'n1.ControlMsg'
					input = 'n2.ControlMsg'
					input = 'n3.ControlMsg'
					
					transition = 'n1.DataProcess1->dp0.dp_init'
					output = 'n1.DataMsg'
					
					transition = 'n1.DataProcess2->dp0.dp_init'
					output = 'n1.DataMsg'
					
					transition = 'n2.DataProcess1->dp0.dp_init'
					input = 'n2.DataMsg'
					transition = 'n3.DataProcess1->dp0.dp_init'
					input = 'n3.DataMsg'
					
					transition = 'n2.DataProcess2->dp0.dp_init'
					input = 'n2.DataMsg'
					transition = 'n3.DataProcess2->dp0.dp_init'
					input = 'n3.DataMsg'
					
					output = 'n3.ControlMsg'
					input = 'n4.ControlMsg'

					transition = 'n4.DataProcess1->dp0.dp_init'
					transition = 'n4.DataProcess2->dp0.dp_init'
					output = 'n3.DataMsg'
					input = 'n4.DataMsg'
					output = 'n3.DataMsg'
					input = 'n4.DataMsg'
					
					
				] // end trace
				heuristic [
					hit#consecutive = false
					hit#folding = true
					hit#lucky   = false
					hit#max     = false
					hit#final   = true
					jump#slice  = false
					jump#height = 2
					jump#trials#limit = 200
					hit#count  = 2
					jump#count = 2
				] // end heuristic
				console [
					format = " , coverage: %1% / %2%"
				] // end console
			}
			serializer#symbex#trace#sequencediagram basic_trace_generator {
				property [
					solver = 'Z3'
					format = 'SEQUENCE_DIAGRAM'
					info#selection = 'ALL'
					data#selection = 'MODIFIED'
					numerizer = 'NONE'
					normalize = true
					print#initial#values = true
					print#lifelines = false
					leaf#header#position = false
					path#selection#verdict = 'PASS'
				] // end property
				trace [
					input#env = '[*]'
					output#env = '[*]'
					output = '[*]'
					input = '[*]'

					line#wrap#width = '[*]';

					variable = 'n1.localPC'
					variable = 'n1.localPtC'

					variable = 'n2.localPC'
					variable = 'n2.localPtC'
					
					variable = 'n3.localPC'
					variable = 'n3.localPtC'
					
					variable = 'n4.localPC'
					variable = 'n4.localPtC'
				] // end trace
				format [
					line#wrap#width = 45
					
					line#wrap#separator = "\n"
					
					participant = "participant %1%\n"
					
					assign = "hnote over of %2% #yellow : %2%.%3% = %4%\n"
					
					value#params#begin = ""
					value#params#separator = ", "
					value#params#end = ""
					
					input#env = "-[#black]> %6% : %3% ? %4%\n"
					input = "%6% [%8%]-> %6% : <font color = %8%> %3% ? %4% @%9%\n"
					output#env = "<[#black]- %5% : %3% ! %4%\n"
					output = "%5% [%8%]-> %6% : <font color = %8%> %3% ! %4% @%9%\n"
					
					node#condition = "\nnote over of %2% #pink : NC : %1%\n"					
					node#timed#condition = "\nnote over of %2% #9ACD32 : NtC : %1%\n"
					
					path#condition = "\nnote over %3%, %4% #pink : PC : %1%\n"
					path#timed#condition = "\nnote over %3%, %4% #9ACD32 : PtC : %1%\n"
				] // end format
				vfs [
					folder = "basic"
					file   = "symbex_sequence.txt"
				] // end vfs
			}
			serializer#model#graphviz model2graphiz {
				vfs [
					file = "trickle_sixnodes_graph.gv"
				] // end vfs
			}
			serializer#symbex#graphviz symbex2graphiz {
				property [
					info#selection = 'ALL'
					data#selection = 'MODIFIED'
				] // end property
				trace [
					//See full grammar of [Trace Specification] at the end of this generated file
					com = '[*]'
					variable = "cl"
					variable = "myseq_buff"
					variable = "tau"
					variable = 'ControlProcess.e'
					variable = 'DataProcess.e'
					transition = '[*]'
					node#condition = '[*]'
					node#timed#condition = '[*]'
				] // end trace
				format [
					node#header = "EC#%1%<Ev:%2% , H:%3%>\n%6%"
					lifeline#state = "%2%:%4%"
					path#condition = "PC: %1%"
					path#timed#condition = "PtC: %1%"
					node#condition = "NC: %1%"
					node#timed#condition = "NtC: %1%"
					assign = "%2%.%3%=%4%"
					newfresh = "newfresh(%2%:%3%) <- %4%"
					input#env = "INPUT %2%:%3%%4%"
					input#rdv = "input %2%:%3%%4%"
					input = "input %2%:%3%%4%"
					output#env = "OUTPUT %2%:%3%%4%"
					output#rdv = "output %2%:%3%%4%"
					output = "output %2%:%3%%4%"
					routine = "invoke %2%:%3%"
					transition = "fired %2%->%3%"
					machine = "run %2%:%3%"
				] // end format
				css [
					node#color = 'lightblue'
					node#shape = 'ellipse'
					node#style = 'filled'
					node#passed#color = 'yellow'
					node#passed#shape = 'ellipse'
					node#passed#style = 'filled'
					node#failed#color = 'red'
					node#failed#shape = 'doubleoctagon'
					node#failed#style = 'filled'
					node#inconclusive#color = 'orange'
					node#inconclusive#shape = 'octagon'
					node#inconclusive#style = 'filled'
					node#aborted#color = 'red'
					node#aborted#shape = 'octagon'
					node#aborted#style = 'filled'
					node#warning#color = 'orange'
					node#warning#shape = 'ellipse'
					node#warning#style = 'filled'
					node#error#color = 'red'
					node#error#shape = 'ellipse'
					node#error#style = 'filled'
					node#alert#color = 'red'
					node#alert#shape = 'ellipse'
					node#alert#style = 'filled'
					node#exit#color = 'orange'
					node#exit#shape = 'tripleoctagon'
					node#exit#style = 'filled'
					node#redundancy#source#color = 'green'
					node#redundancy#source#shape = 'cds'
					node#redundancy#source#style = 'filled'
					node#redundancy#target#color = 'greenyellow'
					node#redundancy#target#shape = 'septagon'
					node#redundancy#target#style = 'filled'
					path#passed#color = 'lawngreen'
					path#passed#shape = 'tripleoctagon'
					path#passed#style = 'filled'
					path#failed#color = 'red'
					path#failed#shape = 'doubleoctagon'
					path#failed#style = 'filled'
					path#inconclusive#color = 'orange'
					path#inconclusive#shape = 'octagon'
					path#inconclusive#style = 'filled'
					path#aborted#color = 'red'
					path#aborted#shape = 'octagon'
					path#aborted#style = 'filled'
				] // end css
				vfs [
					file = "symbex_output.gv"
				] // end vfs
			}
			serializer#symbex#trace#basic basic_trace_generator {
				property [
					solver = 'CVC4'
					format = 'BASIC'
					info#selection = 'ALL'
					data#selection = 'MODIFIED'
					numerizer = 'SOLVER'
					normalize = true
					print#initial#values = false
					print#lifelines = false
				] // end property
				trace [
					//See full grammar of [Trace Specification] at the end of this generated file
					time = '[*]'
					input#env = '[*]'
					output#env = '[*]'
					input = '[*]'
					output = '[*]'
					transition = '[*]'
				] // end trace
				format [
					comment = "\t// %1%\n"
					path#condition = "\tPC: %1%\n"
					path#timed#condition = "\tPtC: %1%\n"
					node#condition = "\tNC: %1%\n"
					node#timed#condition = "\tNtC: %1%\n"
					time = "\tdelta = %4%\n"
					assign = "\t%3%=%4%\n"
					newfresh = "\tnewfresh(%2%:%3%) <- %4%\n"
					input#env = "\tINPUT  %2%:%3%%4%\n"
					input#rdv = "\tinput  %2%:%3%%4%\n"
					input = "\tinput  %2%:%3%%4%\n"
					output#env = "\tOUTPUT %2%:%3%%4%\n"
					output#rdv = "\toutput %2%:%3%%4%\n"
					output = "\toutput %2%:%3%%4%\n"
					routine = "\tinvoke %2%:%3%\n"
					transition = "\tfired transition %2%:%3%\n"
					machine = "\trun %2%:%3%\n"
					value#parameter#begin = "("
					value#parameter#separator = ","
					value#parameter#end = ")"
				] // end format
				vfs [
					folder = "basic"
					file   = "trace.txt"
				] // end vfs
			}
		] // end worker
		output 'standard analysis file' [
			filename = 'MPL_%1%'
			specification = 'MPL.xlia'
			executable = 'MPL.fexe'
			initialization = 'MPL.fet'
			scenarii = 'MPL.fscn'
		] // end output
		debug 'analysis file at different stage' [
			filename = 'MPL_%1%'
			parsing = 'MPL_parsed.xlia'
			compilation = 'MPL_compiled.fexe'
			execution = 'MPL.fet'
		] // end debug
	}
	symbex 'option' [
		name_id_separator = "_"   // default "#"
		newfresh_param_name_pid = false
		pretty_printer_var_name = true   // default false
		
		time_name_id = '$time'
		time_initial_value = 0
		delta_name_id = "z"
		
		node_condition_enabled = false   // default false
		separation_of_pc_disjunction = false
		check_pathcondition_satisfiability = true
		constraint_solver = 'CVC4'  // Z3
	] // end symbex
	console [
		verbose = 'MINIMUM'
	] // end console
}
