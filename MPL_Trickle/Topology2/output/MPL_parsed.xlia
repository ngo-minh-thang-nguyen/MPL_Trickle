@xlia< system , 1.0 >:

system< and > Trickle {
@property:
	const integer BUFF_SIZE = 2;
	type FRAGMENT enum {
		UNDEF_FRAGMENT,
		FRAGMENT_0,
		FRAGMENT_1
	}
	type INFO_KIND enum {
		INIT,
		TERMIN_CM,
		TERMIN_DM1,
		TERMIN_DM2
	}
	type DATA_MESSAGE struct {
	@property:
		var integer seq;
		var FRAGMENT fragment;
		var integer offset;
	}

@composite:
	timed lifeline #model statemachine< and > Node {
	@property:
		input parameter var DATA_MESSAGE[ 2 ] my_buff;
		input parameter var FRAGMENT[ 2 ] firmware;
		input parameter var integer[ 2 ] myseq_buff;
		input parameter var boolean[ 2 ] mydp_run;
		public static const time< urational > $time#initial = 0;
		var time< urational > $time = spec::Trickle.Node.$time#initial;
		public static const time< pos_rational > $delta#initial;
		var time< pos_rational > z = spec::Trickle.Node.$delta#initial;
		public buffer fifo<*> bufferCM;
		public buffer fifo<*> bufferDM1;
		public buffer fifo<*> bufferDM2;
		public volatile var clock< pos_rational > localTime = 0;
		public output port Log(INFO_KIND information, time< pos_rational > emit_time);
		public inout port ControlMsg(integer[ 2 ] seqBuff, time< pos_rational > emit_time);
		public inout port DataMsg1(DATA_MESSAGE dataMessage, time< pos_rational > emit_time);
		public inout port DataMsg2(DATA_MESSAGE dataMessage, time< pos_rational > emit_time);
		public var boolean coverageProp1 = false;
		public var boolean coverageProp2 = false;
		public var boolean CM_zero_zero = false;
		public var boolean CM_one_one = false;
		public var boolean reach_DATA_EXPIR_DM1 = false;
		public var boolean reach_DATA_EXPIR_DM2 = false;
		public var boolean reach_CTRL_EXPIR = false;
		public const integer CTRL_EXPIR = 2;
		public const integer DATA_EXPIR = 2;
		public const integer MIN_SEQ = 1;
		var integer[ 2 ] seq_buff;
		var uinteger i;
		var boolean localPC = true;
		var boolean localPtC = true;
		var integer new_seq_buff;
		var integer new_seq;
		var FRAGMENT new_fragment;
		var integer new_offset;
		var time< pos_rational > timeEmit;

	@routine:
		macro #model routine time#get --> ($0: transient parameter time< urational > _time_){
			return Node.$time;
		}
		macro #model routine delta#get --> ($0: transient parameter time< pos_rational > _delta_){
			return Node.z;
		}
		macro #model routine time#reset{
			Node.$time := 0;
		}
		macro #model routine clock#reset($0: transient clock< uinteger > _clock_){
			clock#reset._clock_ := 0;
		}
		macro #model routine clock#update($0: transient clock< uinteger > _clock_){
			clock#update._clock_ := (clock#update._clock_ + Node.z);
		}
		macro #model routine Tguard($0: transient boolean localTimeCondition){
			Node.localPtC := (Node.localPtC && Tguard.localTimeCondition);
		}
		macro #model routine Dguard($0: transient boolean localDataCondition){ |;|
			guard Dguard.localDataCondition;
			Node.localPC := (Node.localPC && Dguard.localDataCondition);
		}
		macro #model routine time#update{ |ยง|
			newfresh(Node.z)
			Node.$time := (Node.$time + Node.z);
			Node.localTime := (Node.localTime + Node.z);
			if ${ status#is enable spec::Trickle.Node.ControlProcess }
			{
				ControlProcess.cl := (ControlProcess.cl + Node.z);
			}
			if ${ status#is enable spec::Trickle.Node.DataProcess1 }
			{
				spec::Trickle.Node.DataProcess1.cl := (spec::Trickle.Node.DataProcess1.cl + Node.z);
			}
			if ${ status#is enable spec::Trickle.Node.DataProcess2 }
			{
				spec::Trickle.Node.DataProcess2.cl := (spec::Trickle.Node.DataProcess2.cl + Node.z);
			}
		}

	@composite:
		statemachine< #STS > ControlProcess {
		@property:
			public var uinteger e;
			public var time< pos_rational > tau;
			public var time< pos_rational > tau_l;
			public var time< pos_rational > tau_h;
			var uinteger k;
			var uinteger c;
			var uinteger i;
			var urational t;
			var boolean consistent;
			public volatile var clock< pos_rational > cl = 0;

		@routine:
			macro #model routine doubleTau{
				if ((2 * ControlProcess.tau) <= ControlProcess.tau_h)
				{
					ControlProcess.tau := (2 * ControlProcess.tau);
				}
				else
				{
					if ((2 * ControlProcess.tau) > ControlProcess.tau_h)
					{
						ControlProcess.tau := ControlProcess.tau_h;
					}
				}
			}
			macro #model routine analyse_seq{ |;|
				{ |;|
					guard (ControlProcess.e < Node.CTRL_EXPIR);
					Node.localPC := (Node.localPC && (ControlProcess.e < Node.CTRL_EXPIR));
				}
				input Node.ControlMsg(Node.seq_buff, Node.timeEmit);
				Node.localPtC := (Node.localPtC && (Node.timeEmit <= Node.localTime));
				ControlProcess.consistent := true;
				for( ControlProcess.i := 0 ; (ControlProcess.i < spec::Trickle.BUFF_SIZE) ; ControlProcess.i := (+ 1) )
				{
					if (&spec::Trickle.Node.myseq_buff[&spec::Trickle.Node.ControlProcess.i] != &spec::Trickle.Node.seq_buff[&spec::Trickle.Node.ControlProcess.i])
					{ |;|
						ControlProcess.consistent := false;
						if (! &spec::Trickle.Node.mydp_run[&spec::Trickle.Node.ControlProcess.i])
						{
							&spec::Trickle.Node.mydp_run[&spec::Trickle.Node.ControlProcess.i] := true;
						}
					}
				}
			}
			macro #model routine analyse_cp1_consistent{ |;|
				Node.localPtC := (Node.localPtC && (ControlProcess.cl < ControlProcess.t));
				{ |;|
					{ |;|
						guard (ControlProcess.e < Node.CTRL_EXPIR);
						Node.localPC := (Node.localPC && (ControlProcess.e < Node.CTRL_EXPIR));
					}
					input Node.ControlMsg(Node.seq_buff, Node.timeEmit);
					Node.localPtC := (Node.localPtC && (Node.timeEmit <= Node.localTime));
					ControlProcess.consistent := true;
					for( ControlProcess.i := 0 ; (ControlProcess.i < spec::Trickle.BUFF_SIZE) ; ControlProcess.i := (+ 1) )
					{
						if (&spec::Trickle.Node.myseq_buff[&spec::Trickle.Node.ControlProcess.i] != &spec::Trickle.Node.seq_buff[&spec::Trickle.Node.ControlProcess.i])
						{ |;|
							ControlProcess.consistent := false;
							if (! &spec::Trickle.Node.mydp_run[&spec::Trickle.Node.ControlProcess.i])
							{
								&spec::Trickle.Node.mydp_run[&spec::Trickle.Node.ControlProcess.i] := true;
							}
						}
					}
				}
				guard ControlProcess.consistent;
				ControlProcess.c := (+ 1);
			}
			macro #model routine analyse_cp1_inconsistent{ |;|
				Node.localPtC := (Node.localPtC && (ControlProcess.cl < ControlProcess.t));
				{ |;|
					{ |;|
						guard (ControlProcess.e < Node.CTRL_EXPIR);
						Node.localPC := (Node.localPC && (ControlProcess.e < Node.CTRL_EXPIR));
					}
					input Node.ControlMsg(Node.seq_buff, Node.timeEmit);
					Node.localPtC := (Node.localPtC && (Node.timeEmit <= Node.localTime));
					ControlProcess.consistent := true;
					for( ControlProcess.i := 0 ; (ControlProcess.i < spec::Trickle.BUFF_SIZE) ; ControlProcess.i := (+ 1) )
					{
						if (&spec::Trickle.Node.myseq_buff[&spec::Trickle.Node.ControlProcess.i] != &spec::Trickle.Node.seq_buff[&spec::Trickle.Node.ControlProcess.i])
						{ |;|
							ControlProcess.consistent := false;
							if (! &spec::Trickle.Node.mydp_run[&spec::Trickle.Node.ControlProcess.i])
							{
								&spec::Trickle.Node.mydp_run[&spec::Trickle.Node.ControlProcess.i] := true;
							}
						}
					}
				}
				guard (! ControlProcess.consistent);
				ControlProcess.tau := ControlProcess.tau_l;
				invoke#method ControlProcess.t newfresh;
				{ |;|
					guard (((ControlProcess.tau / 2) <= ControlProcess.t) && (ControlProcess.t < ControlProcess.tau));
					Node.localPC := (Node.localPC && (((ControlProcess.tau / 2) <= ControlProcess.t) && (ControlProcess.t < ControlProcess.tau)));
				}
				ControlProcess.cl := 0;
				ControlProcess.c := 0;
				ControlProcess.e := 0;
			}
			macro #model routine analyse_cp2_consistent{ |;|
				Node.localPtC := (Node.localPtC && (ControlProcess.cl < ControlProcess.tau));
				{ |;|
					{ |;|
						guard (ControlProcess.e < Node.CTRL_EXPIR);
						Node.localPC := (Node.localPC && (ControlProcess.e < Node.CTRL_EXPIR));
					}
					input Node.ControlMsg(Node.seq_buff, Node.timeEmit);
					Node.localPtC := (Node.localPtC && (Node.timeEmit <= Node.localTime));
					ControlProcess.consistent := true;
					for( ControlProcess.i := 0 ; (ControlProcess.i < spec::Trickle.BUFF_SIZE) ; ControlProcess.i := (+ 1) )
					{
						if (&spec::Trickle.Node.myseq_buff[&spec::Trickle.Node.ControlProcess.i] != &spec::Trickle.Node.seq_buff[&spec::Trickle.Node.ControlProcess.i])
						{ |;|
							ControlProcess.consistent := false;
							if (! &spec::Trickle.Node.mydp_run[&spec::Trickle.Node.ControlProcess.i])
							{
								&spec::Trickle.Node.mydp_run[&spec::Trickle.Node.ControlProcess.i] := true;
							}
						}
					}
				}
				guard ControlProcess.consistent;
				ControlProcess.c := (+ 1);
			}
			macro #model routine analyse_cp2_inconsistent{ |;|
				Node.localPtC := (Node.localPtC && (ControlProcess.cl < ControlProcess.tau));
				{ |;|
					{ |;|
						guard (ControlProcess.e < Node.CTRL_EXPIR);
						Node.localPC := (Node.localPC && (ControlProcess.e < Node.CTRL_EXPIR));
					}
					input Node.ControlMsg(Node.seq_buff, Node.timeEmit);
					Node.localPtC := (Node.localPtC && (Node.timeEmit <= Node.localTime));
					ControlProcess.consistent := true;
					for( ControlProcess.i := 0 ; (ControlProcess.i < spec::Trickle.BUFF_SIZE) ; ControlProcess.i := (+ 1) )
					{
						if (&spec::Trickle.Node.myseq_buff[&spec::Trickle.Node.ControlProcess.i] != &spec::Trickle.Node.seq_buff[&spec::Trickle.Node.ControlProcess.i])
						{ |;|
							ControlProcess.consistent := false;
							if (! &spec::Trickle.Node.mydp_run[&spec::Trickle.Node.ControlProcess.i])
							{
								&spec::Trickle.Node.mydp_run[&spec::Trickle.Node.ControlProcess.i] := true;
							}
						}
					}
				}
				guard (! ControlProcess.consistent);
				ControlProcess.tau := ControlProcess.tau_l;
				invoke#method ControlProcess.t newfresh;
				{ |;|
					guard (((ControlProcess.tau / 2) <= ControlProcess.t) && (ControlProcess.t < ControlProcess.tau));
					Node.localPC := (Node.localPC && (((ControlProcess.tau / 2) <= ControlProcess.t) && (ControlProcess.t < ControlProcess.tau)));
				}
				ControlProcess.cl := 0;
				ControlProcess.c := 0;
				ControlProcess.e := 0;
			}

		@region:
			state< initial > cp0 {
				transition cp_init --> cp0_init { |;|
					ControlProcess.k := 2;
					ControlProcess.c := 0;
					ControlProcess.e := 0;
					ControlProcess.tau_l := 4;
					ControlProcess.tau_h := 8;
					ControlProcess.tau := ControlProcess.tau_l;
				}
			}

			state cp0_init {
				transition cp_init --> cp1 { |;|
					invoke#method ControlProcess.t newfresh;
					{ |;|
						guard (((ControlProcess.tau / 2) <= ControlProcess.t) && (ControlProcess.t < ControlProcess.tau));
						Node.localPC := (Node.localPC && (((ControlProcess.tau / 2) <= ControlProcess.t) && (ControlProcess.t < ControlProcess.tau)));
					}
					output Node.Log(INIT, Node.localTime);
					ControlProcess.cl := 0;
				}
			}

			state cp1 {
				transition cp_sendCM --> cp2 { |;|
					Node.localPtC := (Node.localPtC && (ControlProcess.cl == ControlProcess.t));
					{ |;|
						guard ((ControlProcess.c < ControlProcess.k) && (ControlProcess.e < Node.CTRL_EXPIR));
						Node.localPC := (Node.localPC && ((ControlProcess.c < ControlProcess.k) && (ControlProcess.e < Node.CTRL_EXPIR)));
					}
					output Node.ControlMsg(Node.myseq_buff, Node.localTime);
				}
				transition cp1_receiveCM_consistent --> cp1 { |;|
					Node.localPtC := (Node.localPtC && (ControlProcess.cl < ControlProcess.t));
					{ |;|
						{ |;|
							guard (ControlProcess.e < Node.CTRL_EXPIR);
							Node.localPC := (Node.localPC && (ControlProcess.e < Node.CTRL_EXPIR));
						}
						input Node.ControlMsg(Node.seq_buff, Node.timeEmit);
						Node.localPtC := (Node.localPtC && (Node.timeEmit <= Node.localTime));
						ControlProcess.consistent := true;
						for( ControlProcess.i := 0 ; (ControlProcess.i < spec::Trickle.BUFF_SIZE) ; ControlProcess.i := (+ 1) )
						{
							if (&spec::Trickle.Node.myseq_buff[&spec::Trickle.Node.ControlProcess.i] != &spec::Trickle.Node.seq_buff[&spec::Trickle.Node.ControlProcess.i])
							{ |;|
								ControlProcess.consistent := false;
								if (! &spec::Trickle.Node.mydp_run[&spec::Trickle.Node.ControlProcess.i])
								{
									&spec::Trickle.Node.mydp_run[&spec::Trickle.Node.ControlProcess.i] := true;
								}
							}
						}
					}
					guard ControlProcess.consistent;
					ControlProcess.c := (+ 1);
				}
				transition cp1_receiveCM_inconsistent --> cp1 { |;|
					Node.localPtC := (Node.localPtC && (ControlProcess.cl < ControlProcess.t));
					{ |;|
						{ |;|
							guard (ControlProcess.e < Node.CTRL_EXPIR);
							Node.localPC := (Node.localPC && (ControlProcess.e < Node.CTRL_EXPIR));
						}
						input Node.ControlMsg(Node.seq_buff, Node.timeEmit);
						Node.localPtC := (Node.localPtC && (Node.timeEmit <= Node.localTime));
						ControlProcess.consistent := true;
						for( ControlProcess.i := 0 ; (ControlProcess.i < spec::Trickle.BUFF_SIZE) ; ControlProcess.i := (+ 1) )
						{
							if (&spec::Trickle.Node.myseq_buff[&spec::Trickle.Node.ControlProcess.i] != &spec::Trickle.Node.seq_buff[&spec::Trickle.Node.ControlProcess.i])
							{ |;|
								ControlProcess.consistent := false;
								if (! &spec::Trickle.Node.mydp_run[&spec::Trickle.Node.ControlProcess.i])
								{
									&spec::Trickle.Node.mydp_run[&spec::Trickle.Node.ControlProcess.i] := true;
								}
							}
						}
					}
					guard (! ControlProcess.consistent);
					ControlProcess.tau := ControlProcess.tau_l;
					invoke#method ControlProcess.t newfresh;
					{ |;|
						guard (((ControlProcess.tau / 2) <= ControlProcess.t) && (ControlProcess.t < ControlProcess.tau));
						Node.localPC := (Node.localPC && (((ControlProcess.tau / 2) <= ControlProcess.t) && (ControlProcess.t < ControlProcess.tau)));
					}
					ControlProcess.cl := 0;
					ControlProcess.c := 0;
					ControlProcess.e := 0;
				}
				transition cp_CTRL_EXPIR --> cp3 { |;|
					{ |;|
						guard (ControlProcess.e == Node.CTRL_EXPIR);
						Node.localPC := (Node.localPC && (ControlProcess.e == Node.CTRL_EXPIR));
					}
					output Node.Log(TERMIN_CM, Node.localTime);
				}
				transition cp1_reach_k --> cp2 { |;|
					Node.localPtC := (Node.localPtC && (ControlProcess.cl == ControlProcess.t));
					{ |;|
						guard ((ControlProcess.c >= ControlProcess.k) && (ControlProcess.e < Node.CTRL_EXPIR));
						Node.localPC := (Node.localPC && ((ControlProcess.c >= ControlProcess.k) && (ControlProcess.e < Node.CTRL_EXPIR)));
					}
				}
			}

			state cp2 {
				transition cp_resetTau --> cp1 { |;|
					Node.localPtC := (Node.localPtC && ((ControlProcess.cl > ControlProcess.t) && (ControlProcess.cl == ControlProcess.tau)));
					{ |;|
						guard (ControlProcess.e < Node.CTRL_EXPIR);
						Node.localPC := (Node.localPC && (ControlProcess.e < Node.CTRL_EXPIR));
					}
					if ((2 * ControlProcess.tau) <= ControlProcess.tau_h)
					{
						ControlProcess.tau := (2 * ControlProcess.tau);
					}
					else
					{
						if ((2 * ControlProcess.tau) > ControlProcess.tau_h)
						{
							ControlProcess.tau := ControlProcess.tau_h;
						}
					}
					invoke#method ControlProcess.t newfresh;
					{ |;|
						guard (((ControlProcess.tau / 2) <= ControlProcess.t) && (ControlProcess.t < ControlProcess.tau));
						Node.localPC := (Node.localPC && (((ControlProcess.tau / 2) <= ControlProcess.t) && (ControlProcess.t < ControlProcess.tau)));
					}
					ControlProcess.e := (+ 1);
					ControlProcess.cl := 0;
					ControlProcess.c := 0;
				}
				transition cp2_receiveCM_consistent --> cp2 { |;|
					Node.localPtC := (Node.localPtC && (ControlProcess.cl < ControlProcess.tau));
					{ |;|
						{ |;|
							guard (ControlProcess.e < Node.CTRL_EXPIR);
							Node.localPC := (Node.localPC && (ControlProcess.e < Node.CTRL_EXPIR));
						}
						input Node.ControlMsg(Node.seq_buff, Node.timeEmit);
						Node.localPtC := (Node.localPtC && (Node.timeEmit <= Node.localTime));
						ControlProcess.consistent := true;
						for( ControlProcess.i := 0 ; (ControlProcess.i < spec::Trickle.BUFF_SIZE) ; ControlProcess.i := (+ 1) )
						{
							if (&spec::Trickle.Node.myseq_buff[&spec::Trickle.Node.ControlProcess.i] != &spec::Trickle.Node.seq_buff[&spec::Trickle.Node.ControlProcess.i])
							{ |;|
								ControlProcess.consistent := false;
								if (! &spec::Trickle.Node.mydp_run[&spec::Trickle.Node.ControlProcess.i])
								{
									&spec::Trickle.Node.mydp_run[&spec::Trickle.Node.ControlProcess.i] := true;
								}
							}
						}
					}
					guard ControlProcess.consistent;
					ControlProcess.c := (+ 1);
				}
				transition cp2_receiveCM_inconsistent --> cp1 { |;|
					Node.localPtC := (Node.localPtC && (ControlProcess.cl < ControlProcess.tau));
					{ |;|
						{ |;|
							guard (ControlProcess.e < Node.CTRL_EXPIR);
							Node.localPC := (Node.localPC && (ControlProcess.e < Node.CTRL_EXPIR));
						}
						input Node.ControlMsg(Node.seq_buff, Node.timeEmit);
						Node.localPtC := (Node.localPtC && (Node.timeEmit <= Node.localTime));
						ControlProcess.consistent := true;
						for( ControlProcess.i := 0 ; (ControlProcess.i < spec::Trickle.BUFF_SIZE) ; ControlProcess.i := (+ 1) )
						{
							if (&spec::Trickle.Node.myseq_buff[&spec::Trickle.Node.ControlProcess.i] != &spec::Trickle.Node.seq_buff[&spec::Trickle.Node.ControlProcess.i])
							{ |;|
								ControlProcess.consistent := false;
								if (! &spec::Trickle.Node.mydp_run[&spec::Trickle.Node.ControlProcess.i])
								{
									&spec::Trickle.Node.mydp_run[&spec::Trickle.Node.ControlProcess.i] := true;
								}
							}
						}
					}
					guard (! ControlProcess.consistent);
					ControlProcess.tau := ControlProcess.tau_l;
					invoke#method ControlProcess.t newfresh;
					{ |;|
						guard (((ControlProcess.tau / 2) <= ControlProcess.t) && (ControlProcess.t < ControlProcess.tau));
						Node.localPC := (Node.localPC && (((ControlProcess.tau / 2) <= ControlProcess.t) && (ControlProcess.t < ControlProcess.tau)));
					}
					ControlProcess.cl := 0;
					ControlProcess.c := 0;
					ControlProcess.e := 0;
				}
			}

			state< final > cp3 {
			}

		@moe:
		}

		#model statemachine< #STS > DataProcess {
		@property:
			input parameter var integer mySeq;
			public var uinteger e;
			public var time< pos_rational > tau;
			public var time< pos_rational > tau_l;
			public var time< pos_rational > tau_h;
			var uinteger k;
			var uinteger c;
			var uinteger i;
			var urational t;
			var boolean consistent;
			public volatile var clock< pos_rational > cl = 0;
			var DATA_MESSAGE d;

		@routine:
			macro #model routine doubleTau{
				if ((2 * DataProcess.tau) <= DataProcess.tau_h)
				{
					DataProcess.tau := (2 * DataProcess.tau);
				}
				else
				{
					if ((2 * DataProcess.tau) > DataProcess.tau_h)
					{
						DataProcess.tau := DataProcess.tau_h;
					}
				}
			}
			macro #model routine inputDataMsg{
				if (DataProcess.mySeq == 1)
				{
					input Node.DataMsg1(DataProcess.d, Node.timeEmit);
				}
				else
				{
					input Node.DataMsg2(DataProcess.d, Node.timeEmit);
				}
			}
			macro #model routine outputDataMsg{
				if (DataProcess.mySeq == 1)
				{
					output Node.DataMsg1(&spec::Trickle.Node.my_buff[(DataProcess.mySeq + (- Node.MIN_SEQ))], Node.localTime);
				}
				else
				{
					if (DataProcess.mySeq == 2)
					{
						output Node.DataMsg2(&spec::Trickle.Node.my_buff[(DataProcess.mySeq + (- Node.MIN_SEQ))], Node.localTime);
					}
				}
			}
			macro #model routine outputLog{
				if (DataProcess.mySeq == 1)
				{
					output Node.Log(TERMIN_DM1, Node.localTime);
				}
				else
				{
					if (DataProcess.mySeq == 2)
					{
						output Node.Log(TERMIN_DM2, Node.localTime);
					}
				}
			}
			macro #model routine analyse_data{ |;|
				{ |;|
					guard (DataProcess.e < Node.DATA_EXPIR);
					Node.localPC := (Node.localPC && (DataProcess.e < Node.DATA_EXPIR));
				}
				if (DataProcess.mySeq == 1)
				{
					input Node.DataMsg1(DataProcess.d, Node.timeEmit);
				}
				else
				{
					input Node.DataMsg2(DataProcess.d, Node.timeEmit);
				}
				Node.localPtC := (Node.localPtC && (Node.timeEmit <= Node.localTime));
				DataProcess.consistent := true;
				if (DataProcess.mySeq == &spec::Trickle.Node.DataProcess.d.seq)
				{ |;|
					&spec::Trickle.Node.my_buff[(&spec::Trickle.Node.DataProcess.d.seq + (- Node.MIN_SEQ))] := DataProcess.d;
					&spec::Trickle.Node.myseq_buff[(&spec::Trickle.Node.DataProcess.d.seq + (- Node.MIN_SEQ))] := 1;
					&spec::Trickle.Node.firmware[&spec::Trickle.Node.DataProcess.d.offset] := &spec::Trickle.Node.DataProcess.d.fragment;
				}
				else
				{
					DataProcess.consistent := false;
				}
			}
			macro #model routine analyse_dp1_consistent{ |;|
				Node.localPtC := (Node.localPtC && (DataProcess.cl < DataProcess.t));
				{ |;|
					{ |;|
						guard (DataProcess.e < Node.DATA_EXPIR);
						Node.localPC := (Node.localPC && (DataProcess.e < Node.DATA_EXPIR));
					}
					if (DataProcess.mySeq == 1)
					{
						input Node.DataMsg1(DataProcess.d, Node.timeEmit);
					}
					else
					{
						input Node.DataMsg2(DataProcess.d, Node.timeEmit);
					}
					Node.localPtC := (Node.localPtC && (Node.timeEmit <= Node.localTime));
					DataProcess.consistent := true;
					if (DataProcess.mySeq == &spec::Trickle.Node.DataProcess.d.seq)
					{ |;|
						&spec::Trickle.Node.my_buff[(&spec::Trickle.Node.DataProcess.d.seq + (- Node.MIN_SEQ))] := DataProcess.d;
						&spec::Trickle.Node.myseq_buff[(&spec::Trickle.Node.DataProcess.d.seq + (- Node.MIN_SEQ))] := 1;
						&spec::Trickle.Node.firmware[&spec::Trickle.Node.DataProcess.d.offset] := &spec::Trickle.Node.DataProcess.d.fragment;
					}
					else
					{
						DataProcess.consistent := false;
					}
				}
				guard DataProcess.consistent;
				DataProcess.c := (+ 1);
			}
			macro #model routine analyse_dp1_inconsistent{ |;|
				Node.localPtC := (Node.localPtC && (DataProcess.cl < DataProcess.t));
				{ |;|
					{ |;|
						guard (DataProcess.e < Node.DATA_EXPIR);
						Node.localPC := (Node.localPC && (DataProcess.e < Node.DATA_EXPIR));
					}
					if (DataProcess.mySeq == 1)
					{
						input Node.DataMsg1(DataProcess.d, Node.timeEmit);
					}
					else
					{
						input Node.DataMsg2(DataProcess.d, Node.timeEmit);
					}
					Node.localPtC := (Node.localPtC && (Node.timeEmit <= Node.localTime));
					DataProcess.consistent := true;
					if (DataProcess.mySeq == &spec::Trickle.Node.DataProcess.d.seq)
					{ |;|
						&spec::Trickle.Node.my_buff[(&spec::Trickle.Node.DataProcess.d.seq + (- Node.MIN_SEQ))] := DataProcess.d;
						&spec::Trickle.Node.myseq_buff[(&spec::Trickle.Node.DataProcess.d.seq + (- Node.MIN_SEQ))] := 1;
						&spec::Trickle.Node.firmware[&spec::Trickle.Node.DataProcess.d.offset] := &spec::Trickle.Node.DataProcess.d.fragment;
					}
					else
					{
						DataProcess.consistent := false;
					}
				}
				guard (! DataProcess.consistent);
				DataProcess.tau := DataProcess.tau_l;
				invoke#method DataProcess.t newfresh;
				{ |;|
					guard (((DataProcess.tau / 2) <= DataProcess.t) && (DataProcess.t < DataProcess.tau));
					Node.localPC := (Node.localPC && (((DataProcess.tau / 2) <= DataProcess.t) && (DataProcess.t < DataProcess.tau)));
				}
				DataProcess.cl := 0;
				DataProcess.c := 0;
				DataProcess.e := 0;
			}
			macro #model routine analyse_dp2_consistent{ |;|
				Node.localPtC := (Node.localPtC && (DataProcess.cl < DataProcess.tau));
				{ |;|
					{ |;|
						guard (DataProcess.e < Node.DATA_EXPIR);
						Node.localPC := (Node.localPC && (DataProcess.e < Node.DATA_EXPIR));
					}
					if (DataProcess.mySeq == 1)
					{
						input Node.DataMsg1(DataProcess.d, Node.timeEmit);
					}
					else
					{
						input Node.DataMsg2(DataProcess.d, Node.timeEmit);
					}
					Node.localPtC := (Node.localPtC && (Node.timeEmit <= Node.localTime));
					DataProcess.consistent := true;
					if (DataProcess.mySeq == &spec::Trickle.Node.DataProcess.d.seq)
					{ |;|
						&spec::Trickle.Node.my_buff[(&spec::Trickle.Node.DataProcess.d.seq + (- Node.MIN_SEQ))] := DataProcess.d;
						&spec::Trickle.Node.myseq_buff[(&spec::Trickle.Node.DataProcess.d.seq + (- Node.MIN_SEQ))] := 1;
						&spec::Trickle.Node.firmware[&spec::Trickle.Node.DataProcess.d.offset] := &spec::Trickle.Node.DataProcess.d.fragment;
					}
					else
					{
						DataProcess.consistent := false;
					}
				}
				guard DataProcess.consistent;
				DataProcess.c := (+ 1);
			}
			macro #model routine analyse_dp2_inconsistent{ |;|
				Node.localPtC := (Node.localPtC && (DataProcess.cl < DataProcess.tau));
				{ |;|
					{ |;|
						guard (DataProcess.e < Node.DATA_EXPIR);
						Node.localPC := (Node.localPC && (DataProcess.e < Node.DATA_EXPIR));
					}
					if (DataProcess.mySeq == 1)
					{
						input Node.DataMsg1(DataProcess.d, Node.timeEmit);
					}
					else
					{
						input Node.DataMsg2(DataProcess.d, Node.timeEmit);
					}
					Node.localPtC := (Node.localPtC && (Node.timeEmit <= Node.localTime));
					DataProcess.consistent := true;
					if (DataProcess.mySeq == &spec::Trickle.Node.DataProcess.d.seq)
					{ |;|
						&spec::Trickle.Node.my_buff[(&spec::Trickle.Node.DataProcess.d.seq + (- Node.MIN_SEQ))] := DataProcess.d;
						&spec::Trickle.Node.myseq_buff[(&spec::Trickle.Node.DataProcess.d.seq + (- Node.MIN_SEQ))] := 1;
						&spec::Trickle.Node.firmware[&spec::Trickle.Node.DataProcess.d.offset] := &spec::Trickle.Node.DataProcess.d.fragment;
					}
					else
					{
						DataProcess.consistent := false;
					}
				}
				guard (! DataProcess.consistent);
				DataProcess.tau := DataProcess.tau_l;
				invoke#method DataProcess.t newfresh;
				{ |;|
					guard (((DataProcess.tau / 2) <= DataProcess.t) && (DataProcess.t < DataProcess.tau));
					Node.localPC := (Node.localPC && (((DataProcess.tau / 2) <= DataProcess.t) && (DataProcess.t < DataProcess.tau)));
				}
				DataProcess.cl := 0;
				DataProcess.c := 0;
				DataProcess.e := 0;
			}

		@region:
			state< start > dp0 {
				transition dp_init --> dp1 { |;|
					DataProcess.k := 2;
					DataProcess.c := 0;
					DataProcess.e := 0;
					DataProcess.tau_l := 4;
					DataProcess.tau_h := 8;
					DataProcess.tau := DataProcess.tau_l;
					invoke#method DataProcess.t newfresh;
					{ |;|
						guard (((DataProcess.tau / 2) <= DataProcess.t) && (DataProcess.t < DataProcess.tau));
						Node.localPC := (Node.localPC && (((DataProcess.tau / 2) <= DataProcess.t) && (DataProcess.t < DataProcess.tau)));
					}
					guard &spec::Trickle.Node.mydp_run[(DataProcess.mySeq + (- Node.MIN_SEQ))];
					DataProcess.cl := 0;
				}
			}

			state dp1 {
				transition dp_sendDM --> dp2 { |;|
					Node.localPtC := (Node.localPtC && (DataProcess.cl == DataProcess.t));
					{ |;|
						guard ((DataProcess.c < DataProcess.k) && (DataProcess.e < Node.DATA_EXPIR) && (&spec::Trickle.Node.my_buff[(DataProcess.mySeq + (- Node.MIN_SEQ))].fragment != UNDEF_FRAGMENT));
						Node.localPC := (Node.localPC && ((DataProcess.c < DataProcess.k) && (DataProcess.e < Node.DATA_EXPIR) && (&spec::Trickle.Node.my_buff[(DataProcess.mySeq + (- Node.MIN_SEQ))].fragment != UNDEF_FRAGMENT)));
					}
					if (DataProcess.mySeq == 1)
					{
						output Node.DataMsg1(&spec::Trickle.Node.my_buff[(DataProcess.mySeq + (- Node.MIN_SEQ))], Node.localTime);
					}
					else
					{
						if (DataProcess.mySeq == 2)
						{
							output Node.DataMsg2(&spec::Trickle.Node.my_buff[(DataProcess.mySeq + (- Node.MIN_SEQ))], Node.localTime);
						}
					}
				}
				transition dp1_receiveDM_consistent --> dp1 { |;|
					Node.localPtC := (Node.localPtC && (DataProcess.cl < DataProcess.t));
					{ |;|
						{ |;|
							guard (DataProcess.e < Node.DATA_EXPIR);
							Node.localPC := (Node.localPC && (DataProcess.e < Node.DATA_EXPIR));
						}
						if (DataProcess.mySeq == 1)
						{
							input Node.DataMsg1(DataProcess.d, Node.timeEmit);
						}
						else
						{
							input Node.DataMsg2(DataProcess.d, Node.timeEmit);
						}
						Node.localPtC := (Node.localPtC && (Node.timeEmit <= Node.localTime));
						DataProcess.consistent := true;
						if (DataProcess.mySeq == &spec::Trickle.Node.DataProcess.d.seq)
						{ |;|
							&spec::Trickle.Node.my_buff[(&spec::Trickle.Node.DataProcess.d.seq + (- Node.MIN_SEQ))] := DataProcess.d;
							&spec::Trickle.Node.myseq_buff[(&spec::Trickle.Node.DataProcess.d.seq + (- Node.MIN_SEQ))] := 1;
							&spec::Trickle.Node.firmware[&spec::Trickle.Node.DataProcess.d.offset] := &spec::Trickle.Node.DataProcess.d.fragment;
						}
						else
						{
							DataProcess.consistent := false;
						}
					}
					guard DataProcess.consistent;
					DataProcess.c := (+ 1);
				}
				transition dp1_receiveDM_inconsistent --> dp1 { |;|
					Node.localPtC := (Node.localPtC && (DataProcess.cl < DataProcess.t));
					{ |;|
						{ |;|
							guard (DataProcess.e < Node.DATA_EXPIR);
							Node.localPC := (Node.localPC && (DataProcess.e < Node.DATA_EXPIR));
						}
						if (DataProcess.mySeq == 1)
						{
							input Node.DataMsg1(DataProcess.d, Node.timeEmit);
						}
						else
						{
							input Node.DataMsg2(DataProcess.d, Node.timeEmit);
						}
						Node.localPtC := (Node.localPtC && (Node.timeEmit <= Node.localTime));
						DataProcess.consistent := true;
						if (DataProcess.mySeq == &spec::Trickle.Node.DataProcess.d.seq)
						{ |;|
							&spec::Trickle.Node.my_buff[(&spec::Trickle.Node.DataProcess.d.seq + (- Node.MIN_SEQ))] := DataProcess.d;
							&spec::Trickle.Node.myseq_buff[(&spec::Trickle.Node.DataProcess.d.seq + (- Node.MIN_SEQ))] := 1;
							&spec::Trickle.Node.firmware[&spec::Trickle.Node.DataProcess.d.offset] := &spec::Trickle.Node.DataProcess.d.fragment;
						}
						else
						{
							DataProcess.consistent := false;
						}
					}
					guard (! DataProcess.consistent);
					DataProcess.tau := DataProcess.tau_l;
					invoke#method DataProcess.t newfresh;
					{ |;|
						guard (((DataProcess.tau / 2) <= DataProcess.t) && (DataProcess.t < DataProcess.tau));
						Node.localPC := (Node.localPC && (((DataProcess.tau / 2) <= DataProcess.t) && (DataProcess.t < DataProcess.tau)));
					}
					DataProcess.cl := 0;
					DataProcess.c := 0;
					DataProcess.e := 0;
				}
				transition dp_DATA_EXPIR --> dp3 { |;|
					{ |;|
						guard (DataProcess.e == Node.DATA_EXPIR);
						Node.localPC := (Node.localPC && (DataProcess.e == Node.DATA_EXPIR));
					}
					if (DataProcess.mySeq == 1)
					{
						output Node.Log(TERMIN_DM1, Node.localTime);
					}
					else
					{
						if (DataProcess.mySeq == 2)
						{
							output Node.Log(TERMIN_DM2, Node.localTime);
						}
					}
				}
				transition dp1_reach_k --> dp2 { |;|
					Node.localPtC := (Node.localPtC && (DataProcess.cl == DataProcess.t));
					{ |;|
						guard (((DataProcess.c >= DataProcess.k) || (&spec::Trickle.Node.my_buff[(DataProcess.mySeq + (- Node.MIN_SEQ))].fragment == UNDEF_FRAGMENT)) && (DataProcess.e < Node.DATA_EXPIR));
						Node.localPC := (Node.localPC && (((DataProcess.c >= DataProcess.k) || (&spec::Trickle.Node.my_buff[(DataProcess.mySeq + (- Node.MIN_SEQ))].fragment == UNDEF_FRAGMENT)) && (DataProcess.e < Node.DATA_EXPIR)));
					}
				}
			}

			state dp2 {
				transition dp_resetTau --> dp1 { |;|
					Node.localPtC := (Node.localPtC && ((DataProcess.cl > DataProcess.t) && (DataProcess.cl == DataProcess.tau)));
					{ |;|
						guard (DataProcess.e < Node.DATA_EXPIR);
						Node.localPC := (Node.localPC && (DataProcess.e < Node.DATA_EXPIR));
					}
					if ((2 * DataProcess.tau) <= DataProcess.tau_h)
					{
						DataProcess.tau := (2 * DataProcess.tau);
					}
					else
					{
						if ((2 * DataProcess.tau) > DataProcess.tau_h)
						{
							DataProcess.tau := DataProcess.tau_h;
						}
					}
					invoke#method DataProcess.t newfresh;
					{ |;|
						guard (((DataProcess.tau / 2) <= DataProcess.t) && (DataProcess.t < DataProcess.tau));
						Node.localPC := (Node.localPC && (((DataProcess.tau / 2) <= DataProcess.t) && (DataProcess.t < DataProcess.tau)));
					}
					DataProcess.e := (+ 1);
					DataProcess.cl := 0;
					DataProcess.c := 0;
				}
				transition dp2_receiveDM_consistent --> dp2 { |;|
					Node.localPtC := (Node.localPtC && (DataProcess.cl < DataProcess.tau));
					{ |;|
						{ |;|
							guard (DataProcess.e < Node.DATA_EXPIR);
							Node.localPC := (Node.localPC && (DataProcess.e < Node.DATA_EXPIR));
						}
						if (DataProcess.mySeq == 1)
						{
							input Node.DataMsg1(DataProcess.d, Node.timeEmit);
						}
						else
						{
							input Node.DataMsg2(DataProcess.d, Node.timeEmit);
						}
						Node.localPtC := (Node.localPtC && (Node.timeEmit <= Node.localTime));
						DataProcess.consistent := true;
						if (DataProcess.mySeq == &spec::Trickle.Node.DataProcess.d.seq)
						{ |;|
							&spec::Trickle.Node.my_buff[(&spec::Trickle.Node.DataProcess.d.seq + (- Node.MIN_SEQ))] := DataProcess.d;
							&spec::Trickle.Node.myseq_buff[(&spec::Trickle.Node.DataProcess.d.seq + (- Node.MIN_SEQ))] := 1;
							&spec::Trickle.Node.firmware[&spec::Trickle.Node.DataProcess.d.offset] := &spec::Trickle.Node.DataProcess.d.fragment;
						}
						else
						{
							DataProcess.consistent := false;
						}
					}
					guard DataProcess.consistent;
					DataProcess.c := (+ 1);
				}
				transition dp2_receiveDM_inconsistent --> dp1 { |;|
					Node.localPtC := (Node.localPtC && (DataProcess.cl < DataProcess.tau));
					{ |;|
						{ |;|
							guard (DataProcess.e < Node.DATA_EXPIR);
							Node.localPC := (Node.localPC && (DataProcess.e < Node.DATA_EXPIR));
						}
						if (DataProcess.mySeq == 1)
						{
							input Node.DataMsg1(DataProcess.d, Node.timeEmit);
						}
						else
						{
							input Node.DataMsg2(DataProcess.d, Node.timeEmit);
						}
						Node.localPtC := (Node.localPtC && (Node.timeEmit <= Node.localTime));
						DataProcess.consistent := true;
						if (DataProcess.mySeq == &spec::Trickle.Node.DataProcess.d.seq)
						{ |;|
							&spec::Trickle.Node.my_buff[(&spec::Trickle.Node.DataProcess.d.seq + (- Node.MIN_SEQ))] := DataProcess.d;
							&spec::Trickle.Node.myseq_buff[(&spec::Trickle.Node.DataProcess.d.seq + (- Node.MIN_SEQ))] := 1;
							&spec::Trickle.Node.firmware[&spec::Trickle.Node.DataProcess.d.offset] := &spec::Trickle.Node.DataProcess.d.fragment;
						}
						else
						{
							DataProcess.consistent := false;
						}
					}
					guard (! DataProcess.consistent);
					DataProcess.tau := DataProcess.tau_l;
					invoke#method DataProcess.t newfresh;
					{ |;|
						guard (((DataProcess.tau / 2) <= DataProcess.t) && (DataProcess.t < DataProcess.tau));
						Node.localPC := (Node.localPC && (((DataProcess.tau / 2) <= DataProcess.t) && (DataProcess.t < DataProcess.tau)));
					}
					DataProcess.cl := 0;
					DataProcess.c := 0;
					DataProcess.e := 0;
				}
			}

			state< final > dp3 {
			}

		@moe:
		}

	@instance:
		#static#instance executable< model: DataProcess , instance: [ + ] > DataProcess1 {
		@moe:
			@create{
				mySeq := 1;
			}

		}
		#static#instance executable< model: DataProcess , instance: [ + ] > DataProcess2 {
		@moe:
			@create{
				mySeq := 2;
			}

		}

	@moe:
		@init{ |ยง|
			Node.$time := Node.$time#initial;
			Node.z := Node.$delta#initial;
		}
		@irun{
			Node.localPtC := (Node.localPtC && (Node.z > 0));
		}
		@run{ |;|
			{ |ยง|
				newfresh(Node.z)
				Node.$time := (Node.$time + Node.z);
				Node.localTime := (Node.localTime + Node.z);
				if ${ status#is enable spec::Trickle.Node.ControlProcess }
				{
					ControlProcess.cl := (ControlProcess.cl + Node.z);
				}
				if ${ status#is enable spec::Trickle.Node.DataProcess1 }
				{
					spec::Trickle.Node.DataProcess1.cl := (spec::Trickle.Node.DataProcess1.cl + Node.z);
				}
				if ${ status#is enable spec::Trickle.Node.DataProcess2 }
				{
					spec::Trickle.Node.DataProcess2.cl := (spec::Trickle.Node.DataProcess2.cl + Node.z);
				}
			}
			schedule;
			Node.coverageProp1 := (&spec::Trickle.Node.myseq_buff[0] == 1);
			Node.coverageProp2 := (&spec::Trickle.Node.myseq_buff[1] == 1);
			Node.CM_zero_zero := ((&spec::Trickle.Node.myseq_buff[0] == 0) && (&spec::Trickle.Node.myseq_buff[1] == 0));
			Node.CM_one_one := ((&spec::Trickle.Node.myseq_buff[0] == 1) && (&spec::Trickle.Node.myseq_buff[1] == 1));
			Node.reach_DATA_EXPIR_DM1 := (DataProcess1.e == Node.DATA_EXPIR);
			Node.reach_DATA_EXPIR_DM2 := (DataProcess2.e == Node.DATA_EXPIR);
			Node.reach_CTRL_EXPIR := (ControlProcess.e == Node.CTRL_EXPIR);
		}
		@schedule{ |i|
			run Node.ControlProcess;
			run Node.DataProcess1;
			run Node.DataProcess2;
		}
	}

	lifeline statemachine< #STS > Observer {
	@property:
		var integer L;
		var integer uncoveredExit = 0;
		var INFO_KIND mess;
		var integer[ 2 ] seqBuff;
		var DATA_MESSAGE dataMessage;
		var time< pos_rational > timeStamp;

	@region:
		state< initial > startup {
			transition o_startup --> o#0;
		}

		state o#0 {
			transition n1_out_CM --> o#1 {
				@observe( ctx: spec::Trickle ) {
					output spec::Trickle.n1.ControlMsg(Observer.seqBuff, Observer.timeStamp);
				} [ ((&spec::Trickle.Observer.seqBuff[0] == 1) && (&spec::Trickle.Observer.seqBuff[1] == 1)) ];
			}
			transition< else > n1_out_CM_failed --> FAILED { |;|
				guard (Observer.uncoveredExit == Observer.L);
				exit "Unfound Trace point< output n1->ControlMsg >";
			}
			@enable{ |;|
				Observer.uncoveredExit := 0;
				Observer.L := 0;
			}
		}

		state o#1 {
			transition n2_in_CM --> o#2 {
				@observe( ctx: spec::Trickle ) {
					input spec::Trickle.n2.ControlMsg(Observer.seqBuff, Observer.timeStamp);
				} [ ((&spec::Trickle.Observer.seqBuff[0] == 1) && (&spec::Trickle.Observer.seqBuff[1] == 1)) ];
			}
			transition< else > n2_in_CM_failed --> FAILED { |;|
				guard (Observer.uncoveredExit == Observer.L);
				exit "Unfound Trace point< input n2->ControlMsg >";
			}
			@enable{
				Observer.uncoveredExit := 0;
			}
		}

		state o#2 {
			transition n3_in_CM --> o#3 {
				@observe( ctx: spec::Trickle ) {
					input spec::Trickle.n3.ControlMsg(Observer.seqBuff, Observer.timeStamp);
				} [ ((&spec::Trickle.Observer.seqBuff[0] == 1) && (&spec::Trickle.Observer.seqBuff[1] == 1)) ];
			}
			transition< else > n3_in_CM_failed --> FAILED { |;|
				guard (Observer.uncoveredExit == Observer.L);
				exit "Unfound Trace point< input n3->ControlMsg >";
			}
			@enable{
				Observer.uncoveredExit := 0;
			}
		}

		state o#3 {
			transition n1_out_DM --> o#4 {
				@observe( ctx: spec::Trickle ) {
					output spec::Trickle.n1.DataMsg1(Observer.dataMessage, Observer.timeStamp);
				} [ (&spec::Trickle.Observer.dataMessage.seq == 1) ];
			}
			transition< else > n1_out_DM_failed --> FAILED { |;|
				guard (Observer.uncoveredExit == Observer.L);
				exit "Unfound Trace point< output n1->DataMsg1 >";
			}
			@enable{ |;|
				Observer.uncoveredExit := 0;
				Observer.L := 3;
			}
		}

		state o#4 {
			transition n2_in_DM --> o#5 {
				@observe( ctx: spec::Trickle ) {
					input spec::Trickle.n2.DataMsg1(Observer.dataMessage, Observer.timeStamp);
				} [ (&spec::Trickle.Observer.dataMessage.seq == 1) ];
			}
			transition< else > n2_in_DM_failed --> FAILED { |;|
				guard (Observer.uncoveredExit == Observer.L);
				exit "Unfound Trace point< input n2->DataMsg1 >";
			}
			@enable{
				Observer.uncoveredExit := 0;
			}
		}

		state o#5 {
			transition n3_in_DM --> o#6 {
				@observe( ctx: spec::Trickle ) {
					input spec::Trickle.n3.DataMsg1(Observer.dataMessage, Observer.timeStamp);
				} [ (&spec::Trickle.Observer.dataMessage.seq == 1) ];
			}
			transition< else > n3_in_DM_failed --> FAILED { |;|
				guard (Observer.uncoveredExit == Observer.L);
				exit "Unfound Trace point< input n3->DataMsg1 >";
			}
			@enable{
				Observer.uncoveredExit := 0;
			}
		}

		state o#6 {
			transition n1_out_DM --> o#7 {
				@observe( ctx: spec::Trickle ) {
					output spec::Trickle.n1.DataMsg2(Observer.dataMessage, Observer.timeStamp);
				} [ (&spec::Trickle.Observer.dataMessage.seq == 2) ];
			}
			transition< else > n1_out_DM_failed --> FAILED { |;|
				guard (Observer.uncoveredExit == Observer.L);
				exit "Unfound Trace point< output n1->DataMsg2 >";
			}
			@enable{
				Observer.uncoveredExit := 0;
			}
		}

		state o#7 {
			transition n2_in_DM --> o#8 { |;|
				@observe( ctx: spec::Trickle ) {
					input spec::Trickle.n2.DataMsg2(Observer.dataMessage, Observer.timeStamp);
				} [ (&spec::Trickle.Observer.dataMessage.seq == 2) ];
				tguard ((spec::Trickle.n2.localTime + (- Observer.timeStamp)) <= spec::Trickle.n2.DataProcess2.tau_l);
			}
			transition< else > n2_in_DM_failed --> FAILED { |;|
				guard (Observer.uncoveredExit == Observer.L);
				exit "Unfound Trace point< input n2->DataMsg2 >";
			}
			transition< else > n2_in_DM_failed --> FAILED { |;|
				tguard ((spec::Trickle.n2.localTime + (- Observer.timeStamp)) > spec::Trickle.n2.DataProcess2.tau_l);
				exit "Timeout Trace point< input n2->DataMsg2 >";
			}
			@enable{
				Observer.uncoveredExit := 0;
			}
		}

		state o#8 {
			transition n3_in_DM --> o#9 { |;|
				@observe( ctx: spec::Trickle ) {
					input spec::Trickle.n3.DataMsg2(Observer.dataMessage, Observer.timeStamp);
				} [ (&spec::Trickle.Observer.dataMessage.seq == 2) ];
				tguard ((spec::Trickle.n3.localTime + (- Observer.timeStamp)) <= spec::Trickle.n3.ControlProcess.tau_l);
			}
			transition< else > n3_in_DM_failed --> FAILED { |;|
				guard (Observer.uncoveredExit == Observer.L);
				exit "Unfound Trace point< input n3->DataMsg2 >";
			}
			transition< else > n3_in_DM_failed --> FAILED { |;|
				tguard ((spec::Trickle.n3.localTime + (- Observer.timeStamp)) > spec::Trickle.n3.DataProcess2.tau_l);
				exit "Timeout Trace point< input n3->DataMsg2 >";
			}
			@enable{
				Observer.uncoveredExit := 0;
			}
		}

		state o#9 {
			transition n3_out_CM --> o#10 {
				@observe( ctx: spec::Trickle ) {
					output spec::Trickle.n3.ControlMsg(Observer.seqBuff, Observer.timeStamp);
				} [ ((&spec::Trickle.Observer.seqBuff[0] == 1) && (&spec::Trickle.Observer.seqBuff[1] == 1)) ];
			}
			transition< else > n3_out_CM_failed --> FAILED { |;|
				guard (Observer.uncoveredExit == Observer.L);
				exit "Unfound Trace point< output n3->ControlMsg >";
			}
			@enable{
				Observer.uncoveredExit := 0;
			}
		}

		state o#10 {
			transition n4_in_CM --> o#11 {
				@observe( ctx: spec::Trickle ) {
					input spec::Trickle.n4.ControlMsg(Observer.seqBuff, Observer.timeStamp);
				} [ true ];
			}
			transition< else > n4_in_CM_failed --> FAILED { |;|
				guard (Observer.uncoveredExit == Observer.L);
				exit "Unfound Trace point< input n4->ControlMsg >";
			}
			@enable{
				Observer.uncoveredExit := 0;
			}
		}

		state o#11 {
			transition n4_out_CM --> o#12 {
				@observe( ctx: spec::Trickle ) {
					output spec::Trickle.n4.ControlMsg(Observer.seqBuff, Observer.timeStamp);
				} [ ((&spec::Trickle.Observer.seqBuff[0] == 0) && (&spec::Trickle.Observer.seqBuff[1] == 0)) ];
			}
			transition< else > n4_out_CM_failed --> FAILED { |;|
				guard (Observer.uncoveredExit == Observer.L);
				exit "Unfound Trace point< output n4->ControlMsg >";
			}
			@enable{ |;|
				Observer.uncoveredExit := 0;
				Observer.L := 4;
			}
		}

		state o#12 {
			transition n2_out_DM --> o#13 {
				@observe( ctx: spec::Trickle ) {
					output spec::Trickle.n2.DataMsg1(Observer.dataMessage, Observer.timeStamp);
				} [ (&spec::Trickle.Observer.dataMessage.seq == 1) ];
			}
			transition< else > n2_out_DM_failed --> FAILED { |;|
				guard (Observer.uncoveredExit == Observer.L);
				exit "Unfound Trace point< output n2->DataMsg1 >";
			}
			@enable{
				Observer.uncoveredExit := 0;
			}
		}

		state o#13 {
			transition n3_in_DM --> o#14 {
				@observe( ctx: spec::Trickle ) {
					input spec::Trickle.n3.DataMsg1(Observer.dataMessage, Observer.timeStamp);
				} [ (&spec::Trickle.Observer.dataMessage.seq == 1) ];
			}
			transition< else > n3_in_DM_failed --> FAILED { |;|
				guard (Observer.uncoveredExit == Observer.L);
				exit "Unfound Trace point< input n3->DataMsg1 >";
			}
			@enable{
				Observer.uncoveredExit := 0;
			}
		}

		state o#14 {
			transition n4_out_CM --> o#15 {
				@observe( ctx: spec::Trickle ) {
					output spec::Trickle.n4.ControlMsg(Observer.seqBuff, Observer.timeStamp);
				} [ ((&spec::Trickle.Observer.seqBuff[0] == 0) && (&spec::Trickle.Observer.seqBuff[1] == 0)) ];
			}
			transition< else > n4_out_CM_failed --> FAILED { |;|
				guard (Observer.uncoveredExit == Observer.L);
				exit "Unfound Trace point< output n4->ControlMsg >";
			}
			@enable{
				Observer.uncoveredExit := 0;
			}
		}

		state o#15 {
			transition n2_out_DM --> o#16 {
				@observe( ctx: spec::Trickle ) {
					output spec::Trickle.n2.DataMsg1(Observer.dataMessage, Observer.timeStamp);
				} [ (&spec::Trickle.Observer.dataMessage.seq == 1) ];
			}
			transition< else > n2_out_DM_failed --> FAILED { |;|
				guard (Observer.uncoveredExit == Observer.L);
				exit "Unfound Trace point< output n2->DataMsg1 >";
			}
			@enable{
				Observer.uncoveredExit := 0;
			}
		}

		state o#16 {
			transition n3_in_DM --> o#17 {
				@observe( ctx: spec::Trickle ) {
					input spec::Trickle.n3.DataMsg1(Observer.dataMessage, Observer.timeStamp);
				} [ (&spec::Trickle.Observer.dataMessage.seq == 1) ];
			}
			transition< else > n3_in_DM_failed --> FAILED { |;|
				guard (Observer.uncoveredExit == Observer.L);
				exit "Unfound Trace point< input n3->DataMsg1 >";
			}
			@enable{
				Observer.uncoveredExit := 0;
			}
		}

		state o#17 {
			transition n4_out_Log --> o#18 {
				@observe( ctx: spec::Trickle ) {
					output spec::Trickle.n4.Log(Observer.mess);
				} [ (Observer.mess == TERMIN_CM) ];
			}
			transition< else > n4_out_Log_failed --> FAILED { |;|
				guard (Observer.uncoveredExit == Observer.L);
				exit "Unfound Trace point< output n4->Log >";
			}
			@enable{
				Observer.uncoveredExit := 0;
			}
		}

		state o#18 {
			transition n4_out_Log --> o#19 {
				@observe( ctx: spec::Trickle ) {
					output spec::Trickle.n4.Log(Observer.mess);
				} [ (Observer.mess == TERMIN_DM1) ];
			}
			transition< else > n4_out_Log_failed --> FAILED { |;|
				guard (Observer.uncoveredExit == Observer.L);
				exit "Unfound Trace point< output n4->Log >";
			}
			@enable{ |;|
				Observer.uncoveredExit := 0;
				Observer.L := 10;
			}
		}

		state o#19 {
			transition n4_out_Log --> PASS {
				@observe( ctx: spec::Trickle ) {
					output spec::Trickle.n4.Log(Observer.mess, Observer.timeStamp);
				} [ (Observer.mess == TERMIN_DM2) ];
			}
			transition< else > n4_out_Log_failed --> FAILED { |;|
				guard (Observer.uncoveredExit == Observer.L);
				exit "Unfound Trace point< output n4->Log >";
			}
			@enable{
				Observer.uncoveredExit := 0;
			}
		}

		state< final > PASS {
			@final{
				exit;
			}

		}

		state< final > FAILED {
		}

	@moe:
		@irun{
			Observer.uncoveredExit := (Observer.uncoveredExit + 1);
		}
	}

@instance:
	#static#instance executable< model: Node , instance: [ + ] > n1 {
	@moe:
		@create{ |;|
			my_buff := [ [ 1 , FRAGMENT_0 , 0 ] , [ 2 , FRAGMENT_1 , 1 ] ];
			firmware := [ FRAGMENT_0 , FRAGMENT_1 ];
			myseq_buff := 1;
			mydp_run := true;
		}

	}
	#static#instance executable< model: Node , instance: [ + ] > n2 {
	@moe:
		@create{ |;|
			my_buff := [ [ 0 , UNDEF_FRAGMENT , 0 ] , [ 0 , UNDEF_FRAGMENT , 1 ] ];
			firmware := [ UNDEF_FRAGMENT , UNDEF_FRAGMENT ];
			myseq_buff := 0;
			mydp_run := false;
		}

	}
	#static#instance executable< model: Node , instance: [ + ] > n3 {
	@moe:
		@create{ |;|
			my_buff := [ [ 0 , UNDEF_FRAGMENT , 0 ] , [ 0 , UNDEF_FRAGMENT , 1 ] ];
			firmware := [ UNDEF_FRAGMENT , UNDEF_FRAGMENT ];
			myseq_buff := 0;
			mydp_run := false;
		}

	}
	#static#instance executable< model: Node , instance: [ + ] > n4 {
	@moe:
		@create{ |;|
			my_buff := [ [ 0 , UNDEF_FRAGMENT , 0 ] , [ 0 , UNDEF_FRAGMENT , 1 ] ];
			firmware := [ UNDEF_FRAGMENT , UNDEF_FRAGMENT ];
			myseq_buff := 0;
			mydp_run := false;
		}

	}

@com:
	connector< env > _#connector_0 {
		output n1->Log;
		output n2->Log;
		output n3->Log;
		output n4->Log;
	}
	connector< multicast > _#connector_1 {
		output n1->ControlMsg;
		input< buffer: n2.bufferCM > n2->ControlMsg;
		input< buffer: n3.bufferCM > n3->ControlMsg;
	}
	connector< multicast > _#connector_2 {
		output n1->DataMsg1;
		input< buffer: n2.bufferDM1 > n2->DataMsg1;
		input< buffer: n3.bufferDM1 > n3->DataMsg1;
	}
	connector< multicast > _#connector_3 {
		output n1->DataMsg2;
		input< buffer: n2.bufferDM2 > n2->DataMsg2;
		input< buffer: n3.bufferDM2 > n3->DataMsg2;
	}
	connector< multicast > _#connector_4 {
		output n2->ControlMsg;
		input< buffer: n3.bufferCM > n3->ControlMsg;
	}
	connector< multicast > _#connector_5 {
		output n2->DataMsg1;
		input< buffer: n3.bufferDM1 > n3->DataMsg1;
	}
	connector< multicast > _#connector_6 {
		output n2->DataMsg2;
		input< buffer: n3.bufferDM2 > n3->DataMsg2;
	}
	connector< multicast > _#connector_7 {
		output n3->ControlMsg;
		input< buffer: n1.bufferCM > n1->ControlMsg;
		input< buffer: n4.bufferCM > n4->ControlMsg;
	}
	connector< multicast > _#connector_8 {
		output n3->DataMsg1;
		input< buffer: n1.bufferDM1 > n1->DataMsg1;
		input< buffer: n4.bufferDM1 > n4->DataMsg1;
	}
	connector< multicast > _#connector_9 {
		output n3->DataMsg2;
		input< buffer: n1.bufferDM2 > n1->DataMsg2;
		input< buffer: n4.bufferDM2 > n4->DataMsg2;
	}
	connector< multicast > _#connector_10 {
		output n4->ControlMsg;
		input< buffer: n2.bufferCM > n2->ControlMsg;
	}
	connector< multicast > _#connector_11 {
		output n4->DataMsg1;
		input< buffer: n2.bufferDM1 > n2->DataMsg1;
	}
	connector< multicast > _#connector_12 {
		output n4->DataMsg2;
		input< buffer: n2.bufferDM2 > n2->DataMsg2;
	}

@moe:
	@schedule{ |;|
		{ |i|
			run spec::Trickle.Node;
		}
		run spec::Trickle.Observer;
	}
}
