EC:<Id:1;Ev:1;H:0;W:1>{ SC: ( pid_3:initialstate , ( pid_8:cp0 , pid_14:dp0 , pid_19:dp0 ) , ( pid_25:cp0 , pid_31:dp0 , pid_36:dp0 ) , ( pid_42:cp0 , pid_48:dp0 , pid_53:dp0 ) )
	ALIAS{
		:ppid_-1:pid_0 = run::#PARAMETERS#; // model is spec::Trickle;
		:ppid_-1:pid_1 = spec::Trickle;
		:ppid_1:pid_2 = spec::Trickle.Observer;
			DATA{
				:ppid_1:pid_2:$time = spec::Trickle.Observer.$time;
				:ppid_1:pid_2:z = spec::Trickle.Observer.z;
				:ppid_1:pid_2:cl_o = spec::Trickle.Observer.cl_o;
			}
		:ppid_2:pid_3 = spec::Trickle.Observer.initialstate;
		:ppid_2:pid_4 = spec::Trickle.Observer.o0;
		:ppid_2:pid_5 = spec::Trickle.Observer.OK;
		:ppid_1:pid_6 = run::Trickle.n1; // model is spec::Trickle.Node;
			BUFFER NUMBER = 1;
			/*BUFFER{
				:ppid_1:pid_6:bufferNode = spec::Trickle.Node.bufferNode;
			}*/
			DATA{
				:ppid_1:pid_6:my_buff[0].seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_6:my_buff[0].fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_6:my_buff[0].offset = spec::Trickle.DATA_MESSAGE.offset;
				:ppid_1:pid_6:my_buff[1].seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_6:my_buff[1].fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_6:my_buff[1].offset = spec::Trickle.DATA_MESSAGE.offset;
				:ppid_1:pid_6:firmware[0] = spec::Trickle.Node.firmware;
				:ppid_1:pid_6:firmware[1] = spec::Trickle.Node.firmware;
				:ppid_1:pid_6:myseq_buff[0] = spec::Trickle.Node.myseq_buff;
				:ppid_1:pid_6:myseq_buff[1] = spec::Trickle.Node.myseq_buff;
				:ppid_1:pid_6:mydp_run[0] = spec::Trickle.Node.mydp_run;
				:ppid_1:pid_6:mydp_run[1] = spec::Trickle.Node.mydp_run;
				:ppid_1:pid_6:$time = spec::Trickle.Node.$time;
				:ppid_1:pid_6:z = spec::Trickle.Node.z;
				:ppid_1:pid_6:coverageProp = spec::Trickle.Node.coverageProp;
				:ppid_1:pid_6:seq_buff[0] = spec::Trickle.Node.seq_buff;
				:ppid_1:pid_6:seq_buff[1] = spec::Trickle.Node.seq_buff;
				:ppid_1:pid_6:i = spec::Trickle.Node.i;
				:ppid_1:pid_6:localTime = spec::Trickle.Node.localTime;
				:ppid_1:pid_6:localPC = spec::Trickle.Node.localPC;
				:ppid_1:pid_6:localPtC = spec::Trickle.Node.localPtC;
				:ppid_1:pid_6:new_seq_buff = spec::Trickle.Node.new_seq_buff;
				:ppid_1:pid_6:new_seq = spec::Trickle.Node.new_seq;
				:ppid_1:pid_6:new_fragment = spec::Trickle.Node.new_fragment;
				:ppid_1:pid_6:new_offset = spec::Trickle.Node.new_offset;
				:ppid_1:pid_6:timeEmit = spec::Trickle.Node.timeEmit;
			}
			INTERFACE{
				:ppid_1:pid_6:ControlMsg = spec::Trickle.Node.ControlMsg;
				:ppid_1:pid_6:DataMsg = spec::Trickle.Node.DataMsg;
				:ppid_1:pid_6:Log = spec::Trickle.Node.Log;
			}
		:ppid_6:pid_7 = spec::Trickle.Node.ControlProcess;
			DATA{
				:ppid_6:pid_7:k = spec::Trickle.Node.ControlProcess.k;
				:ppid_6:pid_7:c = spec::Trickle.Node.ControlProcess.c;
				:ppid_6:pid_7:e = spec::Trickle.Node.ControlProcess.e;
				:ppid_6:pid_7:tau = spec::Trickle.Node.ControlProcess.tau;
				:ppid_6:pid_7:tau_l = spec::Trickle.Node.ControlProcess.tau_l;
				:ppid_6:pid_7:tau_h = spec::Trickle.Node.ControlProcess.tau_h;
				:ppid_6:pid_7:i = spec::Trickle.Node.ControlProcess.i;
				:ppid_6:pid_7:t = spec::Trickle.Node.ControlProcess.t;
				:ppid_6:pid_7:consistent = spec::Trickle.Node.ControlProcess.consistent;
				:ppid_6:pid_7:cl = spec::Trickle.Node.ControlProcess.cl;
			}
		:ppid_7:pid_8 = spec::Trickle.Node.ControlProcess.cp0;
		:ppid_7:pid_9 = spec::Trickle.Node.ControlProcess.cp0_init;
		:ppid_7:pid_10 = spec::Trickle.Node.ControlProcess.cp1;
		:ppid_7:pid_11 = spec::Trickle.Node.ControlProcess.cp2;
		:ppid_7:pid_12 = spec::Trickle.Node.ControlProcess.cp3;
		:ppid_6:pid_13 = run::Trickle.n1.DataProcess1; // model is spec::Trickle.Node.DataProcess;
			DATA{
				:ppid_6:pid_13:mySeq = spec::Trickle.Node.DataProcess.mySeq;
				:ppid_6:pid_13:k = spec::Trickle.Node.DataProcess.k;
				:ppid_6:pid_13:c = spec::Trickle.Node.DataProcess.c;
				:ppid_6:pid_13:e = spec::Trickle.Node.DataProcess.e;
				:ppid_6:pid_13:tau = spec::Trickle.Node.DataProcess.tau;
				:ppid_6:pid_13:tau_l = spec::Trickle.Node.DataProcess.tau_l;
				:ppid_6:pid_13:tau_h = spec::Trickle.Node.DataProcess.tau_h;
				:ppid_6:pid_13:i = spec::Trickle.Node.DataProcess.i;
				:ppid_6:pid_13:t = spec::Trickle.Node.DataProcess.t;
				:ppid_6:pid_13:consistent = spec::Trickle.Node.DataProcess.consistent;
				:ppid_6:pid_13:cl = spec::Trickle.Node.DataProcess.cl;
				:ppid_6:pid_13:d.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_6:pid_13:d.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_6:pid_13:d.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_13:pid_14 = spec::Trickle.Node.DataProcess.dp0;
		:ppid_13:pid_15 = spec::Trickle.Node.DataProcess.dp1;
		:ppid_13:pid_16 = spec::Trickle.Node.DataProcess.dp2;
		:ppid_13:pid_17 = spec::Trickle.Node.DataProcess.dp3;
		:ppid_6:pid_18 = run::Trickle.n1.DataProcess2; // model is spec::Trickle.Node.DataProcess;
			DATA{
				:ppid_6:pid_18:mySeq = spec::Trickle.Node.DataProcess.mySeq;
				:ppid_6:pid_18:k = spec::Trickle.Node.DataProcess.k;
				:ppid_6:pid_18:c = spec::Trickle.Node.DataProcess.c;
				:ppid_6:pid_18:e = spec::Trickle.Node.DataProcess.e;
				:ppid_6:pid_18:tau = spec::Trickle.Node.DataProcess.tau;
				:ppid_6:pid_18:tau_l = spec::Trickle.Node.DataProcess.tau_l;
				:ppid_6:pid_18:tau_h = spec::Trickle.Node.DataProcess.tau_h;
				:ppid_6:pid_18:i = spec::Trickle.Node.DataProcess.i;
				:ppid_6:pid_18:t = spec::Trickle.Node.DataProcess.t;
				:ppid_6:pid_18:consistent = spec::Trickle.Node.DataProcess.consistent;
				:ppid_6:pid_18:cl = spec::Trickle.Node.DataProcess.cl;
				:ppid_6:pid_18:d.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_6:pid_18:d.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_6:pid_18:d.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_18:pid_19 = spec::Trickle.Node.DataProcess.dp0;
		:ppid_18:pid_20 = spec::Trickle.Node.DataProcess.dp1;
		:ppid_18:pid_21 = spec::Trickle.Node.DataProcess.dp2;
		:ppid_18:pid_22 = spec::Trickle.Node.DataProcess.dp3;
		:ppid_1:pid_23 = run::Trickle.n2; // model is spec::Trickle.Node;
			BUFFER NUMBER = 1;
			/*BUFFER{
				:ppid_1:pid_23:bufferNode = spec::Trickle.Node.bufferNode;
			}*/
			DATA{
				:ppid_1:pid_23:my_buff[0].seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_23:my_buff[0].fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_23:my_buff[0].offset = spec::Trickle.DATA_MESSAGE.offset;
				:ppid_1:pid_23:my_buff[1].seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_23:my_buff[1].fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_23:my_buff[1].offset = spec::Trickle.DATA_MESSAGE.offset;
				:ppid_1:pid_23:firmware[0] = spec::Trickle.Node.firmware;
				:ppid_1:pid_23:firmware[1] = spec::Trickle.Node.firmware;
				:ppid_1:pid_23:myseq_buff[0] = spec::Trickle.Node.myseq_buff;
				:ppid_1:pid_23:myseq_buff[1] = spec::Trickle.Node.myseq_buff;
				:ppid_1:pid_23:mydp_run[0] = spec::Trickle.Node.mydp_run;
				:ppid_1:pid_23:mydp_run[1] = spec::Trickle.Node.mydp_run;
				:ppid_1:pid_23:$time = spec::Trickle.Node.$time;
				:ppid_1:pid_23:z = spec::Trickle.Node.z;
				:ppid_1:pid_23:coverageProp = spec::Trickle.Node.coverageProp;
				:ppid_1:pid_23:seq_buff[0] = spec::Trickle.Node.seq_buff;
				:ppid_1:pid_23:seq_buff[1] = spec::Trickle.Node.seq_buff;
				:ppid_1:pid_23:i = spec::Trickle.Node.i;
				:ppid_1:pid_23:localTime = spec::Trickle.Node.localTime;
				:ppid_1:pid_23:localPC = spec::Trickle.Node.localPC;
				:ppid_1:pid_23:localPtC = spec::Trickle.Node.localPtC;
				:ppid_1:pid_23:new_seq_buff = spec::Trickle.Node.new_seq_buff;
				:ppid_1:pid_23:new_seq = spec::Trickle.Node.new_seq;
				:ppid_1:pid_23:new_fragment = spec::Trickle.Node.new_fragment;
				:ppid_1:pid_23:new_offset = spec::Trickle.Node.new_offset;
				:ppid_1:pid_23:timeEmit = spec::Trickle.Node.timeEmit;
			}
			INTERFACE{
				:ppid_1:pid_23:ControlMsg = spec::Trickle.Node.ControlMsg;
				:ppid_1:pid_23:DataMsg = spec::Trickle.Node.DataMsg;
				:ppid_1:pid_23:Log = spec::Trickle.Node.Log;
			}
		:ppid_23:pid_24 = spec::Trickle.Node.ControlProcess;
			DATA{
				:ppid_23:pid_24:k = spec::Trickle.Node.ControlProcess.k;
				:ppid_23:pid_24:c = spec::Trickle.Node.ControlProcess.c;
				:ppid_23:pid_24:e = spec::Trickle.Node.ControlProcess.e;
				:ppid_23:pid_24:tau = spec::Trickle.Node.ControlProcess.tau;
				:ppid_23:pid_24:tau_l = spec::Trickle.Node.ControlProcess.tau_l;
				:ppid_23:pid_24:tau_h = spec::Trickle.Node.ControlProcess.tau_h;
				:ppid_23:pid_24:i = spec::Trickle.Node.ControlProcess.i;
				:ppid_23:pid_24:t = spec::Trickle.Node.ControlProcess.t;
				:ppid_23:pid_24:consistent = spec::Trickle.Node.ControlProcess.consistent;
				:ppid_23:pid_24:cl = spec::Trickle.Node.ControlProcess.cl;
			}
		:ppid_24:pid_25 = spec::Trickle.Node.ControlProcess.cp0;
		:ppid_24:pid_26 = spec::Trickle.Node.ControlProcess.cp0_init;
		:ppid_24:pid_27 = spec::Trickle.Node.ControlProcess.cp1;
		:ppid_24:pid_28 = spec::Trickle.Node.ControlProcess.cp2;
		:ppid_24:pid_29 = spec::Trickle.Node.ControlProcess.cp3;
		:ppid_23:pid_30 = run::Trickle.n2.DataProcess1; // model is spec::Trickle.Node.DataProcess;
			DATA{
				:ppid_23:pid_30:mySeq = spec::Trickle.Node.DataProcess.mySeq;
				:ppid_23:pid_30:k = spec::Trickle.Node.DataProcess.k;
				:ppid_23:pid_30:c = spec::Trickle.Node.DataProcess.c;
				:ppid_23:pid_30:e = spec::Trickle.Node.DataProcess.e;
				:ppid_23:pid_30:tau = spec::Trickle.Node.DataProcess.tau;
				:ppid_23:pid_30:tau_l = spec::Trickle.Node.DataProcess.tau_l;
				:ppid_23:pid_30:tau_h = spec::Trickle.Node.DataProcess.tau_h;
				:ppid_23:pid_30:i = spec::Trickle.Node.DataProcess.i;
				:ppid_23:pid_30:t = spec::Trickle.Node.DataProcess.t;
				:ppid_23:pid_30:consistent = spec::Trickle.Node.DataProcess.consistent;
				:ppid_23:pid_30:cl = spec::Trickle.Node.DataProcess.cl;
				:ppid_23:pid_30:d.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_23:pid_30:d.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_23:pid_30:d.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_30:pid_31 = spec::Trickle.Node.DataProcess.dp0;
		:ppid_30:pid_32 = spec::Trickle.Node.DataProcess.dp1;
		:ppid_30:pid_33 = spec::Trickle.Node.DataProcess.dp2;
		:ppid_30:pid_34 = spec::Trickle.Node.DataProcess.dp3;
		:ppid_23:pid_35 = run::Trickle.n2.DataProcess2; // model is spec::Trickle.Node.DataProcess;
			DATA{
				:ppid_23:pid_35:mySeq = spec::Trickle.Node.DataProcess.mySeq;
				:ppid_23:pid_35:k = spec::Trickle.Node.DataProcess.k;
				:ppid_23:pid_35:c = spec::Trickle.Node.DataProcess.c;
				:ppid_23:pid_35:e = spec::Trickle.Node.DataProcess.e;
				:ppid_23:pid_35:tau = spec::Trickle.Node.DataProcess.tau;
				:ppid_23:pid_35:tau_l = spec::Trickle.Node.DataProcess.tau_l;
				:ppid_23:pid_35:tau_h = spec::Trickle.Node.DataProcess.tau_h;
				:ppid_23:pid_35:i = spec::Trickle.Node.DataProcess.i;
				:ppid_23:pid_35:t = spec::Trickle.Node.DataProcess.t;
				:ppid_23:pid_35:consistent = spec::Trickle.Node.DataProcess.consistent;
				:ppid_23:pid_35:cl = spec::Trickle.Node.DataProcess.cl;
				:ppid_23:pid_35:d.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_23:pid_35:d.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_23:pid_35:d.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_35:pid_36 = spec::Trickle.Node.DataProcess.dp0;
		:ppid_35:pid_37 = spec::Trickle.Node.DataProcess.dp1;
		:ppid_35:pid_38 = spec::Trickle.Node.DataProcess.dp2;
		:ppid_35:pid_39 = spec::Trickle.Node.DataProcess.dp3;
		:ppid_1:pid_40 = run::Trickle.n3; // model is spec::Trickle.Node;
			BUFFER NUMBER = 1;
			/*BUFFER{
				:ppid_1:pid_40:bufferNode = spec::Trickle.Node.bufferNode;
			}*/
			DATA{
				:ppid_1:pid_40:my_buff[0].seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_40:my_buff[0].fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_40:my_buff[0].offset = spec::Trickle.DATA_MESSAGE.offset;
				:ppid_1:pid_40:my_buff[1].seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_40:my_buff[1].fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_40:my_buff[1].offset = spec::Trickle.DATA_MESSAGE.offset;
				:ppid_1:pid_40:firmware[0] = spec::Trickle.Node.firmware;
				:ppid_1:pid_40:firmware[1] = spec::Trickle.Node.firmware;
				:ppid_1:pid_40:myseq_buff[0] = spec::Trickle.Node.myseq_buff;
				:ppid_1:pid_40:myseq_buff[1] = spec::Trickle.Node.myseq_buff;
				:ppid_1:pid_40:mydp_run[0] = spec::Trickle.Node.mydp_run;
				:ppid_1:pid_40:mydp_run[1] = spec::Trickle.Node.mydp_run;
				:ppid_1:pid_40:$time = spec::Trickle.Node.$time;
				:ppid_1:pid_40:z = spec::Trickle.Node.z;
				:ppid_1:pid_40:coverageProp = spec::Trickle.Node.coverageProp;
				:ppid_1:pid_40:seq_buff[0] = spec::Trickle.Node.seq_buff;
				:ppid_1:pid_40:seq_buff[1] = spec::Trickle.Node.seq_buff;
				:ppid_1:pid_40:i = spec::Trickle.Node.i;
				:ppid_1:pid_40:localTime = spec::Trickle.Node.localTime;
				:ppid_1:pid_40:localPC = spec::Trickle.Node.localPC;
				:ppid_1:pid_40:localPtC = spec::Trickle.Node.localPtC;
				:ppid_1:pid_40:new_seq_buff = spec::Trickle.Node.new_seq_buff;
				:ppid_1:pid_40:new_seq = spec::Trickle.Node.new_seq;
				:ppid_1:pid_40:new_fragment = spec::Trickle.Node.new_fragment;
				:ppid_1:pid_40:new_offset = spec::Trickle.Node.new_offset;
				:ppid_1:pid_40:timeEmit = spec::Trickle.Node.timeEmit;
			}
			INTERFACE{
				:ppid_1:pid_40:ControlMsg = spec::Trickle.Node.ControlMsg;
				:ppid_1:pid_40:DataMsg = spec::Trickle.Node.DataMsg;
				:ppid_1:pid_40:Log = spec::Trickle.Node.Log;
			}
		:ppid_40:pid_41 = spec::Trickle.Node.ControlProcess;
			DATA{
				:ppid_40:pid_41:k = spec::Trickle.Node.ControlProcess.k;
				:ppid_40:pid_41:c = spec::Trickle.Node.ControlProcess.c;
				:ppid_40:pid_41:e = spec::Trickle.Node.ControlProcess.e;
				:ppid_40:pid_41:tau = spec::Trickle.Node.ControlProcess.tau;
				:ppid_40:pid_41:tau_l = spec::Trickle.Node.ControlProcess.tau_l;
				:ppid_40:pid_41:tau_h = spec::Trickle.Node.ControlProcess.tau_h;
				:ppid_40:pid_41:i = spec::Trickle.Node.ControlProcess.i;
				:ppid_40:pid_41:t = spec::Trickle.Node.ControlProcess.t;
				:ppid_40:pid_41:consistent = spec::Trickle.Node.ControlProcess.consistent;
				:ppid_40:pid_41:cl = spec::Trickle.Node.ControlProcess.cl;
			}
		:ppid_41:pid_42 = spec::Trickle.Node.ControlProcess.cp0;
		:ppid_41:pid_43 = spec::Trickle.Node.ControlProcess.cp0_init;
		:ppid_41:pid_44 = spec::Trickle.Node.ControlProcess.cp1;
		:ppid_41:pid_45 = spec::Trickle.Node.ControlProcess.cp2;
		:ppid_41:pid_46 = spec::Trickle.Node.ControlProcess.cp3;
		:ppid_40:pid_47 = run::Trickle.n3.DataProcess1; // model is spec::Trickle.Node.DataProcess;
			DATA{
				:ppid_40:pid_47:mySeq = spec::Trickle.Node.DataProcess.mySeq;
				:ppid_40:pid_47:k = spec::Trickle.Node.DataProcess.k;
				:ppid_40:pid_47:c = spec::Trickle.Node.DataProcess.c;
				:ppid_40:pid_47:e = spec::Trickle.Node.DataProcess.e;
				:ppid_40:pid_47:tau = spec::Trickle.Node.DataProcess.tau;
				:ppid_40:pid_47:tau_l = spec::Trickle.Node.DataProcess.tau_l;
				:ppid_40:pid_47:tau_h = spec::Trickle.Node.DataProcess.tau_h;
				:ppid_40:pid_47:i = spec::Trickle.Node.DataProcess.i;
				:ppid_40:pid_47:t = spec::Trickle.Node.DataProcess.t;
				:ppid_40:pid_47:consistent = spec::Trickle.Node.DataProcess.consistent;
				:ppid_40:pid_47:cl = spec::Trickle.Node.DataProcess.cl;
				:ppid_40:pid_47:d.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_40:pid_47:d.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_40:pid_47:d.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_47:pid_48 = spec::Trickle.Node.DataProcess.dp0;
		:ppid_47:pid_49 = spec::Trickle.Node.DataProcess.dp1;
		:ppid_47:pid_50 = spec::Trickle.Node.DataProcess.dp2;
		:ppid_47:pid_51 = spec::Trickle.Node.DataProcess.dp3;
		:ppid_40:pid_52 = run::Trickle.n3.DataProcess2; // model is spec::Trickle.Node.DataProcess;
			DATA{
				:ppid_40:pid_52:mySeq = spec::Trickle.Node.DataProcess.mySeq;
				:ppid_40:pid_52:k = spec::Trickle.Node.DataProcess.k;
				:ppid_40:pid_52:c = spec::Trickle.Node.DataProcess.c;
				:ppid_40:pid_52:e = spec::Trickle.Node.DataProcess.e;
				:ppid_40:pid_52:tau = spec::Trickle.Node.DataProcess.tau;
				:ppid_40:pid_52:tau_l = spec::Trickle.Node.DataProcess.tau_l;
				:ppid_40:pid_52:tau_h = spec::Trickle.Node.DataProcess.tau_h;
				:ppid_40:pid_52:i = spec::Trickle.Node.DataProcess.i;
				:ppid_40:pid_52:t = spec::Trickle.Node.DataProcess.t;
				:ppid_40:pid_52:consistent = spec::Trickle.Node.DataProcess.consistent;
				:ppid_40:pid_52:cl = spec::Trickle.Node.DataProcess.cl;
				:ppid_40:pid_52:d.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_40:pid_52:d.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_40:pid_52:d.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_52:pid_53 = spec::Trickle.Node.DataProcess.dp0;
		:ppid_52:pid_54 = spec::Trickle.Node.DataProcess.dp1;
		:ppid_52:pid_55 = spec::Trickle.Node.DataProcess.dp2;
		:ppid_52:pid_56 = spec::Trickle.Node.DataProcess.dp3;
	}
	PC: true
	PtC: true
	DATA{
		:pid_2:$time = 0;
		:pid_2:z = $delta#initial;
		:pid_2:cl_o = 0;
		:pid_6:my_buff[0].seq = 1;
		:pid_6:my_buff[0].fragment = FRAGMENT_0;
		:pid_6:my_buff[0].offset = 0;
		:pid_6:my_buff[1].seq = 2;
		:pid_6:my_buff[1].fragment = FRAGMENT_1;
		:pid_6:my_buff[1].offset = 1;
		:pid_6:firmware[0] = FRAGMENT_0;
		:pid_6:firmware[1] = FRAGMENT_1;
		:pid_6:myseq_buff[0] = 1;
		:pid_6:myseq_buff[1] = 1;
		:pid_6:mydp_run[0] = true;
		:pid_6:mydp_run[1] = true;
		:pid_6:$time = 0;
		:pid_6:z = $delta#initial;
		:pid_6:coverageProp = false;
		:pid_6:seq_buff[0] = seq_buff[0]_0;
		:pid_6:seq_buff[1] = seq_buff[1]_0;
		:pid_6:i = i_0;
		:pid_6:localTime = 0;
		:pid_6:localPC = true;
		:pid_6:localPtC = true;
		:pid_6:new_seq_buff = new_seq_buff_0;
		:pid_6:new_seq = new_seq_0;
		:pid_6:new_fragment = new_fragment_0;
		:pid_6:new_offset = new_offset_0;
		:pid_6:timeEmit = timeEmit_0;
		:pid_7:k = k_0;
		:pid_7:c = c_0;
		:pid_7:e = e_0;
		:pid_7:tau = tau_0;
		:pid_7:tau_l = tau_l_0;
		:pid_7:tau_h = tau_h_0;
		:pid_7:i = i_0;
		:pid_7:t = t_0;
		:pid_7:consistent = consistent_0;
		:pid_7:cl = 0;
		:pid_13:mySeq = 1;
		:pid_13:k = k_0;
		:pid_13:c = c_0;
		:pid_13:e = e_0;
		:pid_13:tau = tau_0;
		:pid_13:tau_l = tau_l_0;
		:pid_13:tau_h = tau_h_0;
		:pid_13:i = i_0;
		:pid_13:t = t_0;
		:pid_13:consistent = consistent_0;
		:pid_13:cl = 0;
		:pid_13:d.seq = d.seq_0;
		:pid_13:d.fragment = d.fragment_0;
		:pid_13:d.offset = d.offset_0;
		:pid_18:mySeq = 2;
		:pid_18:k = k_1;
		:pid_18:c = c_1;
		:pid_18:e = e_1;
		:pid_18:tau = tau_1;
		:pid_18:tau_l = tau_l_1;
		:pid_18:tau_h = tau_h_1;
		:pid_18:i = i_1;
		:pid_18:t = t_1;
		:pid_18:consistent = consistent_1;
		:pid_18:cl = 0;
		:pid_18:d.seq = d.seq_1;
		:pid_18:d.fragment = d.fragment_1;
		:pid_18:d.offset = d.offset_1;
		:pid_23:my_buff[0].seq = 0;
		:pid_23:my_buff[0].fragment = UNDEF_FRAGMENT;
		:pid_23:my_buff[0].offset = 0;
		:pid_23:my_buff[1].seq = 0;
		:pid_23:my_buff[1].fragment = UNDEF_FRAGMENT;
		:pid_23:my_buff[1].offset = 1;
		:pid_23:firmware[0] = UNDEF_FRAGMENT;
		:pid_23:firmware[1] = UNDEF_FRAGMENT;
		:pid_23:myseq_buff[0] = 0;
		:pid_23:myseq_buff[1] = 0;
		:pid_23:mydp_run[0] = false;
		:pid_23:mydp_run[1] = false;
		:pid_23:$time = 0;
		:pid_23:z = $delta#initial;
		:pid_23:coverageProp = false;
		:pid_23:seq_buff[0] = seq_buff[0]_1;
		:pid_23:seq_buff[1] = seq_buff[1]_1;
		:pid_23:i = i_1;
		:pid_23:localTime = 0;
		:pid_23:localPC = true;
		:pid_23:localPtC = true;
		:pid_23:new_seq_buff = new_seq_buff_1;
		:pid_23:new_seq = new_seq_1;
		:pid_23:new_fragment = new_fragment_1;
		:pid_23:new_offset = new_offset_1;
		:pid_23:timeEmit = timeEmit_1;
		:pid_24:k = k_1;
		:pid_24:c = c_1;
		:pid_24:e = e_1;
		:pid_24:tau = tau_1;
		:pid_24:tau_l = tau_l_1;
		:pid_24:tau_h = tau_h_1;
		:pid_24:i = i_1;
		:pid_24:t = t_1;
		:pid_24:consistent = consistent_1;
		:pid_24:cl = 0;
		:pid_30:mySeq = 1;
		:pid_30:k = k_2;
		:pid_30:c = c_2;
		:pid_30:e = e_2;
		:pid_30:tau = tau_2;
		:pid_30:tau_l = tau_l_2;
		:pid_30:tau_h = tau_h_2;
		:pid_30:i = i_2;
		:pid_30:t = t_2;
		:pid_30:consistent = consistent_2;
		:pid_30:cl = 0;
		:pid_30:d.seq = d.seq_2;
		:pid_30:d.fragment = d.fragment_2;
		:pid_30:d.offset = d.offset_2;
		:pid_35:mySeq = 2;
		:pid_35:k = k_3;
		:pid_35:c = c_3;
		:pid_35:e = e_3;
		:pid_35:tau = tau_3;
		:pid_35:tau_l = tau_l_3;
		:pid_35:tau_h = tau_h_3;
		:pid_35:i = i_3;
		:pid_35:t = t_3;
		:pid_35:consistent = consistent_3;
		:pid_35:cl = 0;
		:pid_35:d.seq = d.seq_3;
		:pid_35:d.fragment = d.fragment_3;
		:pid_35:d.offset = d.offset_3;
		:pid_40:my_buff[0].seq = 0;
		:pid_40:my_buff[0].fragment = UNDEF_FRAGMENT;
		:pid_40:my_buff[0].offset = 0;
		:pid_40:my_buff[1].seq = 0;
		:pid_40:my_buff[1].fragment = UNDEF_FRAGMENT;
		:pid_40:my_buff[1].offset = 1;
		:pid_40:firmware[0] = UNDEF_FRAGMENT;
		:pid_40:firmware[1] = UNDEF_FRAGMENT;
		:pid_40:myseq_buff[0] = 0;
		:pid_40:myseq_buff[1] = 0;
		:pid_40:mydp_run[0] = false;
		:pid_40:mydp_run[1] = false;
		:pid_40:$time = 0;
		:pid_40:z = $delta#initial;
		:pid_40:coverageProp = false;
		:pid_40:seq_buff[0] = seq_buff[0]_2;
		:pid_40:seq_buff[1] = seq_buff[1]_2;
		:pid_40:i = i_2;
		:pid_40:localTime = 0;
		:pid_40:localPC = true;
		:pid_40:localPtC = true;
		:pid_40:new_seq_buff = new_seq_buff_2;
		:pid_40:new_seq = new_seq_2;
		:pid_40:new_fragment = new_fragment_2;
		:pid_40:new_offset = new_offset_2;
		:pid_40:timeEmit = timeEmit_2;
		:pid_41:k = k_2;
		:pid_41:c = c_2;
		:pid_41:e = e_2;
		:pid_41:tau = tau_2;
		:pid_41:tau_l = tau_l_2;
		:pid_41:tau_h = tau_h_2;
		:pid_41:i = i_2;
		:pid_41:t = t_2;
		:pid_41:consistent = consistent_2;
		:pid_41:cl = 0;
		:pid_47:mySeq = 1;
		:pid_47:k = k_4;
		:pid_47:c = c_4;
		:pid_47:e = e_4;
		:pid_47:tau = tau_4;
		:pid_47:tau_l = tau_l_4;
		:pid_47:tau_h = tau_h_4;
		:pid_47:i = i_4;
		:pid_47:t = t_4;
		:pid_47:consistent = consistent_4;
		:pid_47:cl = 0;
		:pid_47:d.seq = d.seq_4;
		:pid_47:d.fragment = d.fragment_4;
		:pid_47:d.offset = d.offset_4;
		:pid_52:mySeq = 2;
		:pid_52:k = k_5;
		:pid_52:c = c_5;
		:pid_52:e = e_5;
		:pid_52:tau = tau_5;
		:pid_52:tau_l = tau_l_5;
		:pid_52:tau_h = tau_h_5;
		:pid_52:i = i_5;
		:pid_52:t = t_5;
		:pid_52:consistent = consistent_5;
		:pid_52:cl = 0;
		:pid_52:d.seq = d.seq_5;
		:pid_52:d.fragment = d.fragment_5;
		:pid_52:d.offset = d.offset_5;
	}
	BUFFER{
		:pid_6:bufferNode:<FIFO>#0{ }
		:pid_23:bufferNode:<FIFO>#0{ }
		:pid_40:bufferNode:<FIFO>#0{ }
	}
	EC:<Id:2;Ev:2;H:1;W:1>{ SC: ( pid_4:o0 , ( pid_9:cp0_init , pid_14:dp0 , pid_19:dp0 ) , ( pid_26:cp0_init , pid_31:dp0 , pid_36:dp0 ) , ( pid_43:cp0_init , pid_48:dp0 , pid_53:dp0 ) )
		EXE: { |,| { |;| (:pid_42 , run) (:pid_42 , cp_init) } { |;| (:pid_25 , 
	run) (:pid_25 , cp_init) } { |;| (:pid_8 , run) (:pid_8 , cp_init) } { |;| 
	(:pid_3 , run) (:pid_3 , o_startup) } }
		DATA{
			:pid_2:cl_o = 0;
			:pid_7:k = 2;
			:pid_7:c = 0;
			:pid_7:e = 0;
			:pid_7:tau = 4;
			:pid_7:tau_l = 4;
			:pid_7:tau_h = 8;
			:pid_24:k = 2;
			:pid_24:c = 0;
			:pid_24:e = 0;
			:pid_24:tau = 4;
			:pid_24:tau_l = 4;
			:pid_24:tau_h = 8;
			:pid_41:k = 2;
			:pid_41:c = 0;
			:pid_41:e = 0;
			:pid_41:tau = 4;
			:pid_41:tau_l = 4;
			:pid_41:tau_h = 8;
		}
		EC:<Id:6;Ev:6;H:2;W:4>{ SC: ( pid_4:o0 , ( pid_9:cp0_init , pid_14:dp0 , pid_19:dp0 ) , ( pid_27:cp1 , pid_31:dp0 , pid_36:dp0 ) , ( pid_43:cp0_init , pid_48:dp0 , pid_53:dp0 ) )
			EXE: { |;| (:pid_23 , run) (:pid_24 , run) (:pid_26 , run) (:pid_26 
	, cp_init) }
			TRACE: { |;| (:pid_23 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_1 }) (:pid_26 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_4 }) 
	(:pid_26 , ${ output#env inst::Trickle.Node.Log 0 } @ z_1) }
			NC: ((t_4 < 4) && (0 <= (t_4 + -2)))
			PC: ((t_4 < 4) && (0 <= (t_4 + -2)))
			DATA{
				:pid_23:$time = z_1;
				:pid_23:z = z_1;
				:pid_23:localTime = z_1;
				:pid_23:localPC = ((t_4 < 4) && (0 <= (t_4 + -2)));
				:pid_23:localPtC = ($delta#initial > 0);
				:pid_24:t = t_4;
				:pid_24:cl = 0;
				:pid_30:cl = z_1;
				:pid_35:cl = z_1;
			}
			EC:<Id:24;Ev:24;H:3;W:18>{ SC: ( pid_4:o0 , ( pid_9:cp0_init , pid_14:dp0 , pid_19:dp0 ) , ( pid_28:cp2 , pid_31:dp0 , pid_36:dp0 ) , ( pid_43:cp0_init , pid_48:dp0 , pid_53:dp0 ) )
				EXE: { |;| (:pid_23 , run) (:pid_24 , run) (:pid_27 , run) 
	(:pid_27 , cp_sendCM) }
				TRACE: { |;| (:pid_23 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_13 }) (:pid_27 , ${ output inst::Trickle.Node.ControlMsg [ 
	0 , 0 ] ${ + param::Trickle.Node.z_1 param::Trickle.Node.z_13 } } @ (z_1 + z_13))
	 }
				/*FLAGS{ COVERAGE-ELEMENT }*/
				INFO{
					<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#1->inst::Trickle.n2->ControlMsg" as trace="tpid#1->inst::Trickle.n2->ControlMsg">
				}
				DATA{
					:pid_23:$time = (z_1 + z_13);
					:pid_23:z = z_13;
					:pid_23:localTime = (z_1 + z_13);
					:pid_23:localPC = ((t_4 < 4) && (0 <= (t_4 + -2)));
					:pid_23:localPtC = ((z_13 == t_4) && ($delta#initial > 0) && (z_1 > 0));
					:pid_24:cl = z_13;
					:pid_30:cl = (z_1 + z_13);
					:pid_35:cl = (z_1 + z_13);
				}
				BUFFER{
					:pid_6:bufferNode:<FIFO>#0{
						:pid_23:ControlMsg([ 0 , 0 ] , (z_1 + z_13));
					}
					:pid_40:bufferNode:<FIFO>#0{
						:pid_23:ControlMsg([ 0 , 0 ] , (z_1 + z_13));
					}
				}
				EC:<Id:103;Ev:35;H:4;W:79>{ SC: ( pid_4:o0 , ( pid_10:cp1 , pid_14:dp0 , pid_19:dp0 ) , ( pid_28:cp2 , pid_31:dp0 , pid_36:dp0 ) , ( pid_43:cp0_init , pid_48:dp0 , pid_53:dp0 ) )
					EXE: { |;| (:pid_6 , run) (:pid_7 , run) (:pid_9 , run) 
	(:pid_9 , cp_init) }
					TRACE: { |;| (:pid_6 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_66 }) (:pid_9 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_52 }) 
	(:pid_9 , ${ output#env inst::Trickle.Node.Log 0 } @ z_66) }
					NC: ((t_52 < 4) && (0 <= (t_52 + -2)))
					PC: ((t_4 < 4) && (t_52 < 4) && (0 <= (t_4 + -2)) && (0 <= (t_52 + -2)))
					DATA{
						:pid_6:mydp_run[0] = false;
						:pid_6:mydp_run[1] = false;
						:pid_6:$time = z_66;
						:pid_6:z = z_66;
						:pid_6:coverageProp = true;
						:pid_6:localTime = z_66;
						:pid_6:localPC = ((t_52 < 4) && (0 <= (t_52 + -2)));
						:pid_6:localPtC = ($delta#initial > 0);
						:pid_7:t = t_52;
						:pid_7:cl = 0;
						:pid_13:cl = z_66;
						:pid_18:cl = z_66;
					}
					EC:<Id:155;Ev:57;H:5;W:79>{ SC: ( pid_4:o0 , ( pid_10:cp1 , pid_14:dp0 , pid_19:dp0 ) , ( pid_28:cp2 , pid_31:dp0 , pid_36:dp0 ) , ( pid_43:cp0_init , pid_48:dp0 , pid_53:dp0 ) )
						EXE: { |;| (:pid_6 , run) (:pid_7 , run) (:pid_10 , run) 
	(:pid_10 , cp1_receiveCM_inconsistent) }
						TRACE: { |;| (:pid_6 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_99 }) (:pid_10 , ${ input inst::Trickle.Node.ControlMsg [ 
	0 , 0 ] ${ + param::Trickle.Node.z_1 param::Trickle.Node.z_13 } } @ (z_66 + z_99)
	) (:pid_10 , ${ newfresh inst::Trickle.Node.ControlProcess.t 
	param::Trickle.Node.ControlProcess.t_75 }) }
						/*FLAGS{ COVERAGE-ELEMENT }*/
						INFO{
							<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#2->inst::Trickle.n1->ControlMsg" as trace="tpid#2->inst::Trickle.n1->ControlMsg">
						}
						NC: ((t_75 < 4) && (0 <= (t_75 + -2)))
						PC: ((t_4 < 4) && (t_52 < 4) && (t_75 < 4) && (0 <= (t_4 + -2)) && (0 <= (t_52 + -2))
	 && (0 <= (t_75 + -2)))
						DATA{
							:pid_6:mydp_run[0] = true;
							:pid_6:mydp_run[1] = true;
							:pid_6:$time = (z_66 + z_99);
							:pid_6:z = z_99;
							:pid_6:seq_buff[0] = 0;
							:pid_6:seq_buff[1] = 0;
							:pid_6:localTime = (z_66 + z_99);
							:pid_6:localPC = ((t_52 < 4) && (t_75 < 4) && (0 <= (t_52 + -2)) && (0 <= (t_75 + -2)));
							:pid_6:localPtC = ((z_99 < t_52) && ((z_1 + z_13) <= (z_66 + z_99)) && ($delta#initial > 0) && (z_66 > 0));
							:pid_6:timeEmit = (z_1 + z_13);
							:pid_7:c = 0;
							:pid_7:e = 0;
							:pid_7:i = 2;
							:pid_7:t = t_75;
							:pid_7:consistent = false;
							:pid_7:cl = 0;
							:pid_13:cl = (z_66 + z_99);
							:pid_18:cl = (z_66 + z_99);
						}
						BUFFER{
							:pid_6:bufferNode:<FIFO>#0{ }
						}
						EC:<Id:271;Ev:63;H:6;W:79>{ SC: ( pid_4:o0 , ( pid_10:cp1 , pid_14:dp0 , pid_20:dp1 ) , ( pid_28:cp2 , pid_31:dp0 , pid_36:dp0 ) , ( pid_43:cp0_init , pid_48:dp0 , pid_53:dp0 ) )
							EXE: { |;| (:pid_6 , run) (:pid_18 , run) (:pid_19 , 
	run) (:pid_19 , dp_init) }
							TRACE: { |;| (:pid_6 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_165 }) (:pid_19 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_305 }) }
							NC: ((t_305 < 4) && (0 <= (t_305 + -2)))
							PC: ((t_4 < 4) && (t_52 < 4) && (t_75 < 4) && (t_305 < 4) && (0 <= (t_4 + -2)) && (0 
	<= (t_52 + -2)) && (0 <= (t_75 + -2)) && (0 <= (t_305 + -2)))
							DATA{
								:pid_6:$time = (z_165 + z_66 + z_99);
								:pid_6:z = z_165;
								:pid_6:localTime = (z_165 + z_66 + z_99);
								:pid_6:localPC = ((t_52 < 4) && (t_75 < 4) && (t_305 < 4) && (0 <= (t_52 + -2)) && (0 <= (t_75 + -2)) && (0 <= (t_305 + -2)));
								:pid_6:localPtC = ((z_99 < t_52) && ((z_1 + z_13) <= (z_66 + z_99)) && ($delta#initial > 0) && (z_66 > 0) && (z_99 > 0));
								:pid_7:cl = z_165;
								:pid_13:cl = (z_165 + z_66 + z_99);
								:pid_18:k = 2;
								:pid_18:c = 0;
								:pid_18:e = 0;
								:pid_18:tau = 4;
								:pid_18:tau_l = 4;
								:pid_18:tau_h = 8;
								:pid_18:t = t_305;
								:pid_18:cl = 0;
							}
							EC:<Id:304;Ev:80;H:7;W:241>{ SC: ( pid_4:o0 , ( pid_10:cp1 , pid_14:dp0 , pid_20:dp1 ) , ( pid_28:cp2 , pid_31:dp0 , pid_36:dp0 ) , ( pid_44:cp1 , pid_48:dp0 , pid_53:dp0 ) )
								EXE: { |;| (:pid_40 , run) (:pid_41 , run) 
	(:pid_43 , run) (:pid_43 , cp_init) }
								TRACE: { |;| (:pid_40 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_185 }) (:pid_43 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_142 }) 
	(:pid_43 , ${ output#env inst::Trickle.Node.Log 0 } @ z_185) }
								NC: ((t_142 < 4) && (0 <= (t_142 + -2)))
								PC: ((t_142 < 4) && (t_4 < 4) && (t_52 < 4) && (t_75 < 4) && (t_305 < 4) && (0 <= 
	(t_142 + -2)) && (0 <= (t_4 + -2)) && (0 <= (t_52 + -2)) && (0 <= (t_75 + -2)) 
	&& (0 <= (t_305 + -2)))
								DATA{
									:pid_40:$time = z_185;
									:pid_40:z = z_185;
									:pid_40:localTime = z_185;
									:pid_40:localPC = ((t_142 < 4) && (0 <= (t_142 + -2)));
									:pid_40:localPtC = ($delta#initial > 0);
									:pid_41:t = t_142;
									:pid_41:cl = 0;
									:pid_47:cl = z_185;
									:pid_52:cl = z_185;
								}
								EC:<Id:395;Ev:94;H:8;W:315>{ SC: ( pid_4:o0 , ( pid_10:cp1 , pid_14:dp0 , pid_20:dp1 ) , ( pid_28:cp2 , pid_31:dp0 , pid_36:dp0 ) , ( pid_44:cp1 , pid_48:dp0 , pid_53:dp0 ) )
									EXE: { |;| (:pid_40 , run) (:pid_41 , run) 
	(:pid_44 , run) (:pid_44 , cp1_receiveCM_consistent) }
									TRACE: { |;| (:pid_40 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_236 }) (:pid_44 , ${ input 
	inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + param::Trickle.Node.z_1 
	param::Trickle.Node.z_13 } } @ (z_185 + z_236)) }
									/*FLAGS{ COVERAGE-ELEMENT }*/
									INFO{
										<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#3->inst::Trickle.n3->ControlMsg" as trace="tpid#3->inst::Trickle.n3->ControlMsg">
									}
									DATA{
										:pid_40:$time = (z_185 + z_236);
										:pid_40:z = z_236;
										:pid_40:seq_buff[0] = 0;
										:pid_40:seq_buff[1] = 0;
										:pid_40:localTime = (z_185 + z_236);
										:pid_40:localPC = ((t_142 < 4) && (0 <= (t_142 + -2)));
										:pid_40:localPtC = ((z_236 < t_142) && ((z_1 + z_13) <= (z_185 + z_236)) && ($delta#initial > 0) && (z_185 > 0));
										:pid_40:timeEmit = (z_1 + z_13);
										:pid_41:c = 1;
										:pid_41:i = 2;
										:pid_41:consistent = true;
										:pid_41:cl = z_236;
										:pid_47:cl = (z_185 + z_236);
										:pid_52:cl = (z_185 + z_236);
									}
									BUFFER{
										:pid_40:bufferNode:<FIFO>#0{ }
									}
									EC:<Id:474;Ev:109;H:9;W:380>{ SC: ( pid_4:o0 , ( pid_11:cp2 , pid_14:dp0 , pid_20:dp1 ) , ( pid_28:cp2 , pid_31:dp0 , pid_36:dp0 ) , ( pid_44:cp1 , pid_48:dp0 , pid_53:dp0 ) )
										EXE: { |;| (:pid_6 , run) (:pid_7 , run) 
	(:pid_10 , run) (:pid_10 , cp_sendCM) }
										TRACE: { |;| (:pid_6 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_276 }) (:pid_10 , ${ output 
	inst::Trickle.Node.ControlMsg [ 1 , 1 ] ${ + param::Trickle.Node.z_165 
	param::Trickle.Node.z_276 param::Trickle.Node.z_66 param::Trickle.Node.z_99 } } 
	@ (z_165 + z_276 + z_66 + z_99)) }
										/*FLAGS{ COVERAGE-ELEMENT }*/
										INFO{
											<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#4->inst::Trickle.n1->ControlMsg" as trace="tpid#4->inst::Trickle.n1->ControlMsg">
										}
										DATA{
											:pid_6:$time = (z_165 + z_276 + z_66 + z_99);
											:pid_6:z = z_276;
											:pid_6:localTime = (z_165 + z_276 + z_66 + z_99);
											:pid_6:localPC = ((t_52 < 4) && (t_75 < 4) && (t_305 < 4) && (0 <= (t_52 + -2)) && (0 <= (t_75 + -2)) && (0 <= (t_305 + -2)));
											:pid_6:localPtC = (((z_165 + z_276) == t_75) && (z_99 < t_52) && ((z_1 + z_13) <= (z_66 + z_99)) && ($delta#initial > 0) && (z_165 > 0) && (z_66 > 0) && (z_99 > 0));
											:pid_7:cl = (z_165 + z_276);
											:pid_13:cl = (z_165 + z_276 + z_66 + z_99);
											:pid_18:cl = z_276;
										}
										BUFFER{
											:pid_23:bufferNode:<FIFO>#0{
												:pid_6:ControlMsg([ 1 , 1 ] , (z_165 + z_276 + z_66 + z_99));
											}
										}
										EC:<Id:555;Ev:125;H:10;W:446>{ SC: ( pid_4:o0 , ( pid_11:cp2 , pid_14:dp0 , pid_20:dp1 ) , ( pid_27:cp1 , pid_31:dp0 , pid_36:dp0 ) , ( pid_44:cp1 , pid_48:dp0 , pid_53:dp0 ) )
											EXE: { |;| (:pid_23 , run) (:pid_24 
	, run) (:pid_28 , run) (:pid_28 , cp2_receiveCM_inconsistent) }
											TRACE: { |;| (:pid_23 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_322 }) (:pid_28 , ${ input 
	inst::Trickle.Node.ControlMsg [ 1 , 1 ] ${ + param::Trickle.Node.z_165 
	param::Trickle.Node.z_276 param::Trickle.Node.z_66 param::Trickle.Node.z_99 } } 
	@ (z_1 + z_13 + z_322)) (:pid_28 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_233 }) }
											/*FLAGS{ COVERAGE-ELEMENT }*/
											INFO{
												<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#5->inst::Trickle.n2->ControlMsg" as trace="tpid#5->inst::Trickle.n2->ControlMsg">
											}
											NC: ((t_233 < 4) && (0 <= (t_233 + 
	-2)))
											PC: ((t_142 < 4) && (t_233 < 4) && (t_4 < 4) && (t_52 < 4) && (t_75 < 4) && (t_305 < 
	4) && (0 <= (t_142 + -2)) && (0 <= (t_233 + -2)) && (0 <= (t_4 + -2)) && (0 <= 
	(t_52 + -2)) && (0 <= (t_75 + -2)) && (0 <= (t_305 + -2)))
											DATA{
												:pid_23:mydp_run[0] = true;
												:pid_23:mydp_run[1] = true;
												:pid_23:$time = (z_1 + z_13 + z_322);
												:pid_23:z = z_322;
												:pid_23:seq_buff[0] = 1;
												:pid_23:seq_buff[1] = 1;
												:pid_23:localTime = (z_1 + z_13 + z_322);
												:pid_23:localPC = ((t_233 < 4) && (t_4 < 4) && (0 <= (t_233 + -2)) && (0 <= (t_4 + -2)));
												:pid_23:localPtC = ((z_13 == t_4) && ((z_13 + z_322) < 4) && ((z_165 + z_276 + z_66 + z_99) <= (z_1 + z_13 + z_322)) && ($delta#initial > 0) && (z_1 > 0) && (z_13 > 0));
												:pid_23:timeEmit = (z_165 + z_276 + z_66 + z_99);
												:pid_24:c = 0;
												:pid_24:e = 0;
												:pid_24:i = 2;
												:pid_24:t = t_233;
												:pid_24:consistent = false;
												:pid_24:cl = 0;
												:pid_30:cl = (z_1 + z_13 + z_322);
												:pid_35:cl = (z_1 + z_13 + z_322);
											}
											BUFFER{
												:pid_23:bufferNode:<FIFO>#0{ }
											}
											EC:<Id:649;Ev:143;H:11;W:524>{ SC: ( pid_4:o0 , ( pid_10:cp1 , pid_14:dp0 , pid_20:dp1 ) , ( pid_27:cp1 , pid_31:dp0 , pid_36:dp0 ) , ( pid_44:cp1 , pid_48:dp0 , pid_53:dp0 ) )
												EXE: { |;| (:pid_6 , run) 
	(:pid_7 , run) (:pid_11 , run) (:pid_11 , cp_resetTau) }
												TRACE: { |;| (:pid_6 , ${ 
	newfresh inst::Trickle.Node.z param::Trickle.Node.z_369 }) (:pid_11 , ${ 
	newfresh inst::Trickle.Node.ControlProcess.t 
	param::Trickle.Node.ControlProcess.t_260 }) }
												NC: ((t_260 < 8) && (0 <= (t_260 
	+ -4)))
												PC: ((t_142 < 4) && (t_233 < 4) && (t_260 < 8) && (t_4 < 4) && (t_52 < 4) && (t_75 < 
	4) && (t_305 < 4) && (0 <= (t_142 + -2)) && (0 <= (t_233 + -2)) && (0 <= (t_260 
	+ -4)) && (0 <= (t_4 + -2)) && (0 <= (t_52 + -2)) && (0 <= (t_75 + -2)) && (0 <= 
	(t_305 + -2)))
												DATA{
													:pid_6:$time = (z_165 + z_276 + z_369 + z_66 + z_99);
													:pid_6:z = z_369;
													:pid_6:localTime = (z_165 + z_276 + z_369 + z_66 + z_99);
													:pid_6:localPC = ((t_260 < 8) && (t_52 < 4) && (t_75 < 4) && (t_305 < 4) && (0 <= (t_260 + -4)) && (0 <= (t_52 + -2)) && (0 <= (t_75 + -2)) && (0 <= (t_305 + -2)));
													:pid_6:localPtC = (((z_165 + z_276) == t_75) && ((z_165 + z_276 + z_369) == 4) && (z_99 < t_52) && ((z_1 + z_13) <= (z_66 + z_99)) && ((z_165 + z_276 + z_369) > t_75) && ($delta#initial > 0) && (z_165 > 0) && (z_276 > 0) && (z_66 > 0) && (z_99 > 0));
													:pid_7:e = 1;
													:pid_7:tau = 8;
													:pid_7:t = t_260;
													:pid_7:cl = 0;
													:pid_13:cl = (z_165 + z_276 + z_369 + z_66 + z_99);
													:pid_18:cl = (z_276 + z_369);
												}
												EC:<Id:781;Ev:158;H:12;W:638>{ SC: ( pid_4:o0 , ( pid_10:cp1 , pid_14:dp0 , pid_20:dp1 ) , ( pid_27:cp1 , pid_31:dp0 , pid_36:dp0 ) , ( pid_45:cp2 , pid_48:dp0 , pid_53:dp0 ) )
													EXE: { |;| (:pid_40 , run) 
	(:pid_41 , run) (:pid_44 , run) (:pid_44 , cp_sendCM) }
													TRACE: { |;| (:pid_40 , ${ 
	newfresh inst::Trickle.Node.z param::Trickle.Node.z_425 }) (:pid_44 , ${ output 
	inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + param::Trickle.Node.z_185 
	param::Trickle.Node.z_236 param::Trickle.Node.z_425 } } @ (z_185 + z_236 + z_425)
	) }
													DATA{
														:pid_40:$time = (z_185 + z_236 + z_425);
														:pid_40:z = z_425;
														:pid_40:localTime = (z_185 + z_236 + z_425);
														:pid_40:localPC = ((t_142 < 4) && (0 <= (t_142 + -2)));
														:pid_40:localPtC = (((z_236 + z_425) == t_142) && (z_236 < t_142) && ((z_1 + z_13) <= (z_185 + z_236)) && ($delta#initial > 0) && (z_185 > 0) && (z_236 > 0));
														:pid_41:cl = (z_236 + z_425);
														:pid_47:cl = (z_185 + z_236 + z_425);
														:pid_52:cl = (z_185 + z_236 + z_425);
													}
													BUFFER{
														:pid_23:bufferNode:<FIFO>#0{
															:pid_40:ControlMsg([ 0 , 0 ] , (z_185 + z_236 + z_425));
														}
													}
													EC:<Id:885;Ev:184;H:13;W:727>{ SC: ( pid_4:o0 , ( pid_11:cp2 , pid_14:dp0 , pid_20:dp1 ) , ( pid_27:cp1 , pid_31:dp0 , pid_36:dp0 ) , ( pid_45:cp2 , pid_48:dp0 , pid_53:dp0 ) )
														EXE: { |;| (:pid_6 , run)
	 (:pid_7 , run) (:pid_10 , run) (:pid_10 , cp_sendCM) }
														TRACE: { |;| (:pid_6 , 
	${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_468 }) (:pid_10 , ${ 
	output inst::Trickle.Node.ControlMsg [ 1 , 1 ] ${ + param::Trickle.Node.z_165 
	param::Trickle.Node.z_276 param::Trickle.Node.z_369 param::Trickle.Node.z_468 
	param::Trickle.Node.z_66 param::Trickle.Node.z_99 } } @ (z_165 + z_276 + z_369 + 
	z_468 + z_66 + z_99)) }
														DATA{
															:pid_6:$time = (z_165 + z_276 + z_369 + z_468 + z_66 + z_99);
															:pid_6:z = z_468;
															:pid_6:localTime = (z_165 + z_276 + z_369 + z_468 + z_66 + z_99);
															:pid_6:localPC = ((t_260 < 8) && (t_52 < 4) && (t_75 < 4) && (t_305 < 4) && (0 <= (t_260 + -4)) && (0 <= (t_52 + -2)) && (0 <= (t_75 + -2)) && (0 <= (t_305 + -2)));
															:pid_6:localPtC = (((z_165 + z_276) == t_75) && ((z_165 + z_276 + z_369) == 4) && (z_468 == t_260) && (z_99 < t_52) && ((z_1 + z_13) <= (z_66 + z_99)) && ((z_165 + z_276 + z_369) > t_75) && ($delta#initial > 0) && (z_165 > 0) && (z_276 > 0) && (z_369 > 0) && (z_66 > 0) && (z_99 > 0));
															:pid_7:cl = z_468;
															:pid_13:cl = (z_165 + z_276 + z_369 + z_468 + z_66 + z_99);
															:pid_18:cl = (z_276 + z_369 + z_468);
														}
														BUFFER{
															:pid_23:bufferNode:<FIFO>#0{
																:pid_40:ControlMsg([ 0 , 0 ] , (z_185 + z_236 + z_425));
																:pid_6:ControlMsg([ 1 , 1 ] , (z_165 + z_276 + z_369 + z_468 + z_66 + z_99));
															}
														}
														EC:<Id:1087;Ev:199;H:14;W:903>{ SC: ( pid_4:o0 , ( pid_10:cp1 , pid_14:dp0 , pid_20:dp1 ) , ( pid_27:cp1 , pid_31:dp0 , pid_36:dp0 ) , ( pid_45:cp2 , pid_48:dp0 , pid_53:dp0 ) )
															EXE: { |;| (:pid_6 , 
	run) (:pid_7 , run) (:pid_11 , run) (:pid_11 , cp_resetTau) }
															TRACE: { |;| (:pid_6 
	, ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_546 }) (:pid_11 , ${ 
	newfresh inst::Trickle.Node.ControlProcess.t 
	param::Trickle.Node.ControlProcess.t_348 }) }
															NC: ((t_348 < 8) && 
	(0 <= (t_348 + -4)))
															PC: ((t_142 < 4) && (t_233 < 4) && (t_260 < 8) && (t_348 < 8) && (t_4 < 4) && (t_52 
	< 4) && (t_75 < 4) && (t_305 < 4) && (0 <= (t_142 + -2)) && (0 <= (t_233 + -2)) 
	&& (0 <= (t_260 + -4)) && (0 <= (t_348 + -4)) && (0 <= (t_4 + -2)) && (0 <= 
	(t_52 + -2)) && (0 <= (t_75 + -2)) && (0 <= (t_305 + -2)))
															DATA{
																:pid_6:$time = (z_165 + z_276 + z_369 + z_468 + z_546 + z_66 + z_99);
																:pid_6:z = z_546;
																:pid_6:localTime = (z_165 + z_276 + z_369 + z_468 + z_546 + z_66 + z_99);
																:pid_6:localPC = ((t_260 < 8) && (t_348 < 8) && (t_52 < 4) && (t_75 < 4) && (t_305 < 4) && (0 <= (t_260 + -4)) && (0 <= (t_348 + -4)) && (0 <= (t_52 + -2)) && (0 <= (t_75 + -2)) && (0 <= (t_305 + -2)));
																:pid_6:localPtC = (((z_165 + z_276) == t_75) && ((z_165 + z_276 + z_369) == 4) && ((z_468 + z_546) == 8) && (z_468 == t_260) && (z_99 < t_52) && ((z_1 + z_13) <= (z_66 + z_99)) && ((z_165 + z_276 + z_369) > t_75) && ((z_468 + z_546) > t_260) && ($delta#initial > 0) && (z_165 > 0) && (z_276 > 0) && (z_369 > 0) && (z_468 > 0) && (z_66 > 0) && (z_99 > 0));
																:pid_7:e = 2;
																:pid_7:tau = 8;
																:pid_7:t = t_348;
																:pid_7:cl = 0;
																:pid_13:cl = (z_165 + z_276 + z_369 + z_468 + z_546 + z_66 + z_99);
																:pid_18:cl = (z_276 + z_369 + z_468 + z_546);
															}
															EC:<Id:1210;Ev:218;H:15;W:1011>{ SC: ( pid_4:o0 , ( pid_10:cp1 , pid_14:dp0 , pid_20:dp1 ) , ( pid_28:cp2 , pid_31:dp0 , pid_36:dp0 ) , ( pid_45:cp2 , pid_48:dp0 , pid_53:dp0 ) )
																EXE: { |;| 
	(:pid_23 , run) (:pid_24 , run) (:pid_27 , run) (:pid_27 , cp_sendCM) }
																TRACE: { |;| 
	(:pid_23 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_592 }) 
	(:pid_27 , ${ output inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + 
	param::Trickle.Node.z_1 param::Trickle.Node.z_13 param::Trickle.Node.z_322 
	param::Trickle.Node.z_592 } } @ (z_1 + z_13 + z_322 + z_592)) }
																DATA{
																	:pid_23:$time = (z_1 + z_13 + z_322 + z_592);
																	:pid_23:z = z_592;
																	:pid_23:localTime = (z_1 + z_13 + z_322 + z_592);
																	:pid_23:localPC = ((t_233 < 4) && (t_4 < 4) && (0 <= (t_233 + -2)) && (0 <= (t_4 + -2)));
																	:pid_23:localPtC = ((z_13 == t_4) && (z_592 == t_233) && ((z_13 + z_322) < 4) && ((z_165 + z_276 + z_66 + z_99) <= (z_1 + z_13 + z_322)) && ($delta#initial > 0) && (z_1 > 0) && (z_13 > 0) && (z_322 > 0));
																	:pid_24:cl = z_592;
																	:pid_30:cl = (z_1 + z_13 + z_322 + z_592);
																	:pid_35:cl = (z_1 + z_13 + z_322 + z_592);
																}
																BUFFER{
																	:pid_6:bufferNode:<FIFO>#0{
																		:pid_23:ControlMsg([ 0 , 0 ] , (z_1 + z_13 + z_322 + z_592));
																	}
																	:pid_40:bufferNode:<FIFO>#0{
																		:pid_23:ControlMsg([ 0 , 0 ] , (z_1 + z_13 + z_322 + z_592));
																	}
																}
																EC:<Id:1368;Ev:247;H:16;W:1150>{ SC: ( pid_4:o0 , ( pid_10:cp1 , pid_14:dp0 , pid_20:dp1 ) , ( pid_28:cp2 , pid_31:dp0 , pid_36:dp0 ) , ( pid_45:cp2 , pid_48:dp0 , pid_53:dp0 ) )
																	EXE: { |;| 
	(:pid_40 , run) (:pid_41 , run) (:pid_45 , run) (:pid_45 , 
	cp2_receiveCM_consistent) }
																	TRACE: { |;| 
	(:pid_40 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_650 }) 
	(:pid_45 , ${ input inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + 
	param::Trickle.Node.z_1 param::Trickle.Node.z_13 param::Trickle.Node.z_322 
	param::Trickle.Node.z_592 } } @ (z_185 + z_236 + z_425 + z_650)) }
																	DATA{
																		:pid_40:$time = (z_185 + z_236 + z_425 + z_650);
																		:pid_40:z = z_650;
																		:pid_40:localTime = (z_185 + z_236 + z_425 + z_650);
																		:pid_40:localPC = ((t_142 < 4) && (0 <= (t_142 + -2)));
																		:pid_40:localPtC = (((z_236 + z_425) == t_142) && ((z_236 + z_425 + z_650) < 4) && (z_236 < t_142) && ((z_1 + z_13) <= (z_185 + z_236)) && ((z_1 + z_13 + z_322 + z_592) <= (z_185 + z_236 + z_425 + z_650)) && ($delta#initial > 0) && (z_185 > 0) && (z_236 > 0) && (z_425 > 0));
																		:pid_40:timeEmit = (z_1 + z_13 + z_322 + z_592);
																		:pid_41:c = 2;
																		:pid_41:i = 2;
																		:pid_41:cl = (z_236 + z_425 + z_650);
																		:pid_47:cl = (z_185 + z_236 + z_425 + z_650);
																		:pid_52:cl = (z_185 + z_236 + z_425 + z_650);
																	}
																	BUFFER{
																		:pid_40:bufferNode:<FIFO>#0{ }
																	}
																	EC:<Id:1594;Ev:288;H:17;W:1347>{ SC: ( pid_4:o0 , ( pid_10:cp1 , pid_14:dp0 , pid_20:dp1 ) , ( pid_28:cp2 , pid_31:dp0 , pid_36:dp0 ) , ( pid_45:cp2 , pid_48:dp0 , pid_53:dp0 ) )
																		EXE: { 
	|;| (:pid_23 , run) (:pid_24 , run) (:pid_28 , run) (:pid_28 , 
	cp2_receiveCM_consistent) }
																		TRACE: { 
	|;| (:pid_23 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_736 }) 
	(:pid_28 , ${ input inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + 
	param::Trickle.Node.z_185 param::Trickle.Node.z_236 param::Trickle.Node.z_425 } }
	 @ (z_1 + z_13 + z_322 + z_592 + z_736)) }
																		DATA{
																			:pid_23:$time = (z_1 + z_13 + z_322 + z_592 + z_736);
																			:pid_23:z = z_736;
																			:pid_23:seq_buff[0] = 0;
																			:pid_23:seq_buff[1] = 0;
																			:pid_23:localTime = (z_1 + z_13 + z_322 + z_592 + z_736);
																			:pid_23:localPC = ((t_233 < 4) && (t_4 < 4) && (0 <= (t_233 + -2)) && (0 <= (t_4 + -2)));
																			:pid_23:localPtC = ((z_13 == t_4) && (z_592 == t_233) && ((z_13 + z_322) < 4) && ((z_592 + z_736) < 4) && ((z_165 + z_276 + z_66 + z_99) <= (z_1 + z_13 + z_322)) && ((z_185 + z_236 + z_425) <= (z_1 + z_13 + z_322 + z_592 + z_736)) && ($delta#initial > 0) && (z_1 > 0) && (z_13 > 0) && (z_322 > 0) && (z_592 > 0));
																			:pid_23:timeEmit = (z_185 + z_236 + z_425);
																			:pid_24:c = 1;
																			:pid_24:i = 2;
																			:pid_24:consistent = true;
																			:pid_24:cl = (z_592 + z_736);
																			:pid_30:cl = (z_1 + z_13 + z_322 + z_592 + z_736);
																			:pid_35:cl = (z_1 + z_13 + z_322 + z_592 + z_736);
																		}
																		BUFFER{
																			:pid_23:bufferNode:<FIFO>#0{
																				:pid_6:ControlMsg([ 1 , 1 ] , (z_165 + z_276 + z_369 + z_468 + z_66 + z_99));
																			}
																		}
																		EC:<Id:1935;Ev:293;H:18;W:1647>{ SC: ( pid_4:o0 , ( pid_10:cp1 , pid_15:dp1 , pid_20:dp1 ) , ( pid_28:cp2 , pid_31:dp0 , pid_36:dp0 ) , ( pid_45:cp2 , pid_48:dp0 , pid_53:dp0 ) )
																			EXE: 
	{ |;| (:pid_6 , run) (:pid_13 , run) (:pid_14 , run) (:pid_14 , dp_init) }
																			
	TRACE: { |;| (:pid_6 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_858 }) (:pid_14 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_1418 }) }
																			NC: 
	((t_1418 < 4) && (0 <= (t_1418 + -2)))
																			PC: ((t_142 < 4) && (t_233 < 4) && (t_260 < 8) && (t_348 < 8) && (t_4 < 4) && (t_52 
	< 4) && (t_75 < 4) && (t_1418 < 4) && (t_305 < 4) && (0 <= (t_142 + -2)) && (0 
	<= (t_233 + -2)) && (0 <= (t_260 + -4)) && (0 <= (t_348 + -4)) && (0 <= (t_4 + 
	-2)) && (0 <= (t_52 + -2)) && (0 <= (t_75 + -2)) && (0 <= (t_1418 + -2)) && (0 
	<= (t_305 + -2)))
																			DATA{
																				:pid_6:$time = (z_165 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99);
																				:pid_6:z = z_858;
																				:pid_6:localTime = (z_165 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99);
																				:pid_6:localPC = ((t_260 < 8) && (t_348 < 8) && (t_52 < 4) && (t_75 < 4) && (t_1418 < 4) && (t_305 < 4) && (0 <= (t_260 + -4)) && (0 <= (t_348 + -4)) && (0 <= (t_52 + -2)) && (0 <= (t_75 + -2)) && (0 <= (t_1418 + -2)) && (0 <= (t_305 + -2)));
																				:pid_6:localPtC = (((z_165 + z_276) == t_75) && ((z_165 + z_276 + z_369) == 4) && ((z_468 + z_546) == 8) && (z_468 == t_260) && (z_99 < t_52) && ((z_1 + z_13) <= (z_66 + z_99)) && ((z_165 + z_276 + z_369) > t_75) && ((z_468 + z_546) > t_260) && ($delta#initial > 0) && (z_165 > 0) && (z_276 > 0) && (z_369 > 0) && (z_468 > 0) && (z_546 > 0) && (z_66 > 0) && (z_99 > 0));
																				:pid_7:cl = z_858;
																				:pid_13:k = 2;
																				:pid_13:c = 0;
																				:pid_13:e = 0;
																				:pid_13:tau = 4;
																				:pid_13:tau_l = 4;
																				:pid_13:tau_h = 8;
																				:pid_13:t = t_1418;
																				:pid_13:cl = 0;
																				:pid_18:cl = (z_276 + z_369 + z_468 + z_546 + z_858);
																			}
																			EC:<Id:1986;Ev:321;H:19;W:1693>{ SC: ( pid_4:o0 , ( pid_10:cp1 , pid_15:dp1 , pid_20:dp1 ) , ( pid_28:cp2 , pid_31:dp0 , pid_36:dp0 ) , ( pid_44:cp1 , pid_48:dp0 , pid_53:dp0 ) )
																				
	EXE: { |;| (:pid_40 , run) (:pid_41 , run) (:pid_45 , run) (:pid_45 , 
	cp_resetTau) }
																				
	TRACE: { |;| (:pid_40 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_875 }) (:pid_45 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_576 }) }
																				
	NC: ((t_576 < 8) && (0 <= (t_576 + -4)))
																				PC: ((t_142 < 4) && (t_233 < 4) && (t_260 < 8) && (t_348 < 8) && (t_4 < 4) && (t_52 
	< 4) && (t_576 < 8) && (t_75 < 4) && (t_1418 < 4) && (t_305 < 4) && (0 <= (t_142 
	+ -2)) && (0 <= (t_233 + -2)) && (0 <= (t_260 + -4)) && (0 <= (t_348 + -4)) && 
	(0 <= (t_4 + -2)) && (0 <= (t_52 + -2)) && (0 <= (t_576 + -4)) && (0 <= (t_75 + 
	-2)) && (0 <= (t_1418 + -2)) && (0 <= (t_305 + -2)))
																				DATA{
																					:pid_40:$time = (z_185 + z_236 + z_425 + z_650 + z_875);
																					:pid_40:z = z_875;
																					:pid_40:localTime = (z_185 + z_236 + z_425 + z_650 + z_875);
																					:pid_40:localPC = ((t_142 < 4) && (t_576 < 8) && (0 <= (t_142 + -2)) && (0 <= (t_576 + -4)));
																					:pid_40:localPtC = (((z_236 + z_425) == t_142) && ((z_236 + z_425 + z_650 + z_875) == 4) && ((z_236 + z_425 + z_650) < 4) && (z_236 < t_142) && ((z_1 + z_13) <= (z_185 + z_236)) && ((z_1 + z_13 + z_322 + z_592) <= (z_185 + z_236 + z_425 + z_650)) && ((z_236 + z_425 + z_650 + z_875) > t_142) && ($delta#initial > 0) && (z_185 > 0) && (z_236 > 0) && (z_425 > 0) && (z_650 > 0));
																					:pid_41:e = 1;
																					:pid_41:tau = 8;
																					:pid_41:t = t_576;
																					:pid_41:cl = 0;
																					:pid_47:cl = (z_185 + z_236 + z_425 + z_650 + z_875);
																					:pid_52:cl = (z_185 + z_236 + z_425 + z_650 + z_875);
																				}
																				EC:<Id:2216;Ev:338;H:20;W:1895>{ SC: ( pid_4:o0 , ( pid_10:cp1 , pid_15:dp1 , pid_20:dp1 ) , ( pid_27:cp1 , pid_31:dp0 , pid_36:dp0 ) , ( pid_44:cp1 , pid_48:dp0 , pid_53:dp0 ) )
																					
	EXE: { |;| (:pid_23 , run) (:pid_24 , run) (:pid_28 , run) (:pid_28 , 
	cp_resetTau) }
																					
	TRACE: { |;| (:pid_23 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_958 }) (:pid_28 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_662 }) }
																					
	NC: ((t_662 < 8) && (0 <= (t_662 + -4)))
																					PC: ((t_142 < 4) && (t_233 < 4) && (t_260 < 8) && (t_348 < 8) && (t_4 < 4) && (t_52 
	< 4) && (t_576 < 8) && (t_662 < 8) && (t_75 < 4) && (t_1418 < 4) && (t_305 < 4) 
	&& (0 <= (t_142 + -2)) && (0 <= (t_233 + -2)) && (0 <= (t_260 + -4)) && (0 <= 
	(t_348 + -4)) && (0 <= (t_4 + -2)) && (0 <= (t_52 + -2)) && (0 <= (t_576 + -4)) 
	&& (0 <= (t_662 + -4)) && (0 <= (t_75 + -2)) && (0 <= (t_1418 + -2)) && (0 <= 
	(t_305 + -2)))
																					DATA{
																						:pid_23:$time = (z_1 + z_13 + z_322 + z_592 + z_736 + z_958);
																						:pid_23:z = z_958;
																						:pid_23:localTime = (z_1 + z_13 + z_322 + z_592 + z_736 + z_958);
																						:pid_23:localPC = ((t_233 < 4) && (t_4 < 4) && (t_662 < 8) && (0 <= (t_233 + -2)) && (0 <= (t_4 + -2)) && (0 <= (t_662 + -4)));
																						:pid_23:localPtC = (((z_592 + z_736 + z_958) == 4) && (z_13 == t_4) && (z_592 == t_233) && ((z_13 + z_322) < 4) && ((z_592 + z_736) < 4) && ((z_165 + z_276 + z_66 + z_99) <= (z_1 + z_13 + z_322)) && ((z_185 + z_236 + z_425) <= (z_1 + z_13 + z_322 + z_592 + z_736)) && ((z_592 + z_736 + z_958) > t_233) && ($delta#initial > 0) && (z_1 > 0) && (z_13 > 0) && (z_322 > 0) && (z_592 > 0) && (z_736 > 0));
																						:pid_24:e = 1;
																						:pid_24:tau = 8;
																						:pid_24:t = t_662;
																						:pid_24:cl = 0;
																						:pid_30:cl = (z_1 + z_13 + z_322 + z_592 + z_736 + z_958);
																						:pid_35:cl = (z_1 + z_13 + z_322 + z_592 + z_736 + z_958);
																					}
																					EC:<Id:2335;Ev:360;H:21;W:1997>{ SC: ( pid_4:o0 , ( pid_10:cp1 , pid_15:dp1 , pid_20:dp1 ) , ( pid_27:cp1 , pid_31:dp0 , pid_37:dp1 ) , ( pid_44:cp1 , pid_48:dp0 , pid_53:dp0 ) )
																					
		EXE: { |;| (:pid_23 , run) (:pid_35 , run) (:pid_36 , run) (:pid_36 , 
	dp_init) }
																					
		TRACE: { |;| (:pid_23 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_1009 }) (:pid_36 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_1629 }) }
																					
		NC: ((t_1629 < 4) && (0 <= (t_1629 + -2)))
																						PC: ((t_142 < 4) && (t_233 < 4) && (t_260 < 8) && (t_348 < 8) && (t_4 < 4) && (t_52 
	< 4) && (t_576 < 8) && (t_662 < 8) && (t_75 < 4) && (t_1418 < 4) && (t_1629 < 4) 
	&& (t_305 < 4) && (0 <= (t_142 + -2)) && (0 <= (t_233 + -2)) && (0 <= (t_260 + 
	-4)) && (0 <= (t_348 + -4)) && (0 <= (t_4 + -2)) && (0 <= (t_52 + -2)) && (0 <= 
	(t_576 + -4)) && (0 <= (t_662 + -4)) && (0 <= (t_75 + -2)) && (0 <= (t_1418 + -2)
	) && (0 <= (t_1629 + -2)) && (0 <= (t_305 + -2)))
																						DATA{
																							:pid_23:$time = (z_1 + z_1009 + z_13 + z_322 + z_592 + z_736 + z_958);
																							:pid_23:z = z_1009;
																							:pid_23:localTime = (z_1 + z_1009 + z_13 + z_322 + z_592 + z_736 + z_958);
																							:pid_23:localPC = ((t_233 < 4) && (t_4 < 4) && (t_662 < 8) && (t_1629 < 4) && (0 <= (t_233 + -2)) && (0 <= (t_4 + -2)) && (0 <= (t_662 + -4)) && (0 <= (t_1629 + -2)));
																							:pid_23:localPtC = (((z_592 + z_736 + z_958) == 4) && (z_13 == t_4) && (z_592 == t_233) && ((z_13 + z_322) < 4) && ((z_592 + z_736) < 4) && ((z_165 + z_276 + z_66 + z_99) <= (z_1 + z_13 + z_322)) && ((z_185 + z_236 + z_425) <= (z_1 + z_13 + z_322 + z_592 + z_736)) && ((z_592 + z_736 + z_958) > t_233) && ($delta#initial > 0) && (z_1 > 0) && (z_13 > 0) && (z_322 > 0) && (z_592 > 0) && (z_736 > 0) && (z_958 > 0));
																							:pid_24:cl = z_1009;
																							:pid_30:cl = (z_1 + z_1009 + z_13 + z_322 + z_592 + z_736 + z_958);
																							:pid_35:k = 2;
																							:pid_35:c = 0;
																							:pid_35:e = 0;
																							:pid_35:tau = 4;
																							:pid_35:tau_l = 4;
																							:pid_35:tau_h = 8;
																							:pid_35:t = t_1629;
																							:pid_35:cl = 0;
																						}
																						EC:<Id:2502;Ev:384;H:22;W:1997>{ SC: ( pid_4:o0 , ( pid_10:cp1 , pid_15:dp1 , pid_21:dp2 ) , ( pid_27:cp1 , pid_31:dp0 , pid_37:dp1 ) , ( pid_44:cp1 , pid_48:dp0 , pid_53:dp0 ) )
																					
			EXE: { |;| (:pid_6 , run) (:pid_18 , run) (:pid_20 , run) (:pid_20 , 
	dp_sendDM) }
																					
			TRACE: { |;| (:pid_6 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_1074 }) (:pid_20 , ${ output inst::Trickle.Node.DataMsg [ 
	2 , 2 , 1 ] ${ + param::Trickle.Node.z_1074 param::Trickle.Node.z_165 
	param::Trickle.Node.z_276 param::Trickle.Node.z_369 param::Trickle.Node.z_468 
	param::Trickle.Node.z_546 param::Trickle.Node.z_66 param::Trickle.Node.z_858 
	param::Trickle.Node.z_99 } } @ (z_1074 + z_165 + z_276 + z_369 + z_468 + z_546 + 
	z_66 + z_858 + z_99)) }
																							DATA{
																								:pid_6:$time = (z_1074 + z_165 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99);
																								:pid_6:z = z_1074;
																								:pid_6:localTime = (z_1074 + z_165 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99);
																								:pid_6:localPC = ((t_260 < 8) && (t_348 < 8) && (t_52 < 4) && (t_75 < 4) && (t_1418 < 4) && (t_305 < 4) && (0 <= (t_260 + -4)) && (0 <= (t_348 + -4)) && (0 <= (t_52 + -2)) && (0 <= (t_75 + -2)) && (0 <= (t_1418 + -2)) && (0 <= (t_305 + -2)));
																								:pid_6:localPtC = (((z_1074 + z_276 + z_369 + z_468 + z_546 + z_858) == t_305) && ((z_165 + z_276) == t_75) && ((z_165 + z_276 + z_369) == 4) && ((z_468 + z_546) == 8) && (z_468 == t_260) && (z_99 < t_52) && ((z_1 + z_13) <= (z_66 + z_99)) && ((z_165 + z_276 + z_369) > t_75) && ((z_468 + z_546) > t_260) && ($delta#initial > 0) && (z_165 > 0) && (z_276 > 0) && (z_369 > 0) && (z_468 > 0) && (z_546 > 0) && (z_66 > 0) && (z_858 > 0) && (z_99 > 0));
																								:pid_7:cl = (z_1074 + z_858);
																								:pid_13:cl = z_1074;
																								:pid_18:cl = (z_1074 + z_276 + z_369 + z_468 + z_546 + z_858);
																							}
																							BUFFER{
																								:pid_23:bufferNode:<FIFO>#0{
																									:pid_6:ControlMsg([ 1 , 1 ] , (z_165 + z_276 + z_369 + z_468 + z_66 + z_99));
																									:pid_6:DataMsg([ 2 , 2 , 1 ] , (z_1074 + z_165 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99));
																								}
																							}
																							EC:<Id:2698;Ev:413;H:23;W:2314>{ SC: ( pid_4:o0 , ( pid_11:cp2 , pid_15:dp1 , pid_21:dp2 ) , ( pid_27:cp1 , pid_31:dp0 , pid_37:dp1 ) , ( pid_44:cp1 , pid_48:dp0 , pid_53:dp0 ) )
																					
				EXE: { |;| (:pid_6 , run) (:pid_7 , run) (:pid_10 , run) (:pid_10 , 
	cp_sendCM) }
																					
				TRACE: { |;| (:pid_6 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_1146 }) (:pid_10 , ${ output inst::Trickle.Node.ControlMsg 
	[ 1 , 1 ] ${ + param::Trickle.Node.z_1074 param::Trickle.Node.z_1146 
	param::Trickle.Node.z_165 param::Trickle.Node.z_276 param::Trickle.Node.z_369 
	param::Trickle.Node.z_468 param::Trickle.Node.z_546 param::Trickle.Node.z_66 
	param::Trickle.Node.z_858 param::Trickle.Node.z_99 } } @ (z_1074 + z_1146 + 
	z_165 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99)) }
																								DATA{
																									:pid_6:$time = (z_1074 + z_1146 + z_165 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99);
																									:pid_6:z = z_1146;
																									:pid_6:localTime = (z_1074 + z_1146 + z_165 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99);
																									:pid_6:localPC = ((t_260 < 8) && (t_348 < 8) && (t_52 < 4) && (t_75 < 4) && (t_1418 < 4) && (t_305 < 4) && (0 <= (t_260 + -4)) && (0 <= (t_348 + -4)) && (0 <= (t_52 + -2)) && (0 <= (t_75 + -2)) && (0 <= (t_1418 + -2)) && (0 <= (t_305 + -2)));
																									:pid_6:localPtC = (((z_1074 + z_1146 + z_858) == t_348) && ((z_1074 + z_276 + z_369 + z_468 + z_546 + z_858) == t_305) && ((z_165 + z_276) == t_75) && ((z_165 + z_276 + z_369) == 4) && ((z_468 + z_546) == 8) && (z_468 == t_260) && (z_99 < t_52) && ((z_1 + z_13) <= (z_66 + z_99)) && ((z_165 + z_276 + z_369) > t_75) && ((z_468 + z_546) > t_260) && ($delta#initial > 0) && (z_1074 > 0) && (z_165 > 0) && (z_276 > 0) && (z_369 > 0) && (z_468 > 0) && (z_546 > 0) && (z_66 > 0) && (z_858 > 0) && (z_99 > 0));
																									:pid_7:cl = (z_1074 + z_1146 + z_858);
																									:pid_13:cl = (z_1074 + z_1146);
																									:pid_18:cl = (z_1074 + z_1146 + z_276 + z_369 + z_468 + z_546 + z_858);
																								}
																								BUFFER{
																									:pid_23:bufferNode:<FIFO>#0{
																										:pid_6:ControlMsg([ 1 , 1 ] , (z_165 + z_276 + z_369 + z_468 + z_66 + z_99));
																										:pid_6:DataMsg([ 2 , 2 , 1 ] , (z_1074 + z_165 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99));
																										:pid_6:ControlMsg([ 1 , 1 ] , (z_1074 + z_1146 + z_165 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99));
																									}
																								}
																								EC:<Id:2933;Ev:428;H:24;W:2520>{ SC: ( pid_4:o0 , ( pid_11:cp2 , pid_15:dp1 , pid_21:dp2 ) , ( pid_27:cp1 , pid_31:dp0 , pid_37:dp1 ) , ( pid_44:cp1 , pid_48:dp0 , pid_53:dp0 ) )
																					
					EXE: { |;| (:pid_23 , run) (:pid_24 , run) (:pid_27 , run) 
	(:pid_27 , cp1_receiveCM_inconsistent) }
																					
					TRACE: { |;| (:pid_23 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_1234 }) (:pid_27 , ${ input inst::Trickle.Node.ControlMsg 
	[ 1 , 1 ] ${ + param::Trickle.Node.z_165 param::Trickle.Node.z_276 
	param::Trickle.Node.z_369 param::Trickle.Node.z_468 param::Trickle.Node.z_66 
	param::Trickle.Node.z_99 } } @ (z_1 + z_1009 + z_1234 + z_13 + z_322 + z_592 + 
	z_736 + z_958)) (:pid_27 , ${ newfresh inst::Trickle.Node.ControlProcess.t 
	param::Trickle.Node.ControlProcess.t_874 }) }
																					
					NC: ((t_874 < 4) && (0 <= (t_874 + -2)))
																									PC: ((t_142 < 4) && (t_233 < 4) && (t_260 < 8) && (t_348 < 8) && (t_4 < 4) && (t_52 
	< 4) && (t_576 < 8) && (t_662 < 8) && (t_75 < 4) && (t_874 < 4) && (t_1418 < 4) 
	&& (t_1629 < 4) && (t_305 < 4) && (0 <= (t_142 + -2)) && (0 <= (t_233 + -2)) && 
	(0 <= (t_260 + -4)) && (0 <= (t_348 + -4)) && (0 <= (t_4 + -2)) && (0 <= (t_52 + 
	-2)) && (0 <= (t_576 + -4)) && (0 <= (t_662 + -4)) && (0 <= (t_75 + -2)) && (0 
	<= (t_874 + -2)) && (0 <= (t_1418 + -2)) && (0 <= (t_1629 + -2)) && (0 <= (t_305 
	+ -2)))
																									DATA{
																										:pid_23:$time = (z_1 + z_1009 + z_1234 + z_13 + z_322 + z_592 + z_736 + z_958);
																										:pid_23:z = z_1234;
																										:pid_23:seq_buff[0] = 1;
																										:pid_23:seq_buff[1] = 1;
																										:pid_23:localTime = (z_1 + z_1009 + z_1234 + z_13 + z_322 + z_592 + z_736 + z_958);
																										:pid_23:localPC = ((t_233 < 4) && (t_4 < 4) && (t_662 < 8) && (t_874 < 4) && (t_1629 < 4) && (0 <= (t_233 + -2)) && (0 <= (t_4 + -2)) && (0 <= (t_662 + -4)) && (0 <= (t_874 + -2)) && (0 <= (t_1629 + -2)));
																										:pid_23:localPtC = (((z_592 + z_736 + z_958) == 4) && (z_13 == t_4) && (z_592 == t_233) && ((z_1009 + z_1234) < t_662) && ((z_13 + z_322) < 4) && ((z_592 + z_736) < 4) && ((z_165 + z_276 + z_369 + z_468 + z_66 + z_99) <= (z_1 + z_1009 + z_1234 + z_13 + z_322 + z_592 + z_736 + z_958)) && ((z_165 + z_276 + z_66 + z_99) <= (z_1 + z_13 + z_322)) && ((z_185 + z_236 + z_425) <= (z_1 + z_13 + z_322 + z_592 + z_736)) && ((z_592 + z_736 + z_958) > t_233) && ($delta#initial > 0) && (z_1 > 0) && (z_1009 > 0) && (z_13 > 0) && (z_322 > 0) && (z_592 > 0) && (z_736 > 0) && (z_958 > 0));
																										:pid_23:timeEmit = (z_165 + z_276 + z_369 + z_468 + z_66 + z_99);
																										:pid_24:c = 0;
																										:pid_24:e = 0;
																										:pid_24:tau = 4;
																										:pid_24:i = 2;
																										:pid_24:t = t_874;
																										:pid_24:consistent = false;
																										:pid_24:cl = 0;
																										:pid_30:cl = (z_1 + z_1009 + z_1234 + z_13 + z_322 + z_592 + z_736 + z_958);
																										:pid_35:cl = z_1234;
																									}
																									BUFFER{
																										:pid_23:bufferNode:<FIFO>#0{
																											:pid_6:DataMsg([ 2 , 2 , 1 ] , (z_1074 + z_165 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99));
																											:pid_6:ControlMsg([ 1 , 1 ] , (z_1074 + z_1146 + z_165 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99));
																										}
																									}
																									EC:<Id:3059;Ev:443;H:25;W:2631>{ SC: ( pid_4:o0 , ( pid_11:cp2 , pid_15:dp1 , pid_21:dp2 ) , ( pid_27:cp1 , pid_31:dp0 , pid_37:dp1 ) , ( pid_44:cp1 , pid_48:dp0 , pid_53:dp0 ) )
																					
						EXE: { |;| (:pid_23 , run) (:pid_35 , run) (:pid_37 , run) 
	(:pid_37 , dp1_receiveDM_consistent) }
																					
						TRACE: { |;| (:pid_23 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_1279 }) (:pid_37 , ${ input inst::Trickle.Node.DataMsg [ 2 
	, 2 , 1 ] ${ + param::Trickle.Node.z_1074 param::Trickle.Node.z_165 
	param::Trickle.Node.z_276 param::Trickle.Node.z_369 param::Trickle.Node.z_468 
	param::Trickle.Node.z_546 param::Trickle.Node.z_66 param::Trickle.Node.z_858 
	param::Trickle.Node.z_99 } } @ (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_322 + 
	z_592 + z_736 + z_958)) }
																										DATA{
																											:pid_23:my_buff[1].seq = 2;
																											:pid_23:my_buff[1].fragment = FRAGMENT_1;
																											:pid_23:my_buff[1].offset = 1;
																											:pid_23:firmware[1] = FRAGMENT_1;
																											:pid_23:myseq_buff[1] = 1;
																											:pid_23:$time = (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_322 + z_592 + z_736 + z_958);
																											:pid_23:z = z_1279;
																											:pid_23:localTime = (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_322 + z_592 + z_736 + z_958);
																											:pid_23:localPC = ((t_233 < 4) && (t_4 < 4) && (t_662 < 8) && (t_874 < 4) && (t_1629 < 4) && (0 <= (t_233 + -2)) && (0 <= (t_4 + -2)) && (0 <= (t_662 + -4)) && (0 <= (t_874 + -2)) && (0 <= (t_1629 + -2)));
																											:pid_23:localPtC = (((z_592 + z_736 + z_958) == 4) && (z_13 == t_4) && (z_592 == t_233) && ((z_1009 + z_1234) < t_662) && ((z_1234 + z_1279) < t_1629) && ((z_13 + z_322) < 4) && ((z_592 + z_736) < 4) && ((z_1074 + z_165 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99) <= (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_322 + z_592 + z_736 + z_958)) && ((z_165 + z_276 + z_369 + z_468 + z_66 + z_99) <= (z_1 + z_1009 + z_1234 + z_13 + z_322 + z_592 + z_736 + z_958)) && ((z_165 + z_276 + z_66 + z_99) <= (z_1 + z_13 + z_322)) && ((z_185 + z_236 + z_425) <= (z_1 + z_13 + z_322 + z_592 + z_736)) && ((z_592 + z_736 + z_958) > t_233) && ($delta#initial > 0) && (z_1 > 0) && (z_1009 > 0) && (z_1234 > 0) && (z_13 > 0) && (z_322 > 0) && (z_592 > 0) && (z_736 > 0) && (z_958 > 0));
																											:pid_23:timeEmit = (z_1074 + z_165 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99);
																											:pid_24:cl = z_1279;
																											:pid_30:cl = (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_322 + z_592 + z_736 + z_958);
																											:pid_35:c = 1;
																											:pid_35:consistent = true;
																											:pid_35:cl = (z_1234 + z_1279);
																											:pid_35:d.seq = 2;
																											:pid_35:d.fragment = FRAGMENT_1;
																											:pid_35:d.offset = 1;
																										}
																										BUFFER{
																											:pid_23:bufferNode:<FIFO>#0{
																												:pid_6:ControlMsg([ 1 , 1 ] , (z_1074 + z_1146 + z_165 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99));
																											}
																										}
																										EC:<Id:3176;Ev:475;H:26;W:2733>{ SC: ( pid_4:o0 , ( pid_11:cp2 , pid_15:dp1 , pid_21:dp2 ) , ( pid_28:cp2 , pid_31:dp0 , pid_37:dp1 ) , ( pid_44:cp1 , pid_48:dp0 , pid_53:dp0 ) )
																					
							EXE: { |;| (:pid_23 , run) (:pid_24 , run) (:pid_27 , 
	run) (:pid_27 , cp_sendCM) }
																					
							TRACE: { |;| (:pid_23 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_1324 }) (:pid_27 , ${ output inst::Trickle.Node.ControlMsg 
	[ 0 , 1 ] ${ + param::Trickle.Node.z_1 param::Trickle.Node.z_1009 
	param::Trickle.Node.z_1234 param::Trickle.Node.z_1279 param::Trickle.Node.z_13 
	param::Trickle.Node.z_1324 param::Trickle.Node.z_322 param::Trickle.Node.z_592 
	param::Trickle.Node.z_736 param::Trickle.Node.z_958 } } @ (z_1 + z_1009 + z_1234 
	+ z_1279 + z_13 + z_1324 + z_322 + z_592 + z_736 + z_958)) }
																											DATA{
																												:pid_23:$time = (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_322 + z_592 + z_736 + z_958);
																												:pid_23:z = z_1324;
																												:pid_23:localTime = (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_322 + z_592 + z_736 + z_958);
																												:pid_23:localPC = ((t_233 < 4) && (t_4 < 4) && (t_662 < 8) && (t_874 < 4) && (t_1629 < 4) && (0 <= (t_233 + -2)) && (0 <= (t_4 + -2)) && (0 <= (t_662 + -4)) && (0 <= (t_874 + -2)) && (0 <= (t_1629 + -2)));
																												:pid_23:localPtC = (((z_1279 + z_1324) == t_874) && ((z_592 + z_736 + z_958) == 4) && (z_13 == t_4) && (z_592 == t_233) && ((z_1009 + z_1234) < t_662) && ((z_1234 + z_1279) < t_1629) && ((z_13 + z_322) < 4) && ((z_592 + z_736) < 4) && ((z_1074 + z_165 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99) <= (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_322 + z_592 + z_736 + z_958)) && ((z_165 + z_276 + z_369 + z_468 + z_66 + z_99) <= (z_1 + z_1009 + z_1234 + z_13 + z_322 + z_592 + z_736 + z_958)) && ((z_165 + z_276 + z_66 + z_99) <= (z_1 + z_13 + z_322)) && ((z_185 + z_236 + z_425) <= (z_1 + z_13 + z_322 + z_592 + z_736)) && ((z_592 + z_736 + z_958) > t_233) && ($delta#initial > 0) && (z_1 > 0) && (z_1009 > 0) && (z_1234 > 0) && (z_1279 > 0) && (z_13 > 0) && (z_322 > 0) && (z_592 > 0) && (z_736 > 0) && (z_958 > 0));
																												:pid_24:cl = (z_1279 + z_1324);
																												:pid_30:cl = (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_322 + z_592 + z_736 + z_958);
																												:pid_35:cl = (z_1234 + z_1279 + z_1324);
																											}
																											BUFFER{
																												:pid_6:bufferNode:<FIFO>#0{
																													:pid_23:ControlMsg([ 0 , 0 ] , (z_1 + z_13 + z_322 + z_592));
																													:pid_23:ControlMsg([ 0 , 1 ] , (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_322 + z_592 + z_736 + z_958));
																												}
																												:pid_40:bufferNode:<FIFO>#0{
																													:pid_23:ControlMsg([ 0 , 1 ] , (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_322 + z_592 + z_736 + z_958));
																												}
																											}
																											EC:<Id:3429;Ev:515;H:27;W:2954>{ SC: ( pid_4:o0 , ( pid_11:cp2 , pid_15:dp1 , pid_21:dp2 ) , ( pid_27:cp1 , pid_31:dp0 , pid_37:dp1 ) , ( pid_44:cp1 , pid_48:dp0 , pid_53:dp0 ) )
																					
								EXE: { |;| (:pid_23 , run) (:pid_24 , run) (:pid_28 
	, run) (:pid_28 , cp_resetTau) }
																					
								TRACE: { |;| (:pid_23 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1420 }) (:pid_28 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_994 }) }
																					
								NC: ((t_994 < 8) && (0 <= (t_994 + -4)))
																												PC: ((t_142 < 4) && (t_233 < 4) && (t_260 < 8) && (t_348 < 8) && (t_4 < 4) && (t_52 
	< 4) && (t_576 < 8) && (t_662 < 8) && (t_75 < 4) && (t_874 < 4) && (t_994 < 8) 
	&& (t_1418 < 4) && (t_1629 < 4) && (t_305 < 4) && (0 <= (t_142 + -2)) && (0 <= 
	(t_233 + -2)) && (0 <= (t_260 + -4)) && (0 <= (t_348 + -4)) && (0 <= (t_4 + -2)) 
	&& (0 <= (t_52 + -2)) && (0 <= (t_576 + -4)) && (0 <= (t_662 + -4)) && (0 <= 
	(t_75 + -2)) && (0 <= (t_874 + -2)) && (0 <= (t_994 + -4)) && (0 <= (t_1418 + -2)
	) && (0 <= (t_1629 + -2)) && (0 <= (t_305 + -2)))
																												DATA{
																													:pid_23:$time = (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_322 + z_592 + z_736 + z_958);
																													:pid_23:z = z_1420;
																													:pid_23:localTime = (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_322 + z_592 + z_736 + z_958);
																													:pid_23:localPC = ((t_233 < 4) && (t_4 < 4) && (t_662 < 8) && (t_874 < 4) && (t_994 < 8) && (t_1629 < 4) && (0 <= (t_233 + -2)) && (0 <= (t_4 + -2)) && (0 <= (t_662 + -4)) && (0 <= (t_874 + -2)) && (0 <= (t_994 + -4)) && (0 <= (t_1629 + -2)));
																													:pid_23:localPtC = (((z_1279 + z_1324) == t_874) && ((z_1279 + z_1324 + z_1420) == 4) && ((z_592 + z_736 + z_958) == 4) && (z_13 == t_4) && (z_592 == t_233) && ((z_1009 + z_1234) < t_662) && ((z_1234 + z_1279) < t_1629) && ((z_13 + z_322) < 4) && ((z_592 + z_736) < 4) && ((z_1074 + z_165 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99) <= (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_322 + z_592 + z_736 + z_958)) && ((z_165 + z_276 + z_369 + z_468 + z_66 + z_99) <= (z_1 + z_1009 + z_1234 + z_13 + z_322 + z_592 + z_736 + z_958)) && ((z_165 + z_276 + z_66 + z_99) <= (z_1 + z_13 + z_322)) && ((z_185 + z_236 + z_425) <= (z_1 + z_13 + z_322 + z_592 + z_736)) && ((z_1279 + z_1324 + z_1420) > t_874) && ((z_592 + z_736 + z_958) > t_233) && ($delta#initial > 0) && (z_1 > 0) && (z_1009 > 0) && (z_1234 > 0) && (z_1279 > 0) && (z_13 > 0) && (z_1324 > 0) && (z_322 > 0) && (z_592 > 0) && (z_736 > 0) && (z_958 > 0));
																													:pid_24:e = 1;
																													:pid_24:tau = 8;
																													:pid_24:t = t_994;
																													:pid_24:cl = 0;
																													:pid_30:cl = (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_322 + z_592 + z_736 + z_958);
																													:pid_35:cl = (z_1234 + z_1279 + z_1324 + z_1420);
																												}
																												EC:<Id:3759;Ev:522;H:28;W:2954>{ SC: ( pid_4:o0 , ( pid_11:cp2 , pid_15:dp1 , pid_20:dp1 ) , ( pid_27:cp1 , pid_31:dp0 , pid_37:dp1 ) , ( pid_44:cp1 , pid_48:dp0 , pid_53:dp0 ) )
																					
									EXE: { |;| (:pid_6 , run) (:pid_18 , run) 
	(:pid_21 , run) (:pid_21 , dp_resetTau) }
																					
									TRACE: { |;| (:pid_6 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1539 }) (:pid_21 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_2347 }) }
																					
									NC: ((t_2347 < 8) && (0 <= (t_2347 + -4)))
																													PC: ((t_142 < 4) && (t_233 < 4) && (t_260 < 8) && (t_348 < 8) && (t_4 < 4) && (t_52 
	< 4) && (t_576 < 8) && (t_662 < 8) && (t_75 < 4) && (t_874 < 4) && (t_994 < 8) 
	&& (t_1418 < 4) && (t_1629 < 4) && (t_2347 < 8) && (t_305 < 4) && (0 <= (t_142 + 
	-2)) && (0 <= (t_233 + -2)) && (0 <= (t_260 + -4)) && (0 <= (t_348 + -4)) && (0 
	<= (t_4 + -2)) && (0 <= (t_52 + -2)) && (0 <= (t_576 + -4)) && (0 <= (t_662 + -4)
	) && (0 <= (t_75 + -2)) && (0 <= (t_874 + -2)) && (0 <= (t_994 + -4)) && (0 <= 
	(t_1418 + -2)) && (0 <= (t_1629 + -2)) && (0 <= (t_2347 + -4)) && (0 <= (t_305 + 
	-2)))
																													DATA{
																														:pid_6:$time = (z_1074 + z_1146 + z_1539 + z_165 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99);
																														:pid_6:z = z_1539;
																														:pid_6:localTime = (z_1074 + z_1146 + z_1539 + z_165 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99);
																														:pid_6:localPC = ((t_260 < 8) && (t_348 < 8) && (t_52 < 4) && (t_75 < 4) && (t_1418 < 4) && (t_2347 < 8) && (t_305 < 4) && (0 <= (t_260 + -4)) && (0 <= (t_348 + -4)) && (0 <= (t_52 + -2)) && (0 <= (t_75 + -2)) && (0 <= (t_1418 + -2)) && (0 <= (t_2347 + -4)) && (0 <= (t_305 + -2)));
																														:pid_6:localPtC = (((z_1074 + z_1146 + z_1539 + z_276 + z_369 + z_468 + z_546 + z_858) == 4) && ((z_1074 + z_1146 + z_858) == t_348) && ((z_1074 + z_276 + z_369 + z_468 + z_546 + z_858) == t_305) && ((z_165 + z_276) == t_75) && ((z_165 + z_276 + z_369) == 4) && ((z_468 + z_546) == 8) && (z_468 == t_260) && (z_99 < t_52) && ((z_1 + z_13) <= (z_66 + z_99)) && ((z_1074 + z_1146 + z_1539 + z_276 + z_369 + z_468 + z_546 + z_858) > t_305) && ((z_165 + z_276 + z_369) > t_75) && ((z_468 + z_546) > t_260) && ($delta#initial > 0) && (z_1074 > 0) && (z_1146 > 0) && (z_165 > 0) && (z_276 > 0) && (z_369 > 0) && (z_468 > 0) && (z_546 > 0) && (z_66 > 0) && (z_858 > 0) && (z_99 > 0));
																														:pid_7:cl = (z_1074 + z_1146 + z_1539 + z_858);
																														:pid_13:cl = (z_1074 + z_1146 + z_1539);
																														:pid_18:e = 1;
																														:pid_18:tau = 8;
																														:pid_18:t = t_2347;
																														:pid_18:cl = 0;
																													}
																													EC:<Id:3825;Ev:559;H:29;W:3303>{ SC: ( pid_4:o0 , ( pid_11:cp2 , pid_16:dp2 , pid_20:dp1 ) , ( pid_27:cp1 , pid_31:dp0 , pid_37:dp1 ) , ( pid_44:cp1 , pid_48:dp0 , pid_53:dp0 ) )
																					
										EXE: { |;| (:pid_6 , run) (:pid_13 , run) 
	(:pid_15 , run) (:pid_15 , dp_sendDM) }
																					
										TRACE: { |;| (:pid_6 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1560 }) (:pid_15 , ${ output 
	inst::Trickle.Node.DataMsg [ 1 , 1 , 0 ] ${ + param::Trickle.Node.z_1074 
	param::Trickle.Node.z_1146 param::Trickle.Node.z_1539 param::Trickle.Node.z_1560 
	param::Trickle.Node.z_165 param::Trickle.Node.z_276 param::Trickle.Node.z_369 
	param::Trickle.Node.z_468 param::Trickle.Node.z_546 param::Trickle.Node.z_66 
	param::Trickle.Node.z_858 param::Trickle.Node.z_99 } } @ (z_1074 + z_1146 + 
	z_1539 + z_1560 + z_165 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99)) }
																														DATA{
																															:pid_6:$time = (z_1074 + z_1146 + z_1539 + z_1560 + z_165 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99);
																															:pid_6:z = z_1560;
																															:pid_6:localTime = (z_1074 + z_1146 + z_1539 + z_1560 + z_165 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99);
																															:pid_6:localPC = ((t_260 < 8) && (t_348 < 8) && (t_52 < 4) && (t_75 < 4) && (t_1418 < 4) && (t_2347 < 8) && (t_305 < 4) && (0 <= (t_260 + -4)) && (0 <= (t_348 + -4)) && (0 <= (t_52 + -2)) && (0 <= (t_75 + -2)) && (0 <= (t_1418 + -2)) && (0 <= (t_2347 + -4)) && (0 <= (t_305 + -2)));
																															:pid_6:localPtC = (((z_1074 + z_1146 + z_1539 + z_1560) == t_1418) && ((z_1074 + z_1146 + z_1539 + z_276 + z_369 + z_468 + z_546 + z_858) == 4) && ((z_1074 + z_1146 + z_858) == t_348) && ((z_1074 + z_276 + z_369 + z_468 + z_546 + z_858) == t_305) && ((z_165 + z_276) == t_75) && ((z_165 + z_276 + z_369) == 4) && ((z_468 + z_546) == 8) && (z_468 == t_260) && (z_99 < t_52) && ((z_1 + z_13) <= (z_66 + z_99)) && ((z_1074 + z_1146 + z_1539 + z_276 + z_369 + z_468 + z_546 + z_858) > t_305) && ((z_165 + z_276 + z_369) > t_75) && ((z_468 + z_546) > t_260) && ($delta#initial > 0) && (z_1074 > 0) && (z_1146 > 0) && (z_1539 > 0) && (z_165 > 0) && (z_276 > 0) && (z_369 > 0) && (z_468 > 0) && (z_546 > 0) && (z_66 > 0) && (z_858 > 0) && (z_99 > 0));
																															:pid_7:cl = (z_1074 + z_1146 + z_1539 + z_1560 + z_858);
																															:pid_13:cl = (z_1074 + z_1146 + z_1539 + z_1560);
																															:pid_18:cl = z_1560;
																														}
																														BUFFER{
																															:pid_23:bufferNode:<FIFO>#0{
																																:pid_6:ControlMsg([ 1 , 1 ] , (z_1074 + z_1146 + z_165 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99));
																																:pid_6:DataMsg([ 1 , 1 , 0 ] , (z_1074 + z_1146 + z_1539 + z_1560 + z_165 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99));
																															}
																														}
																														EC:<Id:4154;Ev:571;H:30;W:3595>{ SC: ( pid_4:o0 , ( pid_10:cp1 , pid_16:dp2 , pid_20:dp1 ) , ( pid_27:cp1 , pid_31:dp0 , pid_37:dp1 ) , ( pid_44:cp1 , pid_48:dp0 , pid_53:dp0 ) )
																					
											EXE: { |;| (:pid_6 , run) (:pid_7 , run) 
	(:pid_11 , run) (:pid_11 , cp_resetTau) }
																					
											TRACE: { |;| (:pid_6 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1671 }) (:pid_11 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_1168 }) 
	}
																					
											NC: ((t_1168 < 8) && (0 <= (t_1168 + -4))
	)
																															PC: ((t_1168 < 8) && (t_142 < 4) && (t_233 < 4) && (t_260 < 8) && (t_348 < 8) && 
	(t_4 < 4) && (t_52 < 4) && (t_576 < 8) && (t_662 < 8) && (t_75 < 4) && (t_874 < 
	4) && (t_994 < 8) && (t_1418 < 4) && (t_1629 < 4) && (t_2347 < 8) && (t_305 < 4) 
	&& (0 <= (t_1168 + -4)) && (0 <= (t_142 + -2)) && (0 <= (t_233 + -2)) && (0 <= 
	(t_260 + -4)) && (0 <= (t_348 + -4)) && (0 <= (t_4 + -2)) && (0 <= (t_52 + -2)) 
	&& (0 <= (t_576 + -4)) && (0 <= (t_662 + -4)) && (0 <= (t_75 + -2)) && (0 <= 
	(t_874 + -2)) && (0 <= (t_994 + -4)) && (0 <= (t_1418 + -2)) && (0 <= (t_1629 + 
	-2)) && (0 <= (t_2347 + -4)) && (0 <= (t_305 + -2)))
																															DATA{
																																:pid_6:$time = (z_1074 + z_1146 + z_1539 + z_1560 + z_165 + z_1671 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99);
																																:pid_6:z = z_1671;
																																:pid_6:localTime = (z_1074 + z_1146 + z_1539 + z_1560 + z_165 + z_1671 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99);
																																:pid_6:localPC = ((t_1168 < 8) && (t_260 < 8) && (t_348 < 8) && (t_52 < 4) && (t_75 < 4) && (t_1418 < 4) && (t_2347 < 8) && (t_305 < 4) && (0 <= (t_1168 + -4)) && (0 <= (t_260 + -4)) && (0 <= (t_348 + -4)) && (0 <= (t_52 + -2)) && (0 <= (t_75 + -2)) && (0 <= (t_1418 + -2)) && (0 <= (t_2347 + -4)) && (0 <= (t_305 + -2)));
																																:pid_6:localPtC = (((z_1074 + z_1146 + z_1539 + z_1560) == t_1418) && ((z_1074 + z_1146 + z_1539 + z_1560 + z_1671 + z_858) == 8) && ((z_1074 + z_1146 + z_1539 + z_276 + z_369 + z_468 + z_546 + z_858) == 4) && ((z_1074 + z_1146 + z_858) == t_348) && ((z_1074 + z_276 + z_369 + z_468 + z_546 + z_858) == t_305) && ((z_165 + z_276) == t_75) && ((z_165 + z_276 + z_369) == 4) && ((z_468 + z_546) == 8) && (z_468 == t_260) && (z_99 < t_52) && ((z_1 + z_13) <= (z_66 + z_99)) && ((z_1074 + z_1146 + z_1539 + z_1560 + z_1671 + z_858) > t_348) && ((z_1074 + z_1146 + z_1539 + z_276 + z_369 + z_468 + z_546 + z_858) > t_305) && ((z_165 + z_276 + z_369) > t_75) && ((z_468 + z_546) > t_260) && ($delta#initial > 0) && (z_1074 > 0) && (z_1146 > 0) && (z_1539 > 0) && (z_1560 > 0) && (z_165 > 0) && (z_276 > 0) && (z_369 > 0) && (z_468 > 0) && (z_546 > 0) && (z_66 > 0) && (z_858 > 0) && (z_99 > 0));
																																:pid_7:e = 3;
																																:pid_7:t = t_1168;
																																:pid_7:cl = 0;
																																:pid_13:cl = (z_1074 + z_1146 + z_1539 + z_1560 + z_1671);
																																:pid_18:cl = (z_1560 + z_1671);
																															}
																															EC:<Id:4266;Ev:601;H:31;W:3595>{ SC: ( pid_4:o0 , ( pid_10:cp1 , pid_16:dp2 , pid_21:dp2 ) , ( pid_27:cp1 , pid_31:dp0 , pid_37:dp1 ) , ( pid_44:cp1 , pid_48:dp0 , pid_53:dp0 ) )
																					
												EXE: { |;| (:pid_6 , run) (:pid_18 , 
	run) (:pid_20 , run) (:pid_20 , dp_sendDM) }
																					
												TRACE: { |;| (:pid_6 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1707 }) (:pid_20 , ${ output 
	inst::Trickle.Node.DataMsg [ 2 , 2 , 1 ] ${ + param::Trickle.Node.z_1074 
	param::Trickle.Node.z_1146 param::Trickle.Node.z_1539 param::Trickle.Node.z_1560 
	param::Trickle.Node.z_165 param::Trickle.Node.z_1671 param::Trickle.Node.z_1707 
	param::Trickle.Node.z_276 param::Trickle.Node.z_369 param::Trickle.Node.z_468 
	param::Trickle.Node.z_546 param::Trickle.Node.z_66 param::Trickle.Node.z_858 
	param::Trickle.Node.z_99 } } @ (z_1074 + z_1146 + z_1539 + z_1560 + z_165 + 
	z_1671 + z_1707 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99)) }
																																DATA{
																																	:pid_6:$time = (z_1074 + z_1146 + z_1539 + z_1560 + z_165 + z_1671 + z_1707 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99);
																																	:pid_6:z = z_1707;
																																	:pid_6:localTime = (z_1074 + z_1146 + z_1539 + z_1560 + z_165 + z_1671 + z_1707 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99);
																																	:pid_6:localPC = ((t_1168 < 8) && (t_260 < 8) && (t_348 < 8) && (t_52 < 4) && (t_75 < 4) && (t_1418 < 4) && (t_2347 < 8) && (t_305 < 4) && (0 <= (t_1168 + -4)) && (0 <= (t_260 + -4)) && (0 <= (t_348 + -4)) && (0 <= (t_52 + -2)) && (0 <= (t_75 + -2)) && (0 <= (t_1418 + -2)) && (0 <= (t_2347 + -4)) && (0 <= (t_305 + -2)));
																																	:pid_6:localPtC = (((z_1074 + z_1146 + z_1539 + z_1560) == t_1418) && ((z_1074 + z_1146 + z_1539 + z_1560 + z_1671 + z_858) == 8) && ((z_1074 + z_1146 + z_1539 + z_276 + z_369 + z_468 + z_546 + z_858) == 4) && ((z_1074 + z_1146 + z_858) == t_348) && ((z_1074 + z_276 + z_369 + z_468 + z_546 + z_858) == t_305) && ((z_1560 + z_1671 + z_1707) == t_2347) && ((z_165 + z_276) == t_75) && ((z_165 + z_276 + z_369) == 4) && ((z_468 + z_546) == 8) && (z_468 == t_260) && (z_99 < t_52) && ((z_1 + z_13) <= (z_66 + z_99)) && ((z_1074 + z_1146 + z_1539 + z_1560 + z_1671 + z_858) > t_348) && ((z_1074 + z_1146 + z_1539 + z_276 + z_369 + z_468 + z_546 + z_858) > t_305) && ((z_165 + z_276 + z_369) > t_75) && ((z_468 + z_546) > t_260) && ($delta#initial > 0) && (z_1074 > 0) && (z_1146 > 0) && (z_1539 > 0) && (z_1560 > 0) && (z_165 > 0) && (z_1671 > 0) && (z_276 > 0) && (z_369 > 0) && (z_468 > 0) && (z_546 > 0) && (z_66 > 0) && (z_858 > 0) && (z_99 > 0));
																																	:pid_7:cl = z_1707;
																																	:pid_13:cl = (z_1074 + z_1146 + z_1539 + z_1560 + z_1671 + z_1707);
																																	:pid_18:cl = (z_1560 + z_1671 + z_1707);
																																}
																																BUFFER{
																																	:pid_23:bufferNode:<FIFO>#0{
																																		:pid_6:ControlMsg([ 1 , 1 ] , (z_1074 + z_1146 + z_165 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99));
																																		:pid_6:DataMsg([ 1 , 1 , 0 ] , (z_1074 + z_1146 + z_1539 + z_1560 + z_165 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99));
																																		:pid_6:DataMsg([ 2 , 2 , 1 ] , (z_1074 + z_1146 + z_1539 + z_1560 + z_165 + z_1671 + z_1707 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99));
																																	}
																																}
																																EC:<Id:4550;Ev:620;H:32;W:3949>{ SC: ( pid_4:o0 , ( pid_10:cp1 , pid_16:dp2 , pid_21:dp2 ) , ( pid_27:cp1 , pid_31:dp0 , pid_37:dp1 ) , ( pid_44:cp1 , pid_48:dp0 , pid_53:dp0 ) )
																					
													EXE: { |;| (:pid_23 , run) 
	(:pid_24 , run) (:pid_27 , run) (:pid_27 , cp1_receiveCM_inconsistent) }
																					
													TRACE: { |;| (:pid_23 , ${ 
	newfresh inst::Trickle.Node.z param::Trickle.Node.z_1798 }) (:pid_27 , ${ input 
	inst::Trickle.Node.ControlMsg [ 1 , 1 ] ${ + param::Trickle.Node.z_1074 
	param::Trickle.Node.z_1146 param::Trickle.Node.z_165 param::Trickle.Node.z_276 
	param::Trickle.Node.z_369 param::Trickle.Node.z_468 param::Trickle.Node.z_546 
	param::Trickle.Node.z_66 param::Trickle.Node.z_858 param::Trickle.Node.z_99 } } 
	@ (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_322 + 
	z_592 + z_736 + z_958)) (:pid_27 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_1291 }) 
	}
																					
													NC: ((t_1291 < 4) && (0 <= 
	(t_1291 + -2)))
																																	PC: ((t_1168 < 8) && (t_1291 < 4) && (t_142 < 4) && (t_233 < 4) && (t_260 < 8) && 
	(t_348 < 8) && (t_4 < 4) && (t_52 < 4) && (t_576 < 8) && (t_662 < 8) && (t_75 < 
	4) && (t_874 < 4) && (t_994 < 8) && (t_1418 < 4) && (t_1629 < 4) && (t_2347 < 8) 
	&& (t_305 < 4) && (0 <= (t_1168 + -4)) && (0 <= (t_1291 + -2)) && (0 <= (t_142 + 
	-2)) && (0 <= (t_233 + -2)) && (0 <= (t_260 + -4)) && (0 <= (t_348 + -4)) && (0 
	<= (t_4 + -2)) && (0 <= (t_52 + -2)) && (0 <= (t_576 + -4)) && (0 <= (t_662 + -4)
	) && (0 <= (t_75 + -2)) && (0 <= (t_874 + -2)) && (0 <= (t_994 + -4)) && (0 <= 
	(t_1418 + -2)) && (0 <= (t_1629 + -2)) && (0 <= (t_2347 + -4)) && (0 <= (t_305 + 
	-2)))
																																	DATA{
																																		:pid_23:$time = (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_322 + z_592 + z_736 + z_958);
																																		:pid_23:z = z_1798;
																																		:pid_23:localTime = (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_322 + z_592 + z_736 + z_958);
																																		:pid_23:localPC = ((t_1291 < 4) && (t_233 < 4) && (t_4 < 4) && (t_662 < 8) && (t_874 < 4) && (t_994 < 8) && (t_1629 < 4) && (0 <= (t_1291 + -2)) && (0 <= (t_233 + -2)) && (0 <= (t_4 + -2)) && (0 <= (t_662 + -4)) && (0 <= (t_874 + -2)) && (0 <= (t_994 + -4)) && (0 <= (t_1629 + -2)));
																																		:pid_23:localPtC = (((z_1279 + z_1324) == t_874) && ((z_1279 + z_1324 + z_1420) == 4) && ((z_592 + z_736 + z_958) == 4) && (z_13 == t_4) && (z_592 == t_233) && ((z_1009 + z_1234) < t_662) && ((z_1234 + z_1279) < t_1629) && ((z_13 + z_322) < 4) && ((z_592 + z_736) < 4) && (z_1798 < t_994) && ((z_1074 + z_1146 + z_165 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99) <= (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_322 + z_592 + z_736 + z_958)) && ((z_1074 + z_165 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99) <= (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_322 + z_592 + z_736 + z_958)) && ((z_165 + z_276 + z_369 + z_468 + z_66 + z_99) <= (z_1 + z_1009 + z_1234 + z_13 + z_322 + z_592 + z_736 + z_958)) && ((z_165 + z_276 + z_66 + z_99) <= (z_1 + z_13 + z_322)) && ((z_185 + z_236 + z_425) <= (z_1 + z_13 + z_322 + z_592 + z_736)) && ((z_1279 + z_1324 + z_1420) > t_874) && ((z_592 + z_736 + z_958) > t_233) && ($delta#initial > 0) && (z_1 > 0) && (z_1009 > 0) && (z_1234 > 0) && (z_1279 > 0) && (z_13 > 0) && (z_1324 > 0) && (z_1420 > 0) && (z_322 > 0) && (z_592 > 0) && (z_736 > 0) && (z_958 > 0));
																																		:pid_23:timeEmit = (z_1074 + z_1146 + z_165 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99);
																																		:pid_24:e = 0;
																																		:pid_24:tau = 4;
																																		:pid_24:i = 2;
																																		:pid_24:t = t_1291;
																																		:pid_24:cl = 0;
																																		:pid_30:cl = (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_322 + z_592 + z_736 + z_958);
																																		:pid_35:cl = (z_1234 + z_1279 + z_1324 + z_1420 + z_1798);
																																	}
																																	BUFFER{
																																		:pid_23:bufferNode:<FIFO>#0{
																																			:pid_6:DataMsg([ 1 , 1 , 0 ] , (z_1074 + z_1146 + z_1539 + z_1560 + z_165 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99));
																																			:pid_6:DataMsg([ 2 , 2 , 1 ] , (z_1074 + z_1146 + z_1539 + z_1560 + z_165 + z_1671 + z_1707 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99));
																																		}
																																	}
																																	EC:<Id:4713;Ev:647;H:33;W:4093>{ SC: ( pid_4:o0 , ( pid_10:cp1 , pid_16:dp2 , pid_21:dp2 ) , ( pid_27:cp1 , pid_32:dp1 , pid_37:dp1 ) , ( pid_44:cp1 , pid_48:dp0 , pid_53:dp0 ) )
																					
														EXE: { |;| (:pid_23 , run) 
	(:pid_30 , run) (:pid_31 , run) (:pid_31 , dp_init) }
																					
														TRACE: { |;| (:pid_23 , ${ 
	newfresh inst::Trickle.Node.z param::Trickle.Node.z_1855 }) (:pid_31 , ${ 
	newfresh inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_2790 
	}) }
																					
														NC: ((t_2790 < 4) && (0 <= 
	(t_2790 + -2)))
																																		PC: ((t_1168 < 8) && (t_1291 < 4) && (t_142 < 4) && (t_233 < 4) && (t_260 < 8) && 
	(t_348 < 8) && (t_4 < 4) && (t_52 < 4) && (t_576 < 8) && (t_662 < 8) && (t_75 < 
	4) && (t_874 < 4) && (t_994 < 8) && (t_1418 < 4) && (t_1629 < 4) && (t_2347 < 8) 
	&& (t_2790 < 4) && (t_305 < 4) && (0 <= (t_1168 + -4)) && (0 <= (t_1291 + -2)) 
	&& (0 <= (t_142 + -2)) && (0 <= (t_233 + -2)) && (0 <= (t_260 + -4)) && (0 <= 
	(t_348 + -4)) && (0 <= (t_4 + -2)) && (0 <= (t_52 + -2)) && (0 <= (t_576 + -4)) 
	&& (0 <= (t_662 + -4)) && (0 <= (t_75 + -2)) && (0 <= (t_874 + -2)) && (0 <= 
	(t_994 + -4)) && (0 <= (t_1418 + -2)) && (0 <= (t_1629 + -2)) && (0 <= (t_2347 + 
	-4)) && (0 <= (t_2790 + -2)) && (0 <= (t_305 + -2)))
																																		DATA{
																																			:pid_23:$time = (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_322 + z_592 + z_736 + z_958);
																																			:pid_23:z = z_1855;
																																			:pid_23:localTime = (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_322 + z_592 + z_736 + z_958);
																																			:pid_23:localPC = ((t_1291 < 4) && (t_233 < 4) && (t_4 < 4) && (t_662 < 8) && (t_874 < 4) && (t_994 < 8) && (t_1629 < 4) && (t_2790 < 4) && (0 <= (t_1291 + -2)) && (0 <= (t_233 + -2)) && (0 <= (t_4 + -2)) && (0 <= (t_662 + -4)) && (0 <= (t_874 + -2)) && (0 <= (t_994 + -4)) && (0 <= (t_1629 + -2)) && (0 <= (t_2790 + -2)));
																																			:pid_23:localPtC = (((z_1279 + z_1324) == t_874) && ((z_1279 + z_1324 + z_1420) == 4) && ((z_592 + z_736 + z_958) == 4) && (z_13 == t_4) && (z_592 == t_233) && ((z_1009 + z_1234) < t_662) && ((z_1234 + z_1279) < t_1629) && ((z_13 + z_322) < 4) && ((z_592 + z_736) < 4) && (z_1798 < t_994) && ((z_1074 + z_1146 + z_165 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99) <= (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_322 + z_592 + z_736 + z_958)) && ((z_1074 + z_165 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99) <= (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_322 + z_592 + z_736 + z_958)) && ((z_165 + z_276 + z_369 + z_468 + z_66 + z_99) <= (z_1 + z_1009 + z_1234 + z_13 + z_322 + z_592 + z_736 + z_958)) && ((z_165 + z_276 + z_66 + z_99) <= (z_1 + z_13 + z_322)) && ((z_185 + z_236 + z_425) <= (z_1 + z_13 + z_322 + z_592 + z_736)) && ((z_1279 + z_1324 + z_1420) > t_874) && ((z_592 + z_736 + z_958) > t_233) && ($delta#initial > 0) && (z_1 > 0) && (z_1009 > 0) && (z_1234 > 0) && (z_1279 > 0) && (z_13 > 0) && (z_1324 > 0) && (z_1420 > 0) && (z_1798 > 0) && (z_322 > 0) && (z_592 > 0) && (z_736 > 0) && (z_958 > 0));
																																			:pid_24:cl = z_1855;
																																			:pid_30:k = 2;
																																			:pid_30:c = 0;
																																			:pid_30:e = 0;
																																			:pid_30:tau = 4;
																																			:pid_30:tau_l = 4;
																																			:pid_30:tau_h = 8;
																																			:pid_30:t = t_2790;
																																			:pid_30:cl = 0;
																																			:pid_35:cl = (z_1234 + z_1279 + z_1324 + z_1420 + z_1798 + z_1855);
																																		}
																																		EC:<Id:4966;Ev:670;H:34;W:4319>{ SC: ( pid_4:o0 , ( pid_10:cp1 , pid_16:dp2 , pid_21:dp2 ) , ( pid_27:cp1 , pid_32:dp1 , pid_37:dp1 ) , ( pid_44:cp1 , pid_48:dp0 , pid_53:dp0 ) )
																					
															EXE: { |;| (:pid_23 , 
	run) (:pid_30 , run) (:pid_32 , run) (:pid_32 , dp1_receiveDM_consistent) }
																					
															TRACE: { |;| (:pid_23 , 
	${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1936 }) (:pid_32 , ${ 
	input inst::Trickle.Node.DataMsg [ 1 , 1 , 0 ] ${ + param::Trickle.Node.z_1074 
	param::Trickle.Node.z_1146 param::Trickle.Node.z_1539 param::Trickle.Node.z_1560 
	param::Trickle.Node.z_165 param::Trickle.Node.z_276 param::Trickle.Node.z_369 
	param::Trickle.Node.z_468 param::Trickle.Node.z_546 param::Trickle.Node.z_66 
	param::Trickle.Node.z_858 param::Trickle.Node.z_99 } } @ (z_1 + z_1009 + z_1234 
	+ z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_322 + z_592 + 
	z_736 + z_958)) }
																																			/*FLAGS{ COVERAGE-ELEMENT }*/
																																			INFO{
																																				<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#6" as trace="tpid#6">
																																			}
																																			DATA{
																																				:pid_23:my_buff[0].seq = 1;
																																				:pid_23:my_buff[0].fragment = FRAGMENT_0;
																																				:pid_23:my_buff[0].offset = 0;
																																				:pid_23:firmware[0] = FRAGMENT_0;
																																				:pid_23:myseq_buff[0] = 1;
																																				:pid_23:$time = (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_322 + z_592 + z_736 + z_958);
																																				:pid_23:z = z_1936;
																																				:pid_23:coverageProp = true;
																																				:pid_23:localTime = (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_322 + z_592 + z_736 + z_958);
																																				:pid_23:localPC = ((t_1291 < 4) && (t_233 < 4) && (t_4 < 4) && (t_662 < 8) && (t_874 < 4) && (t_994 < 8) && (t_1629 < 4) && (t_2790 < 4) && (0 <= (t_1291 + -2)) && (0 <= (t_233 + -2)) && (0 <= (t_4 + -2)) && (0 <= (t_662 + -4)) && (0 <= (t_874 + -2)) && (0 <= (t_994 + -4)) && (0 <= (t_1629 + -2)) && (0 <= (t_2790 + -2)));
																																				:pid_23:localPtC = (((z_1279 + z_1324) == t_874) && ((z_1279 + z_1324 + z_1420) == 4) && ((z_592 + z_736 + z_958) == 4) && (z_13 == t_4) && (z_592 == t_233) && ((z_1009 + z_1234) < t_662) && ((z_1234 + z_1279) < t_1629) && ((z_13 + z_322) < 4) && ((z_592 + z_736) < 4) && (z_1798 < t_994) && (z_1936 < t_2790) && ((z_1074 + z_1146 + z_1539 + z_1560 + z_165 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99) <= (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_322 + z_592 + z_736 + z_958)) && ((z_1074 + z_1146 + z_165 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99) <= (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_322 + z_592 + z_736 + z_958)) && ((z_1074 + z_165 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99) <= (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_322 + z_592 + z_736 + z_958)) && ((z_165 + z_276 + z_369 + z_468 + z_66 + z_99) <= (z_1 + z_1009 + z_1234 + z_13 + z_322 + z_592 + z_736 + z_958)) && ((z_165 + z_276 + z_66 + z_99) <= (z_1 + z_13 + z_322)) && ((z_185 + z_236 + z_425) <= (z_1 + z_13 + z_322 + z_592 + z_736)) && ((z_1279 + z_1324 + z_1420) > t_874) && ((z_592 + z_736 + z_958) > t_233) && ($delta#initial > 0) && (z_1 > 0) && (z_1009 > 0) && (z_1234 > 0) && (z_1279 > 0) && (z_13 > 0) && (z_1324 > 0) && (z_1420 > 0) && (z_1798 > 0) && (z_1855 > 0) && (z_322 > 0) && (z_592 > 0) && (z_736 > 0) && (z_958 > 0));
																																				:pid_23:timeEmit = (z_1074 + z_1146 + z_1539 + z_1560 + z_165 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99);
																																				:pid_24:cl = (z_1855 + z_1936);
																																				:pid_30:c = 1;
																																				:pid_30:consistent = true;
																																				:pid_30:cl = z_1936;
																																				:pid_30:d.seq = 1;
																																				:pid_30:d.fragment = FRAGMENT_0;
																																				:pid_30:d.offset = 0;
																																				:pid_35:cl = (z_1234 + z_1279 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936);
																																			}
																																			BUFFER{
																																				:pid_23:bufferNode:<FIFO>#0{
																																					:pid_6:DataMsg([ 2 , 2 , 1 ] , (z_1074 + z_1146 + z_1539 + z_1560 + z_165 + z_1671 + z_1707 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99));
																																				}
																																			}
																																			EC:<Id:5187;Ev:679;H:35;W:4517>{ SC: ( pid_4:o0 , ( pid_10:cp1 , pid_16:dp2 , pid_21:dp2 ) , ( pid_28:cp2 , pid_32:dp1 , pid_37:dp1 ) , ( pid_44:cp1 , pid_48:dp0 , pid_53:dp0 ) )
																					
																EXE: { |;| (:pid_23 
	, run) (:pid_24 , run) (:pid_27 , run) (:pid_27 , cp_sendCM) }
																					
																TRACE: { |;| 
	(:pid_23 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_2005 }) 
	(:pid_27 , ${ output inst::Trickle.Node.ControlMsg [ 1 , 1 ] ${ + 
	param::Trickle.Node.z_1 param::Trickle.Node.z_1009 param::Trickle.Node.z_1234 
	param::Trickle.Node.z_1279 param::Trickle.Node.z_13 param::Trickle.Node.z_1324 
	param::Trickle.Node.z_1420 param::Trickle.Node.z_1798 param::Trickle.Node.z_1855 
	param::Trickle.Node.z_1936 param::Trickle.Node.z_2005 param::Trickle.Node.z_322 
	param::Trickle.Node.z_592 param::Trickle.Node.z_736 param::Trickle.Node.z_958 } }
	 @ (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + 
	z_1936 + z_2005 + z_322 + z_592 + z_736 + z_958)) }
																																				/*FLAGS{ COVERAGE-ELEMENT }*/
																																				INFO{
																																					<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#7->inst::Trickle.n2->ControlMsg" as trace="tpid#7->inst::Trickle.n2->ControlMsg">
																																				}
																																				DATA{
																																					:pid_23:$time = (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_322 + z_592 + z_736 + z_958);
																																					:pid_23:z = z_2005;
																																					:pid_23:localTime = (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_322 + z_592 + z_736 + z_958);
																																					:pid_23:localPC = ((t_1291 < 4) && (t_233 < 4) && (t_4 < 4) && (t_662 < 8) && (t_874 < 4) && (t_994 < 8) && (t_1629 < 4) && (t_2790 < 4) && (0 <= (t_1291 + -2)) && (0 <= (t_233 + -2)) && (0 <= (t_4 + -2)) && (0 <= (t_662 + -4)) && (0 <= (t_874 + -2)) && (0 <= (t_994 + -4)) && (0 <= (t_1629 + -2)) && (0 <= (t_2790 + -2)));
																																					:pid_23:localPtC = (((z_1279 + z_1324) == t_874) && ((z_1279 + z_1324 + z_1420) == 4) && ((z_1855 + z_1936 + z_2005) == t_1291) && ((z_592 + z_736 + z_958) == 4) && (z_13 == t_4) && (z_592 == t_233) && ((z_1009 + z_1234) < t_662) && ((z_1234 + z_1279) < t_1629) && ((z_13 + z_322) < 4) && ((z_592 + z_736) < 4) && (z_1798 < t_994) && (z_1936 < t_2790) && ((z_1074 + z_1146 + z_1539 + z_1560 + z_165 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99) <= (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_322 + z_592 + z_736 + z_958)) && ((z_1074 + z_1146 + z_165 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99) <= (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_322 + z_592 + z_736 + z_958)) && ((z_1074 + z_165 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99) <= (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_322 + z_592 + z_736 + z_958)) && ((z_165 + z_276 + z_369 + z_468 + z_66 + z_99) <= (z_1 + z_1009 + z_1234 + z_13 + z_322 + z_592 + z_736 + z_958)) && ((z_165 + z_276 + z_66 + z_99) <= (z_1 + z_13 + z_322)) && ((z_185 + z_236 + z_425) <= (z_1 + z_13 + z_322 + z_592 + z_736)) && ((z_1279 + z_1324 + z_1420) > t_874) && ((z_592 + z_736 + z_958) > t_233) && ($delta#initial > 0) && (z_1 > 0) && (z_1009 > 0) && (z_1234 > 0) && (z_1279 > 0) && (z_13 > 0) && (z_1324 > 0) && (z_1420 > 0) && (z_1798 > 0) && (z_1855 > 0) && (z_1936 > 0) && (z_322 > 0) && (z_592 > 0) && (z_736 > 0) && (z_958 > 0));
																																					:pid_24:cl = (z_1855 + z_1936 + z_2005);
																																					:pid_30:cl = (z_1936 + z_2005);
																																					:pid_35:cl = (z_1234 + z_1279 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005);
																																				}
																																				BUFFER{
																																					:pid_6:bufferNode:<FIFO>#0{
																																						:pid_23:ControlMsg([ 0 , 0 ] , (z_1 + z_13 + z_322 + z_592));
																																						:pid_23:ControlMsg([ 0 , 1 ] , (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_322 + z_592 + z_736 + z_958));
																																						:pid_23:ControlMsg([ 1 , 1 ] , (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_322 + z_592 + z_736 + z_958));
																																					}
																																					:pid_40:bufferNode:<FIFO>#0{
																																						:pid_23:ControlMsg([ 0 , 1 ] , (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_322 + z_592 + z_736 + z_958));
																																						:pid_23:ControlMsg([ 1 , 1 ] , (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_322 + z_592 + z_736 + z_958));
																																					}
																																				}
																																				EC:<Id:5272;Ev:691;H:36;W:4593>{ SC: ( pid_4:o0 , ( pid_10:cp1 , pid_16:dp2 , pid_21:dp2 ) , ( pid_28:cp2 , pid_32:dp1 , pid_37:dp1 ) , ( pid_44:cp1 , pid_48:dp0 , pid_53:dp0 ) )
																					
																	EXE: { |;| 
	(:pid_40 , run) (:pid_41 , run) (:pid_44 , run) (:pid_44 , 
	cp1_receiveCM_inconsistent) }
																					
																	TRACE: { |;| 
	(:pid_40 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_2033 }) 
	(:pid_44 , ${ input inst::Trickle.Node.ControlMsg [ 0 , 1 ] ${ + 
	param::Trickle.Node.z_1 param::Trickle.Node.z_1009 param::Trickle.Node.z_1234 
	param::Trickle.Node.z_1279 param::Trickle.Node.z_13 param::Trickle.Node.z_1324 
	param::Trickle.Node.z_322 param::Trickle.Node.z_592 param::Trickle.Node.z_736 
	param::Trickle.Node.z_958 } } @ (z_185 + z_2033 + z_236 + z_425 + z_650 + z_875))
	 (:pid_44 , ${ newfresh inst::Trickle.Node.ControlProcess.t 
	param::Trickle.Node.ControlProcess.t_1442 }) }
																																					/*FLAGS{ COVERAGE-ELEMENT }*/
																																					INFO{
																																						<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#8->inst::Trickle.n3->ControlMsg" as trace="tpid#8->inst::Trickle.n3->ControlMsg">
																																					}
																					
																	NC: ((t_1442 < 4)
	 && (0 <= (t_1442 + -2)))
																																					PC: ((t_1168 < 8) && (t_1291 < 4) && (t_142 < 4) && (t_1442 < 4) && (t_233 < 4) && 
	(t_260 < 8) && (t_348 < 8) && (t_4 < 4) && (t_52 < 4) && (t_576 < 8) && (t_662 < 
	8) && (t_75 < 4) && (t_874 < 4) && (t_994 < 8) && (t_1418 < 4) && (t_1629 < 4) 
	&& (t_2347 < 8) && (t_2790 < 4) && (t_305 < 4) && (0 <= (t_1168 + -4)) && (0 <= 
	(t_1291 + -2)) && (0 <= (t_142 + -2)) && (0 <= (t_1442 + -2)) && (0 <= (t_233 + 
	-2)) && (0 <= (t_260 + -4)) && (0 <= (t_348 + -4)) && (0 <= (t_4 + -2)) && (0 <= 
	(t_52 + -2)) && (0 <= (t_576 + -4)) && (0 <= (t_662 + -4)) && (0 <= (t_75 + -2)) 
	&& (0 <= (t_874 + -2)) && (0 <= (t_994 + -4)) && (0 <= (t_1418 + -2)) && (0 <= 
	(t_1629 + -2)) && (0 <= (t_2347 + -4)) && (0 <= (t_2790 + -2)) && (0 <= (t_305 + 
	-2)))
																																					DATA{
																																						:pid_40:mydp_run[1] = true;
																																						:pid_40:$time = (z_185 + z_2033 + z_236 + z_425 + z_650 + z_875);
																																						:pid_40:z = z_2033;
																																						:pid_40:seq_buff[1] = 1;
																																						:pid_40:localTime = (z_185 + z_2033 + z_236 + z_425 + z_650 + z_875);
																																						:pid_40:localPC = ((t_142 < 4) && (t_1442 < 4) && (t_576 < 8) && (0 <= (t_142 + -2)) && (0 <= (t_1442 + -2)) && (0 <= (t_576 + -4)));
																																						:pid_40:localPtC = (((z_236 + z_425) == t_142) && ((z_236 + z_425 + z_650 + z_875) == 4) && ((z_236 + z_425 + z_650) < 4) && (z_2033 < t_576) && (z_236 < t_142) && ((z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_322 + z_592 + z_736 + z_958) <= (z_185 + z_2033 + z_236 + z_425 + z_650 + z_875)) && ((z_1 + z_13) <= (z_185 + z_236)) && ((z_1 + z_13 + z_322 + z_592) <= (z_185 + z_236 + z_425 + z_650)) && ((z_236 + z_425 + z_650 + z_875) > t_142) && ($delta#initial > 0) && (z_185 > 0) && (z_236 > 0) && (z_425 > 0) && (z_650 > 0) && (z_875 > 0));
																																						:pid_40:timeEmit = (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_322 + z_592 + z_736 + z_958);
																																						:pid_41:c = 0;
																																						:pid_41:e = 0;
																																						:pid_41:tau = 4;
																																						:pid_41:i = 2;
																																						:pid_41:t = t_1442;
																																						:pid_41:consistent = false;
																																						:pid_41:cl = 0;
																																						:pid_47:cl = (z_185 + z_2033 + z_236 + z_425 + z_650 + z_875);
																																						:pid_52:cl = (z_185 + z_2033 + z_236 + z_425 + z_650 + z_875);
																																					}
																																					BUFFER{
																																						:pid_40:bufferNode:<FIFO>#0{
																																							:pid_23:ControlMsg([ 1 , 1 ] , (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_322 + z_592 + z_736 + z_958));
																																						}
																																					}
																																					EC:<Id:5381;Ev:696;H:37;W:4690>{ SC: ( pid_4:o0 , ( pid_10:cp1 , pid_16:dp2 , pid_21:dp2 ) , ( pid_28:cp2 , pid_32:dp1 , pid_38:dp2 ) , ( pid_44:cp1 , pid_48:dp0 , pid_53:dp0 ) )
																					
																		EXE: { |;| 
	(:pid_23 , run) (:pid_35 , run) (:pid_37 , run) (:pid_37 , dp_sendDM) }
																					
																		TRACE: { |;| 
	(:pid_23 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_2068 }) 
	(:pid_37 , ${ output inst::Trickle.Node.DataMsg [ 2 , 2 , 1 ] ${ + 
	param::Trickle.Node.z_1 param::Trickle.Node.z_1009 param::Trickle.Node.z_1234 
	param::Trickle.Node.z_1279 param::Trickle.Node.z_13 param::Trickle.Node.z_1324 
	param::Trickle.Node.z_1420 param::Trickle.Node.z_1798 param::Trickle.Node.z_1855 
	param::Trickle.Node.z_1936 param::Trickle.Node.z_2005 param::Trickle.Node.z_2068 
	param::Trickle.Node.z_322 param::Trickle.Node.z_592 param::Trickle.Node.z_736 
	param::Trickle.Node.z_958 } } @ (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 
	+ z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_2068 + z_322 + z_592 + z_736 + 
	z_958)) }
																																						DATA{
																																							:pid_23:$time = (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_2068 + z_322 + z_592 + z_736 + z_958);
																																							:pid_23:z = z_2068;
																																							:pid_23:localTime = (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_2068 + z_322 + z_592 + z_736 + z_958);
																																							:pid_23:localPC = ((t_1291 < 4) && (t_233 < 4) && (t_4 < 4) && (t_662 < 8) && (t_874 < 4) && (t_994 < 8) && (t_1629 < 4) && (t_2790 < 4) && (0 <= (t_1291 + -2)) && (0 <= (t_233 + -2)) && (0 <= (t_4 + -2)) && (0 <= (t_662 + -4)) && (0 <= (t_874 + -2)) && (0 <= (t_994 + -4)) && (0 <= (t_1629 + -2)) && (0 <= (t_2790 + -2)));
																																							:pid_23:localPtC = (((z_1234 + z_1279 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_2068) == t_1629) && ((z_1279 + z_1324) == t_874) && ((z_1279 + z_1324 + z_1420) == 4) && ((z_1855 + z_1936 + z_2005) == t_1291) && ((z_592 + z_736 + z_958) == 4) && (z_13 == t_4) && (z_592 == t_233) && ((z_1009 + z_1234) < t_662) && ((z_1234 + z_1279) < t_1629) && ((z_13 + z_322) < 4) && ((z_592 + z_736) < 4) && (z_1798 < t_994) && (z_1936 < t_2790) && ((z_1074 + z_1146 + z_1539 + z_1560 + z_165 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99) <= (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_322 + z_592 + z_736 + z_958)) && ((z_1074 + z_1146 + z_165 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99) <= (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_322 + z_592 + z_736 + z_958)) && ((z_1074 + z_165 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99) <= (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_322 + z_592 + z_736 + z_958)) && ((z_165 + z_276 + z_369 + z_468 + z_66 + z_99) <= (z_1 + z_1009 + z_1234 + z_13 + z_322 + z_592 + z_736 + z_958)) && ((z_165 + z_276 + z_66 + z_99) <= (z_1 + z_13 + z_322)) && ((z_185 + z_236 + z_425) <= (z_1 + z_13 + z_322 + z_592 + z_736)) && ((z_1279 + z_1324 + z_1420) > t_874) && ((z_592 + z_736 + z_958) > t_233) && ($delta#initial > 0) && (z_1 > 0) && (z_1009 > 0) && (z_1234 > 0) && (z_1279 > 0) && (z_13 > 0) && (z_1324 > 0) && (z_1420 > 0) && (z_1798 > 0) && (z_1855 > 0) && (z_1936 > 0) && (z_2005 > 0) && (z_322 > 0) && (z_592 > 0) && (z_736 > 0) && (z_958 > 0));
																																							:pid_24:cl = (z_1855 + z_1936 + z_2005 + z_2068);
																																							:pid_30:cl = (z_1936 + z_2005 + z_2068);
																																							:pid_35:cl = (z_1234 + z_1279 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_2068);
																																						}
																																						BUFFER{
																																							:pid_6:bufferNode:<FIFO>#0{
																																								:pid_23:ControlMsg([ 0 , 0 ] , (z_1 + z_13 + z_322 + z_592));
																																								:pid_23:ControlMsg([ 0 , 1 ] , (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_322 + z_592 + z_736 + z_958));
																																								:pid_23:ControlMsg([ 1 , 1 ] , (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_322 + z_592 + z_736 + z_958));
																																								:pid_23:DataMsg([ 2 , 2 , 1 ] , (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_2068 + z_322 + z_592 + z_736 + z_958));
																																							}
																																							:pid_40:bufferNode:<FIFO>#0{
																																								:pid_23:ControlMsg([ 1 , 1 ] , (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_322 + z_592 + z_736 + z_958));
																																								:pid_23:DataMsg([ 2 , 2 , 1 ] , (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_2068 + z_322 + z_592 + z_736 + z_958));
																																							}
																																						}
																																						EC:<Id:5428;Ev:705;H:38;W:4690>{ SC: ( pid_4:o0 , ( pid_10:cp1 , pid_16:dp2 , pid_20:dp1 ) , ( pid_28:cp2 , pid_32:dp1 , pid_38:dp2 ) , ( pid_44:cp1 , pid_48:dp0 , pid_53:dp0 ) )
																					
																			EXE: { 
	|;| (:pid_6 , run) (:pid_18 , run) (:pid_21 , run) (:pid_21 , dp_resetTau) }
																					
																			TRACE: { 
	|;| (:pid_6 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_2082 }) 
	(:pid_21 , ${ newfresh inst::Trickle.Node.DataProcess.t 
	param::Trickle.Node.DataProcess.t_3144 }) }
																					
																			NC: 
	((t_3144 < 8) && (0 <= (t_3144 + -4)))
																																							PC: ((t_1168 < 8) && (t_1291 < 4) && (t_142 < 4) && (t_1442 < 4) && (t_233 < 4) && 
	(t_260 < 8) && (t_348 < 8) && (t_4 < 4) && (t_52 < 4) && (t_576 < 8) && (t_662 < 
	8) && (t_75 < 4) && (t_874 < 4) && (t_994 < 8) && (t_1418 < 4) && (t_1629 < 4) 
	&& (t_2347 < 8) && (t_2790 < 4) && (t_305 < 4) && (t_3144 < 8) && (0 <= (t_1168 
	+ -4)) && (0 <= (t_1291 + -2)) && (0 <= (t_142 + -2)) && (0 <= (t_1442 + -2)) && 
	(0 <= (t_233 + -2)) && (0 <= (t_260 + -4)) && (0 <= (t_348 + -4)) && (0 <= (t_4 
	+ -2)) && (0 <= (t_52 + -2)) && (0 <= (t_576 + -4)) && (0 <= (t_662 + -4)) && (0 
	<= (t_75 + -2)) && (0 <= (t_874 + -2)) && (0 <= (t_994 + -4)) && (0 <= (t_1418 + 
	-2)) && (0 <= (t_1629 + -2)) && (0 <= (t_2347 + -4)) && (0 <= (t_2790 + -2)) && 
	(0 <= (t_305 + -2)) && (0 <= (t_3144 + -4)))
																																							DATA{
																																								:pid_6:$time = (z_1074 + z_1146 + z_1539 + z_1560 + z_165 + z_1671 + z_1707 + z_2082 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99);
																																								:pid_6:z = z_2082;
																																								:pid_6:localTime = (z_1074 + z_1146 + z_1539 + z_1560 + z_165 + z_1671 + z_1707 + z_2082 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99);
																																								:pid_6:localPC = ((t_1168 < 8) && (t_260 < 8) && (t_348 < 8) && (t_52 < 4) && (t_75 < 4) && (t_1418 < 4) && (t_2347 < 8) && (t_305 < 4) && (t_3144 < 8) && (0 <= (t_1168 + -4)) && (0 <= (t_260 + -4)) && (0 <= (t_348 + -4)) && (0 <= (t_52 + -2)) && (0 <= (t_75 + -2)) && (0 <= (t_1418 + -2)) && (0 <= (t_2347 + -4)) && (0 <= (t_305 + -2)) && (0 <= (t_3144 + -4)));
																																								:pid_6:localPtC = (((z_1074 + z_1146 + z_1539 + z_1560) == t_1418) && ((z_1074 + z_1146 + z_1539 + z_1560 + z_1671 + z_858) == 8) && ((z_1074 + z_1146 + z_1539 + z_276 + z_369 + z_468 + z_546 + z_858) == 4) && ((z_1074 + z_1146 + z_858) == t_348) && ((z_1074 + z_276 + z_369 + z_468 + z_546 + z_858) == t_305) && ((z_1560 + z_1671 + z_1707) == t_2347) && ((z_1560 + z_1671 + z_1707 + z_2082) == 8) && ((z_165 + z_276) == t_75) && ((z_165 + z_276 + z_369) == 4) && ((z_468 + z_546) == 8) && (z_468 == t_260) && (z_99 < t_52) && ((z_1 + z_13) <= (z_66 + z_99)) && ((z_1074 + z_1146 + z_1539 + z_1560 + z_1671 + z_858) > t_348) && ((z_1074 + z_1146 + z_1539 + z_276 + z_369 + z_468 + z_546 + z_858) > t_305) && ((z_1560 + z_1671 + z_1707 + z_2082) > t_2347) && ((z_165 + z_276 + z_369) > t_75) && ((z_468 + z_546) > t_260) && ($delta#initial > 0) && (z_1074 > 0) && (z_1146 > 0) && (z_1539 > 0) && (z_1560 > 0) && (z_165 > 0) && (z_1671 > 0) && (z_1707 > 0) && (z_276 > 0) && (z_369 > 0) && (z_468 > 0) && (z_546 > 0) && (z_66 > 0) && (z_858 > 0) && (z_99 > 0));
																																								:pid_7:cl = (z_1707 + z_2082);
																																								:pid_13:cl = (z_1074 + z_1146 + z_1539 + z_1560 + z_1671 + z_1707 + z_2082);
																																								:pid_18:e = 2;
																																								:pid_18:tau = 8;
																																								:pid_18:t = t_3144;
																																								:pid_18:cl = 0;
																																							}
																																							EC:<Id:5524;Ev:730;H:39;W:4690>{ SC: ( pid_4:o0 , ( pid_10:cp1 , pid_16:dp2 , pid_22:dp3 ) , ( pid_28:cp2 , pid_32:dp1 , pid_38:dp2 ) , ( pid_44:cp1 , pid_48:dp0 , pid_53:dp0 ) )
																					
																				EXE: 
	{ |;| (:pid_6 , run) (:pid_18 , run) (:pid_20 , run) (:pid_20 , dp_DATA_EXPIR) }
																					
																				
	TRACE: (:pid_6 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_2109 })
																																								DATA{
																																									:pid_6:$time = (z_1074 + z_1146 + z_1539 + z_1560 + z_165 + z_1671 + z_1707 + z_2082 + z_2109 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99);
																																									:pid_6:z = z_2109;
																																									:pid_6:localTime = (z_1074 + z_1146 + z_1539 + z_1560 + z_165 + z_1671 + z_1707 + z_2082 + z_2109 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99);
																																									:pid_6:localPC = ((t_1168 < 8) && (t_260 < 8) && (t_348 < 8) && (t_52 < 4) && (t_75 < 4) && (t_1418 < 4) && (t_2347 < 8) && (t_305 < 4) && (t_3144 < 8) && (0 <= (t_1168 + -4)) && (0 <= (t_260 + -4)) && (0 <= (t_348 + -4)) && (0 <= (t_52 + -2)) && (0 <= (t_75 + -2)) && (0 <= (t_1418 + -2)) && (0 <= (t_2347 + -4)) && (0 <= (t_305 + -2)) && (0 <= (t_3144 + -4)));
																																									:pid_6:localPtC = (((z_1074 + z_1146 + z_1539 + z_1560) == t_1418) && ((z_1074 + z_1146 + z_1539 + z_1560 + z_1671 + z_858) == 8) && ((z_1074 + z_1146 + z_1539 + z_276 + z_369 + z_468 + z_546 + z_858) == 4) && ((z_1074 + z_1146 + z_858) == t_348) && ((z_1074 + z_276 + z_369 + z_468 + z_546 + z_858) == t_305) && ((z_1560 + z_1671 + z_1707) == t_2347) && ((z_1560 + z_1671 + z_1707 + z_2082) == 8) && ((z_165 + z_276) == t_75) && ((z_165 + z_276 + z_369) == 4) && ((z_468 + z_546) == 8) && (z_468 == t_260) && (z_99 < t_52) && ((z_1 + z_13) <= (z_66 + z_99)) && ((z_1074 + z_1146 + z_1539 + z_1560 + z_1671 + z_858) > t_348) && ((z_1074 + z_1146 + z_1539 + z_276 + z_369 + z_468 + z_546 + z_858) > t_305) && ((z_1560 + z_1671 + z_1707 + z_2082) > t_2347) && ((z_165 + z_276 + z_369) > t_75) && ((z_468 + z_546) > t_260) && ($delta#initial > 0) && (z_1074 > 0) && (z_1146 > 0) && (z_1539 > 0) && (z_1560 > 0) && (z_165 > 0) && (z_1671 > 0) && (z_1707 > 0) && (z_2082 > 0) && (z_276 > 0) && (z_369 > 0) && (z_468 > 0) && (z_546 > 0) && (z_66 > 0) && (z_858 > 0) && (z_99 > 0));
																																									:pid_7:cl = (z_1707 + z_2082 + z_2109);
																																									:pid_13:cl = (z_1074 + z_1146 + z_1539 + z_1560 + z_1671 + z_1707 + z_2082 + z_2109);
																																									:pid_18:e = 2;
																																									:pid_18:cl = z_2109;
																																								}
																																								EC:<Id:5786;Ev:760;H:40;W:5056>{ SC: ( pid_4:o0 , ( pid_10:cp1 , pid_16:dp2 , pid_22:dp3 ) , ( pid_27:cp1 , pid_32:dp1 , pid_38:dp2 ) , ( pid_44:cp1 , pid_48:dp0 , pid_53:dp0 ) )
																					
																					
	EXE: { |;| (:pid_23 , run) (:pid_24 , run) (:pid_28 , run) (:pid_28 , 
	cp_resetTau) }
																					
																					
	TRACE: { |;| (:pid_23 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_2185 }) (:pid_28 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_1511 }) 
	}
																					
																					
	NC: ((t_1511 < 8) && (0 <= (t_1511 + -4)))
																																									PC: ((t_1168 < 8) && (t_1291 < 4) && (t_142 < 4) && (t_1442 < 4) && (t_1511 < 8) && 
	(t_233 < 4) && (t_260 < 8) && (t_348 < 8) && (t_4 < 4) && (t_52 < 4) && (t_576 < 
	8) && (t_662 < 8) && (t_75 < 4) && (t_874 < 4) && (t_994 < 8) && (t_1418 < 4) && 
	(t_1629 < 4) && (t_2347 < 8) && (t_2790 < 4) && (t_305 < 4) && (t_3144 < 8) && 
	(0 <= (t_1168 + -4)) && (0 <= (t_1291 + -2)) && (0 <= (t_142 + -2)) && (0 <= 
	(t_1442 + -2)) && (0 <= (t_1511 + -4)) && (0 <= (t_233 + -2)) && (0 <= (t_260 + 
	-4)) && (0 <= (t_348 + -4)) && (0 <= (t_4 + -2)) && (0 <= (t_52 + -2)) && (0 <= 
	(t_576 + -4)) && (0 <= (t_662 + -4)) && (0 <= (t_75 + -2)) && (0 <= (t_874 + -2))
	 && (0 <= (t_994 + -4)) && (0 <= (t_1418 + -2)) && (0 <= (t_1629 + -2)) && (0 <= 
	(t_2347 + -4)) && (0 <= (t_2790 + -2)) && (0 <= (t_305 + -2)) && (0 <= (t_3144 + 
	-4)))
																																									DATA{
																																										:pid_23:$time = (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_2068 + z_2185 + z_322 + z_592 + z_736 + z_958);
																																										:pid_23:z = z_2185;
																																										:pid_23:localTime = (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_2068 + z_2185 + z_322 + z_592 + z_736 + z_958);
																																										:pid_23:localPC = ((t_1291 < 4) && (t_1511 < 8) && (t_233 < 4) && (t_4 < 4) && (t_662 < 8) && (t_874 < 4) && (t_994 < 8) && (t_1629 < 4) && (t_2790 < 4) && (0 <= (t_1291 + -2)) && (0 <= (t_1511 + -4)) && (0 <= (t_233 + -2)) && (0 <= (t_4 + -2)) && (0 <= (t_662 + -4)) && (0 <= (t_874 + -2)) && (0 <= (t_994 + -4)) && (0 <= (t_1629 + -2)) && (0 <= (t_2790 + -2)));
																																										:pid_23:localPtC = (((z_1234 + z_1279 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_2068) == t_1629) && ((z_1279 + z_1324) == t_874) && ((z_1279 + z_1324 + z_1420) == 4) && ((z_1855 + z_1936 + z_2005) == t_1291) && ((z_1855 + z_1936 + z_2005 + z_2068 + z_2185) == 4) && ((z_592 + z_736 + z_958) == 4) && (z_13 == t_4) && (z_592 == t_233) && ((z_1009 + z_1234) < t_662) && ((z_1234 + z_1279) < t_1629) && ((z_13 + z_322) < 4) && ((z_592 + z_736) < 4) && (z_1798 < t_994) && (z_1936 < t_2790) && ((z_1074 + z_1146 + z_1539 + z_1560 + z_165 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99) <= (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_322 + z_592 + z_736 + z_958)) && ((z_1074 + z_1146 + z_165 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99) <= (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_322 + z_592 + z_736 + z_958)) && ((z_1074 + z_165 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99) <= (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_322 + z_592 + z_736 + z_958)) && ((z_165 + z_276 + z_369 + z_468 + z_66 + z_99) <= (z_1 + z_1009 + z_1234 + z_13 + z_322 + z_592 + z_736 + z_958)) && ((z_165 + z_276 + z_66 + z_99) <= (z_1 + z_13 + z_322)) && ((z_185 + z_236 + z_425) <= (z_1 + z_13 + z_322 + z_592 + z_736)) && ((z_1279 + z_1324 + z_1420) > t_874) && ((z_1855 + z_1936 + z_2005 + z_2068 + z_2185) > t_1291) && ((z_592 + z_736 + z_958) > t_233) && ($delta#initial > 0) && (z_1 > 0) && (z_1009 > 0) && (z_1234 > 0) && (z_1279 > 0) && (z_13 > 0) && (z_1324 > 0) && (z_1420 > 0) && (z_1798 > 0) && (z_1855 > 0) && (z_1936 > 0) && (z_2005 > 0) && (z_2068 > 0) && (z_322 > 0) && (z_592 > 0) && (z_736 > 0) && (z_958 > 0));
																																										:pid_24:e = 1;
																																										:pid_24:tau = 8;
																																										:pid_24:t = t_1511;
																																										:pid_24:cl = 0;
																																										:pid_30:cl = (z_1936 + z_2005 + z_2068 + z_2185);
																																										:pid_35:cl = (z_1234 + z_1279 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_2068 + z_2185);
																																									}
																																									EC:<Id:6066;Ev:776;H:41;W:5306>{ SC: ( pid_4:o0 , ( pid_10:cp1 , pid_16:dp2 , pid_22:dp3 ) , ( pid_27:cp1 , pid_32:dp1 , pid_38:dp2 ) , ( pid_44:cp1 , pid_48:dp0 , pid_53:dp0 ) )
																					
																						
	EXE: { |;| (:pid_23 , run) (:pid_35 , run) (:pid_38 , run) (:pid_38 , 
	dp2_receiveDM_consistent) }
																					
																						
	TRACE: { |;| (:pid_23 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_2275 }) (:pid_38 , ${ input inst::Trickle.Node.DataMsg [ 2 
	, 2 , 1 ] ${ + param::Trickle.Node.z_1074 param::Trickle.Node.z_1146 
	param::Trickle.Node.z_1539 param::Trickle.Node.z_1560 param::Trickle.Node.z_165 
	param::Trickle.Node.z_1671 param::Trickle.Node.z_1707 param::Trickle.Node.z_276 
	param::Trickle.Node.z_369 param::Trickle.Node.z_468 param::Trickle.Node.z_546 
	param::Trickle.Node.z_66 param::Trickle.Node.z_858 param::Trickle.Node.z_99 } } 
	@ (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + 
	z_1936 + z_2005 + z_2068 + z_2185 + z_2275 + z_322 + z_592 + z_736 + z_958)) }
																																										DATA{
																																											:pid_23:$time = (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_2068 + z_2185 + z_2275 + z_322 + z_592 + z_736 + z_958);
																																											:pid_23:z = z_2275;
																																											:pid_23:localTime = (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_2068 + z_2185 + z_2275 + z_322 + z_592 + z_736 + z_958);
																																											:pid_23:localPC = ((t_1291 < 4) && (t_1511 < 8) && (t_233 < 4) && (t_4 < 4) && (t_662 < 8) && (t_874 < 4) && (t_994 < 8) && (t_1629 < 4) && (t_2790 < 4) && (0 <= (t_1291 + -2)) && (0 <= (t_1511 + -4)) && (0 <= (t_233 + -2)) && (0 <= (t_4 + -2)) && (0 <= (t_662 + -4)) && (0 <= (t_874 + -2)) && (0 <= (t_994 + -4)) && (0 <= (t_1629 + -2)) && (0 <= (t_2790 + -2)));
																																											:pid_23:localPtC = (((z_1234 + z_1279 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_2068) == t_1629) && ((z_1279 + z_1324) == t_874) && ((z_1279 + z_1324 + z_1420) == 4) && ((z_1855 + z_1936 + z_2005) == t_1291) && ((z_1855 + z_1936 + z_2005 + z_2068 + z_2185) == 4) && ((z_592 + z_736 + z_958) == 4) && (z_13 == t_4) && (z_592 == t_233) && ((z_1009 + z_1234) < t_662) && ((z_1234 + z_1279) < t_1629) && ((z_1234 + z_1279 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_2068 + z_2185 + z_2275) < 4) && ((z_13 + z_322) < 4) && ((z_592 + z_736) < 4) && (z_1798 < t_994) && (z_1936 < t_2790) && ((z_1074 + z_1146 + z_1539 + z_1560 + z_165 + z_1671 + z_1707 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99) <= (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_2068 + z_2185 + z_2275 + z_322 + z_592 + z_736 + z_958)) && ((z_1074 + z_1146 + z_1539 + z_1560 + z_165 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99) <= (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_322 + z_592 + z_736 + z_958)) && ((z_1074 + z_1146 + z_165 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99) <= (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_322 + z_592 + z_736 + z_958)) && ((z_1074 + z_165 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99) <= (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_322 + z_592 + z_736 + z_958)) && ((z_165 + z_276 + z_369 + z_468 + z_66 + z_99) <= (z_1 + z_1009 + z_1234 + z_13 + z_322 + z_592 + z_736 + z_958)) && ((z_165 + z_276 + z_66 + z_99) <= (z_1 + z_13 + z_322)) && ((z_185 + z_236 + z_425) <= (z_1 + z_13 + z_322 + z_592 + z_736)) && ((z_1279 + z_1324 + z_1420) > t_874) && ((z_1855 + z_1936 + z_2005 + z_2068 + z_2185) > t_1291) && ((z_592 + z_736 + z_958) > t_233) && ($delta#initial > 0) && (z_1 > 0) && (z_1009 > 0) && (z_1234 > 0) && (z_1279 > 0) && (z_13 > 0) && (z_1324 > 0) && (z_1420 > 0) && (z_1798 > 0) && (z_1855 > 0) && (z_1936 > 0) && (z_2005 > 0) && (z_2068 > 0) && (z_2185 > 0) && (z_322 > 0) && (z_592 > 0) && (z_736 > 0) && (z_958 > 0));
																																											:pid_23:timeEmit = (z_1074 + z_1146 + z_1539 + z_1560 + z_165 + z_1671 + z_1707 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99);
																																											:pid_24:cl = z_2275;
																																											:pid_30:cl = (z_1936 + z_2005 + z_2068 + z_2185 + z_2275);
																																											:pid_35:c = 2;
																																											:pid_35:cl = (z_1234 + z_1279 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_2068 + z_2185 + z_2275);
																																										}
																																										BUFFER{
																																											:pid_23:bufferNode:<FIFO>#0{ }
																																										}
																																										EC:<Id:6223;Ev:816;H:42;W:5447>{ SC: ( pid_4:o0 , ( pid_10:cp1 , pid_16:dp2 , pid_22:dp3 ) , ( pid_27:cp1 , pid_32:dp1 , pid_38:dp2 ) , ( pid_45:cp2 , pid_48:dp0 , pid_53:dp0 ) )
																					
																						
		EXE: { |;| (:pid_40 , run) (:pid_41 , run) (:pid_44 , run) (:pid_44 , 
	cp_sendCM) }
																					
																						
		TRACE: { |;| (:pid_40 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_2324 }) (:pid_44 , ${ output inst::Trickle.Node.ControlMsg 
	[ 0 , 0 ] ${ + param::Trickle.Node.z_185 param::Trickle.Node.z_2033 
	param::Trickle.Node.z_2324 param::Trickle.Node.z_236 param::Trickle.Node.z_425 
	param::Trickle.Node.z_650 param::Trickle.Node.z_875 } } @ (z_185 + z_2033 + 
	z_2324 + z_236 + z_425 + z_650 + z_875)) }
																																											DATA{
																																												:pid_40:$time = (z_185 + z_2033 + z_2324 + z_236 + z_425 + z_650 + z_875);
																																												:pid_40:z = z_2324;
																																												:pid_40:localTime = (z_185 + z_2033 + z_2324 + z_236 + z_425 + z_650 + z_875);
																																												:pid_40:localPC = ((t_142 < 4) && (t_1442 < 4) && (t_576 < 8) && (0 <= (t_142 + -2)) && (0 <= (t_1442 + -2)) && (0 <= (t_576 + -4)));
																																												:pid_40:localPtC = (((z_236 + z_425) == t_142) && ((z_236 + z_425 + z_650 + z_875) == 4) && (z_2324 == t_1442) && ((z_236 + z_425 + z_650) < 4) && (z_2033 < t_576) && (z_236 < t_142) && ((z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_322 + z_592 + z_736 + z_958) <= (z_185 + z_2033 + z_236 + z_425 + z_650 + z_875)) && ((z_1 + z_13) <= (z_185 + z_236)) && ((z_1 + z_13 + z_322 + z_592) <= (z_185 + z_236 + z_425 + z_650)) && ((z_236 + z_425 + z_650 + z_875) > t_142) && ($delta#initial > 0) && (z_185 > 0) && (z_2033 > 0) && (z_236 > 0) && (z_425 > 0) && (z_650 > 0) && (z_875 > 0));
																																												:pid_41:cl = z_2324;
																																												:pid_47:cl = (z_185 + z_2033 + z_2324 + z_236 + z_425 + z_650 + z_875);
																																												:pid_52:cl = (z_185 + z_2033 + z_2324 + z_236 + z_425 + z_650 + z_875);
																																											}
																																											BUFFER{
																																												:pid_23:bufferNode:<FIFO>#0{
																																													:pid_40:ControlMsg([ 0 , 0 ] , (z_185 + z_2033 + z_2324 + z_236 + z_425 + z_650 + z_875));
																																												}
																																											}
																																											EC:<Id:6592;Ev:861;H:43;W:5776>{ SC: ( pid_4:o0 , ( pid_10:cp1 , pid_16:dp2 , pid_22:dp3 ) , ( pid_27:cp1 , pid_32:dp1 , pid_38:dp2 ) , ( pid_45:cp2 , pid_48:dp0 , pid_54:dp1 ) )
																					
																						
			EXE: { |;| (:pid_40 , run) (:pid_52 , run) (:pid_53 , run) (:pid_53 , 
	dp_init) }
																					
																						
			TRACE: { |;| (:pid_40 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_2444 }) (:pid_53 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_3670 }) }
																					
																						
			NC: ((t_3670 < 4) && (0 <= (t_3670 + -2)))
																																												PC: ((t_1168 < 8) && (t_1291 < 4) && (t_142 < 4) && (t_1442 < 4) && (t_1511 < 8) && 
	(t_233 < 4) && (t_260 < 8) && (t_348 < 8) && (t_4 < 4) && (t_52 < 4) && (t_576 < 
	8) && (t_662 < 8) && (t_75 < 4) && (t_874 < 4) && (t_994 < 8) && (t_1418 < 4) && 
	(t_1629 < 4) && (t_2347 < 8) && (t_2790 < 4) && (t_305 < 4) && (t_3144 < 8) && 
	(t_3670 < 4) && (0 <= (t_1168 + -4)) && (0 <= (t_1291 + -2)) && (0 <= (t_142 + 
	-2)) && (0 <= (t_1442 + -2)) && (0 <= (t_1511 + -4)) && (0 <= (t_233 + -2)) && 
	(0 <= (t_260 + -4)) && (0 <= (t_348 + -4)) && (0 <= (t_4 + -2)) && (0 <= (t_52 + 
	-2)) && (0 <= (t_576 + -4)) && (0 <= (t_662 + -4)) && (0 <= (t_75 + -2)) && (0 
	<= (t_874 + -2)) && (0 <= (t_994 + -4)) && (0 <= (t_1418 + -2)) && (0 <= (t_1629 
	+ -2)) && (0 <= (t_2347 + -4)) && (0 <= (t_2790 + -2)) && (0 <= (t_305 + -2)) && 
	(0 <= (t_3144 + -4)) && (0 <= (t_3670 + -2)))
																																												DATA{
																																													:pid_40:$time = (z_185 + z_2033 + z_2324 + z_236 + z_2444 + z_425 + z_650 + z_875);
																																													:pid_40:z = z_2444;
																																													:pid_40:localTime = (z_185 + z_2033 + z_2324 + z_236 + z_2444 + z_425 + z_650 + z_875);
																																													:pid_40:localPC = ((t_142 < 4) && (t_1442 < 4) && (t_576 < 8) && (t_3670 < 4) && (0 <= (t_142 + -2)) && (0 <= (t_1442 + -2)) && (0 <= (t_576 + -4)) && (0 <= (t_3670 + -2)));
																																													:pid_40:localPtC = (((z_236 + z_425) == t_142) && ((z_236 + z_425 + z_650 + z_875) == 4) && (z_2324 == t_1442) && ((z_236 + z_425 + z_650) < 4) && (z_2033 < t_576) && (z_236 < t_142) && ((z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_322 + z_592 + z_736 + z_958) <= (z_185 + z_2033 + z_236 + z_425 + z_650 + z_875)) && ((z_1 + z_13) <= (z_185 + z_236)) && ((z_1 + z_13 + z_322 + z_592) <= (z_185 + z_236 + z_425 + z_650)) && ((z_236 + z_425 + z_650 + z_875) > t_142) && ($delta#initial > 0) && (z_185 > 0) && (z_2033 > 0) && (z_2324 > 0) && (z_236 > 0) && (z_425 > 0) && (z_650 > 0) && (z_875 > 0));
																																													:pid_41:cl = (z_2324 + z_2444);
																																													:pid_47:cl = (z_185 + z_2033 + z_2324 + z_236 + z_2444 + z_425 + z_650 + z_875);
																																													:pid_52:k = 2;
																																													:pid_52:c = 0;
																																													:pid_52:e = 0;
																																													:pid_52:tau = 4;
																																													:pid_52:tau_l = 4;
																																													:pid_52:tau_h = 8;
																																													:pid_52:t = t_3670;
																																													:pid_52:cl = 0;
																																												}
																																												EC:<Id:7000;Ev:866;H:44;W:6139>{ SC: ( pid_4:o0 , ( pid_12:cp3 , pid_16:dp2 , pid_22:dp3 ) , ( pid_27:cp1 , pid_32:dp1 , pid_38:dp2 ) , ( pid_45:cp2 , pid_48:dp0 , pid_54:dp1 ) )
																					
																						
				EXE: { |;| (:pid_6 , run) (:pid_7 , run) (:pid_10 , run) (:pid_10 , 
	cp_CTRL_EXPIR) }
																					
																						
				TRACE: { |;| (:pid_6 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_2577 }) (:pid_10 , ${ output#env inst::Trickle.Node.Log 1 }
	 @ (z_1074 + z_1146 + z_1539 + z_1560 + z_165 + z_1671 + z_1707 + z_2082 + 
	z_2109 + z_2577 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99)) }
																																													DATA{
																																														:pid_6:$time = (z_1074 + z_1146 + z_1539 + z_1560 + z_165 + z_1671 + z_1707 + z_2082 + z_2109 + z_2577 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99);
																																														:pid_6:z = z_2577;
																																														:pid_6:localTime = (z_1074 + z_1146 + z_1539 + z_1560 + z_165 + z_1671 + z_1707 + z_2082 + z_2109 + z_2577 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99);
																																														:pid_6:localPC = ((t_1168 < 8) && (t_260 < 8) && (t_348 < 8) && (t_52 < 4) && (t_75 < 4) && (t_1418 < 4) && (t_2347 < 8) && (t_305 < 4) && (t_3144 < 8) && (0 <= (t_1168 + -4)) && (0 <= (t_260 + -4)) && (0 <= (t_348 + -4)) && (0 <= (t_52 + -2)) && (0 <= (t_75 + -2)) && (0 <= (t_1418 + -2)) && (0 <= (t_2347 + -4)) && (0 <= (t_305 + -2)) && (0 <= (t_3144 + -4)));
																																														:pid_6:localPtC = (((z_1074 + z_1146 + z_1539 + z_1560) == t_1418) && ((z_1074 + z_1146 + z_1539 + z_1560 + z_1671 + z_858) == 8) && ((z_1074 + z_1146 + z_1539 + z_276 + z_369 + z_468 + z_546 + z_858) == 4) && ((z_1074 + z_1146 + z_858) == t_348) && ((z_1074 + z_276 + z_369 + z_468 + z_546 + z_858) == t_305) && ((z_1560 + z_1671 + z_1707) == t_2347) && ((z_1560 + z_1671 + z_1707 + z_2082) == 8) && ((z_165 + z_276) == t_75) && ((z_165 + z_276 + z_369) == 4) && ((z_468 + z_546) == 8) && (z_468 == t_260) && (z_99 < t_52) && ((z_1 + z_13) <= (z_66 + z_99)) && ((z_1074 + z_1146 + z_1539 + z_1560 + z_1671 + z_858) > t_348) && ((z_1074 + z_1146 + z_1539 + z_276 + z_369 + z_468 + z_546 + z_858) > t_305) && ((z_1560 + z_1671 + z_1707 + z_2082) > t_2347) && ((z_165 + z_276 + z_369) > t_75) && ((z_468 + z_546) > t_260) && ($delta#initial > 0) && (z_1074 > 0) && (z_1146 > 0) && (z_1539 > 0) && (z_1560 > 0) && (z_165 > 0) && (z_1671 > 0) && (z_1707 > 0) && (z_2082 > 0) && (z_2109 > 0) && (z_276 > 0) && (z_369 > 0) && (z_468 > 0) && (z_546 > 0) && (z_66 > 0) && (z_858 > 0) && (z_99 > 0));
																																														:pid_7:e = 3;
																																														:pid_7:cl = (z_1707 + z_2082 + z_2109 + z_2577);
																																														:pid_13:cl = (z_1074 + z_1146 + z_1539 + z_1560 + z_1671 + z_1707 + z_2082 + z_2109 + z_2577);
																																													}
																																													EC:<Id:7048;Ev:892;H:45;W:6182>{ SC: ( pid_4:o0 , ( pid_12:cp3 , pid_16:dp2 , pid_22:dp3 ) , ( pid_27:cp1 , pid_32:dp1 , pid_38:dp2 ) , ( pid_44:cp1 , pid_48:dp0 , pid_54:dp1 ) )
																					
																						
					EXE: { |;| (:pid_40 , run) (:pid_41 , run) (:pid_45 , run) 
	(:pid_45 , cp_resetTau) }
																					
																						
					TRACE: { |;| (:pid_40 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_2594 }) (:pid_45 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_1745 }) 
	}
																					
																						
					NC: ((t_1745 < 8) && (0 <= (t_1745 + -4)))
																																														PC: ((t_1168 < 8) && (t_1291 < 4) && (t_142 < 4) && (t_1442 < 4) && (t_1511 < 8) && 
	(t_1745 < 8) && (t_233 < 4) && (t_260 < 8) && (t_348 < 8) && (t_4 < 4) && (t_52 
	< 4) && (t_576 < 8) && (t_662 < 8) && (t_75 < 4) && (t_874 < 4) && (t_994 < 8) 
	&& (t_1418 < 4) && (t_1629 < 4) && (t_2347 < 8) && (t_2790 < 4) && (t_305 < 4) 
	&& (t_3144 < 8) && (t_3670 < 4) && (0 <= (t_1168 + -4)) && (0 <= (t_1291 + -2)) 
	&& (0 <= (t_142 + -2)) && (0 <= (t_1442 + -2)) && (0 <= (t_1511 + -4)) && (0 <= 
	(t_1745 + -4)) && (0 <= (t_233 + -2)) && (0 <= (t_260 + -4)) && (0 <= (t_348 + 
	-4)) && (0 <= (t_4 + -2)) && (0 <= (t_52 + -2)) && (0 <= (t_576 + -4)) && (0 <= 
	(t_662 + -4)) && (0 <= (t_75 + -2)) && (0 <= (t_874 + -2)) && (0 <= (t_994 + -4))
	 && (0 <= (t_1418 + -2)) && (0 <= (t_1629 + -2)) && (0 <= (t_2347 + -4)) && (0 
	<= (t_2790 + -2)) && (0 <= (t_305 + -2)) && (0 <= (t_3144 + -4)) && (0 <= 
	(t_3670 + -2)))
																																														DATA{
																																															:pid_40:$time = (z_185 + z_2033 + z_2324 + z_236 + z_2444 + z_2594 + z_425 + z_650 + z_875);
																																															:pid_40:z = z_2594;
																																															:pid_40:localTime = (z_185 + z_2033 + z_2324 + z_236 + z_2444 + z_2594 + z_425 + z_650 + z_875);
																																															:pid_40:localPC = ((t_142 < 4) && (t_1442 < 4) && (t_1745 < 8) && (t_576 < 8) && (t_3670 < 4) && (0 <= (t_142 + -2)) && (0 <= (t_1442 + -2)) && (0 <= (t_1745 + -4)) && (0 <= (t_576 + -4)) && (0 <= (t_3670 + -2)));
																																															:pid_40:localPtC = (((z_2324 + z_2444 + z_2594) == 4) && ((z_236 + z_425) == t_142) && ((z_236 + z_425 + z_650 + z_875) == 4) && (z_2324 == t_1442) && ((z_236 + z_425 + z_650) < 4) && (z_2033 < t_576) && (z_236 < t_142) && ((z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_322 + z_592 + z_736 + z_958) <= (z_185 + z_2033 + z_236 + z_425 + z_650 + z_875)) && ((z_1 + z_13) <= (z_185 + z_236)) && ((z_1 + z_13 + z_322 + z_592) <= (z_185 + z_236 + z_425 + z_650)) && ((z_2324 + z_2444 + z_2594) > t_1442) && ((z_236 + z_425 + z_650 + z_875) > t_142) && ($delta#initial > 0) && (z_185 > 0) && (z_2033 > 0) && (z_2324 > 0) && (z_236 > 0) && (z_2444 > 0) && (z_425 > 0) && (z_650 > 0) && (z_875 > 0));
																																															:pid_41:e = 1;
																																															:pid_41:tau = 8;
																																															:pid_41:t = t_1745;
																																															:pid_41:cl = 0;
																																															:pid_47:cl = (z_185 + z_2033 + z_2324 + z_236 + z_2444 + z_2594 + z_425 + z_650 + z_875);
																																															:pid_52:cl = z_2594;
																																														}
																																														EC:<Id:7254;Ev:913;H:46;W:6362>{ SC: ( pid_4:o0 , ( pid_12:cp3 , pid_16:dp2 , pid_22:dp3 ) , ( pid_27:cp1 , pid_32:dp1 , pid_38:dp2 ) , ( pid_44:cp1 , pid_48:dp0 , pid_54:dp1 ) )
																					
																						
						EXE: { |;| (:pid_40 , run) (:pid_41 , run) (:pid_44 , run) 
	(:pid_44 , cp1_receiveCM_inconsistent) }
																					
																						
						TRACE: { |;| (:pid_40 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_2672 }) (:pid_44 , ${ input inst::Trickle.Node.ControlMsg 
	[ 1 , 1 ] ${ + param::Trickle.Node.z_1 param::Trickle.Node.z_1009 
	param::Trickle.Node.z_1234 param::Trickle.Node.z_1279 param::Trickle.Node.z_13 
	param::Trickle.Node.z_1324 param::Trickle.Node.z_1420 param::Trickle.Node.z_1798 
	param::Trickle.Node.z_1855 param::Trickle.Node.z_1936 param::Trickle.Node.z_2005 
	param::Trickle.Node.z_322 param::Trickle.Node.z_592 param::Trickle.Node.z_736 
	param::Trickle.Node.z_958 } } @ (z_185 + z_2033 + z_2324 + z_236 + z_2444 + 
	z_2594 + z_2672 + z_425 + z_650 + z_875)) (:pid_44 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_1799 }) 
	}
																					
																						
						NC: ((t_1799 < 4) && (0 <= (t_1799 + -2)))
																																															PC: ((t_1168 < 8) && (t_1291 < 4) && (t_142 < 4) && (t_1442 < 4) && (t_1511 < 8) && 
	(t_1745 < 8) && (t_1799 < 4) && (t_233 < 4) && (t_260 < 8) && (t_348 < 8) && 
	(t_4 < 4) && (t_52 < 4) && (t_576 < 8) && (t_662 < 8) && (t_75 < 4) && (t_874 < 
	4) && (t_994 < 8) && (t_1418 < 4) && (t_1629 < 4) && (t_2347 < 8) && (t_2790 < 4)
	 && (t_305 < 4) && (t_3144 < 8) && (t_3670 < 4) && (0 <= (t_1168 + -4)) && (0 <= 
	(t_1291 + -2)) && (0 <= (t_142 + -2)) && (0 <= (t_1442 + -2)) && (0 <= (t_1511 + 
	-4)) && (0 <= (t_1745 + -4)) && (0 <= (t_1799 + -2)) && (0 <= (t_233 + -2)) && 
	(0 <= (t_260 + -4)) && (0 <= (t_348 + -4)) && (0 <= (t_4 + -2)) && (0 <= (t_52 + 
	-2)) && (0 <= (t_576 + -4)) && (0 <= (t_662 + -4)) && (0 <= (t_75 + -2)) && (0 
	<= (t_874 + -2)) && (0 <= (t_994 + -4)) && (0 <= (t_1418 + -2)) && (0 <= (t_1629 
	+ -2)) && (0 <= (t_2347 + -4)) && (0 <= (t_2790 + -2)) && (0 <= (t_305 + -2)) && 
	(0 <= (t_3144 + -4)) && (0 <= (t_3670 + -2)))
																																															DATA{
																																																:pid_40:mydp_run[0] = true;
																																																:pid_40:$time = (z_185 + z_2033 + z_2324 + z_236 + z_2444 + z_2594 + z_2672 + z_425 + z_650 + z_875);
																																																:pid_40:z = z_2672;
																																																:pid_40:seq_buff[0] = 1;
																																																:pid_40:localTime = (z_185 + z_2033 + z_2324 + z_236 + z_2444 + z_2594 + z_2672 + z_425 + z_650 + z_875);
																																																:pid_40:localPC = ((t_142 < 4) && (t_1442 < 4) && (t_1745 < 8) && (t_1799 < 4) && (t_576 < 8) && (t_3670 < 4) && (0 <= (t_142 + -2)) && (0 <= (t_1442 + -2)) && (0 <= (t_1745 + -4)) && (0 <= (t_1799 + -2)) && (0 <= (t_576 + -4)) && (0 <= (t_3670 + -2)));
																																																:pid_40:localPtC = (((z_2324 + z_2444 + z_2594) == 4) && ((z_236 + z_425) == t_142) && ((z_236 + z_425 + z_650 + z_875) == 4) && (z_2324 == t_1442) && ((z_236 + z_425 + z_650) < 4) && (z_2033 < t_576) && (z_236 < t_142) && (z_2672 < t_1745) && ((z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_322 + z_592 + z_736 + z_958) <= (z_185 + z_2033 + z_2324 + z_236 + z_2444 + z_2594 + z_2672 + z_425 + z_650 + z_875)) && ((z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_322 + z_592 + z_736 + z_958) <= (z_185 + z_2033 + z_236 + z_425 + z_650 + z_875)) && ((z_1 + z_13) <= (z_185 + z_236)) && ((z_1 + z_13 + z_322 + z_592) <= (z_185 + z_236 + z_425 + z_650)) && ((z_2324 + z_2444 + z_2594) > t_1442) && ((z_236 + z_425 + z_650 + z_875) > t_142) && ($delta#initial > 0) && (z_185 > 0) && (z_2033 > 0) && (z_2324 > 0) && (z_236 > 0) && (z_2444 > 0) && (z_2594 > 0) && (z_425 > 0) && (z_650 > 0) && (z_875 > 0));
																																																:pid_40:timeEmit = (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_322 + z_592 + z_736 + z_958);
																																																:pid_41:e = 0;
																																																:pid_41:tau = 4;
																																																:pid_41:i = 2;
																																																:pid_41:t = t_1799;
																																																:pid_41:cl = 0;
																																																:pid_47:cl = (z_185 + z_2033 + z_2324 + z_236 + z_2444 + z_2594 + z_2672 + z_425 + z_650 + z_875);
																																																:pid_52:cl = (z_2594 + z_2672);
																																															}
																																															BUFFER{
																																																:pid_40:bufferNode:<FIFO>#0{
																																																	:pid_23:DataMsg([ 2 , 2 , 1 ] , (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_2068 + z_322 + z_592 + z_736 + z_958));
																																																}
																																															}
																																															EC:<Id:7422;Ev:950;H:47;W:6509>{ SC: ( pid_4:o0 , ( pid_12:cp3 , pid_16:dp2 , pid_22:dp3 ) , ( pid_27:cp1 , pid_33:dp2 , pid_38:dp2 ) , ( pid_44:cp1 , pid_48:dp0 , pid_54:dp1 ) )
																					
																						
							EXE: { |;| (:pid_23 , run) (:pid_30 , run) (:pid_32 , 
	run) (:pid_32 , dp_sendDM) }
																					
																						
							TRACE: { |;| (:pid_23 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_2734 }) (:pid_32 , ${ output inst::Trickle.Node.DataMsg [ 
	1 , 1 , 0 ] ${ + param::Trickle.Node.z_1 param::Trickle.Node.z_1009 
	param::Trickle.Node.z_1234 param::Trickle.Node.z_1279 param::Trickle.Node.z_13 
	param::Trickle.Node.z_1324 param::Trickle.Node.z_1420 param::Trickle.Node.z_1798 
	param::Trickle.Node.z_1855 param::Trickle.Node.z_1936 param::Trickle.Node.z_2005 
	param::Trickle.Node.z_2068 param::Trickle.Node.z_2185 param::Trickle.Node.z_2275 
	param::Trickle.Node.z_2734 param::Trickle.Node.z_322 param::Trickle.Node.z_592 
	param::Trickle.Node.z_736 param::Trickle.Node.z_958 } } @ (z_1 + z_1009 + z_1234 
	+ z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_2068 + 
	z_2185 + z_2275 + z_2734 + z_322 + z_592 + z_736 + z_958)) }
																																																DATA{
																																																	:pid_23:$time = (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_2068 + z_2185 + z_2275 + z_2734 + z_322 + z_592 + z_736 + z_958);
																																																	:pid_23:z = z_2734;
																																																	:pid_23:localTime = (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_2068 + z_2185 + z_2275 + z_2734 + z_322 + z_592 + z_736 + z_958);
																																																	:pid_23:localPC = ((t_1291 < 4) && (t_1511 < 8) && (t_233 < 4) && (t_4 < 4) && (t_662 < 8) && (t_874 < 4) && (t_994 < 8) && (t_1629 < 4) && (t_2790 < 4) && (0 <= (t_1291 + -2)) && (0 <= (t_1511 + -4)) && (0 <= (t_233 + -2)) && (0 <= (t_4 + -2)) && (0 <= (t_662 + -4)) && (0 <= (t_874 + -2)) && (0 <= (t_994 + -4)) && (0 <= (t_1629 + -2)) && (0 <= (t_2790 + -2)));
																																																	:pid_23:localPtC = (((z_1234 + z_1279 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_2068) == t_1629) && ((z_1279 + z_1324) == t_874) && ((z_1279 + z_1324 + z_1420) == 4) && ((z_1855 + z_1936 + z_2005) == t_1291) && ((z_1855 + z_1936 + z_2005 + z_2068 + z_2185) == 4) && ((z_1936 + z_2005 + z_2068 + z_2185 + z_2275 + z_2734) == t_2790) && ((z_592 + z_736 + z_958) == 4) && (z_13 == t_4) && (z_592 == t_233) && ((z_1009 + z_1234) < t_662) && ((z_1234 + z_1279) < t_1629) && ((z_1234 + z_1279 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_2068 + z_2185 + z_2275) < 4) && ((z_13 + z_322) < 4) && ((z_592 + z_736) < 4) && (z_1798 < t_994) && (z_1936 < t_2790) && ((z_1074 + z_1146 + z_1539 + z_1560 + z_165 + z_1671 + z_1707 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99) <= (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_2068 + z_2185 + z_2275 + z_322 + z_592 + z_736 + z_958)) && ((z_1074 + z_1146 + z_1539 + z_1560 + z_165 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99) <= (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_322 + z_592 + z_736 + z_958)) && ((z_1074 + z_1146 + z_165 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99) <= (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_322 + z_592 + z_736 + z_958)) && ((z_1074 + z_165 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99) <= (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_322 + z_592 + z_736 + z_958)) && ((z_165 + z_276 + z_369 + z_468 + z_66 + z_99) <= (z_1 + z_1009 + z_1234 + z_13 + z_322 + z_592 + z_736 + z_958)) && ((z_165 + z_276 + z_66 + z_99) <= (z_1 + z_13 + z_322)) && ((z_185 + z_236 + z_425) <= (z_1 + z_13 + z_322 + z_592 + z_736)) && ((z_1279 + z_1324 + z_1420) > t_874) && ((z_1855 + z_1936 + z_2005 + z_2068 + z_2185) > t_1291) && ((z_592 + z_736 + z_958) > t_233) && ($delta#initial > 0) && (z_1 > 0) && (z_1009 > 0) && (z_1234 > 0) && (z_1279 > 0) && (z_13 > 0) && (z_1324 > 0) && (z_1420 > 0) && (z_1798 > 0) && (z_1855 > 0) && (z_1936 > 0) && (z_2005 > 0) && (z_2068 > 0) && (z_2185 > 0) && (z_2275 > 0) && (z_322 > 0) && (z_592 > 0) && (z_736 > 0) && (z_958 > 0));
																																																	:pid_24:cl = (z_2275 + z_2734);
																																																	:pid_30:cl = (z_1936 + z_2005 + z_2068 + z_2185 + z_2275 + z_2734);
																																																	:pid_35:cl = (z_1234 + z_1279 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_2068 + z_2185 + z_2275 + z_2734);
																																																}
																																																BUFFER{
																																																	:pid_6:bufferNode:<FIFO>#0{
																																																		:pid_23:ControlMsg([ 0 , 0 ] , (z_1 + z_13 + z_322 + z_592));
																																																		:pid_23:ControlMsg([ 0 , 1 ] , (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_322 + z_592 + z_736 + z_958));
																																																		:pid_23:ControlMsg([ 1 , 1 ] , (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_322 + z_592 + z_736 + z_958));
																																																		:pid_23:DataMsg([ 2 , 2 , 1 ] , (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_2068 + z_322 + z_592 + z_736 + z_958));
																																																		:pid_23:DataMsg([ 1 , 1 , 0 ] , (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_2068 + z_2185 + z_2275 + z_2734 + z_322 + z_592 + z_736 + z_958));
																																																	}
																																																	:pid_40:bufferNode:<FIFO>#0{
																																																		:pid_23:DataMsg([ 2 , 2 , 1 ] , (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_2068 + z_322 + z_592 + z_736 + z_958));
																																																		:pid_23:DataMsg([ 1 , 1 , 0 ] , (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_2068 + z_2185 + z_2275 + z_2734 + z_322 + z_592 + z_736 + z_958));
																																																	}
																																																}
																																																EC:<Id:7732;Ev:957;H:48;W:6782>{ SC: ( pid_4:o0 , ( pid_12:cp3 , pid_16:dp2 , pid_22:dp3 ) , ( pid_27:cp1 , pid_33:dp2 , pid_38:dp2 ) , ( pid_44:cp1 , pid_49:dp1 , pid_54:dp1 ) )
																					
																						
								EXE: { |;| (:pid_40 , run) (:pid_47 , run) (:pid_48 
	, run) (:pid_48 , dp_init) }
																					
																						
								TRACE: { |;| (:pid_40 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_2846 }) (:pid_48 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_4156 }) }
																					
																						
								NC: ((t_4156 < 4) && (0 <= (t_4156 + -2)))
																																																	PC: ((t_1168 < 8) && (t_1291 < 4) && (t_142 < 4) && (t_1442 < 4) && (t_1511 < 8) && 
	(t_1745 < 8) && (t_1799 < 4) && (t_233 < 4) && (t_260 < 8) && (t_348 < 8) && 
	(t_4 < 4) && (t_52 < 4) && (t_576 < 8) && (t_662 < 8) && (t_75 < 4) && (t_874 < 
	4) && (t_994 < 8) && (t_1418 < 4) && (t_1629 < 4) && (t_2347 < 8) && (t_2790 < 4)
	 && (t_305 < 4) && (t_3144 < 8) && (t_3670 < 4) && (t_4156 < 4) && (0 <= (t_1168 
	+ -4)) && (0 <= (t_1291 + -2)) && (0 <= (t_142 + -2)) && (0 <= (t_1442 + -2)) && 
	(0 <= (t_1511 + -4)) && (0 <= (t_1745 + -4)) && (0 <= (t_1799 + -2)) && (0 <= 
	(t_233 + -2)) && (0 <= (t_260 + -4)) && (0 <= (t_348 + -4)) && (0 <= (t_4 + -2)) 
	&& (0 <= (t_52 + -2)) && (0 <= (t_576 + -4)) && (0 <= (t_662 + -4)) && (0 <= 
	(t_75 + -2)) && (0 <= (t_874 + -2)) && (0 <= (t_994 + -4)) && (0 <= (t_1418 + -2)
	) && (0 <= (t_1629 + -2)) && (0 <= (t_2347 + -4)) && (0 <= (t_2790 + -2)) && (0 
	<= (t_305 + -2)) && (0 <= (t_3144 + -4)) && (0 <= (t_3670 + -2)) && (0 <= 
	(t_4156 + -2)))
																																																	DATA{
																																																		:pid_40:$time = (z_185 + z_2033 + z_2324 + z_236 + z_2444 + z_2594 + z_2672 + z_2846 + z_425 + z_650 + z_875);
																																																		:pid_40:z = z_2846;
																																																		:pid_40:localTime = (z_185 + z_2033 + z_2324 + z_236 + z_2444 + z_2594 + z_2672 + z_2846 + z_425 + z_650 + z_875);
																																																		:pid_40:localPC = ((t_142 < 4) && (t_1442 < 4) && (t_1745 < 8) && (t_1799 < 4) && (t_576 < 8) && (t_3670 < 4) && (t_4156 < 4) && (0 <= (t_142 + -2)) && (0 <= (t_1442 + -2)) && (0 <= (t_1745 + -4)) && (0 <= (t_1799 + -2)) && (0 <= (t_576 + -4)) && (0 <= (t_3670 + -2)) && (0 <= (t_4156 + -2)));
																																																		:pid_40:localPtC = (((z_2324 + z_2444 + z_2594) == 4) && ((z_236 + z_425) == t_142) && ((z_236 + z_425 + z_650 + z_875) == 4) && (z_2324 == t_1442) && ((z_236 + z_425 + z_650) < 4) && (z_2033 < t_576) && (z_236 < t_142) && (z_2672 < t_1745) && ((z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_322 + z_592 + z_736 + z_958) <= (z_185 + z_2033 + z_2324 + z_236 + z_2444 + z_2594 + z_2672 + z_425 + z_650 + z_875)) && ((z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_322 + z_592 + z_736 + z_958) <= (z_185 + z_2033 + z_236 + z_425 + z_650 + z_875)) && ((z_1 + z_13) <= (z_185 + z_236)) && ((z_1 + z_13 + z_322 + z_592) <= (z_185 + z_236 + z_425 + z_650)) && ((z_2324 + z_2444 + z_2594) > t_1442) && ((z_236 + z_425 + z_650 + z_875) > t_142) && ($delta#initial > 0) && (z_185 > 0) && (z_2033 > 0) && (z_2324 > 0) && (z_236 > 0) && (z_2444 > 0) && (z_2594 > 0) && (z_2672 > 0) && (z_425 > 0) && (z_650 > 0) && (z_875 > 0));
																																																		:pid_41:cl = z_2846;
																																																		:pid_47:k = 2;
																																																		:pid_47:c = 0;
																																																		:pid_47:e = 0;
																																																		:pid_47:tau = 4;
																																																		:pid_47:tau_l = 4;
																																																		:pid_47:tau_h = 8;
																																																		:pid_47:t = t_4156;
																																																		:pid_47:cl = 0;
																																																		:pid_52:cl = (z_2594 + z_2672 + z_2846);
																																																	}
																																																	EC:<Id:7786;Ev:974;H:49;W:6829>{ SC: ( pid_4:o0 , ( pid_12:cp3 , pid_16:dp2 , pid_22:dp3 ) , ( pid_27:cp1 , pid_33:dp2 , pid_38:dp2 ) , ( pid_44:cp1 , pid_49:dp1 , pid_54:dp1 ) )
																					
																						
									EXE: { |;| (:pid_40 , run) (:pid_52 , run) 
	(:pid_54 , run) (:pid_54 , dp1_receiveDM_consistent) }
																					
																						
									TRACE: { |;| (:pid_40 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_2867 }) (:pid_54 , ${ input 
	inst::Trickle.Node.DataMsg [ 2 , 2 , 1 ] ${ + param::Trickle.Node.z_1 
	param::Trickle.Node.z_1009 param::Trickle.Node.z_1234 param::Trickle.Node.z_1279 
	param::Trickle.Node.z_13 param::Trickle.Node.z_1324 param::Trickle.Node.z_1420 
	param::Trickle.Node.z_1798 param::Trickle.Node.z_1855 param::Trickle.Node.z_1936 
	param::Trickle.Node.z_2005 param::Trickle.Node.z_2068 param::Trickle.Node.z_322 
	param::Trickle.Node.z_592 param::Trickle.Node.z_736 param::Trickle.Node.z_958 } }
	 @ (z_185 + z_2033 + z_2324 + z_236 + z_2444 + z_2594 + z_2672 + z_2846 + z_2867 
	+ z_425 + z_650 + z_875)) }
																																																		DATA{
																																																			:pid_40:my_buff[1].seq = 2;
																																																			:pid_40:my_buff[1].fragment = FRAGMENT_1;
																																																			:pid_40:my_buff[1].offset = 1;
																																																			:pid_40:firmware[1] = FRAGMENT_1;
																																																			:pid_40:myseq_buff[1] = 1;
																																																			:pid_40:$time = (z_185 + z_2033 + z_2324 + z_236 + z_2444 + z_2594 + z_2672 + z_2846 + z_2867 + z_425 + z_650 + z_875);
																																																			:pid_40:z = z_2867;
																																																			:pid_40:localTime = (z_185 + z_2033 + z_2324 + z_236 + z_2444 + z_2594 + z_2672 + z_2846 + z_2867 + z_425 + z_650 + z_875);
																																																			:pid_40:localPC = ((t_142 < 4) && (t_1442 < 4) && (t_1745 < 8) && (t_1799 < 4) && (t_576 < 8) && (t_3670 < 4) && (t_4156 < 4) && (0 <= (t_142 + -2)) && (0 <= (t_1442 + -2)) && (0 <= (t_1745 + -4)) && (0 <= (t_1799 + -2)) && (0 <= (t_576 + -4)) && (0 <= (t_3670 + -2)) && (0 <= (t_4156 + -2)));
																																																			:pid_40:localPtC = (((z_2324 + z_2444 + z_2594) == 4) && ((z_236 + z_425) == t_142) && ((z_236 + z_425 + z_650 + z_875) == 4) && (z_2324 == t_1442) && ((z_236 + z_425 + z_650) < 4) && ((z_2594 + z_2672 + z_2846 + z_2867) < t_3670) && (z_2033 < t_576) && (z_236 < t_142) && (z_2672 < t_1745) && ((z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_2068 + z_322 + z_592 + z_736 + z_958) <= (z_185 + z_2033 + z_2324 + z_236 + z_2444 + z_2594 + z_2672 + z_2846 + z_2867 + z_425 + z_650 + z_875)) && ((z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_322 + z_592 + z_736 + z_958) <= (z_185 + z_2033 + z_2324 + z_236 + z_2444 + z_2594 + z_2672 + z_425 + z_650 + z_875)) && ((z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_322 + z_592 + z_736 + z_958) <= (z_185 + z_2033 + z_236 + z_425 + z_650 + z_875)) && ((z_1 + z_13) <= (z_185 + z_236)) && ((z_1 + z_13 + z_322 + z_592) <= (z_185 + z_236 + z_425 + z_650)) && ((z_2324 + z_2444 + z_2594) > t_1442) && ((z_236 + z_425 + z_650 + z_875) > t_142) && ($delta#initial > 0) && (z_185 > 0) && (z_2033 > 0) && (z_2324 > 0) && (z_236 > 0) && (z_2444 > 0) && (z_2594 > 0) && (z_2672 > 0) && (z_2846 > 0) && (z_425 > 0) && (z_650 > 0) && (z_875 > 0));
																																																			:pid_40:timeEmit = (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_2068 + z_322 + z_592 + z_736 + z_958);
																																																			:pid_41:cl = (z_2846 + z_2867);
																																																			:pid_47:cl = z_2867;
																																																			:pid_52:c = 1;
																																																			:pid_52:consistent = true;
																																																			:pid_52:cl = (z_2594 + z_2672 + z_2846 + z_2867);
																																																			:pid_52:d.seq = 2;
																																																			:pid_52:d.fragment = FRAGMENT_1;
																																																			:pid_52:d.offset = 1;
																																																		}
																																																		BUFFER{
																																																			:pid_40:bufferNode:<FIFO>#0{
																																																				:pid_23:DataMsg([ 1 , 1 , 0 ] , (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_2068 + z_2185 + z_2275 + z_2734 + z_322 + z_592 + z_736 + z_958));
																																																			}
																																																		}
																																																		EC:<Id:7919;Ev:0;H:50;W:6945>{ SC: ( pid_4:o0 , ( pid_12:cp3 , pid_16:dp2 , pid_22:dp3 ) , ( pid_27:cp1 , pid_33:dp2 , pid_38:dp2 ) , ( pid_44:cp1 , pid_49:dp1 , pid_54:dp1 ) )
																					
																						
										EXE: { |;| (:pid_40 , run) (:pid_47 , run) 
	(:pid_49 , run) (:pid_49 , dp1_receiveDM_consistent) }
																					
																						
										TRACE: { |;| (:pid_40 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_2918 }) (:pid_49 , ${ input 
	inst::Trickle.Node.DataMsg [ 1 , 1 , 0 ] ${ + param::Trickle.Node.z_1 
	param::Trickle.Node.z_1009 param::Trickle.Node.z_1234 param::Trickle.Node.z_1279 
	param::Trickle.Node.z_13 param::Trickle.Node.z_1324 param::Trickle.Node.z_1420 
	param::Trickle.Node.z_1798 param::Trickle.Node.z_1855 param::Trickle.Node.z_1936 
	param::Trickle.Node.z_2005 param::Trickle.Node.z_2068 param::Trickle.Node.z_2185 
	param::Trickle.Node.z_2275 param::Trickle.Node.z_2734 param::Trickle.Node.z_322 
	param::Trickle.Node.z_592 param::Trickle.Node.z_736 param::Trickle.Node.z_958 } }
	 @ (z_185 + z_2033 + z_2324 + z_236 + z_2444 + z_2594 + z_2672 + z_2846 + z_2867 
	+ z_2918 + z_425 + z_650 + z_875)) }
																																																			/*FLAGS{ COVERAGE-ELEMENT & OBJECTIVE-ACHIEVED & OBJECTIVE-FAILED }*/
																																																			INFO{
																																																				<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#9" as trace="tpid#9">
																																																			}
																																																			DATA{
																																																				:pid_40:my_buff[0].seq = 1;
																																																				:pid_40:my_buff[0].fragment = FRAGMENT_0;
																																																				:pid_40:my_buff[0].offset = 0;
																																																				:pid_40:firmware[0] = FRAGMENT_0;
																																																				:pid_40:myseq_buff[0] = 1;
																																																				:pid_40:$time = (z_185 + z_2033 + z_2324 + z_236 + z_2444 + z_2594 + z_2672 + z_2846 + z_2867 + z_2918 + z_425 + z_650 + z_875);
																																																				:pid_40:z = z_2918;
																																																				:pid_40:coverageProp = true;
																																																				:pid_40:localTime = (z_185 + z_2033 + z_2324 + z_236 + z_2444 + z_2594 + z_2672 + z_2846 + z_2867 + z_2918 + z_425 + z_650 + z_875);
																																																				:pid_40:localPC = ((t_142 < 4) && (t_1442 < 4) && (t_1745 < 8) && (t_1799 < 4) && (t_576 < 8) && (t_3670 < 4) && (t_4156 < 4) && (0 <= (t_142 + -2)) && (0 <= (t_1442 + -2)) && (0 <= (t_1745 + -4)) && (0 <= (t_1799 + -2)) && (0 <= (t_576 + -4)) && (0 <= (t_3670 + -2)) && (0 <= (t_4156 + -2)));
																																																				:pid_40:localPtC = (((z_2324 + z_2444 + z_2594) == 4) && ((z_236 + z_425) == t_142) && ((z_236 + z_425 + z_650 + z_875) == 4) && (z_2324 == t_1442) && ((z_236 + z_425 + z_650) < 4) && ((z_2594 + z_2672 + z_2846 + z_2867) < t_3670) && ((z_2867 + z_2918) < t_4156) && (z_2033 < t_576) && (z_236 < t_142) && (z_2672 < t_1745) && ((z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_2068 + z_2185 + z_2275 + z_2734 + z_322 + z_592 + z_736 + z_958) <= (z_185 + z_2033 + z_2324 + z_236 + z_2444 + z_2594 + z_2672 + z_2846 + z_2867 + z_2918 + z_425 + z_650 + z_875)) && ((z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_2068 + z_322 + z_592 + z_736 + z_958) <= (z_185 + z_2033 + z_2324 + z_236 + z_2444 + z_2594 + z_2672 + z_2846 + z_2867 + z_425 + z_650 + z_875)) && ((z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_322 + z_592 + z_736 + z_958) <= (z_185 + z_2033 + z_2324 + z_236 + z_2444 + z_2594 + z_2672 + z_425 + z_650 + z_875)) && ((z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_322 + z_592 + z_736 + z_958) <= (z_185 + z_2033 + z_236 + z_425 + z_650 + z_875)) && ((z_1 + z_13) <= (z_185 + z_236)) && ((z_1 + z_13 + z_322 + z_592) <= (z_185 + z_236 + z_425 + z_650)) && ((z_2324 + z_2444 + z_2594) > t_1442) && ((z_236 + z_425 + z_650 + z_875) > t_142) && ($delta#initial > 0) && (z_185 > 0) && (z_2033 > 0) && (z_2324 > 0) && (z_236 > 0) && (z_2444 > 0) && (z_2594 > 0) && (z_2672 > 0) && (z_2846 > 0) && (z_2867 > 0) && (z_425 > 0) && (z_650 > 0) && (z_875 > 0));
																																																				:pid_40:timeEmit = (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_2068 + z_2185 + z_2275 + z_2734 + z_322 + z_592 + z_736 + z_958);
																																																				:pid_41:cl = (z_2846 + z_2867 + z_2918);
																																																				:pid_47:c = 1;
																																																				:pid_47:consistent = true;
																																																				:pid_47:cl = (z_2867 + z_2918);
																																																				:pid_47:d.seq = 1;
																																																				:pid_47:d.fragment = FRAGMENT_0;
																																																				:pid_47:d.offset = 0;
																																																				:pid_52:cl = (z_2594 + z_2672 + z_2846 + z_2867 + z_2918);
																																																			}
																																																			BUFFER{
																																																				:pid_40:bufferNode:<FIFO>#0{ }
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																															EC:<Id:7426;Ev:954;H:47;W:6513>{ SC: ( pid_4:o0 , ( pid_12:cp3 , pid_16:dp2 , pid_22:dp3 ) , ( pid_27:cp1 , pid_32:dp1 , pid_38:dp2 ) , ( pid_44:cp1 , pid_49:dp1 , pid_54:dp1 ) )
																					
																						
							EXE: { |;| (:pid_40 , run) (:pid_47 , run) (:pid_48 , 
	run) (:pid_48 , dp_init) }
																					
																						
							TRACE: { |;| (:pid_40 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_2735 }) (:pid_48 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_4022 }) }
																					
																						
							NC: ((t_4022 < 4) && (0 <= (t_4022 + -2)))
																																																PC: ((t_1168 < 8) && (t_1291 < 4) && (t_142 < 4) && (t_1442 < 4) && (t_1511 < 8) && 
	(t_1745 < 8) && (t_1799 < 4) && (t_233 < 4) && (t_260 < 8) && (t_348 < 8) && 
	(t_4 < 4) && (t_52 < 4) && (t_576 < 8) && (t_662 < 8) && (t_75 < 4) && (t_874 < 
	4) && (t_994 < 8) && (t_1418 < 4) && (t_1629 < 4) && (t_2347 < 8) && (t_2790 < 4)
	 && (t_305 < 4) && (t_3144 < 8) && (t_3670 < 4) && (t_4022 < 4) && (0 <= (t_1168 
	+ -4)) && (0 <= (t_1291 + -2)) && (0 <= (t_142 + -2)) && (0 <= (t_1442 + -2)) && 
	(0 <= (t_1511 + -4)) && (0 <= (t_1745 + -4)) && (0 <= (t_1799 + -2)) && (0 <= 
	(t_233 + -2)) && (0 <= (t_260 + -4)) && (0 <= (t_348 + -4)) && (0 <= (t_4 + -2)) 
	&& (0 <= (t_52 + -2)) && (0 <= (t_576 + -4)) && (0 <= (t_662 + -4)) && (0 <= 
	(t_75 + -2)) && (0 <= (t_874 + -2)) && (0 <= (t_994 + -4)) && (0 <= (t_1418 + -2)
	) && (0 <= (t_1629 + -2)) && (0 <= (t_2347 + -4)) && (0 <= (t_2790 + -2)) && (0 
	<= (t_305 + -2)) && (0 <= (t_3144 + -4)) && (0 <= (t_3670 + -2)) && (0 <= 
	(t_4022 + -2)))
																																																DATA{
																																																	:pid_40:$time = (z_185 + z_2033 + z_2324 + z_236 + z_2444 + z_2594 + z_2672 + z_2735 + z_425 + z_650 + z_875);
																																																	:pid_40:z = z_2735;
																																																	:pid_40:localTime = (z_185 + z_2033 + z_2324 + z_236 + z_2444 + z_2594 + z_2672 + z_2735 + z_425 + z_650 + z_875);
																																																	:pid_40:localPC = ((t_142 < 4) && (t_1442 < 4) && (t_1745 < 8) && (t_1799 < 4) && (t_576 < 8) && (t_3670 < 4) && (t_4022 < 4) && (0 <= (t_142 + -2)) && (0 <= (t_1442 + -2)) && (0 <= (t_1745 + -4)) && (0 <= (t_1799 + -2)) && (0 <= (t_576 + -4)) && (0 <= (t_3670 + -2)) && (0 <= (t_4022 + -2)));
																																																	:pid_40:localPtC = (((z_2324 + z_2444 + z_2594) == 4) && ((z_236 + z_425) == t_142) && ((z_236 + z_425 + z_650 + z_875) == 4) && (z_2324 == t_1442) && ((z_236 + z_425 + z_650) < 4) && (z_2033 < t_576) && (z_236 < t_142) && (z_2672 < t_1745) && ((z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_322 + z_592 + z_736 + z_958) <= (z_185 + z_2033 + z_2324 + z_236 + z_2444 + z_2594 + z_2672 + z_425 + z_650 + z_875)) && ((z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_322 + z_592 + z_736 + z_958) <= (z_185 + z_2033 + z_236 + z_425 + z_650 + z_875)) && ((z_1 + z_13) <= (z_185 + z_236)) && ((z_1 + z_13 + z_322 + z_592) <= (z_185 + z_236 + z_425 + z_650)) && ((z_2324 + z_2444 + z_2594) > t_1442) && ((z_236 + z_425 + z_650 + z_875) > t_142) && ($delta#initial > 0) && (z_185 > 0) && (z_2033 > 0) && (z_2324 > 0) && (z_236 > 0) && (z_2444 > 0) && (z_2594 > 0) && (z_2672 > 0) && (z_425 > 0) && (z_650 > 0) && (z_875 > 0));
																																																	:pid_41:cl = z_2735;
																																																	:pid_47:k = 2;
																																																	:pid_47:c = 0;
																																																	:pid_47:e = 0;
																																																	:pid_47:tau = 4;
																																																	:pid_47:tau_l = 4;
																																																	:pid_47:tau_h = 8;
																																																	:pid_47:t = t_4022;
																																																	:pid_47:cl = 0;
																																																	:pid_52:cl = (z_2594 + z_2672 + z_2735);
																																																}
																																																EC:<Id:7759;Ev:956;H:48;W:6805>{ SC: ( pid_4:o0 , ( pid_12:cp3 , pid_16:dp2 , pid_22:dp3 ) , ( pid_27:cp1 , pid_33:dp2 , pid_38:dp2 ) , ( pid_44:cp1 , pid_49:dp1 , pid_54:dp1 ) )
																					
																						
								EXE: { |;| (:pid_23 , run) (:pid_30 , run) (:pid_32 
	, run) (:pid_32 , dp_sendDM) }
																					
																						
								TRACE: { |;| (:pid_23 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_2857 }) (:pid_32 , ${ output 
	inst::Trickle.Node.DataMsg [ 1 , 1 , 0 ] ${ + param::Trickle.Node.z_1 
	param::Trickle.Node.z_1009 param::Trickle.Node.z_1234 param::Trickle.Node.z_1279 
	param::Trickle.Node.z_13 param::Trickle.Node.z_1324 param::Trickle.Node.z_1420 
	param::Trickle.Node.z_1798 param::Trickle.Node.z_1855 param::Trickle.Node.z_1936 
	param::Trickle.Node.z_2005 param::Trickle.Node.z_2068 param::Trickle.Node.z_2185 
	param::Trickle.Node.z_2275 param::Trickle.Node.z_2857 param::Trickle.Node.z_322 
	param::Trickle.Node.z_592 param::Trickle.Node.z_736 param::Trickle.Node.z_958 } }
	 @ (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + 
	z_1936 + z_2005 + z_2068 + z_2185 + z_2275 + z_2857 + z_322 + z_592 + z_736 + 
	z_958)) }
																																																	DATA{
																																																		:pid_23:$time = (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_2068 + z_2185 + z_2275 + z_2857 + z_322 + z_592 + z_736 + z_958);
																																																		:pid_23:z = z_2857;
																																																		:pid_23:localTime = (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_2068 + z_2185 + z_2275 + z_2857 + z_322 + z_592 + z_736 + z_958);
																																																		:pid_23:localPC = ((t_1291 < 4) && (t_1511 < 8) && (t_233 < 4) && (t_4 < 4) && (t_662 < 8) && (t_874 < 4) && (t_994 < 8) && (t_1629 < 4) && (t_2790 < 4) && (0 <= (t_1291 + -2)) && (0 <= (t_1511 + -4)) && (0 <= (t_233 + -2)) && (0 <= (t_4 + -2)) && (0 <= (t_662 + -4)) && (0 <= (t_874 + -2)) && (0 <= (t_994 + -4)) && (0 <= (t_1629 + -2)) && (0 <= (t_2790 + -2)));
																																																		:pid_23:localPtC = (((z_1234 + z_1279 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_2068) == t_1629) && ((z_1279 + z_1324) == t_874) && ((z_1279 + z_1324 + z_1420) == 4) && ((z_1855 + z_1936 + z_2005) == t_1291) && ((z_1855 + z_1936 + z_2005 + z_2068 + z_2185) == 4) && ((z_1936 + z_2005 + z_2068 + z_2185 + z_2275 + z_2857) == t_2790) && ((z_592 + z_736 + z_958) == 4) && (z_13 == t_4) && (z_592 == t_233) && ((z_1009 + z_1234) < t_662) && ((z_1234 + z_1279) < t_1629) && ((z_1234 + z_1279 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_2068 + z_2185 + z_2275) < 4) && ((z_13 + z_322) < 4) && ((z_592 + z_736) < 4) && (z_1798 < t_994) && (z_1936 < t_2790) && ((z_1074 + z_1146 + z_1539 + z_1560 + z_165 + z_1671 + z_1707 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99) <= (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_2068 + z_2185 + z_2275 + z_322 + z_592 + z_736 + z_958)) && ((z_1074 + z_1146 + z_1539 + z_1560 + z_165 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99) <= (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_322 + z_592 + z_736 + z_958)) && ((z_1074 + z_1146 + z_165 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99) <= (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_322 + z_592 + z_736 + z_958)) && ((z_1074 + z_165 + z_276 + z_369 + z_468 + z_546 + z_66 + z_858 + z_99) <= (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_322 + z_592 + z_736 + z_958)) && ((z_165 + z_276 + z_369 + z_468 + z_66 + z_99) <= (z_1 + z_1009 + z_1234 + z_13 + z_322 + z_592 + z_736 + z_958)) && ((z_165 + z_276 + z_66 + z_99) <= (z_1 + z_13 + z_322)) && ((z_185 + z_236 + z_425) <= (z_1 + z_13 + z_322 + z_592 + z_736)) && ((z_1279 + z_1324 + z_1420) > t_874) && ((z_1855 + z_1936 + z_2005 + z_2068 + z_2185) > t_1291) && ((z_592 + z_736 + z_958) > t_233) && ($delta#initial > 0) && (z_1 > 0) && (z_1009 > 0) && (z_1234 > 0) && (z_1279 > 0) && (z_13 > 0) && (z_1324 > 0) && (z_1420 > 0) && (z_1798 > 0) && (z_1855 > 0) && (z_1936 > 0) && (z_2005 > 0) && (z_2068 > 0) && (z_2185 > 0) && (z_2275 > 0) && (z_322 > 0) && (z_592 > 0) && (z_736 > 0) && (z_958 > 0));
																																																		:pid_24:cl = (z_2275 + z_2857);
																																																		:pid_30:cl = (z_1936 + z_2005 + z_2068 + z_2185 + z_2275 + z_2857);
																																																		:pid_35:cl = (z_1234 + z_1279 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_2068 + z_2185 + z_2275 + z_2857);
																																																	}
																																																	BUFFER{
																																																		:pid_6:bufferNode:<FIFO>#0{
																																																			:pid_23:ControlMsg([ 0 , 0 ] , (z_1 + z_13 + z_322 + z_592));
																																																			:pid_23:ControlMsg([ 0 , 1 ] , (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_322 + z_592 + z_736 + z_958));
																																																			:pid_23:ControlMsg([ 1 , 1 ] , (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_322 + z_592 + z_736 + z_958));
																																																			:pid_23:DataMsg([ 2 , 2 , 1 ] , (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_2068 + z_322 + z_592 + z_736 + z_958));
																																																			:pid_23:DataMsg([ 1 , 1 , 0 ] , (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_2068 + z_2185 + z_2275 + z_2857 + z_322 + z_592 + z_736 + z_958));
																																																		}
																																																		:pid_40:bufferNode:<FIFO>#0{
																																																			:pid_23:DataMsg([ 2 , 2 , 1 ] , (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_2068 + z_322 + z_592 + z_736 + z_958));
																																																			:pid_23:DataMsg([ 1 , 1 , 0 ] , (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_2068 + z_2185 + z_2275 + z_2857 + z_322 + z_592 + z_736 + z_958));
																																																		}
																																																	}
																																																	EC:<Id:7778;Ev:966;H:49;W:6822>{ SC: ( pid_4:o0 , ( pid_12:cp3 , pid_16:dp2 , pid_22:dp3 ) , ( pid_27:cp1 , pid_33:dp2 , pid_38:dp2 ) , ( pid_44:cp1 , pid_49:dp1 , pid_54:dp1 ) )
																					
																						
									EXE: { |;| (:pid_40 , run) (:pid_52 , run) 
	(:pid_54 , run) (:pid_54 , dp1_receiveDM_consistent) }
																					
																						
									TRACE: { |;| (:pid_40 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_2864 }) (:pid_54 , ${ input 
	inst::Trickle.Node.DataMsg [ 2 , 2 , 1 ] ${ + param::Trickle.Node.z_1 
	param::Trickle.Node.z_1009 param::Trickle.Node.z_1234 param::Trickle.Node.z_1279 
	param::Trickle.Node.z_13 param::Trickle.Node.z_1324 param::Trickle.Node.z_1420 
	param::Trickle.Node.z_1798 param::Trickle.Node.z_1855 param::Trickle.Node.z_1936 
	param::Trickle.Node.z_2005 param::Trickle.Node.z_2068 param::Trickle.Node.z_322 
	param::Trickle.Node.z_592 param::Trickle.Node.z_736 param::Trickle.Node.z_958 } }
	 @ (z_185 + z_2033 + z_2324 + z_236 + z_2444 + z_2594 + z_2672 + z_2735 + z_2864 
	+ z_425 + z_650 + z_875)) }
																																																		DATA{
																																																			:pid_40:my_buff[1].seq = 2;
																																																			:pid_40:my_buff[1].fragment = FRAGMENT_1;
																																																			:pid_40:my_buff[1].offset = 1;
																																																			:pid_40:firmware[1] = FRAGMENT_1;
																																																			:pid_40:myseq_buff[1] = 1;
																																																			:pid_40:$time = (z_185 + z_2033 + z_2324 + z_236 + z_2444 + z_2594 + z_2672 + z_2735 + z_2864 + z_425 + z_650 + z_875);
																																																			:pid_40:z = z_2864;
																																																			:pid_40:localTime = (z_185 + z_2033 + z_2324 + z_236 + z_2444 + z_2594 + z_2672 + z_2735 + z_2864 + z_425 + z_650 + z_875);
																																																			:pid_40:localPC = ((t_142 < 4) && (t_1442 < 4) && (t_1745 < 8) && (t_1799 < 4) && (t_576 < 8) && (t_3670 < 4) && (t_4022 < 4) && (0 <= (t_142 + -2)) && (0 <= (t_1442 + -2)) && (0 <= (t_1745 + -4)) && (0 <= (t_1799 + -2)) && (0 <= (t_576 + -4)) && (0 <= (t_3670 + -2)) && (0 <= (t_4022 + -2)));
																																																			:pid_40:localPtC = (((z_2324 + z_2444 + z_2594) == 4) && ((z_236 + z_425) == t_142) && ((z_236 + z_425 + z_650 + z_875) == 4) && (z_2324 == t_1442) && ((z_236 + z_425 + z_650) < 4) && ((z_2594 + z_2672 + z_2735 + z_2864) < t_3670) && (z_2033 < t_576) && (z_236 < t_142) && (z_2672 < t_1745) && ((z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_2068 + z_322 + z_592 + z_736 + z_958) <= (z_185 + z_2033 + z_2324 + z_236 + z_2444 + z_2594 + z_2672 + z_2735 + z_2864 + z_425 + z_650 + z_875)) && ((z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_322 + z_592 + z_736 + z_958) <= (z_185 + z_2033 + z_2324 + z_236 + z_2444 + z_2594 + z_2672 + z_425 + z_650 + z_875)) && ((z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_322 + z_592 + z_736 + z_958) <= (z_185 + z_2033 + z_236 + z_425 + z_650 + z_875)) && ((z_1 + z_13) <= (z_185 + z_236)) && ((z_1 + z_13 + z_322 + z_592) <= (z_185 + z_236 + z_425 + z_650)) && ((z_2324 + z_2444 + z_2594) > t_1442) && ((z_236 + z_425 + z_650 + z_875) > t_142) && ($delta#initial > 0) && (z_185 > 0) && (z_2033 > 0) && (z_2324 > 0) && (z_236 > 0) && (z_2444 > 0) && (z_2594 > 0) && (z_2672 > 0) && (z_2735 > 0) && (z_425 > 0) && (z_650 > 0) && (z_875 > 0));
																																																			:pid_40:timeEmit = (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_2068 + z_322 + z_592 + z_736 + z_958);
																																																			:pid_41:cl = (z_2735 + z_2864);
																																																			:pid_47:cl = z_2864;
																																																			:pid_52:c = 1;
																																																			:pid_52:consistent = true;
																																																			:pid_52:cl = (z_2594 + z_2672 + z_2735 + z_2864);
																																																			:pid_52:d.seq = 2;
																																																			:pid_52:d.fragment = FRAGMENT_1;
																																																			:pid_52:d.offset = 1;
																																																		}
																																																		BUFFER{
																																																			:pid_40:bufferNode:<FIFO>#0{
																																																				:pid_23:DataMsg([ 1 , 1 , 0 ] , (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_2068 + z_2185 + z_2275 + z_2857 + z_322 + z_592 + z_736 + z_958));
																																																			}
																																																		}
																																																		EC:<Id:7856;Ev:0;H:50;W:6890>{ SC: ( pid_4:o0 , ( pid_12:cp3 , pid_16:dp2 , pid_22:dp3 ) , ( pid_27:cp1 , pid_33:dp2 , pid_38:dp2 ) , ( pid_44:cp1 , pid_49:dp1 , pid_54:dp1 ) )
																					
																						
										EXE: { |;| (:pid_40 , run) (:pid_47 , run) 
	(:pid_49 , run) (:pid_49 , dp1_receiveDM_consistent) }
																					
																						
										TRACE: { |;| (:pid_40 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_2894 }) (:pid_49 , ${ input 
	inst::Trickle.Node.DataMsg [ 1 , 1 , 0 ] ${ + param::Trickle.Node.z_1 
	param::Trickle.Node.z_1009 param::Trickle.Node.z_1234 param::Trickle.Node.z_1279 
	param::Trickle.Node.z_13 param::Trickle.Node.z_1324 param::Trickle.Node.z_1420 
	param::Trickle.Node.z_1798 param::Trickle.Node.z_1855 param::Trickle.Node.z_1936 
	param::Trickle.Node.z_2005 param::Trickle.Node.z_2068 param::Trickle.Node.z_2185 
	param::Trickle.Node.z_2275 param::Trickle.Node.z_2857 param::Trickle.Node.z_322 
	param::Trickle.Node.z_592 param::Trickle.Node.z_736 param::Trickle.Node.z_958 } }
	 @ (z_185 + z_2033 + z_2324 + z_236 + z_2444 + z_2594 + z_2672 + z_2735 + z_2864 
	+ z_2894 + z_425 + z_650 + z_875)) }
																																																			/*FLAGS{ COVERAGE-ELEMENT & OBJECTIVE-ACHIEVED & OBJECTIVE-FAILED }*/
																																																			INFO{
																																																				<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#9" as trace="tpid#9">
																																																			}
																																																			DATA{
																																																				:pid_40:my_buff[0].seq = 1;
																																																				:pid_40:my_buff[0].fragment = FRAGMENT_0;
																																																				:pid_40:my_buff[0].offset = 0;
																																																				:pid_40:firmware[0] = FRAGMENT_0;
																																																				:pid_40:myseq_buff[0] = 1;
																																																				:pid_40:$time = (z_185 + z_2033 + z_2324 + z_236 + z_2444 + z_2594 + z_2672 + z_2735 + z_2864 + z_2894 + z_425 + z_650 + z_875);
																																																				:pid_40:z = z_2894;
																																																				:pid_40:coverageProp = true;
																																																				:pid_40:localTime = (z_185 + z_2033 + z_2324 + z_236 + z_2444 + z_2594 + z_2672 + z_2735 + z_2864 + z_2894 + z_425 + z_650 + z_875);
																																																				:pid_40:localPC = ((t_142 < 4) && (t_1442 < 4) && (t_1745 < 8) && (t_1799 < 4) && (t_576 < 8) && (t_3670 < 4) && (t_4022 < 4) && (0 <= (t_142 + -2)) && (0 <= (t_1442 + -2)) && (0 <= (t_1745 + -4)) && (0 <= (t_1799 + -2)) && (0 <= (t_576 + -4)) && (0 <= (t_3670 + -2)) && (0 <= (t_4022 + -2)));
																																																				:pid_40:localPtC = (((z_2324 + z_2444 + z_2594) == 4) && ((z_236 + z_425) == t_142) && ((z_236 + z_425 + z_650 + z_875) == 4) && (z_2324 == t_1442) && ((z_236 + z_425 + z_650) < 4) && ((z_2594 + z_2672 + z_2735 + z_2864) < t_3670) && ((z_2864 + z_2894) < t_4022) && (z_2033 < t_576) && (z_236 < t_142) && (z_2672 < t_1745) && ((z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_2068 + z_2185 + z_2275 + z_2857 + z_322 + z_592 + z_736 + z_958) <= (z_185 + z_2033 + z_2324 + z_236 + z_2444 + z_2594 + z_2672 + z_2735 + z_2864 + z_2894 + z_425 + z_650 + z_875)) && ((z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_2068 + z_322 + z_592 + z_736 + z_958) <= (z_185 + z_2033 + z_2324 + z_236 + z_2444 + z_2594 + z_2672 + z_2735 + z_2864 + z_425 + z_650 + z_875)) && ((z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_322 + z_592 + z_736 + z_958) <= (z_185 + z_2033 + z_2324 + z_236 + z_2444 + z_2594 + z_2672 + z_425 + z_650 + z_875)) && ((z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_322 + z_592 + z_736 + z_958) <= (z_185 + z_2033 + z_236 + z_425 + z_650 + z_875)) && ((z_1 + z_13) <= (z_185 + z_236)) && ((z_1 + z_13 + z_322 + z_592) <= (z_185 + z_236 + z_425 + z_650)) && ((z_2324 + z_2444 + z_2594) > t_1442) && ((z_236 + z_425 + z_650 + z_875) > t_142) && ($delta#initial > 0) && (z_185 > 0) && (z_2033 > 0) && (z_2324 > 0) && (z_236 > 0) && (z_2444 > 0) && (z_2594 > 0) && (z_2672 > 0) && (z_2735 > 0) && (z_2864 > 0) && (z_425 > 0) && (z_650 > 0) && (z_875 > 0));
																																																				:pid_40:timeEmit = (z_1 + z_1009 + z_1234 + z_1279 + z_13 + z_1324 + z_1420 + z_1798 + z_1855 + z_1936 + z_2005 + z_2068 + z_2185 + z_2275 + z_2857 + z_322 + z_592 + z_736 + z_958);
																																																				:pid_41:cl = (z_2735 + z_2864 + z_2894);
																																																				:pid_47:c = 1;
																																																				:pid_47:consistent = true;
																																																				:pid_47:cl = (z_2864 + z_2894);
																																																				:pid_47:d.seq = 1;
																																																				:pid_47:d.fragment = FRAGMENT_0;
																																																				:pid_47:d.offset = 0;
																																																				:pid_52:cl = (z_2594 + z_2672 + z_2735 + z_2864 + z_2894);
																																																			}
																																																			BUFFER{
																																																				:pid_40:bufferNode:<FIFO>#0{ }
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
