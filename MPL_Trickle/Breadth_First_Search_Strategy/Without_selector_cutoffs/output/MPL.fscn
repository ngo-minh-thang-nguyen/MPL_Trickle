EC:<Id:1;Ev:0;H:0;W:1>{ SC: ( pid_3:startup , ( pid_25:cp0 , pid_31:dp0 , pid_36:dp0 ) , ( pid_42:cp0 , pid_48:dp0 , pid_53:dp0 ) , ( pid_59:cp0 , pid_65:dp0 , pid_70:dp0 ) , ( pid_76:cp0 , pid_82:dp0 , pid_87:dp0 ) )
	ALIAS{
		:ppid_-1:pid_0 = run::#PARAMETERS#; // model is spec::Trickle;
		:ppid_-1:pid_1 = spec::Trickle;
			DATA{
				:ppid_-1:pid_1:cptOutput = spec::Trickle.cptOutput;
				:ppid_-1:pid_1:cptInput = spec::Trickle.cptInput;
			}
		:ppid_1:pid_2 = spec::Trickle.Observer;
			DATA{
				:ppid_1:pid_2:mess = spec::Trickle.Observer.mess;
				:ppid_1:pid_2:seqBuff[0] = spec::Trickle.Observer.seqBuff;
				:ppid_1:pid_2:seqBuff[1] = spec::Trickle.Observer.seqBuff;
				:ppid_1:pid_2:dataMessage.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_2:dataMessage.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_2:dataMessage.offset = spec::Trickle.DATA_MESSAGE.offset;
				:ppid_1:pid_2:timeStamp = spec::Trickle.Observer.timeStamp;
				:ppid_1:pid_2:emit_time_INIT_n1 = spec::Trickle.Observer.emit_time_INIT_n1;
				:ppid_1:pid_2:emit_time_INIT_n2 = spec::Trickle.Observer.emit_time_INIT_n2;
				:ppid_1:pid_2:emit_time_INIT_n3 = spec::Trickle.Observer.emit_time_INIT_n3;
				:ppid_1:pid_2:emit_time_INIT_n4 = spec::Trickle.Observer.emit_time_INIT_n4;
			}
		:ppid_2:pid_3 = spec::Trickle.Observer.startup;
		:ppid_2:pid_4 = spec::Trickle.Observer.o#0;
		:ppid_2:pid_5 = spec::Trickle.Observer.o#1;
		:ppid_2:pid_6 = spec::Trickle.Observer.o#2;
		:ppid_2:pid_7 = spec::Trickle.Observer.o#3;
		:ppid_2:pid_8 = spec::Trickle.Observer.o#4;
		:ppid_2:pid_9 = spec::Trickle.Observer.o#5;
		:ppid_2:pid_10 = spec::Trickle.Observer.o#6;
		:ppid_2:pid_11 = spec::Trickle.Observer.o#7;
		:ppid_2:pid_12 = spec::Trickle.Observer.o#8;
		:ppid_2:pid_13 = spec::Trickle.Observer.o#9;
		:ppid_2:pid_14 = spec::Trickle.Observer.o#10;
		:ppid_2:pid_15 = spec::Trickle.Observer.o#11;
		:ppid_2:pid_16 = spec::Trickle.Observer.o#12;
		:ppid_2:pid_17 = spec::Trickle.Observer.o#13;
		:ppid_2:pid_18 = spec::Trickle.Observer.o#14;
		:ppid_2:pid_19 = spec::Trickle.Observer.o#15;
		:ppid_2:pid_20 = spec::Trickle.Observer.o#16;
		:ppid_2:pid_21 = spec::Trickle.Observer.PASS;
		:ppid_2:pid_22 = spec::Trickle.Observer.FAILED;
		:ppid_1:pid_23 = run::Trickle.n1; // model is spec::Trickle.Node;
			BUFFER NUMBER = 3;
			/*BUFFER{
				:ppid_1:pid_23:bufferCM = spec::Trickle.Node.bufferCM;
				:ppid_1:pid_23:bufferDM1 = spec::Trickle.Node.bufferDM1;
				:ppid_1:pid_23:bufferDM2 = spec::Trickle.Node.bufferDM2;
			}*/
			DATA{
				:ppid_1:pid_23:my_buff[0].seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_23:my_buff[0].fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_23:my_buff[0].offset = spec::Trickle.DATA_MESSAGE.offset;
				:ppid_1:pid_23:my_buff[1].seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_23:my_buff[1].fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_23:my_buff[1].offset = spec::Trickle.DATA_MESSAGE.offset;
				:ppid_1:pid_23:firmware[0] = spec::Trickle.Node.firmware;
				:ppid_1:pid_23:firmware[1] = spec::Trickle.Node.firmware;
				:ppid_1:pid_23:myseq_buff[0] = spec::Trickle.Node.myseq_buff;
				:ppid_1:pid_23:myseq_buff[1] = spec::Trickle.Node.myseq_buff;
				:ppid_1:pid_23:mydp_run[0] = spec::Trickle.Node.mydp_run;
				:ppid_1:pid_23:mydp_run[1] = spec::Trickle.Node.mydp_run;
				:ppid_1:pid_23:$time = spec::Trickle.Node.$time;
				:ppid_1:pid_23:z = spec::Trickle.Node.z;
				:ppid_1:pid_23:localTime = spec::Trickle.Node.localTime;
				:ppid_1:pid_23:coverageProp1 = spec::Trickle.Node.coverageProp1;
				:ppid_1:pid_23:coverageProp2 = spec::Trickle.Node.coverageProp2;
				:ppid_1:pid_23:CM_zero_zero = spec::Trickle.Node.CM_zero_zero;
				:ppid_1:pid_23:CM_one_one = spec::Trickle.Node.CM_one_one;
				:ppid_1:pid_23:reach_DATA_EXPIR_DM1 = spec::Trickle.Node.reach_DATA_EXPIR_DM1;
				:ppid_1:pid_23:reach_DATA_EXPIR_DM2 = spec::Trickle.Node.reach_DATA_EXPIR_DM2;
				:ppid_1:pid_23:reach_CTRL_EXPIR = spec::Trickle.Node.reach_CTRL_EXPIR;
				:ppid_1:pid_23:seq_buff[0] = spec::Trickle.Node.seq_buff;
				:ppid_1:pid_23:seq_buff[1] = spec::Trickle.Node.seq_buff;
				:ppid_1:pid_23:i = spec::Trickle.Node.i;
				:ppid_1:pid_23:localPC = spec::Trickle.Node.localPC;
				:ppid_1:pid_23:localPtC = spec::Trickle.Node.localPtC;
				:ppid_1:pid_23:new_seq_buff = spec::Trickle.Node.new_seq_buff;
				:ppid_1:pid_23:new_seq = spec::Trickle.Node.new_seq;
				:ppid_1:pid_23:new_fragment = spec::Trickle.Node.new_fragment;
				:ppid_1:pid_23:new_offset = spec::Trickle.Node.new_offset;
				:ppid_1:pid_23:timeEmit = spec::Trickle.Node.timeEmit;
			}
			INTERFACE{
				:ppid_1:pid_23:ControlMsg = spec::Trickle.Node.ControlMsg;
				:ppid_1:pid_23:DataMsg1 = spec::Trickle.Node.DataMsg1;
				:ppid_1:pid_23:DataMsg2 = spec::Trickle.Node.DataMsg2;
				:ppid_1:pid_23:Log = spec::Trickle.Node.Log;
			}
		:ppid_23:pid_24 = spec::Trickle.Node.ControlProcess;
			DATA{
				:ppid_23:pid_24:e = spec::Trickle.Node.ControlProcess.e;
				:ppid_23:pid_24:tau = spec::Trickle.Node.ControlProcess.tau;
				:ppid_23:pid_24:tau_l = spec::Trickle.Node.ControlProcess.tau_l;
				:ppid_23:pid_24:tau_h = spec::Trickle.Node.ControlProcess.tau_h;
				:ppid_23:pid_24:k = spec::Trickle.Node.ControlProcess.k;
				:ppid_23:pid_24:c = spec::Trickle.Node.ControlProcess.c;
				:ppid_23:pid_24:i = spec::Trickle.Node.ControlProcess.i;
				:ppid_23:pid_24:t = spec::Trickle.Node.ControlProcess.t;
				:ppid_23:pid_24:consistent = spec::Trickle.Node.ControlProcess.consistent;
				:ppid_23:pid_24:cl = spec::Trickle.Node.ControlProcess.cl;
			}
		:ppid_24:pid_25 = spec::Trickle.Node.ControlProcess.cp0;
		:ppid_24:pid_26 = spec::Trickle.Node.ControlProcess.cp0_init;
		:ppid_24:pid_27 = spec::Trickle.Node.ControlProcess.cp1;
		:ppid_24:pid_28 = spec::Trickle.Node.ControlProcess.cp2;
		:ppid_24:pid_29 = spec::Trickle.Node.ControlProcess.cp3;
		:ppid_23:pid_30 = run::Trickle.n1.DataProcess1; // model is spec::Trickle.Node.DataProcess;
			DATA{
				:ppid_23:pid_30:mySeq = spec::Trickle.Node.DataProcess.mySeq;
				:ppid_23:pid_30:e = spec::Trickle.Node.DataProcess.e;
				:ppid_23:pid_30:tau = spec::Trickle.Node.DataProcess.tau;
				:ppid_23:pid_30:tau_l = spec::Trickle.Node.DataProcess.tau_l;
				:ppid_23:pid_30:tau_h = spec::Trickle.Node.DataProcess.tau_h;
				:ppid_23:pid_30:k = spec::Trickle.Node.DataProcess.k;
				:ppid_23:pid_30:c = spec::Trickle.Node.DataProcess.c;
				:ppid_23:pid_30:i = spec::Trickle.Node.DataProcess.i;
				:ppid_23:pid_30:t = spec::Trickle.Node.DataProcess.t;
				:ppid_23:pid_30:consistent = spec::Trickle.Node.DataProcess.consistent;
				:ppid_23:pid_30:cl = spec::Trickle.Node.DataProcess.cl;
				:ppid_23:pid_30:d.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_23:pid_30:d.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_23:pid_30:d.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_30:pid_31 = spec::Trickle.Node.DataProcess.dp0;
		:ppid_30:pid_32 = spec::Trickle.Node.DataProcess.dp1;
		:ppid_30:pid_33 = spec::Trickle.Node.DataProcess.dp2;
		:ppid_30:pid_34 = spec::Trickle.Node.DataProcess.dp3;
		:ppid_23:pid_35 = run::Trickle.n1.DataProcess2; // model is spec::Trickle.Node.DataProcess;
			DATA{
				:ppid_23:pid_35:mySeq = spec::Trickle.Node.DataProcess.mySeq;
				:ppid_23:pid_35:e = spec::Trickle.Node.DataProcess.e;
				:ppid_23:pid_35:tau = spec::Trickle.Node.DataProcess.tau;
				:ppid_23:pid_35:tau_l = spec::Trickle.Node.DataProcess.tau_l;
				:ppid_23:pid_35:tau_h = spec::Trickle.Node.DataProcess.tau_h;
				:ppid_23:pid_35:k = spec::Trickle.Node.DataProcess.k;
				:ppid_23:pid_35:c = spec::Trickle.Node.DataProcess.c;
				:ppid_23:pid_35:i = spec::Trickle.Node.DataProcess.i;
				:ppid_23:pid_35:t = spec::Trickle.Node.DataProcess.t;
				:ppid_23:pid_35:consistent = spec::Trickle.Node.DataProcess.consistent;
				:ppid_23:pid_35:cl = spec::Trickle.Node.DataProcess.cl;
				:ppid_23:pid_35:d.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_23:pid_35:d.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_23:pid_35:d.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_35:pid_36 = spec::Trickle.Node.DataProcess.dp0;
		:ppid_35:pid_37 = spec::Trickle.Node.DataProcess.dp1;
		:ppid_35:pid_38 = spec::Trickle.Node.DataProcess.dp2;
		:ppid_35:pid_39 = spec::Trickle.Node.DataProcess.dp3;
		:ppid_1:pid_40 = run::Trickle.n2; // model is spec::Trickle.Node;
			BUFFER NUMBER = 3;
			/*BUFFER{
				:ppid_1:pid_40:bufferCM = spec::Trickle.Node.bufferCM;
				:ppid_1:pid_40:bufferDM1 = spec::Trickle.Node.bufferDM1;
				:ppid_1:pid_40:bufferDM2 = spec::Trickle.Node.bufferDM2;
			}*/
			DATA{
				:ppid_1:pid_40:my_buff[0].seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_40:my_buff[0].fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_40:my_buff[0].offset = spec::Trickle.DATA_MESSAGE.offset;
				:ppid_1:pid_40:my_buff[1].seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_40:my_buff[1].fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_40:my_buff[1].offset = spec::Trickle.DATA_MESSAGE.offset;
				:ppid_1:pid_40:firmware[0] = spec::Trickle.Node.firmware;
				:ppid_1:pid_40:firmware[1] = spec::Trickle.Node.firmware;
				:ppid_1:pid_40:myseq_buff[0] = spec::Trickle.Node.myseq_buff;
				:ppid_1:pid_40:myseq_buff[1] = spec::Trickle.Node.myseq_buff;
				:ppid_1:pid_40:mydp_run[0] = spec::Trickle.Node.mydp_run;
				:ppid_1:pid_40:mydp_run[1] = spec::Trickle.Node.mydp_run;
				:ppid_1:pid_40:$time = spec::Trickle.Node.$time;
				:ppid_1:pid_40:z = spec::Trickle.Node.z;
				:ppid_1:pid_40:localTime = spec::Trickle.Node.localTime;
				:ppid_1:pid_40:coverageProp1 = spec::Trickle.Node.coverageProp1;
				:ppid_1:pid_40:coverageProp2 = spec::Trickle.Node.coverageProp2;
				:ppid_1:pid_40:CM_zero_zero = spec::Trickle.Node.CM_zero_zero;
				:ppid_1:pid_40:CM_one_one = spec::Trickle.Node.CM_one_one;
				:ppid_1:pid_40:reach_DATA_EXPIR_DM1 = spec::Trickle.Node.reach_DATA_EXPIR_DM1;
				:ppid_1:pid_40:reach_DATA_EXPIR_DM2 = spec::Trickle.Node.reach_DATA_EXPIR_DM2;
				:ppid_1:pid_40:reach_CTRL_EXPIR = spec::Trickle.Node.reach_CTRL_EXPIR;
				:ppid_1:pid_40:seq_buff[0] = spec::Trickle.Node.seq_buff;
				:ppid_1:pid_40:seq_buff[1] = spec::Trickle.Node.seq_buff;
				:ppid_1:pid_40:i = spec::Trickle.Node.i;
				:ppid_1:pid_40:localPC = spec::Trickle.Node.localPC;
				:ppid_1:pid_40:localPtC = spec::Trickle.Node.localPtC;
				:ppid_1:pid_40:new_seq_buff = spec::Trickle.Node.new_seq_buff;
				:ppid_1:pid_40:new_seq = spec::Trickle.Node.new_seq;
				:ppid_1:pid_40:new_fragment = spec::Trickle.Node.new_fragment;
				:ppid_1:pid_40:new_offset = spec::Trickle.Node.new_offset;
				:ppid_1:pid_40:timeEmit = spec::Trickle.Node.timeEmit;
			}
			INTERFACE{
				:ppid_1:pid_40:ControlMsg = spec::Trickle.Node.ControlMsg;
				:ppid_1:pid_40:DataMsg1 = spec::Trickle.Node.DataMsg1;
				:ppid_1:pid_40:DataMsg2 = spec::Trickle.Node.DataMsg2;
				:ppid_1:pid_40:Log = spec::Trickle.Node.Log;
			}
		:ppid_40:pid_41 = spec::Trickle.Node.ControlProcess;
			DATA{
				:ppid_40:pid_41:e = spec::Trickle.Node.ControlProcess.e;
				:ppid_40:pid_41:tau = spec::Trickle.Node.ControlProcess.tau;
				:ppid_40:pid_41:tau_l = spec::Trickle.Node.ControlProcess.tau_l;
				:ppid_40:pid_41:tau_h = spec::Trickle.Node.ControlProcess.tau_h;
				:ppid_40:pid_41:k = spec::Trickle.Node.ControlProcess.k;
				:ppid_40:pid_41:c = spec::Trickle.Node.ControlProcess.c;
				:ppid_40:pid_41:i = spec::Trickle.Node.ControlProcess.i;
				:ppid_40:pid_41:t = spec::Trickle.Node.ControlProcess.t;
				:ppid_40:pid_41:consistent = spec::Trickle.Node.ControlProcess.consistent;
				:ppid_40:pid_41:cl = spec::Trickle.Node.ControlProcess.cl;
			}
		:ppid_41:pid_42 = spec::Trickle.Node.ControlProcess.cp0;
		:ppid_41:pid_43 = spec::Trickle.Node.ControlProcess.cp0_init;
		:ppid_41:pid_44 = spec::Trickle.Node.ControlProcess.cp1;
		:ppid_41:pid_45 = spec::Trickle.Node.ControlProcess.cp2;
		:ppid_41:pid_46 = spec::Trickle.Node.ControlProcess.cp3;
		:ppid_40:pid_47 = run::Trickle.n2.DataProcess1; // model is spec::Trickle.Node.DataProcess;
			DATA{
				:ppid_40:pid_47:mySeq = spec::Trickle.Node.DataProcess.mySeq;
				:ppid_40:pid_47:e = spec::Trickle.Node.DataProcess.e;
				:ppid_40:pid_47:tau = spec::Trickle.Node.DataProcess.tau;
				:ppid_40:pid_47:tau_l = spec::Trickle.Node.DataProcess.tau_l;
				:ppid_40:pid_47:tau_h = spec::Trickle.Node.DataProcess.tau_h;
				:ppid_40:pid_47:k = spec::Trickle.Node.DataProcess.k;
				:ppid_40:pid_47:c = spec::Trickle.Node.DataProcess.c;
				:ppid_40:pid_47:i = spec::Trickle.Node.DataProcess.i;
				:ppid_40:pid_47:t = spec::Trickle.Node.DataProcess.t;
				:ppid_40:pid_47:consistent = spec::Trickle.Node.DataProcess.consistent;
				:ppid_40:pid_47:cl = spec::Trickle.Node.DataProcess.cl;
				:ppid_40:pid_47:d.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_40:pid_47:d.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_40:pid_47:d.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_47:pid_48 = spec::Trickle.Node.DataProcess.dp0;
		:ppid_47:pid_49 = spec::Trickle.Node.DataProcess.dp1;
		:ppid_47:pid_50 = spec::Trickle.Node.DataProcess.dp2;
		:ppid_47:pid_51 = spec::Trickle.Node.DataProcess.dp3;
		:ppid_40:pid_52 = run::Trickle.n2.DataProcess2; // model is spec::Trickle.Node.DataProcess;
			DATA{
				:ppid_40:pid_52:mySeq = spec::Trickle.Node.DataProcess.mySeq;
				:ppid_40:pid_52:e = spec::Trickle.Node.DataProcess.e;
				:ppid_40:pid_52:tau = spec::Trickle.Node.DataProcess.tau;
				:ppid_40:pid_52:tau_l = spec::Trickle.Node.DataProcess.tau_l;
				:ppid_40:pid_52:tau_h = spec::Trickle.Node.DataProcess.tau_h;
				:ppid_40:pid_52:k = spec::Trickle.Node.DataProcess.k;
				:ppid_40:pid_52:c = spec::Trickle.Node.DataProcess.c;
				:ppid_40:pid_52:i = spec::Trickle.Node.DataProcess.i;
				:ppid_40:pid_52:t = spec::Trickle.Node.DataProcess.t;
				:ppid_40:pid_52:consistent = spec::Trickle.Node.DataProcess.consistent;
				:ppid_40:pid_52:cl = spec::Trickle.Node.DataProcess.cl;
				:ppid_40:pid_52:d.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_40:pid_52:d.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_40:pid_52:d.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_52:pid_53 = spec::Trickle.Node.DataProcess.dp0;
		:ppid_52:pid_54 = spec::Trickle.Node.DataProcess.dp1;
		:ppid_52:pid_55 = spec::Trickle.Node.DataProcess.dp2;
		:ppid_52:pid_56 = spec::Trickle.Node.DataProcess.dp3;
		:ppid_1:pid_57 = run::Trickle.n3; // model is spec::Trickle.Node;
			BUFFER NUMBER = 3;
			/*BUFFER{
				:ppid_1:pid_57:bufferCM = spec::Trickle.Node.bufferCM;
				:ppid_1:pid_57:bufferDM1 = spec::Trickle.Node.bufferDM1;
				:ppid_1:pid_57:bufferDM2 = spec::Trickle.Node.bufferDM2;
			}*/
			DATA{
				:ppid_1:pid_57:my_buff[0].seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_57:my_buff[0].fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_57:my_buff[0].offset = spec::Trickle.DATA_MESSAGE.offset;
				:ppid_1:pid_57:my_buff[1].seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_57:my_buff[1].fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_57:my_buff[1].offset = spec::Trickle.DATA_MESSAGE.offset;
				:ppid_1:pid_57:firmware[0] = spec::Trickle.Node.firmware;
				:ppid_1:pid_57:firmware[1] = spec::Trickle.Node.firmware;
				:ppid_1:pid_57:myseq_buff[0] = spec::Trickle.Node.myseq_buff;
				:ppid_1:pid_57:myseq_buff[1] = spec::Trickle.Node.myseq_buff;
				:ppid_1:pid_57:mydp_run[0] = spec::Trickle.Node.mydp_run;
				:ppid_1:pid_57:mydp_run[1] = spec::Trickle.Node.mydp_run;
				:ppid_1:pid_57:$time = spec::Trickle.Node.$time;
				:ppid_1:pid_57:z = spec::Trickle.Node.z;
				:ppid_1:pid_57:localTime = spec::Trickle.Node.localTime;
				:ppid_1:pid_57:coverageProp1 = spec::Trickle.Node.coverageProp1;
				:ppid_1:pid_57:coverageProp2 = spec::Trickle.Node.coverageProp2;
				:ppid_1:pid_57:CM_zero_zero = spec::Trickle.Node.CM_zero_zero;
				:ppid_1:pid_57:CM_one_one = spec::Trickle.Node.CM_one_one;
				:ppid_1:pid_57:reach_DATA_EXPIR_DM1 = spec::Trickle.Node.reach_DATA_EXPIR_DM1;
				:ppid_1:pid_57:reach_DATA_EXPIR_DM2 = spec::Trickle.Node.reach_DATA_EXPIR_DM2;
				:ppid_1:pid_57:reach_CTRL_EXPIR = spec::Trickle.Node.reach_CTRL_EXPIR;
				:ppid_1:pid_57:seq_buff[0] = spec::Trickle.Node.seq_buff;
				:ppid_1:pid_57:seq_buff[1] = spec::Trickle.Node.seq_buff;
				:ppid_1:pid_57:i = spec::Trickle.Node.i;
				:ppid_1:pid_57:localPC = spec::Trickle.Node.localPC;
				:ppid_1:pid_57:localPtC = spec::Trickle.Node.localPtC;
				:ppid_1:pid_57:new_seq_buff = spec::Trickle.Node.new_seq_buff;
				:ppid_1:pid_57:new_seq = spec::Trickle.Node.new_seq;
				:ppid_1:pid_57:new_fragment = spec::Trickle.Node.new_fragment;
				:ppid_1:pid_57:new_offset = spec::Trickle.Node.new_offset;
				:ppid_1:pid_57:timeEmit = spec::Trickle.Node.timeEmit;
			}
			INTERFACE{
				:ppid_1:pid_57:ControlMsg = spec::Trickle.Node.ControlMsg;
				:ppid_1:pid_57:DataMsg1 = spec::Trickle.Node.DataMsg1;
				:ppid_1:pid_57:DataMsg2 = spec::Trickle.Node.DataMsg2;
				:ppid_1:pid_57:Log = spec::Trickle.Node.Log;
			}
		:ppid_57:pid_58 = spec::Trickle.Node.ControlProcess;
			DATA{
				:ppid_57:pid_58:e = spec::Trickle.Node.ControlProcess.e;
				:ppid_57:pid_58:tau = spec::Trickle.Node.ControlProcess.tau;
				:ppid_57:pid_58:tau_l = spec::Trickle.Node.ControlProcess.tau_l;
				:ppid_57:pid_58:tau_h = spec::Trickle.Node.ControlProcess.tau_h;
				:ppid_57:pid_58:k = spec::Trickle.Node.ControlProcess.k;
				:ppid_57:pid_58:c = spec::Trickle.Node.ControlProcess.c;
				:ppid_57:pid_58:i = spec::Trickle.Node.ControlProcess.i;
				:ppid_57:pid_58:t = spec::Trickle.Node.ControlProcess.t;
				:ppid_57:pid_58:consistent = spec::Trickle.Node.ControlProcess.consistent;
				:ppid_57:pid_58:cl = spec::Trickle.Node.ControlProcess.cl;
			}
		:ppid_58:pid_59 = spec::Trickle.Node.ControlProcess.cp0;
		:ppid_58:pid_60 = spec::Trickle.Node.ControlProcess.cp0_init;
		:ppid_58:pid_61 = spec::Trickle.Node.ControlProcess.cp1;
		:ppid_58:pid_62 = spec::Trickle.Node.ControlProcess.cp2;
		:ppid_58:pid_63 = spec::Trickle.Node.ControlProcess.cp3;
		:ppid_57:pid_64 = run::Trickle.n3.DataProcess1; // model is spec::Trickle.Node.DataProcess;
			DATA{
				:ppid_57:pid_64:mySeq = spec::Trickle.Node.DataProcess.mySeq;
				:ppid_57:pid_64:e = spec::Trickle.Node.DataProcess.e;
				:ppid_57:pid_64:tau = spec::Trickle.Node.DataProcess.tau;
				:ppid_57:pid_64:tau_l = spec::Trickle.Node.DataProcess.tau_l;
				:ppid_57:pid_64:tau_h = spec::Trickle.Node.DataProcess.tau_h;
				:ppid_57:pid_64:k = spec::Trickle.Node.DataProcess.k;
				:ppid_57:pid_64:c = spec::Trickle.Node.DataProcess.c;
				:ppid_57:pid_64:i = spec::Trickle.Node.DataProcess.i;
				:ppid_57:pid_64:t = spec::Trickle.Node.DataProcess.t;
				:ppid_57:pid_64:consistent = spec::Trickle.Node.DataProcess.consistent;
				:ppid_57:pid_64:cl = spec::Trickle.Node.DataProcess.cl;
				:ppid_57:pid_64:d.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_57:pid_64:d.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_57:pid_64:d.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_64:pid_65 = spec::Trickle.Node.DataProcess.dp0;
		:ppid_64:pid_66 = spec::Trickle.Node.DataProcess.dp1;
		:ppid_64:pid_67 = spec::Trickle.Node.DataProcess.dp2;
		:ppid_64:pid_68 = spec::Trickle.Node.DataProcess.dp3;
		:ppid_57:pid_69 = run::Trickle.n3.DataProcess2; // model is spec::Trickle.Node.DataProcess;
			DATA{
				:ppid_57:pid_69:mySeq = spec::Trickle.Node.DataProcess.mySeq;
				:ppid_57:pid_69:e = spec::Trickle.Node.DataProcess.e;
				:ppid_57:pid_69:tau = spec::Trickle.Node.DataProcess.tau;
				:ppid_57:pid_69:tau_l = spec::Trickle.Node.DataProcess.tau_l;
				:ppid_57:pid_69:tau_h = spec::Trickle.Node.DataProcess.tau_h;
				:ppid_57:pid_69:k = spec::Trickle.Node.DataProcess.k;
				:ppid_57:pid_69:c = spec::Trickle.Node.DataProcess.c;
				:ppid_57:pid_69:i = spec::Trickle.Node.DataProcess.i;
				:ppid_57:pid_69:t = spec::Trickle.Node.DataProcess.t;
				:ppid_57:pid_69:consistent = spec::Trickle.Node.DataProcess.consistent;
				:ppid_57:pid_69:cl = spec::Trickle.Node.DataProcess.cl;
				:ppid_57:pid_69:d.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_57:pid_69:d.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_57:pid_69:d.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_69:pid_70 = spec::Trickle.Node.DataProcess.dp0;
		:ppid_69:pid_71 = spec::Trickle.Node.DataProcess.dp1;
		:ppid_69:pid_72 = spec::Trickle.Node.DataProcess.dp2;
		:ppid_69:pid_73 = spec::Trickle.Node.DataProcess.dp3;
		:ppid_1:pid_74 = run::Trickle.n4; // model is spec::Trickle.Node;
			BUFFER NUMBER = 3;
			/*BUFFER{
				:ppid_1:pid_74:bufferCM = spec::Trickle.Node.bufferCM;
				:ppid_1:pid_74:bufferDM1 = spec::Trickle.Node.bufferDM1;
				:ppid_1:pid_74:bufferDM2 = spec::Trickle.Node.bufferDM2;
			}*/
			DATA{
				:ppid_1:pid_74:my_buff[0].seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_74:my_buff[0].fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_74:my_buff[0].offset = spec::Trickle.DATA_MESSAGE.offset;
				:ppid_1:pid_74:my_buff[1].seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_74:my_buff[1].fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_74:my_buff[1].offset = spec::Trickle.DATA_MESSAGE.offset;
				:ppid_1:pid_74:firmware[0] = spec::Trickle.Node.firmware;
				:ppid_1:pid_74:firmware[1] = spec::Trickle.Node.firmware;
				:ppid_1:pid_74:myseq_buff[0] = spec::Trickle.Node.myseq_buff;
				:ppid_1:pid_74:myseq_buff[1] = spec::Trickle.Node.myseq_buff;
				:ppid_1:pid_74:mydp_run[0] = spec::Trickle.Node.mydp_run;
				:ppid_1:pid_74:mydp_run[1] = spec::Trickle.Node.mydp_run;
				:ppid_1:pid_74:$time = spec::Trickle.Node.$time;
				:ppid_1:pid_74:z = spec::Trickle.Node.z;
				:ppid_1:pid_74:localTime = spec::Trickle.Node.localTime;
				:ppid_1:pid_74:coverageProp1 = spec::Trickle.Node.coverageProp1;
				:ppid_1:pid_74:coverageProp2 = spec::Trickle.Node.coverageProp2;
				:ppid_1:pid_74:CM_zero_zero = spec::Trickle.Node.CM_zero_zero;
				:ppid_1:pid_74:CM_one_one = spec::Trickle.Node.CM_one_one;
				:ppid_1:pid_74:reach_DATA_EXPIR_DM1 = spec::Trickle.Node.reach_DATA_EXPIR_DM1;
				:ppid_1:pid_74:reach_DATA_EXPIR_DM2 = spec::Trickle.Node.reach_DATA_EXPIR_DM2;
				:ppid_1:pid_74:reach_CTRL_EXPIR = spec::Trickle.Node.reach_CTRL_EXPIR;
				:ppid_1:pid_74:seq_buff[0] = spec::Trickle.Node.seq_buff;
				:ppid_1:pid_74:seq_buff[1] = spec::Trickle.Node.seq_buff;
				:ppid_1:pid_74:i = spec::Trickle.Node.i;
				:ppid_1:pid_74:localPC = spec::Trickle.Node.localPC;
				:ppid_1:pid_74:localPtC = spec::Trickle.Node.localPtC;
				:ppid_1:pid_74:new_seq_buff = spec::Trickle.Node.new_seq_buff;
				:ppid_1:pid_74:new_seq = spec::Trickle.Node.new_seq;
				:ppid_1:pid_74:new_fragment = spec::Trickle.Node.new_fragment;
				:ppid_1:pid_74:new_offset = spec::Trickle.Node.new_offset;
				:ppid_1:pid_74:timeEmit = spec::Trickle.Node.timeEmit;
			}
			INTERFACE{
				:ppid_1:pid_74:ControlMsg = spec::Trickle.Node.ControlMsg;
				:ppid_1:pid_74:DataMsg1 = spec::Trickle.Node.DataMsg1;
				:ppid_1:pid_74:DataMsg2 = spec::Trickle.Node.DataMsg2;
				:ppid_1:pid_74:Log = spec::Trickle.Node.Log;
			}
		:ppid_74:pid_75 = spec::Trickle.Node.ControlProcess;
			DATA{
				:ppid_74:pid_75:e = spec::Trickle.Node.ControlProcess.e;
				:ppid_74:pid_75:tau = spec::Trickle.Node.ControlProcess.tau;
				:ppid_74:pid_75:tau_l = spec::Trickle.Node.ControlProcess.tau_l;
				:ppid_74:pid_75:tau_h = spec::Trickle.Node.ControlProcess.tau_h;
				:ppid_74:pid_75:k = spec::Trickle.Node.ControlProcess.k;
				:ppid_74:pid_75:c = spec::Trickle.Node.ControlProcess.c;
				:ppid_74:pid_75:i = spec::Trickle.Node.ControlProcess.i;
				:ppid_74:pid_75:t = spec::Trickle.Node.ControlProcess.t;
				:ppid_74:pid_75:consistent = spec::Trickle.Node.ControlProcess.consistent;
				:ppid_74:pid_75:cl = spec::Trickle.Node.ControlProcess.cl;
			}
		:ppid_75:pid_76 = spec::Trickle.Node.ControlProcess.cp0;
		:ppid_75:pid_77 = spec::Trickle.Node.ControlProcess.cp0_init;
		:ppid_75:pid_78 = spec::Trickle.Node.ControlProcess.cp1;
		:ppid_75:pid_79 = spec::Trickle.Node.ControlProcess.cp2;
		:ppid_75:pid_80 = spec::Trickle.Node.ControlProcess.cp3;
		:ppid_74:pid_81 = run::Trickle.n4.DataProcess1; // model is spec::Trickle.Node.DataProcess;
			DATA{
				:ppid_74:pid_81:mySeq = spec::Trickle.Node.DataProcess.mySeq;
				:ppid_74:pid_81:e = spec::Trickle.Node.DataProcess.e;
				:ppid_74:pid_81:tau = spec::Trickle.Node.DataProcess.tau;
				:ppid_74:pid_81:tau_l = spec::Trickle.Node.DataProcess.tau_l;
				:ppid_74:pid_81:tau_h = spec::Trickle.Node.DataProcess.tau_h;
				:ppid_74:pid_81:k = spec::Trickle.Node.DataProcess.k;
				:ppid_74:pid_81:c = spec::Trickle.Node.DataProcess.c;
				:ppid_74:pid_81:i = spec::Trickle.Node.DataProcess.i;
				:ppid_74:pid_81:t = spec::Trickle.Node.DataProcess.t;
				:ppid_74:pid_81:consistent = spec::Trickle.Node.DataProcess.consistent;
				:ppid_74:pid_81:cl = spec::Trickle.Node.DataProcess.cl;
				:ppid_74:pid_81:d.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_74:pid_81:d.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_74:pid_81:d.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_81:pid_82 = spec::Trickle.Node.DataProcess.dp0;
		:ppid_81:pid_83 = spec::Trickle.Node.DataProcess.dp1;
		:ppid_81:pid_84 = spec::Trickle.Node.DataProcess.dp2;
		:ppid_81:pid_85 = spec::Trickle.Node.DataProcess.dp3;
		:ppid_74:pid_86 = run::Trickle.n4.DataProcess2; // model is spec::Trickle.Node.DataProcess;
			DATA{
				:ppid_74:pid_86:mySeq = spec::Trickle.Node.DataProcess.mySeq;
				:ppid_74:pid_86:e = spec::Trickle.Node.DataProcess.e;
				:ppid_74:pid_86:tau = spec::Trickle.Node.DataProcess.tau;
				:ppid_74:pid_86:tau_l = spec::Trickle.Node.DataProcess.tau_l;
				:ppid_74:pid_86:tau_h = spec::Trickle.Node.DataProcess.tau_h;
				:ppid_74:pid_86:k = spec::Trickle.Node.DataProcess.k;
				:ppid_74:pid_86:c = spec::Trickle.Node.DataProcess.c;
				:ppid_74:pid_86:i = spec::Trickle.Node.DataProcess.i;
				:ppid_74:pid_86:t = spec::Trickle.Node.DataProcess.t;
				:ppid_74:pid_86:consistent = spec::Trickle.Node.DataProcess.consistent;
				:ppid_74:pid_86:cl = spec::Trickle.Node.DataProcess.cl;
				:ppid_74:pid_86:d.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_74:pid_86:d.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_74:pid_86:d.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_86:pid_87 = spec::Trickle.Node.DataProcess.dp0;
		:ppid_86:pid_88 = spec::Trickle.Node.DataProcess.dp1;
		:ppid_86:pid_89 = spec::Trickle.Node.DataProcess.dp2;
		:ppid_86:pid_90 = spec::Trickle.Node.DataProcess.dp3;
	}
	/*FLAGS{ USER_IRQ }*/
	PC: true
	PtC: true
	DATA{
		:pid_1:cptOutput = 0;
		:pid_1:cptInput = 0;
		:pid_2:mess = mess_0;
		:pid_2:seqBuff[0] = seqBuff[0]_0;
		:pid_2:seqBuff[1] = seqBuff[1]_0;
		:pid_2:dataMessage.seq = dataMessage.seq_0;
		:pid_2:dataMessage.fragment = dataMessage.fragment_0;
		:pid_2:dataMessage.offset = dataMessage.offset_0;
		:pid_2:timeStamp = timeStamp_0;
		:pid_2:emit_time_INIT_n1 = emit_time_INIT_n1_0;
		:pid_2:emit_time_INIT_n2 = emit_time_INIT_n2_0;
		:pid_2:emit_time_INIT_n3 = emit_time_INIT_n3_0;
		:pid_2:emit_time_INIT_n4 = emit_time_INIT_n4_0;
		:pid_23:my_buff[0].seq = 1;
		:pid_23:my_buff[0].fragment = FRAGMENT_0;
		:pid_23:my_buff[0].offset = 0;
		:pid_23:my_buff[1].seq = 2;
		:pid_23:my_buff[1].fragment = FRAGMENT_1;
		:pid_23:my_buff[1].offset = 1;
		:pid_23:firmware[0] = FRAGMENT_0;
		:pid_23:firmware[1] = FRAGMENT_1;
		:pid_23:myseq_buff[0] = 1;
		:pid_23:myseq_buff[1] = 1;
		:pid_23:mydp_run[0] = true;
		:pid_23:mydp_run[1] = true;
		:pid_23:$time = 0;
		:pid_23:z = $delta#initial;
		:pid_23:localTime = 0;
		:pid_23:coverageProp1 = false;
		:pid_23:coverageProp2 = false;
		:pid_23:CM_zero_zero = false;
		:pid_23:CM_one_one = false;
		:pid_23:reach_DATA_EXPIR_DM1 = false;
		:pid_23:reach_DATA_EXPIR_DM2 = false;
		:pid_23:reach_CTRL_EXPIR = false;
		:pid_23:seq_buff[0] = seq_buff[0]_0;
		:pid_23:seq_buff[1] = seq_buff[1]_0;
		:pid_23:i = i_0;
		:pid_23:localPC = true;
		:pid_23:localPtC = true;
		:pid_23:new_seq_buff = new_seq_buff_0;
		:pid_23:new_seq = new_seq_0;
		:pid_23:new_fragment = new_fragment_0;
		:pid_23:new_offset = new_offset_0;
		:pid_23:timeEmit = timeEmit_0;
		:pid_24:e = e_0;
		:pid_24:tau = tau_0;
		:pid_24:tau_l = tau_l_0;
		:pid_24:tau_h = tau_h_0;
		:pid_24:k = k_0;
		:pid_24:c = c_0;
		:pid_24:i = i_0;
		:pid_24:t = t_0;
		:pid_24:consistent = consistent_0;
		:pid_24:cl = 0;
		:pid_30:mySeq = 1;
		:pid_30:e = e_0;
		:pid_30:tau = tau_0;
		:pid_30:tau_l = tau_l_0;
		:pid_30:tau_h = tau_h_0;
		:pid_30:k = k_0;
		:pid_30:c = c_0;
		:pid_30:i = i_0;
		:pid_30:t = t_0;
		:pid_30:consistent = consistent_0;
		:pid_30:cl = 0;
		:pid_30:d.seq = d.seq_0;
		:pid_30:d.fragment = d.fragment_0;
		:pid_30:d.offset = d.offset_0;
		:pid_35:mySeq = 2;
		:pid_35:e = e_1;
		:pid_35:tau = tau_1;
		:pid_35:tau_l = tau_l_1;
		:pid_35:tau_h = tau_h_1;
		:pid_35:k = k_1;
		:pid_35:c = c_1;
		:pid_35:i = i_1;
		:pid_35:t = t_1;
		:pid_35:consistent = consistent_1;
		:pid_35:cl = 0;
		:pid_35:d.seq = d.seq_1;
		:pid_35:d.fragment = d.fragment_1;
		:pid_35:d.offset = d.offset_1;
		:pid_40:my_buff[0].seq = 0;
		:pid_40:my_buff[0].fragment = UNDEF_FRAGMENT;
		:pid_40:my_buff[0].offset = 0;
		:pid_40:my_buff[1].seq = 0;
		:pid_40:my_buff[1].fragment = UNDEF_FRAGMENT;
		:pid_40:my_buff[1].offset = 1;
		:pid_40:firmware[0] = UNDEF_FRAGMENT;
		:pid_40:firmware[1] = UNDEF_FRAGMENT;
		:pid_40:myseq_buff[0] = 0;
		:pid_40:myseq_buff[1] = 0;
		:pid_40:mydp_run[0] = false;
		:pid_40:mydp_run[1] = false;
		:pid_40:$time = 0;
		:pid_40:z = $delta#initial;
		:pid_40:localTime = 0;
		:pid_40:coverageProp1 = false;
		:pid_40:coverageProp2 = false;
		:pid_40:CM_zero_zero = false;
		:pid_40:CM_one_one = false;
		:pid_40:reach_DATA_EXPIR_DM1 = false;
		:pid_40:reach_DATA_EXPIR_DM2 = false;
		:pid_40:reach_CTRL_EXPIR = false;
		:pid_40:seq_buff[0] = seq_buff[0]_1;
		:pid_40:seq_buff[1] = seq_buff[1]_1;
		:pid_40:i = i_1;
		:pid_40:localPC = true;
		:pid_40:localPtC = true;
		:pid_40:new_seq_buff = new_seq_buff_1;
		:pid_40:new_seq = new_seq_1;
		:pid_40:new_fragment = new_fragment_1;
		:pid_40:new_offset = new_offset_1;
		:pid_40:timeEmit = timeEmit_1;
		:pid_41:e = e_1;
		:pid_41:tau = tau_1;
		:pid_41:tau_l = tau_l_1;
		:pid_41:tau_h = tau_h_1;
		:pid_41:k = k_1;
		:pid_41:c = c_1;
		:pid_41:i = i_1;
		:pid_41:t = t_1;
		:pid_41:consistent = consistent_1;
		:pid_41:cl = 0;
		:pid_47:mySeq = 1;
		:pid_47:e = e_2;
		:pid_47:tau = tau_2;
		:pid_47:tau_l = tau_l_2;
		:pid_47:tau_h = tau_h_2;
		:pid_47:k = k_2;
		:pid_47:c = c_2;
		:pid_47:i = i_2;
		:pid_47:t = t_2;
		:pid_47:consistent = consistent_2;
		:pid_47:cl = 0;
		:pid_47:d.seq = d.seq_2;
		:pid_47:d.fragment = d.fragment_2;
		:pid_47:d.offset = d.offset_2;
		:pid_52:mySeq = 2;
		:pid_52:e = e_3;
		:pid_52:tau = tau_3;
		:pid_52:tau_l = tau_l_3;
		:pid_52:tau_h = tau_h_3;
		:pid_52:k = k_3;
		:pid_52:c = c_3;
		:pid_52:i = i_3;
		:pid_52:t = t_3;
		:pid_52:consistent = consistent_3;
		:pid_52:cl = 0;
		:pid_52:d.seq = d.seq_3;
		:pid_52:d.fragment = d.fragment_3;
		:pid_52:d.offset = d.offset_3;
		:pid_57:my_buff[0].seq = 0;
		:pid_57:my_buff[0].fragment = UNDEF_FRAGMENT;
		:pid_57:my_buff[0].offset = 0;
		:pid_57:my_buff[1].seq = 0;
		:pid_57:my_buff[1].fragment = UNDEF_FRAGMENT;
		:pid_57:my_buff[1].offset = 1;
		:pid_57:firmware[0] = UNDEF_FRAGMENT;
		:pid_57:firmware[1] = UNDEF_FRAGMENT;
		:pid_57:myseq_buff[0] = 0;
		:pid_57:myseq_buff[1] = 0;
		:pid_57:mydp_run[0] = false;
		:pid_57:mydp_run[1] = false;
		:pid_57:$time = 0;
		:pid_57:z = $delta#initial;
		:pid_57:localTime = 0;
		:pid_57:coverageProp1 = false;
		:pid_57:coverageProp2 = false;
		:pid_57:CM_zero_zero = false;
		:pid_57:CM_one_one = false;
		:pid_57:reach_DATA_EXPIR_DM1 = false;
		:pid_57:reach_DATA_EXPIR_DM2 = false;
		:pid_57:reach_CTRL_EXPIR = false;
		:pid_57:seq_buff[0] = seq_buff[0]_2;
		:pid_57:seq_buff[1] = seq_buff[1]_2;
		:pid_57:i = i_2;
		:pid_57:localPC = true;
		:pid_57:localPtC = true;
		:pid_57:new_seq_buff = new_seq_buff_2;
		:pid_57:new_seq = new_seq_2;
		:pid_57:new_fragment = new_fragment_2;
		:pid_57:new_offset = new_offset_2;
		:pid_57:timeEmit = timeEmit_2;
		:pid_58:e = e_2;
		:pid_58:tau = tau_2;
		:pid_58:tau_l = tau_l_2;
		:pid_58:tau_h = tau_h_2;
		:pid_58:k = k_2;
		:pid_58:c = c_2;
		:pid_58:i = i_2;
		:pid_58:t = t_2;
		:pid_58:consistent = consistent_2;
		:pid_58:cl = 0;
		:pid_64:mySeq = 1;
		:pid_64:e = e_4;
		:pid_64:tau = tau_4;
		:pid_64:tau_l = tau_l_4;
		:pid_64:tau_h = tau_h_4;
		:pid_64:k = k_4;
		:pid_64:c = c_4;
		:pid_64:i = i_4;
		:pid_64:t = t_4;
		:pid_64:consistent = consistent_4;
		:pid_64:cl = 0;
		:pid_64:d.seq = d.seq_4;
		:pid_64:d.fragment = d.fragment_4;
		:pid_64:d.offset = d.offset_4;
		:pid_69:mySeq = 2;
		:pid_69:e = e_5;
		:pid_69:tau = tau_5;
		:pid_69:tau_l = tau_l_5;
		:pid_69:tau_h = tau_h_5;
		:pid_69:k = k_5;
		:pid_69:c = c_5;
		:pid_69:i = i_5;
		:pid_69:t = t_5;
		:pid_69:consistent = consistent_5;
		:pid_69:cl = 0;
		:pid_69:d.seq = d.seq_5;
		:pid_69:d.fragment = d.fragment_5;
		:pid_69:d.offset = d.offset_5;
		:pid_74:my_buff[0].seq = 0;
		:pid_74:my_buff[0].fragment = UNDEF_FRAGMENT;
		:pid_74:my_buff[0].offset = 0;
		:pid_74:my_buff[1].seq = 0;
		:pid_74:my_buff[1].fragment = UNDEF_FRAGMENT;
		:pid_74:my_buff[1].offset = 1;
		:pid_74:firmware[0] = UNDEF_FRAGMENT;
		:pid_74:firmware[1] = UNDEF_FRAGMENT;
		:pid_74:myseq_buff[0] = 0;
		:pid_74:myseq_buff[1] = 0;
		:pid_74:mydp_run[0] = false;
		:pid_74:mydp_run[1] = false;
		:pid_74:$time = 0;
		:pid_74:z = $delta#initial;
		:pid_74:localTime = 0;
		:pid_74:coverageProp1 = false;
		:pid_74:coverageProp2 = false;
		:pid_74:CM_zero_zero = false;
		:pid_74:CM_one_one = false;
		:pid_74:reach_DATA_EXPIR_DM1 = false;
		:pid_74:reach_DATA_EXPIR_DM2 = false;
		:pid_74:reach_CTRL_EXPIR = false;
		:pid_74:seq_buff[0] = seq_buff[0]_3;
		:pid_74:seq_buff[1] = seq_buff[1]_3;
		:pid_74:i = i_3;
		:pid_74:localPC = true;
		:pid_74:localPtC = true;
		:pid_74:new_seq_buff = new_seq_buff_3;
		:pid_74:new_seq = new_seq_3;
		:pid_74:new_fragment = new_fragment_3;
		:pid_74:new_offset = new_offset_3;
		:pid_74:timeEmit = timeEmit_3;
		:pid_75:e = e_3;
		:pid_75:tau = tau_3;
		:pid_75:tau_l = tau_l_3;
		:pid_75:tau_h = tau_h_3;
		:pid_75:k = k_3;
		:pid_75:c = c_3;
		:pid_75:i = i_3;
		:pid_75:t = t_3;
		:pid_75:consistent = consistent_3;
		:pid_75:cl = 0;
		:pid_81:mySeq = 1;
		:pid_81:e = e_6;
		:pid_81:tau = tau_6;
		:pid_81:tau_l = tau_l_6;
		:pid_81:tau_h = tau_h_6;
		:pid_81:k = k_6;
		:pid_81:c = c_6;
		:pid_81:i = i_6;
		:pid_81:t = t_6;
		:pid_81:consistent = consistent_6;
		:pid_81:cl = 0;
		:pid_81:d.seq = d.seq_6;
		:pid_81:d.fragment = d.fragment_6;
		:pid_81:d.offset = d.offset_6;
		:pid_86:mySeq = 2;
		:pid_86:e = e_7;
		:pid_86:tau = tau_7;
		:pid_86:tau_l = tau_l_7;
		:pid_86:tau_h = tau_h_7;
		:pid_86:k = k_7;
		:pid_86:c = c_7;
		:pid_86:i = i_7;
		:pid_86:t = t_7;
		:pid_86:consistent = consistent_7;
		:pid_86:cl = 0;
		:pid_86:d.seq = d.seq_7;
		:pid_86:d.fragment = d.fragment_7;
		:pid_86:d.offset = d.offset_7;
	}
	BUFFER{
		:pid_23:bufferCM:<FIFO>#0{ }
		:pid_23:bufferDM1:<FIFO>#1{ }
		:pid_23:bufferDM2:<FIFO>#2{ }
		:pid_40:bufferCM:<FIFO>#0{ }
		:pid_40:bufferDM1:<FIFO>#1{ }
		:pid_40:bufferDM2:<FIFO>#2{ }
		:pid_57:bufferCM:<FIFO>#0{ }
		:pid_57:bufferDM1:<FIFO>#1{ }
		:pid_57:bufferDM2:<FIFO>#2{ }
		:pid_74:bufferCM:<FIFO>#0{ }
		:pid_74:bufferDM1:<FIFO>#1{ }
		:pid_74:bufferDM2:<FIFO>#2{ }
	}
}
