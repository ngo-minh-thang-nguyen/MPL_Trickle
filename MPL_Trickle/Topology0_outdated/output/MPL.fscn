EC:<Id:1;Ev:1;H:0;W:1>{ SC: ( pid_3:startup , ( pid_19:cp0_init , pid_25:dp0 , pid_30:dp0 ) , ( pid_36:cp0_init , pid_42:dp0 , pid_47:dp0 ) , ( pid_53:cp0_init , pid_59:dp0 , pid_64:dp0 ) )
	ALIAS{
		:ppid_-1:pid_0 = spec::Trickle;
		:ppid_-1:pid_1 = spec::Trickle;
		:ppid_1:pid_2 = spec::Trickle.Observer;
			DATA{
				:ppid_1:pid_2:uncoveredExit = spec::Trickle.Observer.uncoveredExit;
				:ppid_1:pid_2:mess = spec::Trickle.Observer.mess;
				:ppid_1:pid_2:seqBuff[0] = spec::Trickle.Observer.seqBuff;
				:ppid_1:pid_2:seqBuff[1] = spec::Trickle.Observer.seqBuff;
				:ppid_1:pid_2:dataMessage.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_2:dataMessage.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_2:dataMessage.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_2:pid_3 = spec::Trickle.Observer.startup;
		:ppid_2:pid_4 = spec::Trickle.Observer.o#0;
		:ppid_2:pid_5 = spec::Trickle.Observer.o#1;
		:ppid_2:pid_6 = spec::Trickle.Observer.o#2;
		:ppid_2:pid_7 = spec::Trickle.Observer.o#3;
		:ppid_2:pid_8 = spec::Trickle.Observer.o#4;
		:ppid_2:pid_9 = spec::Trickle.Observer.o#5;
		:ppid_2:pid_10 = spec::Trickle.Observer.o#6;
		:ppid_2:pid_11 = spec::Trickle.Observer.o#7;
		:ppid_2:pid_12 = spec::Trickle.Observer.o#8;
		:ppid_2:pid_13 = spec::Trickle.Observer.o#9;
		:ppid_2:pid_14 = spec::Trickle.Observer.o#10;
		:ppid_2:pid_15 = spec::Trickle.Observer.PASS;
		:ppid_2:pid_16 = spec::Trickle.Observer.FAILED;
		:ppid_1:pid_17 = run::Trickle.n1; // model is spec::Trickle.Node;
			BUFFER NUMBER = 1;
			/*BUFFER{
				:ppid_1:pid_17:bufferNode = spec::Trickle.Node.bufferNode;
			}*/
			DATA{
				:ppid_1:pid_17:my_buff[0].seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_17:my_buff[0].fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_17:my_buff[0].offset = spec::Trickle.DATA_MESSAGE.offset;
				:ppid_1:pid_17:my_buff[1].seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_17:my_buff[1].fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_17:my_buff[1].offset = spec::Trickle.DATA_MESSAGE.offset;
				:ppid_1:pid_17:firmware[0] = spec::Trickle.Node.firmware;
				:ppid_1:pid_17:firmware[1] = spec::Trickle.Node.firmware;
				:ppid_1:pid_17:myseq_buff[0] = spec::Trickle.Node.myseq_buff;
				:ppid_1:pid_17:myseq_buff[1] = spec::Trickle.Node.myseq_buff;
				:ppid_1:pid_17:mydp_run[0] = spec::Trickle.Node.mydp_run;
				:ppid_1:pid_17:mydp_run[1] = spec::Trickle.Node.mydp_run;
				:ppid_1:pid_17:node_time = spec::Trickle.Node.node_time;
				:ppid_1:pid_17:z = spec::Trickle.Node.z;
				:ppid_1:pid_17:localTime = spec::Trickle.Node.localTime;
				:ppid_1:pid_17:undef_DM1 = spec::Trickle.Node.undef_DM1;
				:ppid_1:pid_17:undef_DM2 = spec::Trickle.Node.undef_DM2;
				:ppid_1:pid_17:seq_buff[0] = spec::Trickle.Node.seq_buff;
				:ppid_1:pid_17:seq_buff[1] = spec::Trickle.Node.seq_buff;
				:ppid_1:pid_17:i = spec::Trickle.Node.i;
				:ppid_1:pid_17:localPC = spec::Trickle.Node.localPC;
				:ppid_1:pid_17:new_seq_buff = spec::Trickle.Node.new_seq_buff;
				:ppid_1:pid_17:new_seq = spec::Trickle.Node.new_seq;
				:ppid_1:pid_17:new_fragment = spec::Trickle.Node.new_fragment;
				:ppid_1:pid_17:new_offset = spec::Trickle.Node.new_offset;
				:ppid_1:pid_17:timeEmit = spec::Trickle.Node.timeEmit;
			}
			INTERFACE{
				:ppid_1:pid_17:ControlMsg = spec::Trickle.Node.ControlMsg;
				:ppid_1:pid_17:DataMsg1 = spec::Trickle.Node.DataMsg1;
				:ppid_1:pid_17:DataMsg2 = spec::Trickle.Node.DataMsg2;
				:ppid_1:pid_17:Log = spec::Trickle.Node.Log;
			}
		:ppid_17:pid_18 = spec::Trickle.Node.ControlProcess;
			DATA{
				:ppid_17:pid_18:e = spec::Trickle.Node.ControlProcess.e;
				:ppid_17:pid_18:tau = spec::Trickle.Node.ControlProcess.tau;
				:ppid_17:pid_18:tau_l = spec::Trickle.Node.ControlProcess.tau_l;
				:ppid_17:pid_18:tau_h = spec::Trickle.Node.ControlProcess.tau_h;
				:ppid_17:pid_18:k = spec::Trickle.Node.ControlProcess.k;
				:ppid_17:pid_18:c = spec::Trickle.Node.ControlProcess.c;
				:ppid_17:pid_18:i = spec::Trickle.Node.ControlProcess.i;
				:ppid_17:pid_18:t = spec::Trickle.Node.ControlProcess.t;
				:ppid_17:pid_18:consistent = spec::Trickle.Node.ControlProcess.consistent;
				:ppid_17:pid_18:cl = spec::Trickle.Node.ControlProcess.cl;
			}
		:ppid_18:pid_19 = spec::Trickle.Node.ControlProcess.cp0_init;
		:ppid_18:pid_20 = spec::Trickle.Node.ControlProcess.cp0;
		:ppid_18:pid_21 = spec::Trickle.Node.ControlProcess.cp1;
		:ppid_18:pid_22 = spec::Trickle.Node.ControlProcess.cp2;
		:ppid_18:pid_23 = spec::Trickle.Node.ControlProcess.cp3;
		:ppid_17:pid_24 = run::Trickle.n1.DataProcess1; // model is spec::Trickle.Node.DataProcess;
			DATA{
				:ppid_17:pid_24:mySeq = spec::Trickle.Node.DataProcess.mySeq;
				:ppid_17:pid_24:e = spec::Trickle.Node.DataProcess.e;
				:ppid_17:pid_24:tau = spec::Trickle.Node.DataProcess.tau;
				:ppid_17:pid_24:tau_l = spec::Trickle.Node.DataProcess.tau_l;
				:ppid_17:pid_24:tau_h = spec::Trickle.Node.DataProcess.tau_h;
				:ppid_17:pid_24:k = spec::Trickle.Node.DataProcess.k;
				:ppid_17:pid_24:c = spec::Trickle.Node.DataProcess.c;
				:ppid_17:pid_24:i = spec::Trickle.Node.DataProcess.i;
				:ppid_17:pid_24:t = spec::Trickle.Node.DataProcess.t;
				:ppid_17:pid_24:consistent = spec::Trickle.Node.DataProcess.consistent;
				:ppid_17:pid_24:cl = spec::Trickle.Node.DataProcess.cl;
				:ppid_17:pid_24:d.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_17:pid_24:d.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_17:pid_24:d.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_24:pid_25 = spec::Trickle.Node.DataProcess.dp0;
		:ppid_24:pid_26 = spec::Trickle.Node.DataProcess.dp1;
		:ppid_24:pid_27 = spec::Trickle.Node.DataProcess.dp2;
		:ppid_24:pid_28 = spec::Trickle.Node.DataProcess.dp3;
		:ppid_17:pid_29 = run::Trickle.n1.DataProcess2; // model is spec::Trickle.Node.DataProcess;
			DATA{
				:ppid_17:pid_29:mySeq = spec::Trickle.Node.DataProcess.mySeq;
				:ppid_17:pid_29:e = spec::Trickle.Node.DataProcess.e;
				:ppid_17:pid_29:tau = spec::Trickle.Node.DataProcess.tau;
				:ppid_17:pid_29:tau_l = spec::Trickle.Node.DataProcess.tau_l;
				:ppid_17:pid_29:tau_h = spec::Trickle.Node.DataProcess.tau_h;
				:ppid_17:pid_29:k = spec::Trickle.Node.DataProcess.k;
				:ppid_17:pid_29:c = spec::Trickle.Node.DataProcess.c;
				:ppid_17:pid_29:i = spec::Trickle.Node.DataProcess.i;
				:ppid_17:pid_29:t = spec::Trickle.Node.DataProcess.t;
				:ppid_17:pid_29:consistent = spec::Trickle.Node.DataProcess.consistent;
				:ppid_17:pid_29:cl = spec::Trickle.Node.DataProcess.cl;
				:ppid_17:pid_29:d.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_17:pid_29:d.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_17:pid_29:d.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_29:pid_30 = spec::Trickle.Node.DataProcess.dp0;
		:ppid_29:pid_31 = spec::Trickle.Node.DataProcess.dp1;
		:ppid_29:pid_32 = spec::Trickle.Node.DataProcess.dp2;
		:ppid_29:pid_33 = spec::Trickle.Node.DataProcess.dp3;
		:ppid_1:pid_34 = run::Trickle.n2; // model is spec::Trickle.Node;
			BUFFER NUMBER = 1;
			/*BUFFER{
				:ppid_1:pid_34:bufferNode = spec::Trickle.Node.bufferNode;
			}*/
			DATA{
				:ppid_1:pid_34:my_buff[0].seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_34:my_buff[0].fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_34:my_buff[0].offset = spec::Trickle.DATA_MESSAGE.offset;
				:ppid_1:pid_34:my_buff[1].seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_34:my_buff[1].fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_34:my_buff[1].offset = spec::Trickle.DATA_MESSAGE.offset;
				:ppid_1:pid_34:firmware[0] = spec::Trickle.Node.firmware;
				:ppid_1:pid_34:firmware[1] = spec::Trickle.Node.firmware;
				:ppid_1:pid_34:myseq_buff[0] = spec::Trickle.Node.myseq_buff;
				:ppid_1:pid_34:myseq_buff[1] = spec::Trickle.Node.myseq_buff;
				:ppid_1:pid_34:mydp_run[0] = spec::Trickle.Node.mydp_run;
				:ppid_1:pid_34:mydp_run[1] = spec::Trickle.Node.mydp_run;
				:ppid_1:pid_34:node_time = spec::Trickle.Node.node_time;
				:ppid_1:pid_34:z = spec::Trickle.Node.z;
				:ppid_1:pid_34:localTime = spec::Trickle.Node.localTime;
				:ppid_1:pid_34:undef_DM1 = spec::Trickle.Node.undef_DM1;
				:ppid_1:pid_34:undef_DM2 = spec::Trickle.Node.undef_DM2;
				:ppid_1:pid_34:seq_buff[0] = spec::Trickle.Node.seq_buff;
				:ppid_1:pid_34:seq_buff[1] = spec::Trickle.Node.seq_buff;
				:ppid_1:pid_34:i = spec::Trickle.Node.i;
				:ppid_1:pid_34:localPC = spec::Trickle.Node.localPC;
				:ppid_1:pid_34:new_seq_buff = spec::Trickle.Node.new_seq_buff;
				:ppid_1:pid_34:new_seq = spec::Trickle.Node.new_seq;
				:ppid_1:pid_34:new_fragment = spec::Trickle.Node.new_fragment;
				:ppid_1:pid_34:new_offset = spec::Trickle.Node.new_offset;
				:ppid_1:pid_34:timeEmit = spec::Trickle.Node.timeEmit;
			}
			INTERFACE{
				:ppid_1:pid_34:ControlMsg = spec::Trickle.Node.ControlMsg;
				:ppid_1:pid_34:DataMsg1 = spec::Trickle.Node.DataMsg1;
				:ppid_1:pid_34:DataMsg2 = spec::Trickle.Node.DataMsg2;
				:ppid_1:pid_34:Log = spec::Trickle.Node.Log;
			}
		:ppid_34:pid_35 = spec::Trickle.Node.ControlProcess;
			DATA{
				:ppid_34:pid_35:e = spec::Trickle.Node.ControlProcess.e;
				:ppid_34:pid_35:tau = spec::Trickle.Node.ControlProcess.tau;
				:ppid_34:pid_35:tau_l = spec::Trickle.Node.ControlProcess.tau_l;
				:ppid_34:pid_35:tau_h = spec::Trickle.Node.ControlProcess.tau_h;
				:ppid_34:pid_35:k = spec::Trickle.Node.ControlProcess.k;
				:ppid_34:pid_35:c = spec::Trickle.Node.ControlProcess.c;
				:ppid_34:pid_35:i = spec::Trickle.Node.ControlProcess.i;
				:ppid_34:pid_35:t = spec::Trickle.Node.ControlProcess.t;
				:ppid_34:pid_35:consistent = spec::Trickle.Node.ControlProcess.consistent;
				:ppid_34:pid_35:cl = spec::Trickle.Node.ControlProcess.cl;
			}
		:ppid_35:pid_36 = spec::Trickle.Node.ControlProcess.cp0_init;
		:ppid_35:pid_37 = spec::Trickle.Node.ControlProcess.cp0;
		:ppid_35:pid_38 = spec::Trickle.Node.ControlProcess.cp1;
		:ppid_35:pid_39 = spec::Trickle.Node.ControlProcess.cp2;
		:ppid_35:pid_40 = spec::Trickle.Node.ControlProcess.cp3;
		:ppid_34:pid_41 = run::Trickle.n2.DataProcess1; // model is spec::Trickle.Node.DataProcess;
			DATA{
				:ppid_34:pid_41:mySeq = spec::Trickle.Node.DataProcess.mySeq;
				:ppid_34:pid_41:e = spec::Trickle.Node.DataProcess.e;
				:ppid_34:pid_41:tau = spec::Trickle.Node.DataProcess.tau;
				:ppid_34:pid_41:tau_l = spec::Trickle.Node.DataProcess.tau_l;
				:ppid_34:pid_41:tau_h = spec::Trickle.Node.DataProcess.tau_h;
				:ppid_34:pid_41:k = spec::Trickle.Node.DataProcess.k;
				:ppid_34:pid_41:c = spec::Trickle.Node.DataProcess.c;
				:ppid_34:pid_41:i = spec::Trickle.Node.DataProcess.i;
				:ppid_34:pid_41:t = spec::Trickle.Node.DataProcess.t;
				:ppid_34:pid_41:consistent = spec::Trickle.Node.DataProcess.consistent;
				:ppid_34:pid_41:cl = spec::Trickle.Node.DataProcess.cl;
				:ppid_34:pid_41:d.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_34:pid_41:d.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_34:pid_41:d.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_41:pid_42 = spec::Trickle.Node.DataProcess.dp0;
		:ppid_41:pid_43 = spec::Trickle.Node.DataProcess.dp1;
		:ppid_41:pid_44 = spec::Trickle.Node.DataProcess.dp2;
		:ppid_41:pid_45 = spec::Trickle.Node.DataProcess.dp3;
		:ppid_34:pid_46 = run::Trickle.n2.DataProcess2; // model is spec::Trickle.Node.DataProcess;
			DATA{
				:ppid_34:pid_46:mySeq = spec::Trickle.Node.DataProcess.mySeq;
				:ppid_34:pid_46:e = spec::Trickle.Node.DataProcess.e;
				:ppid_34:pid_46:tau = spec::Trickle.Node.DataProcess.tau;
				:ppid_34:pid_46:tau_l = spec::Trickle.Node.DataProcess.tau_l;
				:ppid_34:pid_46:tau_h = spec::Trickle.Node.DataProcess.tau_h;
				:ppid_34:pid_46:k = spec::Trickle.Node.DataProcess.k;
				:ppid_34:pid_46:c = spec::Trickle.Node.DataProcess.c;
				:ppid_34:pid_46:i = spec::Trickle.Node.DataProcess.i;
				:ppid_34:pid_46:t = spec::Trickle.Node.DataProcess.t;
				:ppid_34:pid_46:consistent = spec::Trickle.Node.DataProcess.consistent;
				:ppid_34:pid_46:cl = spec::Trickle.Node.DataProcess.cl;
				:ppid_34:pid_46:d.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_34:pid_46:d.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_34:pid_46:d.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_46:pid_47 = spec::Trickle.Node.DataProcess.dp0;
		:ppid_46:pid_48 = spec::Trickle.Node.DataProcess.dp1;
		:ppid_46:pid_49 = spec::Trickle.Node.DataProcess.dp2;
		:ppid_46:pid_50 = spec::Trickle.Node.DataProcess.dp3;
		:ppid_1:pid_51 = run::Trickle.n3; // model is spec::Trickle.Node;
			BUFFER NUMBER = 1;
			/*BUFFER{
				:ppid_1:pid_51:bufferNode = spec::Trickle.Node.bufferNode;
			}*/
			DATA{
				:ppid_1:pid_51:my_buff[0].seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_51:my_buff[0].fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_51:my_buff[0].offset = spec::Trickle.DATA_MESSAGE.offset;
				:ppid_1:pid_51:my_buff[1].seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_51:my_buff[1].fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_51:my_buff[1].offset = spec::Trickle.DATA_MESSAGE.offset;
				:ppid_1:pid_51:firmware[0] = spec::Trickle.Node.firmware;
				:ppid_1:pid_51:firmware[1] = spec::Trickle.Node.firmware;
				:ppid_1:pid_51:myseq_buff[0] = spec::Trickle.Node.myseq_buff;
				:ppid_1:pid_51:myseq_buff[1] = spec::Trickle.Node.myseq_buff;
				:ppid_1:pid_51:mydp_run[0] = spec::Trickle.Node.mydp_run;
				:ppid_1:pid_51:mydp_run[1] = spec::Trickle.Node.mydp_run;
				:ppid_1:pid_51:node_time = spec::Trickle.Node.node_time;
				:ppid_1:pid_51:z = spec::Trickle.Node.z;
				:ppid_1:pid_51:localTime = spec::Trickle.Node.localTime;
				:ppid_1:pid_51:undef_DM1 = spec::Trickle.Node.undef_DM1;
				:ppid_1:pid_51:undef_DM2 = spec::Trickle.Node.undef_DM2;
				:ppid_1:pid_51:seq_buff[0] = spec::Trickle.Node.seq_buff;
				:ppid_1:pid_51:seq_buff[1] = spec::Trickle.Node.seq_buff;
				:ppid_1:pid_51:i = spec::Trickle.Node.i;
				:ppid_1:pid_51:localPC = spec::Trickle.Node.localPC;
				:ppid_1:pid_51:new_seq_buff = spec::Trickle.Node.new_seq_buff;
				:ppid_1:pid_51:new_seq = spec::Trickle.Node.new_seq;
				:ppid_1:pid_51:new_fragment = spec::Trickle.Node.new_fragment;
				:ppid_1:pid_51:new_offset = spec::Trickle.Node.new_offset;
				:ppid_1:pid_51:timeEmit = spec::Trickle.Node.timeEmit;
			}
			INTERFACE{
				:ppid_1:pid_51:ControlMsg = spec::Trickle.Node.ControlMsg;
				:ppid_1:pid_51:DataMsg1 = spec::Trickle.Node.DataMsg1;
				:ppid_1:pid_51:DataMsg2 = spec::Trickle.Node.DataMsg2;
				:ppid_1:pid_51:Log = spec::Trickle.Node.Log;
			}
		:ppid_51:pid_52 = spec::Trickle.Node.ControlProcess;
			DATA{
				:ppid_51:pid_52:e = spec::Trickle.Node.ControlProcess.e;
				:ppid_51:pid_52:tau = spec::Trickle.Node.ControlProcess.tau;
				:ppid_51:pid_52:tau_l = spec::Trickle.Node.ControlProcess.tau_l;
				:ppid_51:pid_52:tau_h = spec::Trickle.Node.ControlProcess.tau_h;
				:ppid_51:pid_52:k = spec::Trickle.Node.ControlProcess.k;
				:ppid_51:pid_52:c = spec::Trickle.Node.ControlProcess.c;
				:ppid_51:pid_52:i = spec::Trickle.Node.ControlProcess.i;
				:ppid_51:pid_52:t = spec::Trickle.Node.ControlProcess.t;
				:ppid_51:pid_52:consistent = spec::Trickle.Node.ControlProcess.consistent;
				:ppid_51:pid_52:cl = spec::Trickle.Node.ControlProcess.cl;
			}
		:ppid_52:pid_53 = spec::Trickle.Node.ControlProcess.cp0_init;
		:ppid_52:pid_54 = spec::Trickle.Node.ControlProcess.cp0;
		:ppid_52:pid_55 = spec::Trickle.Node.ControlProcess.cp1;
		:ppid_52:pid_56 = spec::Trickle.Node.ControlProcess.cp2;
		:ppid_52:pid_57 = spec::Trickle.Node.ControlProcess.cp3;
		:ppid_51:pid_58 = run::Trickle.n3.DataProcess1; // model is spec::Trickle.Node.DataProcess;
			DATA{
				:ppid_51:pid_58:mySeq = spec::Trickle.Node.DataProcess.mySeq;
				:ppid_51:pid_58:e = spec::Trickle.Node.DataProcess.e;
				:ppid_51:pid_58:tau = spec::Trickle.Node.DataProcess.tau;
				:ppid_51:pid_58:tau_l = spec::Trickle.Node.DataProcess.tau_l;
				:ppid_51:pid_58:tau_h = spec::Trickle.Node.DataProcess.tau_h;
				:ppid_51:pid_58:k = spec::Trickle.Node.DataProcess.k;
				:ppid_51:pid_58:c = spec::Trickle.Node.DataProcess.c;
				:ppid_51:pid_58:i = spec::Trickle.Node.DataProcess.i;
				:ppid_51:pid_58:t = spec::Trickle.Node.DataProcess.t;
				:ppid_51:pid_58:consistent = spec::Trickle.Node.DataProcess.consistent;
				:ppid_51:pid_58:cl = spec::Trickle.Node.DataProcess.cl;
				:ppid_51:pid_58:d.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_51:pid_58:d.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_51:pid_58:d.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_58:pid_59 = spec::Trickle.Node.DataProcess.dp0;
		:ppid_58:pid_60 = spec::Trickle.Node.DataProcess.dp1;
		:ppid_58:pid_61 = spec::Trickle.Node.DataProcess.dp2;
		:ppid_58:pid_62 = spec::Trickle.Node.DataProcess.dp3;
		:ppid_51:pid_63 = run::Trickle.n3.DataProcess2; // model is spec::Trickle.Node.DataProcess;
			DATA{
				:ppid_51:pid_63:mySeq = spec::Trickle.Node.DataProcess.mySeq;
				:ppid_51:pid_63:e = spec::Trickle.Node.DataProcess.e;
				:ppid_51:pid_63:tau = spec::Trickle.Node.DataProcess.tau;
				:ppid_51:pid_63:tau_l = spec::Trickle.Node.DataProcess.tau_l;
				:ppid_51:pid_63:tau_h = spec::Trickle.Node.DataProcess.tau_h;
				:ppid_51:pid_63:k = spec::Trickle.Node.DataProcess.k;
				:ppid_51:pid_63:c = spec::Trickle.Node.DataProcess.c;
				:ppid_51:pid_63:i = spec::Trickle.Node.DataProcess.i;
				:ppid_51:pid_63:t = spec::Trickle.Node.DataProcess.t;
				:ppid_51:pid_63:consistent = spec::Trickle.Node.DataProcess.consistent;
				:ppid_51:pid_63:cl = spec::Trickle.Node.DataProcess.cl;
				:ppid_51:pid_63:d.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_51:pid_63:d.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_51:pid_63:d.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_63:pid_64 = spec::Trickle.Node.DataProcess.dp0;
		:ppid_63:pid_65 = spec::Trickle.Node.DataProcess.dp1;
		:ppid_63:pid_66 = spec::Trickle.Node.DataProcess.dp2;
		:ppid_63:pid_67 = spec::Trickle.Node.DataProcess.dp3;
	}
	PC: true
	PtC: true
	DATA{
		:pid_2:uncoveredExit = 0;
		:pid_2:mess = mess_0;
		:pid_2:seqBuff[0] = seqBuff[0]_0;
		:pid_2:seqBuff[1] = seqBuff[1]_0;
		:pid_2:dataMessage.seq = dataMessage.seq_0;
		:pid_2:dataMessage.fragment = dataMessage.fragment_0;
		:pid_2:dataMessage.offset = dataMessage.offset_0;
		:pid_17:my_buff[0].seq = 1;
		:pid_17:my_buff[0].fragment = FRAGMENT_0;
		:pid_17:my_buff[0].offset = 0;
		:pid_17:my_buff[1].seq = 2;
		:pid_17:my_buff[1].fragment = FRAGMENT_1;
		:pid_17:my_buff[1].offset = 1;
		:pid_17:firmware[0] = FRAGMENT_0;
		:pid_17:firmware[1] = FRAGMENT_1;
		:pid_17:myseq_buff[0] = 1;
		:pid_17:myseq_buff[1] = 1;
		:pid_17:mydp_run[0] = true;
		:pid_17:mydp_run[1] = true;
		:pid_17:node_time = 0;
		:pid_17:z = $delta#initial;
		:pid_17:localTime = 0;
		:pid_17:undef_DM1 = false;
		:pid_17:undef_DM2 = false;
		:pid_17:seq_buff[0] = seq_buff[0]_0;
		:pid_17:seq_buff[1] = seq_buff[1]_0;
		:pid_17:i = i_0;
		:pid_17:localPC = true;
		:pid_17:new_seq_buff = new_seq_buff_0;
		:pid_17:new_seq = new_seq_0;
		:pid_17:new_fragment = new_fragment_0;
		:pid_17:new_offset = new_offset_0;
		:pid_17:timeEmit = timeEmit_0;
		:pid_18:e = e_0;
		:pid_18:tau = tau_0;
		:pid_18:tau_l = tau_l_0;
		:pid_18:tau_h = tau_h_0;
		:pid_18:k = k_0;
		:pid_18:c = c_0;
		:pid_18:i = i_0;
		:pid_18:t = t_0;
		:pid_18:consistent = consistent_0;
		:pid_18:cl = 0;
		:pid_24:mySeq = 1;
		:pid_24:e = e_0;
		:pid_24:tau = tau_0;
		:pid_24:tau_l = tau_l_0;
		:pid_24:tau_h = tau_h_0;
		:pid_24:k = k_0;
		:pid_24:c = c_0;
		:pid_24:i = i_0;
		:pid_24:t = t_0;
		:pid_24:consistent = consistent_0;
		:pid_24:cl = 0;
		:pid_24:d.seq = d.seq_0;
		:pid_24:d.fragment = d.fragment_0;
		:pid_24:d.offset = d.offset_0;
		:pid_29:mySeq = 2;
		:pid_29:e = e_1;
		:pid_29:tau = tau_1;
		:pid_29:tau_l = tau_l_1;
		:pid_29:tau_h = tau_h_1;
		:pid_29:k = k_1;
		:pid_29:c = c_1;
		:pid_29:i = i_1;
		:pid_29:t = t_1;
		:pid_29:consistent = consistent_1;
		:pid_29:cl = 0;
		:pid_29:d.seq = d.seq_1;
		:pid_29:d.fragment = d.fragment_1;
		:pid_29:d.offset = d.offset_1;
		:pid_34:my_buff[0].seq = 0;
		:pid_34:my_buff[0].fragment = UNDEF_FRAGMENT;
		:pid_34:my_buff[0].offset = 0;
		:pid_34:my_buff[1].seq = 0;
		:pid_34:my_buff[1].fragment = UNDEF_FRAGMENT;
		:pid_34:my_buff[1].offset = 1;
		:pid_34:firmware[0] = UNDEF_FRAGMENT;
		:pid_34:firmware[1] = UNDEF_FRAGMENT;
		:pid_34:myseq_buff[0] = 0;
		:pid_34:myseq_buff[1] = 0;
		:pid_34:mydp_run[0] = false;
		:pid_34:mydp_run[1] = false;
		:pid_34:node_time = 0;
		:pid_34:z = $delta#initial;
		:pid_34:localTime = 0;
		:pid_34:undef_DM1 = false;
		:pid_34:undef_DM2 = false;
		:pid_34:seq_buff[0] = seq_buff[0]_1;
		:pid_34:seq_buff[1] = seq_buff[1]_1;
		:pid_34:i = i_1;
		:pid_34:localPC = true;
		:pid_34:new_seq_buff = new_seq_buff_1;
		:pid_34:new_seq = new_seq_1;
		:pid_34:new_fragment = new_fragment_1;
		:pid_34:new_offset = new_offset_1;
		:pid_34:timeEmit = timeEmit_1;
		:pid_35:e = e_1;
		:pid_35:tau = tau_1;
		:pid_35:tau_l = tau_l_1;
		:pid_35:tau_h = tau_h_1;
		:pid_35:k = k_1;
		:pid_35:c = c_1;
		:pid_35:i = i_1;
		:pid_35:t = t_1;
		:pid_35:consistent = consistent_1;
		:pid_35:cl = 0;
		:pid_41:mySeq = 1;
		:pid_41:e = e_2;
		:pid_41:tau = tau_2;
		:pid_41:tau_l = tau_l_2;
		:pid_41:tau_h = tau_h_2;
		:pid_41:k = k_2;
		:pid_41:c = c_2;
		:pid_41:i = i_2;
		:pid_41:t = t_2;
		:pid_41:consistent = consistent_2;
		:pid_41:cl = 0;
		:pid_41:d.seq = d.seq_2;
		:pid_41:d.fragment = d.fragment_2;
		:pid_41:d.offset = d.offset_2;
		:pid_46:mySeq = 2;
		:pid_46:e = e_3;
		:pid_46:tau = tau_3;
		:pid_46:tau_l = tau_l_3;
		:pid_46:tau_h = tau_h_3;
		:pid_46:k = k_3;
		:pid_46:c = c_3;
		:pid_46:i = i_3;
		:pid_46:t = t_3;
		:pid_46:consistent = consistent_3;
		:pid_46:cl = 0;
		:pid_46:d.seq = d.seq_3;
		:pid_46:d.fragment = d.fragment_3;
		:pid_46:d.offset = d.offset_3;
		:pid_51:my_buff[0].seq = 0;
		:pid_51:my_buff[0].fragment = UNDEF_FRAGMENT;
		:pid_51:my_buff[0].offset = 0;
		:pid_51:my_buff[1].seq = 0;
		:pid_51:my_buff[1].fragment = UNDEF_FRAGMENT;
		:pid_51:my_buff[1].offset = 1;
		:pid_51:firmware[0] = UNDEF_FRAGMENT;
		:pid_51:firmware[1] = UNDEF_FRAGMENT;
		:pid_51:myseq_buff[0] = 0;
		:pid_51:myseq_buff[1] = 0;
		:pid_51:mydp_run[0] = false;
		:pid_51:mydp_run[1] = false;
		:pid_51:node_time = 0;
		:pid_51:z = $delta#initial;
		:pid_51:localTime = 0;
		:pid_51:undef_DM1 = false;
		:pid_51:undef_DM2 = false;
		:pid_51:seq_buff[0] = seq_buff[0]_2;
		:pid_51:seq_buff[1] = seq_buff[1]_2;
		:pid_51:i = i_2;
		:pid_51:localPC = true;
		:pid_51:new_seq_buff = new_seq_buff_2;
		:pid_51:new_seq = new_seq_2;
		:pid_51:new_fragment = new_fragment_2;
		:pid_51:new_offset = new_offset_2;
		:pid_51:timeEmit = timeEmit_2;
		:pid_52:e = e_2;
		:pid_52:tau = tau_2;
		:pid_52:tau_l = tau_l_2;
		:pid_52:tau_h = tau_h_2;
		:pid_52:k = k_2;
		:pid_52:c = c_2;
		:pid_52:i = i_2;
		:pid_52:t = t_2;
		:pid_52:consistent = consistent_2;
		:pid_52:cl = 0;
		:pid_58:mySeq = 1;
		:pid_58:e = e_4;
		:pid_58:tau = tau_4;
		:pid_58:tau_l = tau_l_4;
		:pid_58:tau_h = tau_h_4;
		:pid_58:k = k_4;
		:pid_58:c = c_4;
		:pid_58:i = i_4;
		:pid_58:t = t_4;
		:pid_58:consistent = consistent_4;
		:pid_58:cl = 0;
		:pid_58:d.seq = d.seq_4;
		:pid_58:d.fragment = d.fragment_4;
		:pid_58:d.offset = d.offset_4;
		:pid_63:mySeq = 2;
		:pid_63:e = e_5;
		:pid_63:tau = tau_5;
		:pid_63:tau_l = tau_l_5;
		:pid_63:tau_h = tau_h_5;
		:pid_63:k = k_5;
		:pid_63:c = c_5;
		:pid_63:i = i_5;
		:pid_63:t = t_5;
		:pid_63:consistent = consistent_5;
		:pid_63:cl = 0;
		:pid_63:d.seq = d.seq_5;
		:pid_63:d.fragment = d.fragment_5;
		:pid_63:d.offset = d.offset_5;
	}
	BUFFER{
		:pid_17:bufferNode:<FIFO>#0{ }
		:pid_34:bufferNode:<FIFO>#0{ }
		:pid_51:bufferNode:<FIFO>#0{ }
	}
	EC:<Id:2;Ev:2;H:1;W:1>{ SC: ( pid_4:o#0 , ( pid_20:cp0 , pid_25:dp0 , pid_30:dp0 ) , ( pid_37:cp0 , pid_42:dp0 , pid_47:dp0 ) , ( pid_54:cp0 , pid_59:dp0 , pid_64:dp0 ) )
		EXE: { |,| { |;| (:pid_53 , run) (:pid_53 , cp_init) } { |;| (:pid_36 , 
	run) (:pid_36 , cp_init) } { |;| (:pid_19 , run) (:pid_19 , cp_init) } { |;| 
	(:pid_3 , run) (:pid_3 , o_startup) } }
		TRACE: { |,| (:pid_51 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_2 }) (:pid_34 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_1 }) (:pid_17 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_0 }) }
		PC: ((z_0 > 0) && (z_1 > 0) && (z_2 > 0))
		DATA{
			:pid_2:uncoveredExit = 0;
			:pid_17:z = z_0;
			:pid_17:localTime = z_0;
			:pid_17:localPC = (z_0 > 0);
			:pid_18:tau_l = 4;
			:pid_18:tau_h = 8;
			:pid_18:k = 2;
			:pid_34:z = z_1;
			:pid_34:localTime = z_1;
			:pid_34:localPC = (z_1 > 0);
			:pid_35:tau_l = 4;
			:pid_35:tau_h = 8;
			:pid_35:k = 2;
			:pid_51:z = z_2;
			:pid_51:localTime = z_2;
			:pid_51:localPC = (z_2 > 0);
			:pid_52:tau_l = 4;
			:pid_52:tau_h = 8;
			:pid_52:k = 2;
		}
		EC:<Id:5;Ev:3;H:2;W:3>{ SC: ( pid_5:o#1 , ( pid_21:cp1 , pid_25:dp0 , pid_30:dp0 ) , ( pid_37:cp0 , pid_42:dp0 , pid_47:dp0 ) , ( pid_54:cp0 , pid_59:dp0 , pid_64:dp0 ) )
			EXE: { |;| (:pid_17 , run) (:pid_18 , run) (:pid_20 , run) (:pid_20 
	, cp_init) (:pid_2 , run) (:pid_4 , run) (:pid_4 , n1_out_Log) }
			TRACE: { |;| (:pid_17 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_3 }) (:pid_20 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_3 }) 
	(:pid_20 , ${ output#env inst::Trickle.Node.Log 0 ${ + param::Trickle.Node.z_0 
	param::Trickle.Node.z_3 } } @ z_3) }
			/*FLAGS{ COVERAGE-ELEMENT }*/
			INFO{
				<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#1->run::pid_5:Trickle.Observer.o#1->prot::Trickle.Observer.o#1" as trace="tpid#1->run::pid_5:Trickle.Observer.o#1->prot::Trickle.Observer.o#1">
			}
			PC: ((t_3 < 4) && (0 <= (t_3 + -2)) && (z_0 > 0) && (z_1 > 0) && (z_2 > 0))
			DATA{
				:pid_2:uncoveredExit = 0;
				:pid_2:mess = INIT;
				:pid_17:node_time = z_3;
				:pid_17:z = z_3;
				:pid_17:localTime = (z_0 + z_3);
				:pid_17:localPC = ((t_3 < 4) && (0 <= (t_3 + -2)) && (z_0 > 0));
				:pid_18:e = 0;
				:pid_18:tau = 4;
				:pid_18:c = 0;
				:pid_18:t = t_3;
				:pid_18:cl = 0;
				:pid_24:cl = z_3;
				:pid_29:cl = z_3;
			}
			EC:<Id:9;Ev:5;H:3;W:6>{ SC: ( pid_6:o#2 , ( pid_21:cp1 , pid_25:dp0 , pid_30:dp0 ) , ( pid_38:cp1 , pid_42:dp0 , pid_47:dp0 ) , ( pid_54:cp0 , pid_59:dp0 , pid_64:dp0 ) )
				EXE: { |;| (:pid_34 , run) (:pid_35 , run) (:pid_37 , run) 
	(:pid_37 , cp_init) (:pid_2 , run) (:pid_5 , run) (:pid_5 , n2_out_Log) }
				TRACE: { |;| (:pid_34 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_7 }) (:pid_37 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_6 }) 
	(:pid_37 , ${ output#env inst::Trickle.Node.Log 0 ${ + param::Trickle.Node.z_1 
	param::Trickle.Node.z_7 } } @ z_7) }
				/*FLAGS{ COVERAGE-ELEMENT }*/
				INFO{
					<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#2->run::pid_6:Trickle.Observer.o#2->prot::Trickle.Observer.o#2" as trace="tpid#2->run::pid_6:Trickle.Observer.o#2->prot::Trickle.Observer.o#2">
				}
				PC: ((t_3 < 4) && (t_6 < 4) && (0 <= (t_3 + -2)) && (0 <= (t_6 + -2)) && (z_0 > 0) 
	&& (z_1 > 0) && (z_2 > 0))
				DATA{
					:pid_2:uncoveredExit = 0;
					:pid_34:node_time = z_7;
					:pid_34:z = z_7;
					:pid_34:localTime = (z_1 + z_7);
					:pid_34:undef_DM1 = true;
					:pid_34:undef_DM2 = true;
					:pid_34:localPC = ((t_6 < 4) && (0 <= (t_6 + -2)) && (z_1 > 0));
					:pid_35:e = 0;
					:pid_35:tau = 4;
					:pid_35:c = 0;
					:pid_35:t = t_6;
					:pid_35:cl = 0;
					:pid_41:cl = z_7;
					:pid_46:cl = z_7;
				}
				EC:<Id:18;Ev:9;H:4;W:6>{ SC: ( pid_7:o#3 , ( pid_21:cp1 , pid_25:dp0 , pid_30:dp0 ) , ( pid_38:cp1 , pid_42:dp0 , pid_47:dp0 ) , ( pid_55:cp1 , pid_59:dp0 , pid_64:dp0 ) )
					EXE: { |;| (:pid_51 , run) (:pid_52 , run) (:pid_54 , run) 
	(:pid_54 , cp_init) (:pid_2 , run) (:pid_6 , run) (:pid_6 , n3_out_Log) }
					TRACE: { |;| (:pid_51 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_14 }) (:pid_54 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_9 }) 
	(:pid_54 , ${ output#env inst::Trickle.Node.Log 0 ${ + param::Trickle.Node.z_14 
	param::Trickle.Node.z_2 } } @ z_14) }
					/*FLAGS{ COVERAGE-ELEMENT }*/
					INFO{
						<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#3->run::pid_7:Trickle.Observer.o#3->prot::Trickle.Observer.o#3" as trace="tpid#3->run::pid_7:Trickle.Observer.o#3->prot::Trickle.Observer.o#3">
					}
					PC: ((t_3 < 4) && (t_6 < 4) && (t_9 < 4) && (0 <= (t_3 + -2)) && (0 <= (t_6 + -2)) 
	&& (0 <= (t_9 + -2)) && (z_0 > 0) && (z_1 > 0) && (z_2 > 0))
					DATA{
						:pid_2:uncoveredExit = 0;
						:pid_51:node_time = z_14;
						:pid_51:z = z_14;
						:pid_51:localTime = (z_14 + z_2);
						:pid_51:undef_DM1 = true;
						:pid_51:undef_DM2 = true;
						:pid_51:localPC = ((t_9 < 4) && (0 <= (t_9 + -2)) && (z_2 > 0));
						:pid_52:e = 0;
						:pid_52:tau = 4;
						:pid_52:c = 0;
						:pid_52:t = t_9;
						:pid_52:cl = 0;
						:pid_58:cl = z_14;
						:pid_63:cl = z_14;
					}
					EC:<Id:40;Ev:12;H:5;W:31>{ SC: ( pid_8:o#4 , ( pid_22:cp2 , pid_25:dp0 , pid_30:dp0 ) , ( pid_38:cp1 , pid_42:dp0 , pid_47:dp0 ) , ( pid_55:cp1 , pid_59:dp0 , pid_64:dp0 ) )
						EXE: { |;| (:pid_17 , run) (:pid_18 , run) (:pid_21 , 
	run) (:pid_21 , cp_sendCM) (:pid_2 , run) (:pid_7 , run) (:pid_7 , n1_out_CM) }
						TRACE: { |;| (:pid_17 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_24 }) (:pid_21 , ${ output inst::Trickle.Node.ControlMsg [ 
	1 , 1 ] ${ + param::Trickle.Node.z_0 param::Trickle.Node.z_24 
	param::Trickle.Node.z_3 } } @ (z_24 + z_3)) }
						/*FLAGS{ COVERAGE-ELEMENT }*/
						INFO{
							<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#4->run::pid_8:Trickle.Observer.o#4->prot::Trickle.Observer.o#4" as trace="tpid#4->run::pid_8:Trickle.Observer.o#4->prot::Trickle.Observer.o#4">
						}
						PC: ((z_24 == t_3) && (t_3 < 4) && (t_6 < 4) && (t_9 < 4) && (0 <= (t_3 + -2)) && (0 
	<= (t_6 + -2)) && (0 <= (t_9 + -2)) && (z_0 > 0) && (z_1 > 0) && (z_2 > 0) && 
	(z_3 > 0))
						DATA{
							:pid_2:uncoveredExit = 0;
							:pid_2:seqBuff[0] = 1;
							:pid_2:seqBuff[1] = 1;
							:pid_17:node_time = (z_24 + z_3);
							:pid_17:z = z_24;
							:pid_17:localTime = (z_0 + z_24 + z_3);
							:pid_17:localPC = ((z_24 == t_3) && (t_3 < 4) && (0 <= (t_3 + -2)) && (z_0 > 0) && (z_3 > 0));
							:pid_18:cl = z_24;
							:pid_24:cl = (z_24 + z_3);
							:pid_29:cl = (z_24 + z_3);
						}
						BUFFER{
							:pid_34:bufferNode:<FIFO>#0{
								:pid_17:ControlMsg([ 1 , 1 ] , (z_0 + z_24 + z_3));
							}
							:pid_51:bufferNode:<FIFO>#0{
								:pid_17:ControlMsg([ 1 , 1 ] , (z_0 + z_24 + z_3));
							}
						}
						EC:<Id:59;Ev:15;H:6;W:47>{ SC: ( pid_9:o#5 , ( pid_22:cp2 , pid_25:dp0 , pid_30:dp0 ) , ( pid_38:cp1 , pid_42:dp0 , pid_47:dp0 ) , ( pid_55:cp1 , pid_59:dp0 , pid_64:dp0 ) )
							EXE: { |;| (:pid_34 , run) (:pid_35 , run) (:pid_38 
	, run) (:pid_38 , cp1_receiveCM_inconsistent) (:pid_2 , run) (:pid_8 , run) 
	(:pid_8 , n2_in_CM) }
							TRACE: { |;| (:pid_34 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_34 }) (:pid_38 , ${ input 
	inst::Trickle.Node.ControlMsg [ 1 , 1 ] ${ + param::Trickle.Node.z_0 
	param::Trickle.Node.z_24 param::Trickle.Node.z_3 } } @ (z_34 + z_7)) (:pid_38 , 
	${ newfresh inst::Trickle.Node.ControlProcess.t 
	param::Trickle.Node.ControlProcess.t_21 }) }
							/*FLAGS{ COVERAGE-ELEMENT }*/
							INFO{
								<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#5->run::pid_9:Trickle.Observer.o#5->prot::Trickle.Observer.o#5" as trace="tpid#5->run::pid_9:Trickle.Observer.o#5->prot::Trickle.Observer.o#5">
							}
							PC: ((z_24 == t_3) && (t_21 < 4) && (t_3 < 4) && (t_6 < 4) && (t_9 < 4) && (z_34 < 
	t_6) && (0 <= (t_21 + -2)) && (0 <= (t_3 + -2)) && (0 <= (t_6 + -2)) && (0 <= 
	(t_9 + -2)) && ((z_0 + z_24 + z_3) <= (z_1 + z_34 + z_7)) && (z_0 > 0) && (z_1 > 
	0) && (z_2 > 0) && (z_3 > 0) && (z_7 > 0))
							DATA{
								:pid_2:uncoveredExit = 0;
								:pid_34:mydp_run[0] = true;
								:pid_34:mydp_run[1] = true;
								:pid_34:node_time = (z_34 + z_7);
								:pid_34:z = z_34;
								:pid_34:localTime = (z_1 + z_34 + z_7);
								:pid_34:seq_buff[0] = 1;
								:pid_34:seq_buff[1] = 1;
								:pid_34:localPC = ((t_21 < 4) && (t_6 < 4) && (z_34 < t_6) && (0 <= (t_21 + -2)) && (0 <= (t_6 + -2)) && ((z_0 + z_24 + z_3) <= (z_1 + z_34 + z_7)) && (z_1 > 0) && (z_7 > 0));
								:pid_34:timeEmit = (z_0 + z_24 + z_3);
								:pid_35:e = 0;
								:pid_35:c = 0;
								:pid_35:i = 2;
								:pid_35:t = t_21;
								:pid_35:consistent = false;
								:pid_35:cl = 0;
								:pid_41:cl = (z_34 + z_7);
								:pid_46:cl = (z_34 + z_7);
							}
							BUFFER{
								:pid_34:bufferNode:<FIFO>#0{ }
							}
							EC:<Id:75;Ev:18;H:7;W:60>{ SC: ( pid_9:o#5 , ( pid_22:cp2 , pid_25:dp0 , pid_30:dp0 ) , ( pid_39:cp2 , pid_42:dp0 , pid_47:dp0 ) , ( pid_55:cp1 , pid_59:dp0 , pid_64:dp0 ) )
								EXE: { |;| (:pid_34 , run) (:pid_35 , run) 
	(:pid_38 , run) (:pid_38 , cp_sendCM) (:pid_2 , run) }
								TRACE: { |;| (:pid_34 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_43 }) (:pid_38 , ${ output 
	inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + param::Trickle.Node.z_1 
	param::Trickle.Node.z_34 param::Trickle.Node.z_43 param::Trickle.Node.z_7 } } @ 
	(z_34 + z_43 + z_7)) }
								PC: ((z_24 == t_3) && (z_43 == t_21) && (t_21 < 4) && (t_3 < 4) && (t_6 < 4) && (t_9 
	< 4) && (z_34 < t_6) && (0 <= (t_21 + -2)) && (0 <= (t_3 + -2)) && (0 <= (t_6 + 
	-2)) && (0 <= (t_9 + -2)) && ((z_0 + z_24 + z_3) <= (z_1 + z_34 + z_7)) && (z_0 
	> 0) && (z_1 > 0) && (z_2 > 0) && (z_3 > 0) && (z_34 > 0) && (z_7 > 0))
								DATA{
									:pid_2:uncoveredExit = 1;
									:pid_34:node_time = (z_34 + z_43 + z_7);
									:pid_34:z = z_43;
									:pid_34:localTime = (z_1 + z_34 + z_43 + z_7);
									:pid_34:localPC = ((z_43 == t_21) && (t_21 < 4) && (t_6 < 4) && (z_34 < t_6) && (0 <= (t_21 + -2)) && (0 <= (t_6 + -2)) && ((z_0 + z_24 + z_3) <= (z_1 + z_34 + z_7)) && (z_1 > 0) && (z_34 > 0) && (z_7 > 0));
									:pid_35:cl = z_43;
									:pid_41:cl = (z_34 + z_43 + z_7);
									:pid_46:cl = (z_34 + z_43 + z_7);
								}
								BUFFER{
									:pid_51:bufferNode:<FIFO>#0{
										:pid_17:ControlMsg([ 1 , 1 ] , (z_0 + z_24 + z_3));
										:pid_34:ControlMsg([ 0 , 0 ] , (z_1 + z_34 + z_43 + z_7));
									}
								}
								EC:<Id:100;Ev:25;H:8;W:60>{ SC: ( pid_10:o#6 , ( pid_22:cp2 , pid_25:dp0 , pid_30:dp0 ) , ( pid_39:cp2 , pid_42:dp0 , pid_47:dp0 ) , ( pid_55:cp1 , pid_59:dp0 , pid_64:dp0 ) )
									EXE: { |;| (:pid_51 , run) (:pid_52 , run) 
	(:pid_55 , run) (:pid_55 , cp1_receiveCM_inconsistent) (:pid_2 , run) (:pid_9 , 
	run) (:pid_9 , n3_in_CM) }
									TRACE: { |;| (:pid_51 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_53 }) (:pid_55 , ${ input 
	inst::Trickle.Node.ControlMsg [ 1 , 1 ] ${ + param::Trickle.Node.z_0 
	param::Trickle.Node.z_24 param::Trickle.Node.z_3 } } @ (z_14 + z_53)) (:pid_55 , 
	${ newfresh inst::Trickle.Node.ControlProcess.t 
	param::Trickle.Node.ControlProcess.t_32 }) }
									/*FLAGS{ COVERAGE-ELEMENT }*/
									INFO{
										<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#6->run::pid_10:Trickle.Observer.o#6->prot::Trickle.Observer.o#6" as trace="tpid#6->run::pid_10:Trickle.Observer.o#6->prot::Trickle.Observer.o#6">
									}
									PC: ((z_24 == t_3) && (z_43 == t_21) && (t_21 < 4) && (t_3 < 4) && (t_32 < 4) && 
	(t_6 < 4) && (t_9 < 4) && (z_34 < t_6) && (z_53 < t_9) && (0 <= (t_21 + -2)) && 
	(0 <= (t_3 + -2)) && (0 <= (t_32 + -2)) && (0 <= (t_6 + -2)) && (0 <= (t_9 + -2))
	 && ((z_0 + z_24 + z_3) <= (z_1 + z_34 + z_7)) && ((z_0 + z_24 + z_3) <= (z_14 + 
	z_2 + z_53)) && (z_0 > 0) && (z_1 > 0) && (z_14 > 0) && (z_2 > 0) && (z_3 > 0) 
	&& (z_34 > 0) && (z_7 > 0))
									DATA{
										:pid_2:uncoveredExit = 0;
										:pid_51:mydp_run[0] = true;
										:pid_51:mydp_run[1] = true;
										:pid_51:node_time = (z_14 + z_53);
										:pid_51:z = z_53;
										:pid_51:localTime = (z_14 + z_2 + z_53);
										:pid_51:seq_buff[0] = 1;
										:pid_51:seq_buff[1] = 1;
										:pid_51:localPC = ((t_32 < 4) && (t_9 < 4) && (z_53 < t_9) && (0 <= (t_32 + -2)) && (0 <= (t_9 + -2)) && ((z_0 + z_24 + z_3) <= (z_14 + z_2 + z_53)) && (z_14 > 0) && (z_2 > 0));
										:pid_51:timeEmit = (z_0 + z_24 + z_3);
										:pid_52:e = 0;
										:pid_52:c = 0;
										:pid_52:i = 2;
										:pid_52:t = t_32;
										:pid_52:consistent = false;
										:pid_52:cl = 0;
										:pid_58:cl = (z_14 + z_53);
										:pid_63:cl = (z_14 + z_53);
									}
									BUFFER{
										:pid_51:bufferNode:<FIFO>#0{
											:pid_34:ControlMsg([ 0 , 0 ] , (z_1 + z_34 + z_43 + z_7));
										}
									}
									EC:<Id:166;Ev:44;H:9;W:141>{ SC: ( pid_10:o#6 , ( pid_22:cp2 , pid_26:dp1 , pid_30:dp0 ) , ( pid_39:cp2 , pid_42:dp0 , pid_47:dp0 ) , ( pid_55:cp1 , pid_59:dp0 , pid_64:dp0 ) )
										EXE: { |;| (:pid_17 , run) (:pid_24 , 
	run) (:pid_25 , run) (:pid_25 , dp_init) (:pid_2 , run) }
										TRACE: { |;| (:pid_17 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_72 }) (:pid_25 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_68 }) }
										PC: ((z_24 == t_3) && (z_43 == t_21) && (t_21 < 4) && (t_3 < 4) && (t_32 < 4) && 
	(t_6 < 4) && (t_9 < 4) && (t_68 < 4) && (z_34 < t_6) && (z_53 < t_9) && (0 <= 
	(t_21 + -2)) && (0 <= (t_3 + -2)) && (0 <= (t_32 + -2)) && (0 <= (t_6 + -2)) && 
	(0 <= (t_9 + -2)) && (0 <= (t_68 + -2)) && ((z_0 + z_24 + z_3) <= (z_1 + z_34 + 
	z_7)) && ((z_0 + z_24 + z_3) <= (z_14 + z_2 + z_53)) && (z_0 > 0) && (z_1 > 0) 
	&& (z_14 > 0) && (z_2 > 0) && (z_24 > 0) && (z_3 > 0) && (z_34 > 0) && (z_7 > 0))
										DATA{
											:pid_2:uncoveredExit = 1;
											:pid_17:node_time = (z_24 + z_3 + z_72);
											:pid_17:z = z_72;
											:pid_17:localTime = (z_0 + z_24 + z_3 + z_72);
											:pid_17:localPC = ((z_24 == t_3) && (t_3 < 4) && (t_68 < 4) && (0 <= (t_3 + -2)) && (0 <= (t_68 + -2)) && (z_0 > 0) && (z_24 > 0) && (z_3 > 0));
											:pid_18:cl = (z_24 + z_72);
											:pid_24:e = 0;
											:pid_24:tau = 4;
											:pid_24:tau_l = 4;
											:pid_24:tau_h = 8;
											:pid_24:k = 2;
											:pid_24:c = 0;
											:pid_24:t = t_68;
											:pid_24:cl = 0;
											:pid_29:cl = (z_24 + z_3 + z_72);
										}
										EC:<Id:357;Ev:47;H:10;W:313>{ SC: ( pid_11:o#7 , ( pid_22:cp2 , pid_27:dp2 , pid_30:dp0 ) , ( pid_39:cp2 , pid_42:dp0 , pid_47:dp0 ) , ( pid_55:cp1 , pid_59:dp0 , pid_64:dp0 ) )
											EXE: { |;| (:pid_17 , run) (:pid_24 
	, run) (:pid_26 , run) (:pid_26 , dp_sendDM) (:pid_2 , run) (:pid_10 , run) 
	(:pid_10 , n1_out_DM1) }
											TRACE: { |;| (:pid_17 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_129 }) (:pid_26 , ${ output 
	inst::Trickle.Node.DataMsg1 [ 1 , 1 , 0 ] ${ + param::Trickle.Node.z_0 
	param::Trickle.Node.z_129 param::Trickle.Node.z_24 param::Trickle.Node.z_3 
	param::Trickle.Node.z_72 } } @ (z_129 + z_24 + z_3 + z_72)) }
											/*FLAGS{ COVERAGE-ELEMENT }*/
											INFO{
												<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#7->run::pid_11:Trickle.Observer.o#7->prot::Trickle.Observer.o#7" as trace="tpid#7->run::pid_11:Trickle.Observer.o#7->prot::Trickle.Observer.o#7">
											}
											PC: ((z_129 == t_68) && (z_24 == t_3) && (z_43 == t_21) && (t_21 < 4) && (t_3 < 4) 
	&& (t_32 < 4) && (t_6 < 4) && (t_9 < 4) && (t_68 < 4) && (z_34 < t_6) && (z_53 < 
	t_9) && (0 <= (t_21 + -2)) && (0 <= (t_3 + -2)) && (0 <= (t_32 + -2)) && (0 <= 
	(t_6 + -2)) && (0 <= (t_9 + -2)) && (0 <= (t_68 + -2)) && ((z_0 + z_24 + z_3) <= 
	(z_1 + z_34 + z_7)) && ((z_0 + z_24 + z_3) <= (z_14 + z_2 + z_53)) && (z_0 > 0) 
	&& (z_1 > 0) && (z_14 > 0) && (z_2 > 0) && (z_24 > 0) && (z_3 > 0) && (z_34 > 0) 
	&& (z_7 > 0) && (z_72 > 0))
											DATA{
												:pid_2:uncoveredExit = 0;
												:pid_2:dataMessage.seq = 1;
												:pid_2:dataMessage.fragment = FRAGMENT_0;
												:pid_2:dataMessage.offset = 0;
												:pid_17:node_time = (z_129 + z_24 + z_3 + z_72);
												:pid_17:z = z_129;
												:pid_17:localTime = (z_0 + z_129 + z_24 + z_3 + z_72);
												:pid_17:localPC = ((z_129 == t_68) && (z_24 == t_3) && (t_3 < 4) && (t_68 < 4) && (0 <= (t_3 + -2)) && (0 <= (t_68 + -2)) && (z_0 > 0) && (z_24 > 0) && (z_3 > 0) && (z_72 > 0));
												:pid_18:cl = (z_129 + z_24 + z_72);
												:pid_24:cl = z_129;
												:pid_29:cl = (z_129 + z_24 + z_3 + z_72);
											}
											BUFFER{
												:pid_34:bufferNode:<FIFO>#0{
													:pid_17:DataMsg1([ 1 , 1 , 0 ] , (z_0 + z_129 + z_24 + z_3 + z_72));
												}
												:pid_51:bufferNode:<FIFO>#0{
													:pid_34:ControlMsg([ 0 , 0 ] , (z_1 + z_34 + z_43 + z_7));
													:pid_17:DataMsg1([ 1 , 1 , 0 ] , (z_0 + z_129 + z_24 + z_3 + z_72));
												}
											}
											EC:<Id:383;Ev:62;H:11;W:336>{ SC: ( pid_11:o#7 , ( pid_22:cp2 , pid_27:dp2 , pid_30:dp0 ) , ( pid_39:cp2 , pid_43:dp1 , pid_47:dp0 ) , ( pid_55:cp1 , pid_59:dp0 , pid_64:dp0 ) )
												EXE: { |;| (:pid_34 , run) 
	(:pid_41 , run) (:pid_42 , run) (:pid_42 , dp_init) (:pid_2 , run) }
												TRACE: { |;| (:pid_34 , ${ 
	newfresh inst::Trickle.Node.z param::Trickle.Node.z_139 }) (:pid_42 , ${ 
	newfresh inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_190 }
	) }
												PC: ((z_129 == t_68) && (z_24 == t_3) && (z_43 == t_21) && (t_21 < 4) && (t_3 < 4) 
	&& (t_32 < 4) && (t_6 < 4) && (t_9 < 4) && (t_190 < 4) && (t_68 < 4) && (z_34 < 
	t_6) && (z_53 < t_9) && (0 <= (t_21 + -2)) && (0 <= (t_3 + -2)) && (0 <= (t_32 + 
	-2)) && (0 <= (t_6 + -2)) && (0 <= (t_9 + -2)) && (0 <= (t_190 + -2)) && (0 <= 
	(t_68 + -2)) && ((z_0 + z_24 + z_3) <= (z_1 + z_34 + z_7)) && ((z_0 + z_24 + z_3)
	 <= (z_14 + z_2 + z_53)) && (z_0 > 0) && (z_1 > 0) && (z_14 > 0) && (z_2 > 0) && 
	(z_24 > 0) && (z_3 > 0) && (z_34 > 0) && (z_43 > 0) && (z_7 > 0) && (z_72 > 0))
												DATA{
													:pid_2:uncoveredExit = 1;
													:pid_34:node_time = (z_139 + z_34 + z_43 + z_7);
													:pid_34:z = z_139;
													:pid_34:localTime = (z_1 + z_139 + z_34 + z_43 + z_7);
													:pid_34:localPC = ((z_43 == t_21) && (t_21 < 4) && (t_6 < 4) && (t_190 < 4) && (z_34 < t_6) && (0 <= (t_21 + -2)) && (0 <= (t_6 + -2)) && (0 <= (t_190 + -2)) && ((z_0 + z_24 + z_3) <= (z_1 + z_34 + z_7)) && (z_1 > 0) && (z_34 > 0) && (z_43 > 0) && (z_7 > 0));
													:pid_35:cl = (z_139 + z_43);
													:pid_41:e = 0;
													:pid_41:tau = 4;
													:pid_41:tau_l = 4;
													:pid_41:tau_h = 8;
													:pid_41:k = 2;
													:pid_41:c = 0;
													:pid_41:t = t_190;
													:pid_41:cl = 0;
													:pid_46:cl = (z_139 + z_34 + z_43 + z_7);
												}
												EC:<Id:517;Ev:66;H:12;W:455>{ SC: ( pid_12:o#8 , ( pid_22:cp2 , pid_27:dp2 , pid_30:dp0 ) , ( pid_39:cp2 , pid_43:dp1 , pid_47:dp0 ) , ( pid_55:cp1 , pid_59:dp0 , pid_64:dp0 ) )
													EXE: { |;| (:pid_34 , run) 
	(:pid_41 , run) (:pid_43 , run) (:pid_43 , dp1_receiveDM_consistent) (:pid_2 , 
	run) (:pid_11 , run) (:pid_11 , n2_in_DM1) }
													TRACE: { |;| (:pid_34 , ${ 
	newfresh inst::Trickle.Node.z param::Trickle.Node.z_184 }) (:pid_43 , ${ input 
	inst::Trickle.Node.DataMsg1 [ 1 , 1 , 0 ] ${ + param::Trickle.Node.z_0 
	param::Trickle.Node.z_129 param::Trickle.Node.z_24 param::Trickle.Node.z_3 
	param::Trickle.Node.z_72 } } @ (z_139 + z_184 + z_34 + z_43 + z_7)) }
													/*FLAGS{ COVERAGE-ELEMENT }*/
													INFO{
														<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#8->run::pid_12:Trickle.Observer.o#8->prot::Trickle.Observer.o#8" as trace="tpid#8->run::pid_12:Trickle.Observer.o#8->prot::Trickle.Observer.o#8">
													}
													PC: ((z_129 == t_68) && (z_24 == t_3) && (z_43 == t_21) && (t_21 < 4) && (t_3 < 4) 
	&& (t_32 < 4) && (t_6 < 4) && (t_9 < 4) && (t_190 < 4) && (t_68 < 4) && (z_184 < 
	t_190) && (z_34 < t_6) && (z_53 < t_9) && (0 <= (t_21 + -2)) && (0 <= (t_3 + -2))
	 && (0 <= (t_32 + -2)) && (0 <= (t_6 + -2)) && (0 <= (t_9 + -2)) && (0 <= (t_190 
	+ -2)) && (0 <= (t_68 + -2)) && ((z_0 + z_129 + z_24 + z_3 + z_72) <= (z_1 + 
	z_139 + z_184 + z_34 + z_43 + z_7)) && ((z_0 + z_24 + z_3) <= (z_1 + z_34 + z_7))
	 && ((z_0 + z_24 + z_3) <= (z_14 + z_2 + z_53)) && (z_0 > 0) && (z_1 > 0) && 
	(z_139 > 0) && (z_14 > 0) && (z_2 > 0) && (z_24 > 0) && (z_3 > 0) && (z_34 > 0) 
	&& (z_43 > 0) && (z_7 > 0) && (z_72 > 0))
													DATA{
														:pid_2:uncoveredExit = 0;
														:pid_34:my_buff[0].seq = 1;
														:pid_34:my_buff[0].fragment = FRAGMENT_0;
														:pid_34:my_buff[0].offset = 0;
														:pid_34:firmware[0] = FRAGMENT_0;
														:pid_34:myseq_buff[0] = 1;
														:pid_34:node_time = (z_139 + z_184 + z_34 + z_43 + z_7);
														:pid_34:z = z_184;
														:pid_34:localTime = (z_1 + z_139 + z_184 + z_34 + z_43 + z_7);
														:pid_34:undef_DM1 = false;
														:pid_34:localPC = ((z_43 == t_21) && (t_21 < 4) && (t_6 < 4) && (t_190 < 4) && (z_184 < t_190) && (z_34 < t_6) && (0 <= (t_21 + -2)) && (0 <= (t_6 + -2)) && (0 <= (t_190 + -2)) && ((z_0 + z_129 + z_24 + z_3 + z_72) <= (z_1 + z_139 + z_184 + z_34 + z_43 + z_7)) && ((z_0 + z_24 + z_3) <= (z_1 + z_34 + z_7)) && (z_1 > 0) && (z_139 > 0) && (z_34 > 0) && (z_43 > 0) && (z_7 > 0));
														:pid_34:timeEmit = (z_0 + z_129 + z_24 + z_3 + z_72);
														:pid_35:cl = (z_139 + z_184 + z_43);
														:pid_41:c = 1;
														:pid_41:consistent = true;
														:pid_41:cl = z_184;
														:pid_41:d.seq = 1;
														:pid_41:d.fragment = FRAGMENT_0;
														:pid_41:d.offset = 0;
														:pid_46:cl = (z_139 + z_184 + z_34 + z_43 + z_7);
													}
													BUFFER{
														:pid_34:bufferNode:<FIFO>#0{ }
													}
													EC:<Id:549;Ev:67;H:13;W:455>{ SC: ( pid_12:o#8 , ( pid_22:cp2 , pid_27:dp2 , pid_30:dp0 ) , ( pid_39:cp2 , pid_43:dp1 , pid_47:dp0 ) , ( pid_56:cp2 , pid_59:dp0 , pid_64:dp0 ) )
														EXE: { |;| (:pid_51 , 
	run) (:pid_52 , run) (:pid_55 , run) (:pid_55 , cp_sendCM) (:pid_2 , run) }
														TRACE: { |;| (:pid_51 , 
	${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_197 }) (:pid_55 , ${ 
	output inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + param::Trickle.Node.z_14 
	param::Trickle.Node.z_197 param::Trickle.Node.z_2 param::Trickle.Node.z_53 } } @ 
	(z_14 + z_197 + z_53)) }
														PC: ((z_129 == t_68) && (z_197 == t_32) && (z_24 == t_3) && (z_43 == t_21) && (t_21 
	< 4) && (t_3 < 4) && (t_32 < 4) && (t_6 < 4) && (t_9 < 4) && (t_190 < 4) && 
	(t_68 < 4) && (z_184 < t_190) && (z_34 < t_6) && (z_53 < t_9) && (0 <= (t_21 + 
	-2)) && (0 <= (t_3 + -2)) && (0 <= (t_32 + -2)) && (0 <= (t_6 + -2)) && (0 <= 
	(t_9 + -2)) && (0 <= (t_190 + -2)) && (0 <= (t_68 + -2)) && ((z_0 + z_129 + z_24 
	+ z_3 + z_72) <= (z_1 + z_139 + z_184 + z_34 + z_43 + z_7)) && ((z_0 + z_24 + 
	z_3) <= (z_1 + z_34 + z_7)) && ((z_0 + z_24 + z_3) <= (z_14 + z_2 + z_53)) && 
	(z_0 > 0) && (z_1 > 0) && (z_139 > 0) && (z_14 > 0) && (z_2 > 0) && (z_24 > 0) 
	&& (z_3 > 0) && (z_34 > 0) && (z_43 > 0) && (z_53 > 0) && (z_7 > 0) && (z_72 > 0)
	)
														DATA{
															:pid_2:uncoveredExit = 1;
															:pid_51:node_time = (z_14 + z_197 + z_53);
															:pid_51:z = z_197;
															:pid_51:localTime = (z_14 + z_197 + z_2 + z_53);
															:pid_51:localPC = ((z_197 == t_32) && (t_32 < 4) && (t_9 < 4) && (z_53 < t_9) && (0 <= (t_32 + -2)) && (0 <= (t_9 + -2)) && ((z_0 + z_24 + z_3) <= (z_14 + z_2 + z_53)) && (z_14 > 0) && (z_2 > 0) && (z_53 > 0));
															:pid_52:cl = z_197;
															:pid_58:cl = (z_14 + z_197 + z_53);
															:pid_63:cl = (z_14 + z_197 + z_53);
														}
														BUFFER{
															:pid_17:bufferNode:<FIFO>#0{
																:pid_51:ControlMsg([ 0 , 0 ] , (z_14 + z_197 + z_2 + z_53));
															}
															:pid_34:bufferNode:<FIFO>#0{
																:pid_51:ControlMsg([ 0 , 0 ] , (z_14 + z_197 + z_2 + z_53));
															}
														}
														EC:<Id:558;Ev:76;H:14;W:455>{ SC: ( pid_12:o#8 , ( pid_22:cp2 , pid_27:dp2 , pid_30:dp0 ) , ( pid_39:cp2 , pid_43:dp1 , pid_47:dp0 ) , ( pid_55:cp1 , pid_59:dp0 , pid_64:dp0 ) )
															EXE: { |;| (:pid_51 
	, run) (:pid_52 , run) (:pid_56 , run) (:pid_56 , cp_resetTau) (:pid_2 , run) }
															TRACE: { |;| 
	(:pid_51 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_200 }) 
	(:pid_56 , ${ newfresh inst::Trickle.Node.ControlProcess.t 
	param::Trickle.Node.ControlProcess.t_108 }) }
															/*FLAGS{ COVERAGE-ELEMENT }*/
															INFO{
																<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#9->Node.ControlProcess->cp2.cp_resetTau" as trace="tpid#9->Node.ControlProcess->cp2.cp_resetTau">
																<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#10->Node.ControlProcess->cp2.cp_resetTau" as trace="tpid#10->Node.ControlProcess->cp2.cp_resetTau">
															}
															PC: (((z_197 + z_200) == 4) && (z_129 == t_68) && (z_197 == t_32) && (z_24 == t_3) 
	&& (z_43 == t_21) && (t_108 < 8) && (t_21 < 4) && (t_3 < 4) && (t_32 < 4) && 
	(t_6 < 4) && (t_9 < 4) && (t_190 < 4) && (t_68 < 4) && (z_184 < t_190) && (z_34 
	< t_6) && (z_53 < t_9) && (0 <= (t_108 + -4)) && (0 <= (t_21 + -2)) && (0 <= 
	(t_3 + -2)) && (0 <= (t_32 + -2)) && (0 <= (t_6 + -2)) && (0 <= (t_9 + -2)) && 
	(0 <= (t_190 + -2)) && (0 <= (t_68 + -2)) && ((z_0 + z_129 + z_24 + z_3 + z_72) 
	<= (z_1 + z_139 + z_184 + z_34 + z_43 + z_7)) && ((z_0 + z_24 + z_3) <= (z_1 + 
	z_34 + z_7)) && ((z_0 + z_24 + z_3) <= (z_14 + z_2 + z_53)) && ((z_197 + z_200) 
	> t_32) && (z_0 > 0) && (z_1 > 0) && (z_139 > 0) && (z_14 > 0) && (z_197 > 0) && 
	(z_2 > 0) && (z_24 > 0) && (z_3 > 0) && (z_34 > 0) && (z_43 > 0) && (z_53 > 0) 
	&& (z_7 > 0) && (z_72 > 0))
															DATA{
																:pid_2:uncoveredExit = 2;
																:pid_51:node_time = (z_14 + z_197 + z_200 + z_53);
																:pid_51:z = z_200;
																:pid_51:localTime = (z_14 + z_197 + z_2 + z_200 + z_53);
																:pid_51:localPC = (((z_197 + z_200) == 4) && (z_197 == t_32) && (t_108 < 8) && (t_32 < 4) && (t_9 < 4) && (z_53 < t_9) && (0 <= (t_108 + -4)) && (0 <= (t_32 + -2)) && (0 <= (t_9 + -2)) && ((z_0 + z_24 + z_3) <= (z_14 + z_2 + z_53)) && ((z_197 + z_200) > t_32) && (z_14 > 0) && (z_197 > 0) && (z_2 > 0) && (z_53 > 0));
																:pid_52:e = 1;
																:pid_52:tau = 8;
																:pid_52:c = 0;
																:pid_52:t = t_108;
																:pid_52:cl = 0;
																:pid_58:cl = (z_14 + z_197 + z_200 + z_53);
																:pid_63:cl = (z_14 + z_197 + z_200 + z_53);
															}
															EC:<Id:647;Ev:86;H:15;W:571>{ SC: ( pid_12:o#8 , ( pid_22:cp2 , pid_27:dp2 , pid_31:dp1 ) , ( pid_39:cp2 , pid_43:dp1 , pid_47:dp0 ) , ( pid_55:cp1 , pid_59:dp0 , pid_64:dp0 ) )
																EXE: { |;| 
	(:pid_17 , run) (:pid_29 , run) (:pid_30 , run) (:pid_30 , dp_init) (:pid_2 , 
	run) }
																TRACE: { |;| 
	(:pid_17 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_225 }) 
	(:pid_30 , ${ newfresh inst::Trickle.Node.DataProcess.t 
	param::Trickle.Node.DataProcess.t_337 }) }
																PC: (((z_197 + z_200) == 4) && (z_129 == t_68) && (z_197 == t_32) && (z_24 == t_3) 
	&& (z_43 == t_21) && (t_108 < 8) && (t_21 < 4) && (t_3 < 4) && (t_32 < 4) && 
	(t_6 < 4) && (t_9 < 4) && (t_190 < 4) && (t_337 < 4) && (t_68 < 4) && (z_184 < 
	t_190) && (z_34 < t_6) && (z_53 < t_9) && (0 <= (t_108 + -4)) && (0 <= (t_21 + 
	-2)) && (0 <= (t_3 + -2)) && (0 <= (t_32 + -2)) && (0 <= (t_6 + -2)) && (0 <= 
	(t_9 + -2)) && (0 <= (t_190 + -2)) && (0 <= (t_337 + -2)) && (0 <= (t_68 + -2)) 
	&& ((z_0 + z_129 + z_24 + z_3 + z_72) <= (z_1 + z_139 + z_184 + z_34 + z_43 + 
	z_7)) && ((z_0 + z_24 + z_3) <= (z_1 + z_34 + z_7)) && ((z_0 + z_24 + z_3) <= 
	(z_14 + z_2 + z_53)) && ((z_197 + z_200) > t_32) && (z_0 > 0) && (z_1 > 0) && 
	(z_129 > 0) && (z_139 > 0) && (z_14 > 0) && (z_197 > 0) && (z_2 > 0) && (z_24 > 
	0) && (z_3 > 0) && (z_34 > 0) && (z_43 > 0) && (z_53 > 0) && (z_7 > 0) && (z_72 
	> 0))
																DATA{
																	:pid_2:uncoveredExit = 3;
																	:pid_17:node_time = (z_129 + z_225 + z_24 + z_3 + z_72);
																	:pid_17:z = z_225;
																	:pid_17:localTime = (z_0 + z_129 + z_225 + z_24 + z_3 + z_72);
																	:pid_17:localPC = ((z_129 == t_68) && (z_24 == t_3) && (t_3 < 4) && (t_337 < 4) && (t_68 < 4) && (0 <= (t_3 + -2)) && (0 <= (t_337 + -2)) && (0 <= (t_68 + -2)) && (z_0 > 0) && (z_129 > 0) && (z_24 > 0) && (z_3 > 0) && (z_72 > 0));
																	:pid_18:cl = (z_129 + z_225 + z_24 + z_72);
																	:pid_24:cl = (z_129 + z_225);
																	:pid_29:e = 0;
																	:pid_29:tau = 4;
																	:pid_29:tau_l = 4;
																	:pid_29:tau_h = 8;
																	:pid_29:k = 2;
																	:pid_29:c = 0;
																	:pid_29:t = t_337;
																	:pid_29:cl = 0;
																}
																EC:<Id:734;Ev:191;H:16;W:571>{ SC: ( pid_12:o#8 , ( pid_22:cp2 , pid_27:dp2 , pid_31:dp1 ) , ( pid_39:cp2 , pid_43:dp1 , pid_47:dp0 ) , ( pid_56:cp2 , pid_59:dp0 , pid_64:dp0 ) )
																	EXE: { |;| 
	(:pid_51 , run) (:pid_52 , run) (:pid_55 , run) (:pid_55 , cp_sendCM) (:pid_2 , 
	run) }
																	TRACE: { |;| 
	(:pid_51 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_257 }) 
	(:pid_55 , ${ output inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + 
	param::Trickle.Node.z_14 param::Trickle.Node.z_197 param::Trickle.Node.z_2 
	param::Trickle.Node.z_200 param::Trickle.Node.z_257 param::Trickle.Node.z_53 } } 
	@ (z_14 + z_197 + z_200 + z_257 + z_53)) }
																	PC: (((z_197 + z_200) == 4) && (z_129 == t_68) && (z_197 == t_32) && (z_24 == t_3) 
	&& (z_257 == t_108) && (z_43 == t_21) && (t_108 < 8) && (t_21 < 4) && (t_3 < 4) 
	&& (t_32 < 4) && (t_6 < 4) && (t_9 < 4) && (t_190 < 4) && (t_337 < 4) && (t_68 < 
	4) && (z_184 < t_190) && (z_34 < t_6) && (z_53 < t_9) && (0 <= (t_108 + -4)) && 
	(0 <= (t_21 + -2)) && (0 <= (t_3 + -2)) && (0 <= (t_32 + -2)) && (0 <= (t_6 + -2)
	) && (0 <= (t_9 + -2)) && (0 <= (t_190 + -2)) && (0 <= (t_337 + -2)) && (0 <= 
	(t_68 + -2)) && ((z_0 + z_129 + z_24 + z_3 + z_72) <= (z_1 + z_139 + z_184 + 
	z_34 + z_43 + z_7)) && ((z_0 + z_24 + z_3) <= (z_1 + z_34 + z_7)) && ((z_0 + 
	z_24 + z_3) <= (z_14 + z_2 + z_53)) && ((z_197 + z_200) > t_32) && (z_0 > 0) && 
	(z_1 > 0) && (z_129 > 0) && (z_139 > 0) && (z_14 > 0) && (z_197 > 0) && (z_2 > 0)
	 && (z_200 > 0) && (z_24 > 0) && (z_3 > 0) && (z_34 > 0) && (z_43 > 0) && (z_53 
	> 0) && (z_7 > 0) && (z_72 > 0))
																	DATA{
																		:pid_2:uncoveredExit = 4;
																		:pid_51:node_time = (z_14 + z_197 + z_200 + z_257 + z_53);
																		:pid_51:z = z_257;
																		:pid_51:localTime = (z_14 + z_197 + z_2 + z_200 + z_257 + z_53);
																		:pid_51:localPC = (((z_197 + z_200) == 4) && (z_197 == t_32) && (z_257 == t_108) && (t_108 < 8) && (t_32 < 4) && (t_9 < 4) && (z_53 < t_9) && (0 <= (t_108 + -4)) && (0 <= (t_32 + -2)) && (0 <= (t_9 + -2)) && ((z_0 + z_24 + z_3) <= (z_14 + z_2 + z_53)) && ((z_197 + z_200) > t_32) && (z_14 > 0) && (z_197 > 0) && (z_2 > 0) && (z_200 > 0) && (z_53 > 0));
																		:pid_52:cl = z_257;
																		:pid_58:cl = (z_14 + z_197 + z_200 + z_257 + z_53);
																		:pid_63:cl = (z_14 + z_197 + z_200 + z_257 + z_53);
																	}
																	BUFFER{
																		:pid_17:bufferNode:<FIFO>#0{
																			:pid_51:ControlMsg([ 0 , 0 ] , (z_14 + z_197 + z_2 + z_53));
																			:pid_51:ControlMsg([ 0 , 0 ] , (z_14 + z_197 + z_2 + z_200 + z_257 + z_53));
																		}
																		:pid_34:bufferNode:<FIFO>#0{
																			:pid_51:ControlMsg([ 0 , 0 ] , (z_14 + z_197 + z_2 + z_53));
																			:pid_51:ControlMsg([ 0 , 0 ] , (z_14 + z_197 + z_2 + z_200 + z_257 + z_53));
																		}
																	}
																	EC:<Id:1688;Ev:192;H:17;W:571>{ SC: ( pid_12:o#8 , ( pid_22:cp2 , pid_27:dp2 , pid_31:dp1 ) , ( pid_39:cp2 , pid_43:dp1 , pid_47:dp0 ) , ( pid_55:cp1 , pid_59:dp0 , pid_64:dp0 ) )
																		EXE: { 
	|;| (:pid_51 , run) (:pid_52 , run) (:pid_56 , run) (:pid_56 , cp_resetTau) 
	(:pid_2 , run) }
																		TRACE: { 
	|;| (:pid_51 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_572 }) 
	(:pid_56 , ${ newfresh inst::Trickle.Node.ControlProcess.t 
	param::Trickle.Node.ControlProcess.t_270 }) }
																		PC: (((z_197 + z_200) == 4) && ((z_257 + z_572) == 8) && (z_129 == t_68) && (z_197 
	== t_32) && (z_24 == t_3) && (z_257 == t_108) && (z_43 == t_21) && (t_108 < 8) 
	&& (t_21 < 4) && (t_270 < 8) && (t_3 < 4) && (t_32 < 4) && (t_6 < 4) && (t_9 < 4)
	 && (t_190 < 4) && (t_337 < 4) && (t_68 < 4) && (z_184 < t_190) && (z_34 < t_6) 
	&& (z_53 < t_9) && (0 <= (t_108 + -4)) && (0 <= (t_21 + -2)) && (0 <= (t_270 + 
	-4)) && (0 <= (t_3 + -2)) && (0 <= (t_32 + -2)) && (0 <= (t_6 + -2)) && (0 <= 
	(t_9 + -2)) && (0 <= (t_190 + -2)) && (0 <= (t_337 + -2)) && (0 <= (t_68 + -2)) 
	&& ((z_0 + z_129 + z_24 + z_3 + z_72) <= (z_1 + z_139 + z_184 + z_34 + z_43 + 
	z_7)) && ((z_0 + z_24 + z_3) <= (z_1 + z_34 + z_7)) && ((z_0 + z_24 + z_3) <= 
	(z_14 + z_2 + z_53)) && ((z_197 + z_200) > t_32) && ((z_257 + z_572) > t_108) && 
	(z_0 > 0) && (z_1 > 0) && (z_129 > 0) && (z_139 > 0) && (z_14 > 0) && (z_197 > 0)
	 && (z_2 > 0) && (z_200 > 0) && (z_24 > 0) && (z_257 > 0) && (z_3 > 0) && (z_34 
	> 0) && (z_43 > 0) && (z_53 > 0) && (z_7 > 0) && (z_72 > 0))
																		DATA{
																			:pid_2:uncoveredExit = 5;
																			:pid_51:node_time = (z_14 + z_197 + z_200 + z_257 + z_53 + z_572);
																			:pid_51:z = z_572;
																			:pid_51:localTime = (z_14 + z_197 + z_2 + z_200 + z_257 + z_53 + z_572);
																			:pid_51:localPC = (((z_197 + z_200) == 4) && ((z_257 + z_572) == 8) && (z_197 == t_32) && (z_257 == t_108) && (t_108 < 8) && (t_270 < 8) && (t_32 < 4) && (t_9 < 4) && (z_53 < t_9) && (0 <= (t_108 + -4)) && (0 <= (t_270 + -4)) && (0 <= (t_32 + -2)) && (0 <= (t_9 + -2)) && ((z_0 + z_24 + z_3) <= (z_14 + z_2 + z_53)) && ((z_197 + z_200) > t_32) && ((z_257 + z_572) > t_108) && (z_14 > 0) && (z_197 > 0) && (z_2 > 0) && (z_200 > 0) && (z_257 > 0) && (z_53 > 0));
																			:pid_52:e = 2;
																			:pid_52:tau = 8;
																			:pid_52:t = t_270;
																			:pid_52:cl = 0;
																			:pid_58:cl = (z_14 + z_197 + z_200 + z_257 + z_53 + z_572);
																			:pid_63:cl = (z_14 + z_197 + z_200 + z_257 + z_53 + z_572);
																		}
																		EC:<Id:1698;Ev:202;H:18;W:571>{ SC: ( pid_13:o#9 , ( pid_22:cp2 , pid_27:dp2 , pid_31:dp1 ) , ( pid_39:cp2 , pid_43:dp1 , pid_47:dp0 ) , ( pid_57:cp3 , pid_59:dp0 , pid_64:dp0 ) )
																			EXE: 
	{ |;| (:pid_51 , run) (:pid_52 , run) (:pid_55 , run) (:pid_55 , cp_CTRL_EXPIR) 
	(:pid_2 , run) (:pid_12 , run) (:pid_12 , n4_out_Log) }
																			
	TRACE: { |;| (:pid_51 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_575 }) (:pid_55 , ${ output#env inst::Trickle.Node.Log 1 
	${ + param::Trickle.Node.z_14 param::Trickle.Node.z_197 param::Trickle.Node.z_2 
	param::Trickle.Node.z_200 param::Trickle.Node.z_257 param::Trickle.Node.z_53 
	param::Trickle.Node.z_572 param::Trickle.Node.z_575 } } @ (z_14 + z_197 + z_200 
	+ z_257 + z_53 + z_572 + z_575)) }
																			/*FLAGS{ COVERAGE-ELEMENT }*/
																			INFO{
																				<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#11->run::pid_13:Trickle.Observer.o#9->prot::Trickle.Observer.o#9" as trace="tpid#11->run::pid_13:Trickle.Observer.o#9->prot::Trickle.Observer.o#9">
																			}
																			PC: (((z_197 + z_200) == 4) && ((z_257 + z_572) == 8) && (z_129 == t_68) && (z_197 
	== t_32) && (z_24 == t_3) && (z_257 == t_108) && (z_43 == t_21) && (t_108 < 8) 
	&& (t_21 < 4) && (t_270 < 8) && (t_3 < 4) && (t_32 < 4) && (t_6 < 4) && (t_9 < 4)
	 && (t_190 < 4) && (t_337 < 4) && (t_68 < 4) && (z_184 < t_190) && (z_34 < t_6) 
	&& (z_53 < t_9) && (0 <= (t_108 + -4)) && (0 <= (t_21 + -2)) && (0 <= (t_270 + 
	-4)) && (0 <= (t_3 + -2)) && (0 <= (t_32 + -2)) && (0 <= (t_6 + -2)) && (0 <= 
	(t_9 + -2)) && (0 <= (t_190 + -2)) && (0 <= (t_337 + -2)) && (0 <= (t_68 + -2)) 
	&& ((z_0 + z_129 + z_24 + z_3 + z_72) <= (z_1 + z_139 + z_184 + z_34 + z_43 + 
	z_7)) && ((z_0 + z_24 + z_3) <= (z_1 + z_34 + z_7)) && ((z_0 + z_24 + z_3) <= 
	(z_14 + z_2 + z_53)) && ((z_197 + z_200) > t_32) && ((z_257 + z_572) > t_108) && 
	(z_0 > 0) && (z_1 > 0) && (z_129 > 0) && (z_139 > 0) && (z_14 > 0) && (z_197 > 0)
	 && (z_2 > 0) && (z_200 > 0) && (z_24 > 0) && (z_257 > 0) && (z_3 > 0) && (z_34 
	> 0) && (z_43 > 0) && (z_53 > 0) && (z_572 > 0) && (z_7 > 0) && (z_72 > 0))
																			DATA{
																				:pid_2:uncoveredExit = 0;
																				:pid_2:mess = TERMIN_CM;
																				:pid_51:node_time = (z_14 + z_197 + z_200 + z_257 + z_53 + z_572 + z_575);
																				:pid_51:z = z_575;
																				:pid_51:localTime = (z_14 + z_197 + z_2 + z_200 + z_257 + z_53 + z_572 + z_575);
																				:pid_51:localPC = (((z_197 + z_200) == 4) && ((z_257 + z_572) == 8) && (z_197 == t_32) && (z_257 == t_108) && (t_108 < 8) && (t_270 < 8) && (t_32 < 4) && (t_9 < 4) && (z_53 < t_9) && (0 <= (t_108 + -4)) && (0 <= (t_270 + -4)) && (0 <= (t_32 + -2)) && (0 <= (t_9 + -2)) && ((z_0 + z_24 + z_3) <= (z_14 + z_2 + z_53)) && ((z_197 + z_200) > t_32) && ((z_257 + z_572) > t_108) && (z_14 > 0) && (z_197 > 0) && (z_2 > 0) && (z_200 > 0) && (z_257 > 0) && (z_53 > 0) && (z_572 > 0));
																				:pid_52:e = 2;
																				:pid_52:cl = z_575;
																				:pid_58:cl = (z_14 + z_197 + z_200 + z_257 + z_53 + z_572 + z_575);
																				:pid_63:cl = (z_14 + z_197 + z_200 + z_257 + z_53 + z_572 + z_575);
																			}
																			EC:<Id:1793;Ev:203;H:19;W:571>{ SC: ( pid_13:o#9 , ( pid_22:cp2 , pid_27:dp2 , pid_31:dp1 ) , ( pid_39:cp2 , pid_43:dp1 , pid_47:dp0 ) , ( pid_57:cp3 , pid_60:dp1 , pid_64:dp0 ) )
																				
	EXE: { |;| (:pid_51 , run) (:pid_58 , run) (:pid_59 , run) (:pid_59 , dp_init) 
	(:pid_2 , run) }
																				
	TRACE: { |;| (:pid_51 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_605 }) (:pid_59 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_796 }) }
																				PC: (((z_197 + z_200) == 4) && ((z_257 + z_572) == 8) && (z_129 == t_68) && (z_197 
	== t_32) && (z_24 == t_3) && (z_257 == t_108) && (z_43 == t_21) && (t_108 < 8) 
	&& (t_21 < 4) && (t_270 < 8) && (t_3 < 4) && (t_32 < 4) && (t_6 < 4) && (t_9 < 4)
	 && (t_190 < 4) && (t_337 < 4) && (t_68 < 4) && (t_796 < 4) && (z_184 < t_190) 
	&& (z_34 < t_6) && (z_53 < t_9) && (0 <= (t_108 + -4)) && (0 <= (t_21 + -2)) && 
	(0 <= (t_270 + -4)) && (0 <= (t_3 + -2)) && (0 <= (t_32 + -2)) && (0 <= (t_6 + 
	-2)) && (0 <= (t_9 + -2)) && (0 <= (t_190 + -2)) && (0 <= (t_337 + -2)) && (0 <= 
	(t_68 + -2)) && (0 <= (t_796 + -2)) && ((z_0 + z_129 + z_24 + z_3 + z_72) <= 
	(z_1 + z_139 + z_184 + z_34 + z_43 + z_7)) && ((z_0 + z_24 + z_3) <= (z_1 + z_34 
	+ z_7)) && ((z_0 + z_24 + z_3) <= (z_14 + z_2 + z_53)) && ((z_197 + z_200) > 
	t_32) && ((z_257 + z_572) > t_108) && (z_0 > 0) && (z_1 > 0) && (z_129 > 0) && 
	(z_139 > 0) && (z_14 > 0) && (z_197 > 0) && (z_2 > 0) && (z_200 > 0) && (z_24 > 
	0) && (z_257 > 0) && (z_3 > 0) && (z_34 > 0) && (z_43 > 0) && (z_53 > 0) && 
	(z_572 > 0) && (z_575 > 0) && (z_7 > 0) && (z_72 > 0))
																				DATA{
																					:pid_2:uncoveredExit = 1;
																					:pid_51:node_time = (z_14 + z_197 + z_200 + z_257 + z_53 + z_572 + z_575 + z_605);
																					:pid_51:z = z_605;
																					:pid_51:localTime = (z_14 + z_197 + z_2 + z_200 + z_257 + z_53 + z_572 + z_575 + z_605);
																					:pid_51:localPC = (((z_197 + z_200) == 4) && ((z_257 + z_572) == 8) && (z_197 == t_32) && (z_257 == t_108) && (t_108 < 8) && (t_270 < 8) && (t_32 < 4) && (t_9 < 4) && (t_796 < 4) && (z_53 < t_9) && (0 <= (t_108 + -4)) && (0 <= (t_270 + -4)) && (0 <= (t_32 + -2)) && (0 <= (t_9 + -2)) && (0 <= (t_796 + -2)) && ((z_0 + z_24 + z_3) <= (z_14 + z_2 + z_53)) && ((z_197 + z_200) > t_32) && ((z_257 + z_572) > t_108) && (z_14 > 0) && (z_197 > 0) && (z_2 > 0) && (z_200 > 0) && (z_257 > 0) && (z_53 > 0) && (z_572 > 0) && (z_575 > 0));
																					:pid_58:e = 0;
																					:pid_58:tau = 4;
																					:pid_58:tau_l = 4;
																					:pid_58:tau_h = 8;
																					:pid_58:k = 2;
																					:pid_58:c = 0;
																					:pid_58:t = t_796;
																					:pid_58:cl = 0;
																					:pid_63:cl = (z_14 + z_197 + z_200 + z_257 + z_53 + z_572 + z_575 + z_605);
																				}
																				EC:<Id:1801;Ev:211;H:20;W:571>{ SC: ( pid_13:o#9 , ( pid_22:cp2 , pid_27:dp2 , pid_31:dp1 ) , ( pid_39:cp2 , pid_43:dp1 , pid_47:dp0 ) , ( pid_57:cp3 , pid_61:dp2 , pid_64:dp0 ) )
																					
	EXE: { |;| (:pid_51 , run) (:pid_58 , run) (:pid_60 , run) (:pid_60 , 
	dp1_reach_k) (:pid_2 , run) }
																					
	TRACE: (:pid_51 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_608 })
																					/*FLAGS{ COVERAGE-ELEMENT }*/
																					INFO{
																						<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#12->Node.DataProcess1->dp1.dp1_reach_k" as trace="tpid#12->Node.DataProcess1->dp1.dp1_reach_k">
																					}
																					PC: (((z_197 + z_200) == 4) && ((z_257 + z_572) == 8) && (z_129 == t_68) && (z_197 
	== t_32) && (z_24 == t_3) && (z_257 == t_108) && (z_43 == t_21) && (z_608 == 
	t_796) && (t_108 < 8) && (t_21 < 4) && (t_270 < 8) && (t_3 < 4) && (t_32 < 4) && 
	(t_6 < 4) && (t_9 < 4) && (t_190 < 4) && (t_337 < 4) && (t_68 < 4) && (t_796 < 4)
	 && (z_184 < t_190) && (z_34 < t_6) && (z_53 < t_9) && (0 <= (t_108 + -4)) && (0 
	<= (t_21 + -2)) && (0 <= (t_270 + -4)) && (0 <= (t_3 + -2)) && (0 <= (t_32 + -2))
	 && (0 <= (t_6 + -2)) && (0 <= (t_9 + -2)) && (0 <= (t_190 + -2)) && (0 <= 
	(t_337 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_796 + -2)) && ((z_0 + z_129 + 
	z_24 + z_3 + z_72) <= (z_1 + z_139 + z_184 + z_34 + z_43 + z_7)) && ((z_0 + z_24 
	+ z_3) <= (z_1 + z_34 + z_7)) && ((z_0 + z_24 + z_3) <= (z_14 + z_2 + z_53)) && 
	((z_197 + z_200) > t_32) && ((z_257 + z_572) > t_108) && (z_0 > 0) && (z_1 > 0) 
	&& (z_129 > 0) && (z_139 > 0) && (z_14 > 0) && (z_197 > 0) && (z_2 > 0) && 
	(z_200 > 0) && (z_24 > 0) && (z_257 > 0) && (z_3 > 0) && (z_34 > 0) && (z_43 > 0)
	 && (z_53 > 0) && (z_572 > 0) && (z_575 > 0) && (z_605 > 0) && (z_7 > 0) && 
	(z_72 > 0))
																					DATA{
																						:pid_2:uncoveredExit = 2;
																						:pid_51:node_time = (z_14 + z_197 + z_200 + z_257 + z_53 + z_572 + z_575 + z_605 + z_608);
																						:pid_51:z = z_608;
																						:pid_51:localTime = (z_14 + z_197 + z_2 + z_200 + z_257 + z_53 + z_572 + z_575 + z_605 + z_608);
																						:pid_51:localPC = (((z_197 + z_200) == 4) && ((z_257 + z_572) == 8) && (z_197 == t_32) && (z_257 == t_108) && (z_608 == t_796) && (t_108 < 8) && (t_270 < 8) && (t_32 < 4) && (t_9 < 4) && (t_796 < 4) && (z_53 < t_9) && (0 <= (t_108 + -4)) && (0 <= (t_270 + -4)) && (0 <= (t_32 + -2)) && (0 <= (t_9 + -2)) && (0 <= (t_796 + -2)) && ((z_0 + z_24 + z_3) <= (z_14 + z_2 + z_53)) && ((z_197 + z_200) > t_32) && ((z_257 + z_572) > t_108) && (z_14 > 0) && (z_197 > 0) && (z_2 > 0) && (z_200 > 0) && (z_257 > 0) && (z_53 > 0) && (z_572 > 0) && (z_575 > 0) && (z_605 > 0));
																						:pid_58:cl = z_608;
																						:pid_63:cl = (z_14 + z_197 + z_200 + z_257 + z_53 + z_572 + z_575 + z_605 + z_608);
																					}
																					EC:<Id:1862;Ev:212;H:21;W:571>{ SC: ( pid_13:o#9 , ( pid_22:cp2 , pid_27:dp2 , pid_31:dp1 ) , ( pid_39:cp2 , pid_43:dp1 , pid_47:dp0 ) , ( pid_57:cp3 , pid_60:dp1 , pid_64:dp0 ) )
																					
		EXE: { |;| (:pid_51 , run) (:pid_58 , run) (:pid_61 , run) (:pid_61 , 
	dp_resetTau) (:pid_2 , run) }
																					
		TRACE: { |;| (:pid_51 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_632 }) (:pid_61 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_829 }) }
																						/*FLAGS{ COVERAGE-ELEMENT }*/
																						INFO{
																							<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#13->Node.DataProcess1->dp2.dp_resetTau" as trace="tpid#13->Node.DataProcess1->dp2.dp_resetTau">
																						}
																						PC: (((z_197 + z_200) == 4) && ((z_257 + z_572) == 8) && ((z_608 + z_632) == 4) && 
	(z_129 == t_68) && (z_197 == t_32) && (z_24 == t_3) && (z_257 == t_108) && (z_43 
	== t_21) && (z_608 == t_796) && (t_108 < 8) && (t_21 < 4) && (t_270 < 8) && (t_3 
	< 4) && (t_32 < 4) && (t_6 < 4) && (t_9 < 4) && (t_190 < 4) && (t_337 < 4) && 
	(t_68 < 4) && (t_796 < 4) && (t_829 < 8) && (z_184 < t_190) && (z_34 < t_6) && 
	(z_53 < t_9) && (0 <= (t_108 + -4)) && (0 <= (t_21 + -2)) && (0 <= (t_270 + -4)) 
	&& (0 <= (t_3 + -2)) && (0 <= (t_32 + -2)) && (0 <= (t_6 + -2)) && (0 <= (t_9 + 
	-2)) && (0 <= (t_190 + -2)) && (0 <= (t_337 + -2)) && (0 <= (t_68 + -2)) && (0 
	<= (t_796 + -2)) && (0 <= (t_829 + -4)) && ((z_0 + z_129 + z_24 + z_3 + z_72) <= 
	(z_1 + z_139 + z_184 + z_34 + z_43 + z_7)) && ((z_0 + z_24 + z_3) <= (z_1 + z_34 
	+ z_7)) && ((z_0 + z_24 + z_3) <= (z_14 + z_2 + z_53)) && ((z_197 + z_200) > 
	t_32) && ((z_257 + z_572) > t_108) && ((z_608 + z_632) > t_796) && (z_0 > 0) && 
	(z_1 > 0) && (z_129 > 0) && (z_139 > 0) && (z_14 > 0) && (z_197 > 0) && (z_2 > 0)
	 && (z_200 > 0) && (z_24 > 0) && (z_257 > 0) && (z_3 > 0) && (z_34 > 0) && (z_43 
	> 0) && (z_53 > 0) && (z_572 > 0) && (z_575 > 0) && (z_605 > 0) && (z_608 > 0) 
	&& (z_7 > 0) && (z_72 > 0))
																						DATA{
																							:pid_2:uncoveredExit = 3;
																							:pid_51:node_time = (z_14 + z_197 + z_200 + z_257 + z_53 + z_572 + z_575 + z_605 + z_608 + z_632);
																							:pid_51:z = z_632;
																							:pid_51:localTime = (z_14 + z_197 + z_2 + z_200 + z_257 + z_53 + z_572 + z_575 + z_605 + z_608 + z_632);
																							:pid_51:localPC = (((z_197 + z_200) == 4) && ((z_257 + z_572) == 8) && ((z_608 + z_632) == 4) && (z_197 == t_32) && (z_257 == t_108) && (z_608 == t_796) && (t_108 < 8) && (t_270 < 8) && (t_32 < 4) && (t_9 < 4) && (t_796 < 4) && (t_829 < 8) && (z_53 < t_9) && (0 <= (t_108 + -4)) && (0 <= (t_270 + -4)) && (0 <= (t_32 + -2)) && (0 <= (t_9 + -2)) && (0 <= (t_796 + -2)) && (0 <= (t_829 + -4)) && ((z_0 + z_24 + z_3) <= (z_14 + z_2 + z_53)) && ((z_197 + z_200) > t_32) && ((z_257 + z_572) > t_108) && ((z_608 + z_632) > t_796) && (z_14 > 0) && (z_197 > 0) && (z_2 > 0) && (z_200 > 0) && (z_257 > 0) && (z_53 > 0) && (z_572 > 0) && (z_575 > 0) && (z_605 > 0) && (z_608 > 0));
																							:pid_58:e = 1;
																							:pid_58:tau = 8;
																							:pid_58:c = 0;
																							:pid_58:t = t_829;
																							:pid_58:cl = 0;
																							:pid_63:cl = (z_14 + z_197 + z_200 + z_257 + z_53 + z_572 + z_575 + z_605 + z_608 + z_632);
																						}
																						EC:<Id:1870;Ev:220;H:22;W:571>{ SC: ( pid_13:o#9 , ( pid_22:cp2 , pid_27:dp2 , pid_31:dp1 ) , ( pid_39:cp2 , pid_43:dp1 , pid_47:dp0 ) , ( pid_57:cp3 , pid_61:dp2 , pid_64:dp0 ) )
																					
			EXE: { |;| (:pid_51 , run) (:pid_58 , run) (:pid_60 , run) (:pid_60 , 
	dp1_reach_k) (:pid_2 , run) }
																					
			TRACE: (:pid_51 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_635 })
																							/*FLAGS{ COVERAGE-ELEMENT }*/
																							INFO{
																								<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#14->Node.DataProcess1->dp1.dp1_reach_k" as trace="tpid#14->Node.DataProcess1->dp1.dp1_reach_k">
																							}
																							PC: (((z_197 + z_200) == 4) && ((z_257 + z_572) == 8) && ((z_608 + z_632) == 4) && 
	(z_129 == t_68) && (z_197 == t_32) && (z_24 == t_3) && (z_257 == t_108) && (z_43 
	== t_21) && (z_608 == t_796) && (z_635 == t_829) && (t_108 < 8) && (t_21 < 4) && 
	(t_270 < 8) && (t_3 < 4) && (t_32 < 4) && (t_6 < 4) && (t_9 < 4) && (t_190 < 4) 
	&& (t_337 < 4) && (t_68 < 4) && (t_796 < 4) && (t_829 < 8) && (z_184 < t_190) && 
	(z_34 < t_6) && (z_53 < t_9) && (0 <= (t_108 + -4)) && (0 <= (t_21 + -2)) && (0 
	<= (t_270 + -4)) && (0 <= (t_3 + -2)) && (0 <= (t_32 + -2)) && (0 <= (t_6 + -2)) 
	&& (0 <= (t_9 + -2)) && (0 <= (t_190 + -2)) && (0 <= (t_337 + -2)) && (0 <= 
	(t_68 + -2)) && (0 <= (t_796 + -2)) && (0 <= (t_829 + -4)) && ((z_0 + z_129 + 
	z_24 + z_3 + z_72) <= (z_1 + z_139 + z_184 + z_34 + z_43 + z_7)) && ((z_0 + z_24 
	+ z_3) <= (z_1 + z_34 + z_7)) && ((z_0 + z_24 + z_3) <= (z_14 + z_2 + z_53)) && 
	((z_197 + z_200) > t_32) && ((z_257 + z_572) > t_108) && ((z_608 + z_632) > 
	t_796) && (z_0 > 0) && (z_1 > 0) && (z_129 > 0) && (z_139 > 0) && (z_14 > 0) && 
	(z_197 > 0) && (z_2 > 0) && (z_200 > 0) && (z_24 > 0) && (z_257 > 0) && (z_3 > 0)
	 && (z_34 > 0) && (z_43 > 0) && (z_53 > 0) && (z_572 > 0) && (z_575 > 0) && 
	(z_605 > 0) && (z_608 > 0) && (z_632 > 0) && (z_7 > 0) && (z_72 > 0))
																							DATA{
																								:pid_2:uncoveredExit = 4;
																								:pid_51:node_time = (z_14 + z_197 + z_200 + z_257 + z_53 + z_572 + z_575 + z_605 + z_608 + z_632 + z_635);
																								:pid_51:z = z_635;
																								:pid_51:localTime = (z_14 + z_197 + z_2 + z_200 + z_257 + z_53 + z_572 + z_575 + z_605 + z_608 + z_632 + z_635);
																								:pid_51:localPC = (((z_197 + z_200) == 4) && ((z_257 + z_572) == 8) && ((z_608 + z_632) == 4) && (z_197 == t_32) && (z_257 == t_108) && (z_608 == t_796) && (z_635 == t_829) && (t_108 < 8) && (t_270 < 8) && (t_32 < 4) && (t_9 < 4) && (t_796 < 4) && (t_829 < 8) && (z_53 < t_9) && (0 <= (t_108 + -4)) && (0 <= (t_270 + -4)) && (0 <= (t_32 + -2)) && (0 <= (t_9 + -2)) && (0 <= (t_796 + -2)) && (0 <= (t_829 + -4)) && ((z_0 + z_24 + z_3) <= (z_14 + z_2 + z_53)) && ((z_197 + z_200) > t_32) && ((z_257 + z_572) > t_108) && ((z_608 + z_632) > t_796) && (z_14 > 0) && (z_197 > 0) && (z_2 > 0) && (z_200 > 0) && (z_257 > 0) && (z_53 > 0) && (z_572 > 0) && (z_575 > 0) && (z_605 > 0) && (z_608 > 0) && (z_632 > 0));
																								:pid_58:cl = z_635;
																								:pid_63:cl = (z_14 + z_197 + z_200 + z_257 + z_53 + z_572 + z_575 + z_605 + z_608 + z_632 + z_635);
																							}
																							EC:<Id:1931;Ev:221;H:23;W:571>{ SC: ( pid_13:o#9 , ( pid_22:cp2 , pid_27:dp2 , pid_31:dp1 ) , ( pid_39:cp2 , pid_43:dp1 , pid_47:dp0 ) , ( pid_57:cp3 , pid_60:dp1 , pid_64:dp0 ) )
																					
				EXE: { |;| (:pid_51 , run) (:pid_58 , run) (:pid_61 , run) (:pid_61 
	, dp_resetTau) (:pid_2 , run) }
																					
				TRACE: { |;| (:pid_51 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_659 }) (:pid_61 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_862 }) }
																								PC: (((z_197 + z_200) == 4) && ((z_257 + z_572) == 8) && ((z_608 + z_632) == 4) && 
	((z_635 + z_659) == 8) && (z_129 == t_68) && (z_197 == t_32) && (z_24 == t_3) && 
	(z_257 == t_108) && (z_43 == t_21) && (z_608 == t_796) && (z_635 == t_829) && 
	(t_108 < 8) && (t_21 < 4) && (t_270 < 8) && (t_3 < 4) && (t_32 < 4) && (t_6 < 4) 
	&& (t_9 < 4) && (t_190 < 4) && (t_337 < 4) && (t_68 < 4) && (t_796 < 4) && 
	(t_829 < 8) && (t_862 < 8) && (z_184 < t_190) && (z_34 < t_6) && (z_53 < t_9) && 
	(0 <= (t_108 + -4)) && (0 <= (t_21 + -2)) && (0 <= (t_270 + -4)) && (0 <= (t_3 + 
	-2)) && (0 <= (t_32 + -2)) && (0 <= (t_6 + -2)) && (0 <= (t_9 + -2)) && (0 <= 
	(t_190 + -2)) && (0 <= (t_337 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_796 + -2))
	 && (0 <= (t_829 + -4)) && (0 <= (t_862 + -4)) && ((z_0 + z_129 + z_24 + z_3 + 
	z_72) <= (z_1 + z_139 + z_184 + z_34 + z_43 + z_7)) && ((z_0 + z_24 + z_3) <= 
	(z_1 + z_34 + z_7)) && ((z_0 + z_24 + z_3) <= (z_14 + z_2 + z_53)) && ((z_197 + 
	z_200) > t_32) && ((z_257 + z_572) > t_108) && ((z_608 + z_632) > t_796) && 
	((z_635 + z_659) > t_829) && (z_0 > 0) && (z_1 > 0) && (z_129 > 0) && (z_139 > 0)
	 && (z_14 > 0) && (z_197 > 0) && (z_2 > 0) && (z_200 > 0) && (z_24 > 0) && 
	(z_257 > 0) && (z_3 > 0) && (z_34 > 0) && (z_43 > 0) && (z_53 > 0) && (z_572 > 0)
	 && (z_575 > 0) && (z_605 > 0) && (z_608 > 0) && (z_632 > 0) && (z_635 > 0) && 
	(z_7 > 0) && (z_72 > 0))
																								DATA{
																									:pid_2:uncoveredExit = 5;
																									:pid_51:node_time = (z_14 + z_197 + z_200 + z_257 + z_53 + z_572 + z_575 + z_605 + z_608 + z_632 + z_635 + z_659);
																									:pid_51:z = z_659;
																									:pid_51:localTime = (z_14 + z_197 + z_2 + z_200 + z_257 + z_53 + z_572 + z_575 + z_605 + z_608 + z_632 + z_635 + z_659);
																									:pid_51:localPC = (((z_197 + z_200) == 4) && ((z_257 + z_572) == 8) && ((z_608 + z_632) == 4) && ((z_635 + z_659) == 8) && (z_197 == t_32) && (z_257 == t_108) && (z_608 == t_796) && (z_635 == t_829) && (t_108 < 8) && (t_270 < 8) && (t_32 < 4) && (t_9 < 4) && (t_796 < 4) && (t_829 < 8) && (t_862 < 8) && (z_53 < t_9) && (0 <= (t_108 + -4)) && (0 <= (t_270 + -4)) && (0 <= (t_32 + -2)) && (0 <= (t_9 + -2)) && (0 <= (t_796 + -2)) && (0 <= (t_829 + -4)) && (0 <= (t_862 + -4)) && ((z_0 + z_24 + z_3) <= (z_14 + z_2 + z_53)) && ((z_197 + z_200) > t_32) && ((z_257 + z_572) > t_108) && ((z_608 + z_632) > t_796) && ((z_635 + z_659) > t_829) && (z_14 > 0) && (z_197 > 0) && (z_2 > 0) && (z_200 > 0) && (z_257 > 0) && (z_53 > 0) && (z_572 > 0) && (z_575 > 0) && (z_605 > 0) && (z_608 > 0) && (z_632 > 0) && (z_635 > 0));
																									:pid_58:e = 2;
																									:pid_58:tau = 8;
																									:pid_58:t = t_862;
																									:pid_58:cl = 0;
																									:pid_63:cl = (z_14 + z_197 + z_200 + z_257 + z_53 + z_572 + z_575 + z_605 + z_608 + z_632 + z_635 + z_659);
																								}
																								EC:<Id:1939;Ev:229;H:24;W:571>{ SC: ( pid_14:o#10 , ( pid_22:cp2 , pid_27:dp2 , pid_31:dp1 ) , ( pid_39:cp2 , pid_43:dp1 , pid_47:dp0 ) , ( pid_57:cp3 , pid_62:dp3 , pid_64:dp0 ) )
																					
					EXE: { |;| (:pid_51 , run) (:pid_58 , run) (:pid_60 , run) 
	(:pid_60 , dp1_DATA_EXPIR) (:pid_2 , run) (:pid_13 , run) (:pid_13 , n4_out_Log) 
	}
																					
					TRACE: { |;| (:pid_51 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_662 }) (:pid_60 , ${ output#env inst::Trickle.Node.Log 2 
	${ + param::Trickle.Node.z_14 param::Trickle.Node.z_197 param::Trickle.Node.z_2 
	param::Trickle.Node.z_200 param::Trickle.Node.z_257 param::Trickle.Node.z_53 
	param::Trickle.Node.z_572 param::Trickle.Node.z_575 param::Trickle.Node.z_605 
	param::Trickle.Node.z_608 param::Trickle.Node.z_632 param::Trickle.Node.z_635 
	param::Trickle.Node.z_659 param::Trickle.Node.z_662 } } @ (z_14 + z_197 + z_200 
	+ z_257 + z_53 + z_572 + z_575 + z_605 + z_608 + z_632 + z_635 + z_659 + z_662)) 
	}
																									/*FLAGS{ COVERAGE-ELEMENT }*/
																									INFO{
																										<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#15->run::pid_14:Trickle.Observer.o#10->prot::Trickle.Observer.o#10" as trace="tpid#15->run::pid_14:Trickle.Observer.o#10->prot::Trickle.Observer.o#10">
																									}
																									PC: (((z_197 + z_200) == 4) && ((z_257 + z_572) == 8) && ((z_608 + z_632) == 4) && 
	((z_635 + z_659) == 8) && (z_129 == t_68) && (z_197 == t_32) && (z_24 == t_3) && 
	(z_257 == t_108) && (z_43 == t_21) && (z_608 == t_796) && (z_635 == t_829) && 
	(t_108 < 8) && (t_21 < 4) && (t_270 < 8) && (t_3 < 4) && (t_32 < 4) && (t_6 < 4) 
	&& (t_9 < 4) && (t_190 < 4) && (t_337 < 4) && (t_68 < 4) && (t_796 < 4) && 
	(t_829 < 8) && (t_862 < 8) && (z_184 < t_190) && (z_34 < t_6) && (z_53 < t_9) && 
	(0 <= (t_108 + -4)) && (0 <= (t_21 + -2)) && (0 <= (t_270 + -4)) && (0 <= (t_3 + 
	-2)) && (0 <= (t_32 + -2)) && (0 <= (t_6 + -2)) && (0 <= (t_9 + -2)) && (0 <= 
	(t_190 + -2)) && (0 <= (t_337 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_796 + -2))
	 && (0 <= (t_829 + -4)) && (0 <= (t_862 + -4)) && ((z_0 + z_129 + z_24 + z_3 + 
	z_72) <= (z_1 + z_139 + z_184 + z_34 + z_43 + z_7)) && ((z_0 + z_24 + z_3) <= 
	(z_1 + z_34 + z_7)) && ((z_0 + z_24 + z_3) <= (z_14 + z_2 + z_53)) && ((z_197 + 
	z_200) > t_32) && ((z_257 + z_572) > t_108) && ((z_608 + z_632) > t_796) && 
	((z_635 + z_659) > t_829) && (z_0 > 0) && (z_1 > 0) && (z_129 > 0) && (z_139 > 0)
	 && (z_14 > 0) && (z_197 > 0) && (z_2 > 0) && (z_200 > 0) && (z_24 > 0) && 
	(z_257 > 0) && (z_3 > 0) && (z_34 > 0) && (z_43 > 0) && (z_53 > 0) && (z_572 > 0)
	 && (z_575 > 0) && (z_605 > 0) && (z_608 > 0) && (z_632 > 0) && (z_635 > 0) && 
	(z_659 > 0) && (z_7 > 0) && (z_72 > 0))
																									DATA{
																										:pid_2:uncoveredExit = 0;
																										:pid_2:mess = TERMIN_DM1;
																										:pid_51:node_time = (z_14 + z_197 + z_200 + z_257 + z_53 + z_572 + z_575 + z_605 + z_608 + z_632 + z_635 + z_659 + z_662);
																										:pid_51:z = z_662;
																										:pid_51:localTime = (z_14 + z_197 + z_2 + z_200 + z_257 + z_53 + z_572 + z_575 + z_605 + z_608 + z_632 + z_635 + z_659 + z_662);
																										:pid_51:localPC = (((z_197 + z_200) == 4) && ((z_257 + z_572) == 8) && ((z_608 + z_632) == 4) && ((z_635 + z_659) == 8) && (z_197 == t_32) && (z_257 == t_108) && (z_608 == t_796) && (z_635 == t_829) && (t_108 < 8) && (t_270 < 8) && (t_32 < 4) && (t_9 < 4) && (t_796 < 4) && (t_829 < 8) && (t_862 < 8) && (z_53 < t_9) && (0 <= (t_108 + -4)) && (0 <= (t_270 + -4)) && (0 <= (t_32 + -2)) && (0 <= (t_9 + -2)) && (0 <= (t_796 + -2)) && (0 <= (t_829 + -4)) && (0 <= (t_862 + -4)) && ((z_0 + z_24 + z_3) <= (z_14 + z_2 + z_53)) && ((z_197 + z_200) > t_32) && ((z_257 + z_572) > t_108) && ((z_608 + z_632) > t_796) && ((z_635 + z_659) > t_829) && (z_14 > 0) && (z_197 > 0) && (z_2 > 0) && (z_200 > 0) && (z_257 > 0) && (z_53 > 0) && (z_572 > 0) && (z_575 > 0) && (z_605 > 0) && (z_608 > 0) && (z_632 > 0) && (z_635 > 0) && (z_659 > 0));
																										:pid_58:e = 2;
																										:pid_58:cl = z_662;
																										:pid_63:cl = (z_14 + z_197 + z_200 + z_257 + z_53 + z_572 + z_575 + z_605 + z_608 + z_632 + z_635 + z_659 + z_662);
																									}
																									EC:<Id:2000;Ev:230;H:25;W:571>{ SC: ( pid_14:o#10 , ( pid_22:cp2 , pid_27:dp2 , pid_31:dp1 ) , ( pid_39:cp2 , pid_43:dp1 , pid_47:dp0 ) , ( pid_57:cp3 , pid_62:dp3 , pid_65:dp1 ) )
																					
						EXE: { |;| (:pid_51 , run) (:pid_63 , run) (:pid_64 , run) 
	(:pid_64 , dp_init) (:pid_2 , run) }
																					
						TRACE: { |;| (:pid_51 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_686 }) (:pid_64 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_895 }) }
																										PC: (((z_197 + z_200) == 4) && ((z_257 + z_572) == 8) && ((z_608 + z_632) == 4) && 
	((z_635 + z_659) == 8) && (z_129 == t_68) && (z_197 == t_32) && (z_24 == t_3) && 
	(z_257 == t_108) && (z_43 == t_21) && (z_608 == t_796) && (z_635 == t_829) && 
	(t_108 < 8) && (t_21 < 4) && (t_270 < 8) && (t_3 < 4) && (t_32 < 4) && (t_6 < 4) 
	&& (t_9 < 4) && (t_190 < 4) && (t_337 < 4) && (t_68 < 4) && (t_796 < 4) && 
	(t_829 < 8) && (t_862 < 8) && (t_895 < 4) && (z_184 < t_190) && (z_34 < t_6) && 
	(z_53 < t_9) && (0 <= (t_108 + -4)) && (0 <= (t_21 + -2)) && (0 <= (t_270 + -4)) 
	&& (0 <= (t_3 + -2)) && (0 <= (t_32 + -2)) && (0 <= (t_6 + -2)) && (0 <= (t_9 + 
	-2)) && (0 <= (t_190 + -2)) && (0 <= (t_337 + -2)) && (0 <= (t_68 + -2)) && (0 
	<= (t_796 + -2)) && (0 <= (t_829 + -4)) && (0 <= (t_862 + -4)) && (0 <= (t_895 + 
	-2)) && ((z_0 + z_129 + z_24 + z_3 + z_72) <= (z_1 + z_139 + z_184 + z_34 + z_43 
	+ z_7)) && ((z_0 + z_24 + z_3) <= (z_1 + z_34 + z_7)) && ((z_0 + z_24 + z_3) <= 
	(z_14 + z_2 + z_53)) && ((z_197 + z_200) > t_32) && ((z_257 + z_572) > t_108) && 
	((z_608 + z_632) > t_796) && ((z_635 + z_659) > t_829) && (z_0 > 0) && (z_1 > 0) 
	&& (z_129 > 0) && (z_139 > 0) && (z_14 > 0) && (z_197 > 0) && (z_2 > 0) && 
	(z_200 > 0) && (z_24 > 0) && (z_257 > 0) && (z_3 > 0) && (z_34 > 0) && (z_43 > 0)
	 && (z_53 > 0) && (z_572 > 0) && (z_575 > 0) && (z_605 > 0) && (z_608 > 0) && 
	(z_632 > 0) && (z_635 > 0) && (z_659 > 0) && (z_662 > 0) && (z_7 > 0) && (z_72 > 
	0))
																										DATA{
																											:pid_2:uncoveredExit = 1;
																											:pid_51:node_time = (z_14 + z_197 + z_200 + z_257 + z_53 + z_572 + z_575 + z_605 + z_608 + z_632 + z_635 + z_659 + z_662 + z_686);
																											:pid_51:z = z_686;
																											:pid_51:localTime = (z_14 + z_197 + z_2 + z_200 + z_257 + z_53 + z_572 + z_575 + z_605 + z_608 + z_632 + z_635 + z_659 + z_662 + z_686);
																											:pid_51:localPC = (((z_197 + z_200) == 4) && ((z_257 + z_572) == 8) && ((z_608 + z_632) == 4) && ((z_635 + z_659) == 8) && (z_197 == t_32) && (z_257 == t_108) && (z_608 == t_796) && (z_635 == t_829) && (t_108 < 8) && (t_270 < 8) && (t_32 < 4) && (t_9 < 4) && (t_796 < 4) && (t_829 < 8) && (t_862 < 8) && (t_895 < 4) && (z_53 < t_9) && (0 <= (t_108 + -4)) && (0 <= (t_270 + -4)) && (0 <= (t_32 + -2)) && (0 <= (t_9 + -2)) && (0 <= (t_796 + -2)) && (0 <= (t_829 + -4)) && (0 <= (t_862 + -4)) && (0 <= (t_895 + -2)) && ((z_0 + z_24 + z_3) <= (z_14 + z_2 + z_53)) && ((z_197 + z_200) > t_32) && ((z_257 + z_572) > t_108) && ((z_608 + z_632) > t_796) && ((z_635 + z_659) > t_829) && (z_14 > 0) && (z_197 > 0) && (z_2 > 0) && (z_200 > 0) && (z_257 > 0) && (z_53 > 0) && (z_572 > 0) && (z_575 > 0) && (z_605 > 0) && (z_608 > 0) && (z_632 > 0) && (z_635 > 0) && (z_659 > 0) && (z_662 > 0));
																											:pid_63:e = 0;
																											:pid_63:tau = 4;
																											:pid_63:tau_l = 4;
																											:pid_63:tau_h = 8;
																											:pid_63:k = 2;
																											:pid_63:c = 0;
																											:pid_63:t = t_895;
																											:pid_63:cl = 0;
																										}
																										EC:<Id:2007;Ev:237;H:26;W:571>{ SC: ( pid_14:o#10 , ( pid_22:cp2 , pid_27:dp2 , pid_31:dp1 ) , ( pid_39:cp2 , pid_43:dp1 , pid_47:dp0 ) , ( pid_57:cp3 , pid_62:dp3 , pid_66:dp2 ) )
																					
							EXE: { |;| (:pid_51 , run) (:pid_63 , run) (:pid_65 , 
	run) (:pid_65 , dp1_reach_k) (:pid_2 , run) }
																					
							TRACE: (:pid_51 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_689 })
																											/*FLAGS{ COVERAGE-ELEMENT }*/
																											INFO{
																												<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#16->Node.DataProcess2->dp1.dp1_reach_k" as trace="tpid#16->Node.DataProcess2->dp1.dp1_reach_k">
																											}
																											PC: (((z_197 + z_200) == 4) && ((z_257 + z_572) == 8) && ((z_608 + z_632) == 4) && 
	((z_635 + z_659) == 8) && (z_129 == t_68) && (z_197 == t_32) && (z_24 == t_3) && 
	(z_257 == t_108) && (z_43 == t_21) && (z_608 == t_796) && (z_635 == t_829) && 
	(z_689 == t_895) && (t_108 < 8) && (t_21 < 4) && (t_270 < 8) && (t_3 < 4) && 
	(t_32 < 4) && (t_6 < 4) && (t_9 < 4) && (t_190 < 4) && (t_337 < 4) && (t_68 < 4) 
	&& (t_796 < 4) && (t_829 < 8) && (t_862 < 8) && (t_895 < 4) && (z_184 < t_190) 
	&& (z_34 < t_6) && (z_53 < t_9) && (0 <= (t_108 + -4)) && (0 <= (t_21 + -2)) && 
	(0 <= (t_270 + -4)) && (0 <= (t_3 + -2)) && (0 <= (t_32 + -2)) && (0 <= (t_6 + 
	-2)) && (0 <= (t_9 + -2)) && (0 <= (t_190 + -2)) && (0 <= (t_337 + -2)) && (0 <= 
	(t_68 + -2)) && (0 <= (t_796 + -2)) && (0 <= (t_829 + -4)) && (0 <= (t_862 + -4))
	 && (0 <= (t_895 + -2)) && ((z_0 + z_129 + z_24 + z_3 + z_72) <= (z_1 + z_139 + 
	z_184 + z_34 + z_43 + z_7)) && ((z_0 + z_24 + z_3) <= (z_1 + z_34 + z_7)) && 
	((z_0 + z_24 + z_3) <= (z_14 + z_2 + z_53)) && ((z_197 + z_200) > t_32) && 
	((z_257 + z_572) > t_108) && ((z_608 + z_632) > t_796) && ((z_635 + z_659) > 
	t_829) && (z_0 > 0) && (z_1 > 0) && (z_129 > 0) && (z_139 > 0) && (z_14 > 0) && 
	(z_197 > 0) && (z_2 > 0) && (z_200 > 0) && (z_24 > 0) && (z_257 > 0) && (z_3 > 0)
	 && (z_34 > 0) && (z_43 > 0) && (z_53 > 0) && (z_572 > 0) && (z_575 > 0) && 
	(z_605 > 0) && (z_608 > 0) && (z_632 > 0) && (z_635 > 0) && (z_659 > 0) && 
	(z_662 > 0) && (z_686 > 0) && (z_7 > 0) && (z_72 > 0))
																											DATA{
																												:pid_2:uncoveredExit = 2;
																												:pid_51:node_time = (z_14 + z_197 + z_200 + z_257 + z_53 + z_572 + z_575 + z_605 + z_608 + z_632 + z_635 + z_659 + z_662 + z_686 + z_689);
																												:pid_51:z = z_689;
																												:pid_51:localTime = (z_14 + z_197 + z_2 + z_200 + z_257 + z_53 + z_572 + z_575 + z_605 + z_608 + z_632 + z_635 + z_659 + z_662 + z_686 + z_689);
																												:pid_51:localPC = (((z_197 + z_200) == 4) && ((z_257 + z_572) == 8) && ((z_608 + z_632) == 4) && ((z_635 + z_659) == 8) && (z_197 == t_32) && (z_257 == t_108) && (z_608 == t_796) && (z_635 == t_829) && (z_689 == t_895) && (t_108 < 8) && (t_270 < 8) && (t_32 < 4) && (t_9 < 4) && (t_796 < 4) && (t_829 < 8) && (t_862 < 8) && (t_895 < 4) && (z_53 < t_9) && (0 <= (t_108 + -4)) && (0 <= (t_270 + -4)) && (0 <= (t_32 + -2)) && (0 <= (t_9 + -2)) && (0 <= (t_796 + -2)) && (0 <= (t_829 + -4)) && (0 <= (t_862 + -4)) && (0 <= (t_895 + -2)) && ((z_0 + z_24 + z_3) <= (z_14 + z_2 + z_53)) && ((z_197 + z_200) > t_32) && ((z_257 + z_572) > t_108) && ((z_608 + z_632) > t_796) && ((z_635 + z_659) > t_829) && (z_14 > 0) && (z_197 > 0) && (z_2 > 0) && (z_200 > 0) && (z_257 > 0) && (z_53 > 0) && (z_572 > 0) && (z_575 > 0) && (z_605 > 0) && (z_608 > 0) && (z_632 > 0) && (z_635 > 0) && (z_659 > 0) && (z_662 > 0) && (z_686 > 0));
																												:pid_63:cl = z_689;
																											}
																											EC:<Id:2053;Ev:238;H:27;W:571>{ SC: ( pid_14:o#10 , ( pid_22:cp2 , pid_27:dp2 , pid_31:dp1 ) , ( pid_39:cp2 , pid_43:dp1 , pid_47:dp0 ) , ( pid_57:cp3 , pid_62:dp3 , pid_65:dp1 ) )
																					
								EXE: { |;| (:pid_51 , run) (:pid_63 , run) (:pid_66 
	, run) (:pid_66 , dp_resetTau) (:pid_2 , run) }
																					
								TRACE: { |;| (:pid_51 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_710 }) (:pid_66 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_917 }) }
																												/*FLAGS{ COVERAGE-ELEMENT }*/
																												INFO{
																													<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#17->Node.DataProcess2->dp2.dp_resetTau" as trace="tpid#17->Node.DataProcess2->dp2.dp_resetTau">
																												}
																												PC: (((z_197 + z_200) == 4) && ((z_257 + z_572) == 8) && ((z_608 + z_632) == 4) && 
	((z_635 + z_659) == 8) && ((z_689 + z_710) == 4) && (z_129 == t_68) && (z_197 == 
	t_32) && (z_24 == t_3) && (z_257 == t_108) && (z_43 == t_21) && (z_608 == t_796) 
	&& (z_635 == t_829) && (z_689 == t_895) && (t_108 < 8) && (t_21 < 4) && (t_270 < 
	8) && (t_3 < 4) && (t_32 < 4) && (t_6 < 4) && (t_9 < 4) && (t_190 < 4) && (t_337 
	< 4) && (t_68 < 4) && (t_796 < 4) && (t_829 < 8) && (t_862 < 8) && (t_895 < 4) 
	&& (t_917 < 8) && (z_184 < t_190) && (z_34 < t_6) && (z_53 < t_9) && (0 <= 
	(t_108 + -4)) && (0 <= (t_21 + -2)) && (0 <= (t_270 + -4)) && (0 <= (t_3 + -2)) 
	&& (0 <= (t_32 + -2)) && (0 <= (t_6 + -2)) && (0 <= (t_9 + -2)) && (0 <= (t_190 
	+ -2)) && (0 <= (t_337 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_796 + -2)) && (0 
	<= (t_829 + -4)) && (0 <= (t_862 + -4)) && (0 <= (t_895 + -2)) && (0 <= (t_917 + 
	-4)) && ((z_0 + z_129 + z_24 + z_3 + z_72) <= (z_1 + z_139 + z_184 + z_34 + z_43 
	+ z_7)) && ((z_0 + z_24 + z_3) <= (z_1 + z_34 + z_7)) && ((z_0 + z_24 + z_3) <= 
	(z_14 + z_2 + z_53)) && ((z_197 + z_200) > t_32) && ((z_257 + z_572) > t_108) && 
	((z_608 + z_632) > t_796) && ((z_635 + z_659) > t_829) && ((z_689 + z_710) > 
	t_895) && (z_0 > 0) && (z_1 > 0) && (z_129 > 0) && (z_139 > 0) && (z_14 > 0) && 
	(z_197 > 0) && (z_2 > 0) && (z_200 > 0) && (z_24 > 0) && (z_257 > 0) && (z_3 > 0)
	 && (z_34 > 0) && (z_43 > 0) && (z_53 > 0) && (z_572 > 0) && (z_575 > 0) && 
	(z_605 > 0) && (z_608 > 0) && (z_632 > 0) && (z_635 > 0) && (z_659 > 0) && 
	(z_662 > 0) && (z_686 > 0) && (z_689 > 0) && (z_7 > 0) && (z_72 > 0))
																												DATA{
																													:pid_2:uncoveredExit = 3;
																													:pid_51:node_time = (z_14 + z_197 + z_200 + z_257 + z_53 + z_572 + z_575 + z_605 + z_608 + z_632 + z_635 + z_659 + z_662 + z_686 + z_689 + z_710);
																													:pid_51:z = z_710;
																													:pid_51:localTime = (z_14 + z_197 + z_2 + z_200 + z_257 + z_53 + z_572 + z_575 + z_605 + z_608 + z_632 + z_635 + z_659 + z_662 + z_686 + z_689 + z_710);
																													:pid_51:localPC = (((z_197 + z_200) == 4) && ((z_257 + z_572) == 8) && ((z_608 + z_632) == 4) && ((z_635 + z_659) == 8) && ((z_689 + z_710) == 4) && (z_197 == t_32) && (z_257 == t_108) && (z_608 == t_796) && (z_635 == t_829) && (z_689 == t_895) && (t_108 < 8) && (t_270 < 8) && (t_32 < 4) && (t_9 < 4) && (t_796 < 4) && (t_829 < 8) && (t_862 < 8) && (t_895 < 4) && (t_917 < 8) && (z_53 < t_9) && (0 <= (t_108 + -4)) && (0 <= (t_270 + -4)) && (0 <= (t_32 + -2)) && (0 <= (t_9 + -2)) && (0 <= (t_796 + -2)) && (0 <= (t_829 + -4)) && (0 <= (t_862 + -4)) && (0 <= (t_895 + -2)) && (0 <= (t_917 + -4)) && ((z_0 + z_24 + z_3) <= (z_14 + z_2 + z_53)) && ((z_197 + z_200) > t_32) && ((z_257 + z_572) > t_108) && ((z_608 + z_632) > t_796) && ((z_635 + z_659) > t_829) && ((z_689 + z_710) > t_895) && (z_14 > 0) && (z_197 > 0) && (z_2 > 0) && (z_200 > 0) && (z_257 > 0) && (z_53 > 0) && (z_572 > 0) && (z_575 > 0) && (z_605 > 0) && (z_608 > 0) && (z_632 > 0) && (z_635 > 0) && (z_659 > 0) && (z_662 > 0) && (z_686 > 0) && (z_689 > 0));
																													:pid_63:e = 1;
																													:pid_63:tau = 8;
																													:pid_63:c = 0;
																													:pid_63:t = t_917;
																													:pid_63:cl = 0;
																												}
																												EC:<Id:2060;Ev:245;H:28;W:571>{ SC: ( pid_14:o#10 , ( pid_22:cp2 , pid_27:dp2 , pid_31:dp1 ) , ( pid_39:cp2 , pid_43:dp1 , pid_47:dp0 ) , ( pid_57:cp3 , pid_62:dp3 , pid_66:dp2 ) )
																					
									EXE: { |;| (:pid_51 , run) (:pid_63 , run) 
	(:pid_65 , run) (:pid_65 , dp1_reach_k) (:pid_2 , run) }
																					
									TRACE: (:pid_51 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_713 })
																													/*FLAGS{ COVERAGE-ELEMENT }*/
																													INFO{
																														<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#18->Node.DataProcess2->dp1.dp1_reach_k" as trace="tpid#18->Node.DataProcess2->dp1.dp1_reach_k">
																													}
																													PC: (((z_197 + z_200) == 4) && ((z_257 + z_572) == 8) && ((z_608 + z_632) == 4) && 
	((z_635 + z_659) == 8) && ((z_689 + z_710) == 4) && (z_129 == t_68) && (z_197 == 
	t_32) && (z_24 == t_3) && (z_257 == t_108) && (z_43 == t_21) && (z_608 == t_796) 
	&& (z_635 == t_829) && (z_689 == t_895) && (z_713 == t_917) && (t_108 < 8) && 
	(t_21 < 4) && (t_270 < 8) && (t_3 < 4) && (t_32 < 4) && (t_6 < 4) && (t_9 < 4) 
	&& (t_190 < 4) && (t_337 < 4) && (t_68 < 4) && (t_796 < 4) && (t_829 < 8) && 
	(t_862 < 8) && (t_895 < 4) && (t_917 < 8) && (z_184 < t_190) && (z_34 < t_6) && 
	(z_53 < t_9) && (0 <= (t_108 + -4)) && (0 <= (t_21 + -2)) && (0 <= (t_270 + -4)) 
	&& (0 <= (t_3 + -2)) && (0 <= (t_32 + -2)) && (0 <= (t_6 + -2)) && (0 <= (t_9 + 
	-2)) && (0 <= (t_190 + -2)) && (0 <= (t_337 + -2)) && (0 <= (t_68 + -2)) && (0 
	<= (t_796 + -2)) && (0 <= (t_829 + -4)) && (0 <= (t_862 + -4)) && (0 <= (t_895 + 
	-2)) && (0 <= (t_917 + -4)) && ((z_0 + z_129 + z_24 + z_3 + z_72) <= (z_1 + 
	z_139 + z_184 + z_34 + z_43 + z_7)) && ((z_0 + z_24 + z_3) <= (z_1 + z_34 + z_7))
	 && ((z_0 + z_24 + z_3) <= (z_14 + z_2 + z_53)) && ((z_197 + z_200) > t_32) && 
	((z_257 + z_572) > t_108) && ((z_608 + z_632) > t_796) && ((z_635 + z_659) > 
	t_829) && ((z_689 + z_710) > t_895) && (z_0 > 0) && (z_1 > 0) && (z_129 > 0) && 
	(z_139 > 0) && (z_14 > 0) && (z_197 > 0) && (z_2 > 0) && (z_200 > 0) && (z_24 > 
	0) && (z_257 > 0) && (z_3 > 0) && (z_34 > 0) && (z_43 > 0) && (z_53 > 0) && 
	(z_572 > 0) && (z_575 > 0) && (z_605 > 0) && (z_608 > 0) && (z_632 > 0) && 
	(z_635 > 0) && (z_659 > 0) && (z_662 > 0) && (z_686 > 0) && (z_689 > 0) && (z_7 
	> 0) && (z_710 > 0) && (z_72 > 0))
																													DATA{
																														:pid_2:uncoveredExit = 4;
																														:pid_51:node_time = (z_14 + z_197 + z_200 + z_257 + z_53 + z_572 + z_575 + z_605 + z_608 + z_632 + z_635 + z_659 + z_662 + z_686 + z_689 + z_710 + z_713);
																														:pid_51:z = z_713;
																														:pid_51:localTime = (z_14 + z_197 + z_2 + z_200 + z_257 + z_53 + z_572 + z_575 + z_605 + z_608 + z_632 + z_635 + z_659 + z_662 + z_686 + z_689 + z_710 + z_713);
																														:pid_51:localPC = (((z_197 + z_200) == 4) && ((z_257 + z_572) == 8) && ((z_608 + z_632) == 4) && ((z_635 + z_659) == 8) && ((z_689 + z_710) == 4) && (z_197 == t_32) && (z_257 == t_108) && (z_608 == t_796) && (z_635 == t_829) && (z_689 == t_895) && (z_713 == t_917) && (t_108 < 8) && (t_270 < 8) && (t_32 < 4) && (t_9 < 4) && (t_796 < 4) && (t_829 < 8) && (t_862 < 8) && (t_895 < 4) && (t_917 < 8) && (z_53 < t_9) && (0 <= (t_108 + -4)) && (0 <= (t_270 + -4)) && (0 <= (t_32 + -2)) && (0 <= (t_9 + -2)) && (0 <= (t_796 + -2)) && (0 <= (t_829 + -4)) && (0 <= (t_862 + -4)) && (0 <= (t_895 + -2)) && (0 <= (t_917 + -4)) && ((z_0 + z_24 + z_3) <= (z_14 + z_2 + z_53)) && ((z_197 + z_200) > t_32) && ((z_257 + z_572) > t_108) && ((z_608 + z_632) > t_796) && ((z_635 + z_659) > t_829) && ((z_689 + z_710) > t_895) && (z_14 > 0) && (z_197 > 0) && (z_2 > 0) && (z_200 > 0) && (z_257 > 0) && (z_53 > 0) && (z_572 > 0) && (z_575 > 0) && (z_605 > 0) && (z_608 > 0) && (z_632 > 0) && (z_635 > 0) && (z_659 > 0) && (z_662 > 0) && (z_686 > 0) && (z_689 > 0) && (z_710 > 0));
																														:pid_63:cl = z_713;
																													}
																													EC:<Id:2106;Ev:246;H:29;W:571>{ SC: ( pid_14:o#10 , ( pid_22:cp2 , pid_27:dp2 , pid_31:dp1 ) , ( pid_39:cp2 , pid_43:dp1 , pid_47:dp0 ) , ( pid_57:cp3 , pid_62:dp3 , pid_65:dp1 ) )
																					
										EXE: { |;| (:pid_51 , run) (:pid_63 , run) 
	(:pid_66 , run) (:pid_66 , dp_resetTau) (:pid_2 , run) }
																					
										TRACE: { |;| (:pid_51 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_734 }) (:pid_66 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_939 }) }
																														PC: (((z_197 + z_200) == 4) && ((z_257 + z_572) == 8) && ((z_608 + z_632) == 4) && 
	((z_635 + z_659) == 8) && ((z_689 + z_710) == 4) && ((z_713 + z_734) == 8) && 
	(z_129 == t_68) && (z_197 == t_32) && (z_24 == t_3) && (z_257 == t_108) && (z_43 
	== t_21) && (z_608 == t_796) && (z_635 == t_829) && (z_689 == t_895) && (z_713 
	== t_917) && (t_108 < 8) && (t_21 < 4) && (t_270 < 8) && (t_3 < 4) && (t_32 < 4) 
	&& (t_6 < 4) && (t_9 < 4) && (t_190 < 4) && (t_337 < 4) && (t_68 < 4) && (t_796 
	< 4) && (t_829 < 8) && (t_862 < 8) && (t_895 < 4) && (t_917 < 8) && (t_939 < 8) 
	&& (z_184 < t_190) && (z_34 < t_6) && (z_53 < t_9) && (0 <= (t_108 + -4)) && (0 
	<= (t_21 + -2)) && (0 <= (t_270 + -4)) && (0 <= (t_3 + -2)) && (0 <= (t_32 + -2))
	 && (0 <= (t_6 + -2)) && (0 <= (t_9 + -2)) && (0 <= (t_190 + -2)) && (0 <= 
	(t_337 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_796 + -2)) && (0 <= (t_829 + -4))
	 && (0 <= (t_862 + -4)) && (0 <= (t_895 + -2)) && (0 <= (t_917 + -4)) && (0 <= 
	(t_939 + -4)) && ((z_0 + z_129 + z_24 + z_3 + z_72) <= (z_1 + z_139 + z_184 + 
	z_34 + z_43 + z_7)) && ((z_0 + z_24 + z_3) <= (z_1 + z_34 + z_7)) && ((z_0 + 
	z_24 + z_3) <= (z_14 + z_2 + z_53)) && ((z_197 + z_200) > t_32) && ((z_257 + 
	z_572) > t_108) && ((z_608 + z_632) > t_796) && ((z_635 + z_659) > t_829) && 
	((z_689 + z_710) > t_895) && ((z_713 + z_734) > t_917) && (z_0 > 0) && (z_1 > 0) 
	&& (z_129 > 0) && (z_139 > 0) && (z_14 > 0) && (z_197 > 0) && (z_2 > 0) && 
	(z_200 > 0) && (z_24 > 0) && (z_257 > 0) && (z_3 > 0) && (z_34 > 0) && (z_43 > 0)
	 && (z_53 > 0) && (z_572 > 0) && (z_575 > 0) && (z_605 > 0) && (z_608 > 0) && 
	(z_632 > 0) && (z_635 > 0) && (z_659 > 0) && (z_662 > 0) && (z_686 > 0) && 
	(z_689 > 0) && (z_7 > 0) && (z_710 > 0) && (z_713 > 0) && (z_72 > 0))
																														DATA{
																															:pid_2:uncoveredExit = 5;
																															:pid_51:node_time = (z_14 + z_197 + z_200 + z_257 + z_53 + z_572 + z_575 + z_605 + z_608 + z_632 + z_635 + z_659 + z_662 + z_686 + z_689 + z_710 + z_713 + z_734);
																															:pid_51:z = z_734;
																															:pid_51:localTime = (z_14 + z_197 + z_2 + z_200 + z_257 + z_53 + z_572 + z_575 + z_605 + z_608 + z_632 + z_635 + z_659 + z_662 + z_686 + z_689 + z_710 + z_713 + z_734);
																															:pid_51:localPC = (((z_197 + z_200) == 4) && ((z_257 + z_572) == 8) && ((z_608 + z_632) == 4) && ((z_635 + z_659) == 8) && ((z_689 + z_710) == 4) && ((z_713 + z_734) == 8) && (z_197 == t_32) && (z_257 == t_108) && (z_608 == t_796) && (z_635 == t_829) && (z_689 == t_895) && (z_713 == t_917) && (t_108 < 8) && (t_270 < 8) && (t_32 < 4) && (t_9 < 4) && (t_796 < 4) && (t_829 < 8) && (t_862 < 8) && (t_895 < 4) && (t_917 < 8) && (t_939 < 8) && (z_53 < t_9) && (0 <= (t_108 + -4)) && (0 <= (t_270 + -4)) && (0 <= (t_32 + -2)) && (0 <= (t_9 + -2)) && (0 <= (t_796 + -2)) && (0 <= (t_829 + -4)) && (0 <= (t_862 + -4)) && (0 <= (t_895 + -2)) && (0 <= (t_917 + -4)) && (0 <= (t_939 + -4)) && ((z_0 + z_24 + z_3) <= (z_14 + z_2 + z_53)) && ((z_197 + z_200) > t_32) && ((z_257 + z_572) > t_108) && ((z_608 + z_632) > t_796) && ((z_635 + z_659) > t_829) && ((z_689 + z_710) > t_895) && ((z_713 + z_734) > t_917) && (z_14 > 0) && (z_197 > 0) && (z_2 > 0) && (z_200 > 0) && (z_257 > 0) && (z_53 > 0) && (z_572 > 0) && (z_575 > 0) && (z_605 > 0) && (z_608 > 0) && (z_632 > 0) && (z_635 > 0) && (z_659 > 0) && (z_662 > 0) && (z_686 > 0) && (z_689 > 0) && (z_710 > 0) && (z_713 > 0));
																															:pid_63:e = 2;
																															:pid_63:tau = 8;
																															:pid_63:t = t_939;
																															:pid_63:cl = 0;
																														}
																														EC:<Id:2113;Ev:0;H:30;W:571>{ SC: ( pid_15:PASS , ( pid_22:cp2 , pid_27:dp2 , pid_31:dp1 ) , ( pid_39:cp2 , pid_43:dp1 , pid_47:dp0 ) , ( pid_57:cp3 , pid_62:dp3 , pid_67:dp3 ) )
																					
											EXE: { |;| (:pid_51 , run) (:pid_63 , 
	run) (:pid_65 , run) (:pid_65 , dp1_DATA_EXPIR) (:pid_2 , run) (:pid_14 , run) 
	(:pid_14 , n4_out_Log) }
																					
											TRACE: { |;| (:pid_51 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_737 }) (:pid_65 , ${ output#env 
	inst::Trickle.Node.Log 3 ${ + param::Trickle.Node.z_14 param::Trickle.Node.z_197 
	param::Trickle.Node.z_2 param::Trickle.Node.z_200 param::Trickle.Node.z_257 
	param::Trickle.Node.z_53 param::Trickle.Node.z_572 param::Trickle.Node.z_575 
	param::Trickle.Node.z_605 param::Trickle.Node.z_608 param::Trickle.Node.z_632 
	param::Trickle.Node.z_635 param::Trickle.Node.z_659 param::Trickle.Node.z_662 
	param::Trickle.Node.z_686 param::Trickle.Node.z_689 param::Trickle.Node.z_710 
	param::Trickle.Node.z_713 param::Trickle.Node.z_734 param::Trickle.Node.z_737 } }
	 @ (z_14 + z_197 + z_200 + z_257 + z_53 + z_572 + z_575 + z_605 + z_608 + z_632 
	+ z_635 + z_659 + z_662 + z_686 + z_689 + z_710 + z_713 + z_734 + z_737)) }
																															/*FLAGS{ USER_IRQ & COVERAGE-ELEMENT & OBJECTIVE-ACHIEVED }*/
																															INFO{
																																<ID:"@EXIT_ALL",kind="@EXIT_ALL">
																																<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#19->run::pid_15:Trickle.Observer.PASS->prot::Trickle.Observer.PASS" as trace="tpid#19->run::pid_15:Trickle.Observer.PASS->prot::Trickle.Observer.PASS">
																															}
																															PC: (((z_197 + z_200) == 4) && ((z_257 + z_572) == 8) && ((z_608 + z_632) == 4) && 
	((z_635 + z_659) == 8) && ((z_689 + z_710) == 4) && ((z_713 + z_734) == 8) && 
	(z_129 == t_68) && (z_197 == t_32) && (z_24 == t_3) && (z_257 == t_108) && (z_43 
	== t_21) && (z_608 == t_796) && (z_635 == t_829) && (z_689 == t_895) && (z_713 
	== t_917) && (t_108 < 8) && (t_21 < 4) && (t_270 < 8) && (t_3 < 4) && (t_32 < 4) 
	&& (t_6 < 4) && (t_9 < 4) && (t_190 < 4) && (t_337 < 4) && (t_68 < 4) && (t_796 
	< 4) && (t_829 < 8) && (t_862 < 8) && (t_895 < 4) && (t_917 < 8) && (t_939 < 8) 
	&& (z_184 < t_190) && (z_34 < t_6) && (z_53 < t_9) && (0 <= (t_108 + -4)) && (0 
	<= (t_21 + -2)) && (0 <= (t_270 + -4)) && (0 <= (t_3 + -2)) && (0 <= (t_32 + -2))
	 && (0 <= (t_6 + -2)) && (0 <= (t_9 + -2)) && (0 <= (t_190 + -2)) && (0 <= 
	(t_337 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_796 + -2)) && (0 <= (t_829 + -4))
	 && (0 <= (t_862 + -4)) && (0 <= (t_895 + -2)) && (0 <= (t_917 + -4)) && (0 <= 
	(t_939 + -4)) && ((z_0 + z_129 + z_24 + z_3 + z_72) <= (z_1 + z_139 + z_184 + 
	z_34 + z_43 + z_7)) && ((z_0 + z_24 + z_3) <= (z_1 + z_34 + z_7)) && ((z_0 + 
	z_24 + z_3) <= (z_14 + z_2 + z_53)) && ((z_197 + z_200) > t_32) && ((z_257 + 
	z_572) > t_108) && ((z_608 + z_632) > t_796) && ((z_635 + z_659) > t_829) && 
	((z_689 + z_710) > t_895) && ((z_713 + z_734) > t_917) && (z_0 > 0) && (z_1 > 0) 
	&& (z_129 > 0) && (z_139 > 0) && (z_14 > 0) && (z_197 > 0) && (z_2 > 0) && 
	(z_200 > 0) && (z_24 > 0) && (z_257 > 0) && (z_3 > 0) && (z_34 > 0) && (z_43 > 0)
	 && (z_53 > 0) && (z_572 > 0) && (z_575 > 0) && (z_605 > 0) && (z_608 > 0) && 
	(z_632 > 0) && (z_635 > 0) && (z_659 > 0) && (z_662 > 0) && (z_686 > 0) && 
	(z_689 > 0) && (z_7 > 0) && (z_710 > 0) && (z_713 > 0) && (z_72 > 0) && (z_734 > 
	0))
																															DATA{
																																:pid_2:uncoveredExit = 6;
																																:pid_2:mess = TERMIN_DM2;
																																:pid_51:node_time = (z_14 + z_197 + z_200 + z_257 + z_53 + z_572 + z_575 + z_605 + z_608 + z_632 + z_635 + z_659 + z_662 + z_686 + z_689 + z_710 + z_713 + z_734 + z_737);
																																:pid_51:z = z_737;
																																:pid_51:localTime = (z_14 + z_197 + z_2 + z_200 + z_257 + z_53 + z_572 + z_575 + z_605 + z_608 + z_632 + z_635 + z_659 + z_662 + z_686 + z_689 + z_710 + z_713 + z_734 + z_737);
																																:pid_51:localPC = (((z_197 + z_200) == 4) && ((z_257 + z_572) == 8) && ((z_608 + z_632) == 4) && ((z_635 + z_659) == 8) && ((z_689 + z_710) == 4) && ((z_713 + z_734) == 8) && (z_197 == t_32) && (z_257 == t_108) && (z_608 == t_796) && (z_635 == t_829) && (z_689 == t_895) && (z_713 == t_917) && (t_108 < 8) && (t_270 < 8) && (t_32 < 4) && (t_9 < 4) && (t_796 < 4) && (t_829 < 8) && (t_862 < 8) && (t_895 < 4) && (t_917 < 8) && (t_939 < 8) && (z_53 < t_9) && (0 <= (t_108 + -4)) && (0 <= (t_270 + -4)) && (0 <= (t_32 + -2)) && (0 <= (t_9 + -2)) && (0 <= (t_796 + -2)) && (0 <= (t_829 + -4)) && (0 <= (t_862 + -4)) && (0 <= (t_895 + -2)) && (0 <= (t_917 + -4)) && (0 <= (t_939 + -4)) && ((z_0 + z_24 + z_3) <= (z_14 + z_2 + z_53)) && ((z_197 + z_200) > t_32) && ((z_257 + z_572) > t_108) && ((z_608 + z_632) > t_796) && ((z_635 + z_659) > t_829) && ((z_689 + z_710) > t_895) && ((z_713 + z_734) > t_917) && (z_14 > 0) && (z_197 > 0) && (z_2 > 0) && (z_200 > 0) && (z_257 > 0) && (z_53 > 0) && (z_572 > 0) && (z_575 > 0) && (z_605 > 0) && (z_608 > 0) && (z_632 > 0) && (z_635 > 0) && (z_659 > 0) && (z_662 > 0) && (z_686 > 0) && (z_689 > 0) && (z_710 > 0) && (z_713 > 0) && (z_734 > 0));
																																:pid_63:e = 2;
																																:pid_63:cl = z_737;
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
