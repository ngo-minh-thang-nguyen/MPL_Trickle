EC:<Id:1;Ev:1;H:0;W:1>{ SC: ( pid_3:startup , ( pid_26:cp0_init , pid_32:dp0 , pid_37:dp0 ) , ( pid_43:cp0_init , pid_49:dp0 , pid_54:dp0 ) , ( pid_60:cp0_init , pid_66:dp0 , pid_71:dp0 ) , ( pid_77:cp0_init , pid_83:dp0 , pid_88:dp0 ) )
	ALIAS{
		:ppid_-1:pid_0 = spec::Trickle;
		:ppid_-1:pid_1 = spec::Trickle;
		:ppid_1:pid_2 = spec::Trickle.Observer;
			DATA{
				:ppid_1:pid_2:uncoveredExit = spec::Trickle.Observer.uncoveredExit;
				:ppid_1:pid_2:mess = spec::Trickle.Observer.mess;
				:ppid_1:pid_2:seqBuff[0] = spec::Trickle.Observer.seqBuff;
				:ppid_1:pid_2:seqBuff[1] = spec::Trickle.Observer.seqBuff;
				:ppid_1:pid_2:dataMessage.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_2:dataMessage.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_2:dataMessage.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_2:pid_3 = spec::Trickle.Observer.startup;
		:ppid_2:pid_4 = spec::Trickle.Observer.o#0;
		:ppid_2:pid_5 = spec::Trickle.Observer.o#1;
		:ppid_2:pid_6 = spec::Trickle.Observer.o#2;
		:ppid_2:pid_7 = spec::Trickle.Observer.o#3;
		:ppid_2:pid_8 = spec::Trickle.Observer.o#4;
		:ppid_2:pid_9 = spec::Trickle.Observer.o#5;
		:ppid_2:pid_10 = spec::Trickle.Observer.o#6;
		:ppid_2:pid_11 = spec::Trickle.Observer.o#7;
		:ppid_2:pid_12 = spec::Trickle.Observer.o#8;
		:ppid_2:pid_13 = spec::Trickle.Observer.o#9;
		:ppid_2:pid_14 = spec::Trickle.Observer.o#10;
		:ppid_2:pid_15 = spec::Trickle.Observer.o#11;
		:ppid_2:pid_16 = spec::Trickle.Observer.o#12;
		:ppid_2:pid_17 = spec::Trickle.Observer.o#13;
		:ppid_2:pid_18 = spec::Trickle.Observer.o#14;
		:ppid_2:pid_19 = spec::Trickle.Observer.o#17;
		:ppid_2:pid_20 = spec::Trickle.Observer.o#19;
		:ppid_2:pid_21 = spec::Trickle.Observer.o#20;
		:ppid_2:pid_22 = spec::Trickle.Observer.PASS;
		:ppid_2:pid_23 = spec::Trickle.Observer.FAILED;
		:ppid_1:pid_24 = run::Trickle.n1; // model is spec::Trickle.Node;
			BUFFER NUMBER = 1;
			/*BUFFER{
				:ppid_1:pid_24:bufferNode = spec::Trickle.Node.bufferNode;
			}*/
			DATA{
				:ppid_1:pid_24:my_buff[0].seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_24:my_buff[0].fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_24:my_buff[0].offset = spec::Trickle.DATA_MESSAGE.offset;
				:ppid_1:pid_24:my_buff[1].seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_24:my_buff[1].fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_24:my_buff[1].offset = spec::Trickle.DATA_MESSAGE.offset;
				:ppid_1:pid_24:firmware[0] = spec::Trickle.Node.firmware;
				:ppid_1:pid_24:firmware[1] = spec::Trickle.Node.firmware;
				:ppid_1:pid_24:myseq_buff[0] = spec::Trickle.Node.myseq_buff;
				:ppid_1:pid_24:myseq_buff[1] = spec::Trickle.Node.myseq_buff;
				:ppid_1:pid_24:mydp_run[0] = spec::Trickle.Node.mydp_run;
				:ppid_1:pid_24:mydp_run[1] = spec::Trickle.Node.mydp_run;
				:ppid_1:pid_24:localTime = spec::Trickle.Node.localTime;
				:ppid_1:pid_24:z = spec::Trickle.Node.z;
				:ppid_1:pid_24:localTime = spec::Trickle.Node.localTime;
				:ppid_1:pid_24:undef_DM1 = spec::Trickle.Node.undef_DM1;
				:ppid_1:pid_24:undef_DM2 = spec::Trickle.Node.undef_DM2;
				:ppid_1:pid_24:seq_buff[0] = spec::Trickle.Node.seq_buff;
				:ppid_1:pid_24:seq_buff[1] = spec::Trickle.Node.seq_buff;
				:ppid_1:pid_24:i = spec::Trickle.Node.i;
				:ppid_1:pid_24:localPC = spec::Trickle.Node.localPC;
				:ppid_1:pid_24:new_seq_buff = spec::Trickle.Node.new_seq_buff;
				:ppid_1:pid_24:new_seq = spec::Trickle.Node.new_seq;
				:ppid_1:pid_24:new_fragment = spec::Trickle.Node.new_fragment;
				:ppid_1:pid_24:new_offset = spec::Trickle.Node.new_offset;
				:ppid_1:pid_24:timeEmit = spec::Trickle.Node.timeEmit;
			}
			INTERFACE{
				:ppid_1:pid_24:ControlMsg = spec::Trickle.Node.ControlMsg;
				:ppid_1:pid_24:DataMsg1 = spec::Trickle.Node.DataMsg1;
				:ppid_1:pid_24:DataMsg2 = spec::Trickle.Node.DataMsg2;
				:ppid_1:pid_24:Log = spec::Trickle.Node.Log;
			}
		:ppid_24:pid_25 = spec::Trickle.Node.ControlProcess;
			DATA{
				:ppid_24:pid_25:e = spec::Trickle.Node.ControlProcess.e;
				:ppid_24:pid_25:tau = spec::Trickle.Node.ControlProcess.tau;
				:ppid_24:pid_25:tau_l = spec::Trickle.Node.ControlProcess.tau_l;
				:ppid_24:pid_25:tau_h = spec::Trickle.Node.ControlProcess.tau_h;
				:ppid_24:pid_25:k = spec::Trickle.Node.ControlProcess.k;
				:ppid_24:pid_25:c = spec::Trickle.Node.ControlProcess.c;
				:ppid_24:pid_25:i = spec::Trickle.Node.ControlProcess.i;
				:ppid_24:pid_25:t = spec::Trickle.Node.ControlProcess.t;
				:ppid_24:pid_25:consistent = spec::Trickle.Node.ControlProcess.consistent;
				:ppid_24:pid_25:cl = spec::Trickle.Node.ControlProcess.cl;
			}
		:ppid_25:pid_26 = spec::Trickle.Node.ControlProcess.cp0_init;
		:ppid_25:pid_27 = spec::Trickle.Node.ControlProcess.cp0;
		:ppid_25:pid_28 = spec::Trickle.Node.ControlProcess.cp1;
		:ppid_25:pid_29 = spec::Trickle.Node.ControlProcess.cp2;
		:ppid_25:pid_30 = spec::Trickle.Node.ControlProcess.cp3;
		:ppid_24:pid_31 = run::Trickle.n1.DataProcess1; // model is spec::Trickle.Node.DataProcess;
			DATA{
				:ppid_24:pid_31:mySeq = spec::Trickle.Node.DataProcess.mySeq;
				:ppid_24:pid_31:e = spec::Trickle.Node.DataProcess.e;
				:ppid_24:pid_31:tau = spec::Trickle.Node.DataProcess.tau;
				:ppid_24:pid_31:tau_l = spec::Trickle.Node.DataProcess.tau_l;
				:ppid_24:pid_31:tau_h = spec::Trickle.Node.DataProcess.tau_h;
				:ppid_24:pid_31:k = spec::Trickle.Node.DataProcess.k;
				:ppid_24:pid_31:c = spec::Trickle.Node.DataProcess.c;
				:ppid_24:pid_31:i = spec::Trickle.Node.DataProcess.i;
				:ppid_24:pid_31:t = spec::Trickle.Node.DataProcess.t;
				:ppid_24:pid_31:consistent = spec::Trickle.Node.DataProcess.consistent;
				:ppid_24:pid_31:cl = spec::Trickle.Node.DataProcess.cl;
				:ppid_24:pid_31:d.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_24:pid_31:d.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_24:pid_31:d.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_31:pid_32 = spec::Trickle.Node.DataProcess.dp0;
		:ppid_31:pid_33 = spec::Trickle.Node.DataProcess.dp1;
		:ppid_31:pid_34 = spec::Trickle.Node.DataProcess.dp2;
		:ppid_31:pid_35 = spec::Trickle.Node.DataProcess.dp3;
		:ppid_24:pid_36 = run::Trickle.n1.DataProcess2; // model is spec::Trickle.Node.DataProcess;
			DATA{
				:ppid_24:pid_36:mySeq = spec::Trickle.Node.DataProcess.mySeq;
				:ppid_24:pid_36:e = spec::Trickle.Node.DataProcess.e;
				:ppid_24:pid_36:tau = spec::Trickle.Node.DataProcess.tau;
				:ppid_24:pid_36:tau_l = spec::Trickle.Node.DataProcess.tau_l;
				:ppid_24:pid_36:tau_h = spec::Trickle.Node.DataProcess.tau_h;
				:ppid_24:pid_36:k = spec::Trickle.Node.DataProcess.k;
				:ppid_24:pid_36:c = spec::Trickle.Node.DataProcess.c;
				:ppid_24:pid_36:i = spec::Trickle.Node.DataProcess.i;
				:ppid_24:pid_36:t = spec::Trickle.Node.DataProcess.t;
				:ppid_24:pid_36:consistent = spec::Trickle.Node.DataProcess.consistent;
				:ppid_24:pid_36:cl = spec::Trickle.Node.DataProcess.cl;
				:ppid_24:pid_36:d.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_24:pid_36:d.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_24:pid_36:d.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_36:pid_37 = spec::Trickle.Node.DataProcess.dp0;
		:ppid_36:pid_38 = spec::Trickle.Node.DataProcess.dp1;
		:ppid_36:pid_39 = spec::Trickle.Node.DataProcess.dp2;
		:ppid_36:pid_40 = spec::Trickle.Node.DataProcess.dp3;
		:ppid_1:pid_41 = run::Trickle.n2; // model is spec::Trickle.Node;
			BUFFER NUMBER = 1;
			/*BUFFER{
				:ppid_1:pid_41:bufferNode = spec::Trickle.Node.bufferNode;
			}*/
			DATA{
				:ppid_1:pid_41:my_buff[0].seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_41:my_buff[0].fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_41:my_buff[0].offset = spec::Trickle.DATA_MESSAGE.offset;
				:ppid_1:pid_41:my_buff[1].seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_41:my_buff[1].fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_41:my_buff[1].offset = spec::Trickle.DATA_MESSAGE.offset;
				:ppid_1:pid_41:firmware[0] = spec::Trickle.Node.firmware;
				:ppid_1:pid_41:firmware[1] = spec::Trickle.Node.firmware;
				:ppid_1:pid_41:myseq_buff[0] = spec::Trickle.Node.myseq_buff;
				:ppid_1:pid_41:myseq_buff[1] = spec::Trickle.Node.myseq_buff;
				:ppid_1:pid_41:mydp_run[0] = spec::Trickle.Node.mydp_run;
				:ppid_1:pid_41:mydp_run[1] = spec::Trickle.Node.mydp_run;
				:ppid_1:pid_41:localTime = spec::Trickle.Node.localTime;
				:ppid_1:pid_41:z = spec::Trickle.Node.z;
				:ppid_1:pid_41:localTime = spec::Trickle.Node.localTime;
				:ppid_1:pid_41:undef_DM1 = spec::Trickle.Node.undef_DM1;
				:ppid_1:pid_41:undef_DM2 = spec::Trickle.Node.undef_DM2;
				:ppid_1:pid_41:seq_buff[0] = spec::Trickle.Node.seq_buff;
				:ppid_1:pid_41:seq_buff[1] = spec::Trickle.Node.seq_buff;
				:ppid_1:pid_41:i = spec::Trickle.Node.i;
				:ppid_1:pid_41:localPC = spec::Trickle.Node.localPC;
				:ppid_1:pid_41:new_seq_buff = spec::Trickle.Node.new_seq_buff;
				:ppid_1:pid_41:new_seq = spec::Trickle.Node.new_seq;
				:ppid_1:pid_41:new_fragment = spec::Trickle.Node.new_fragment;
				:ppid_1:pid_41:new_offset = spec::Trickle.Node.new_offset;
				:ppid_1:pid_41:timeEmit = spec::Trickle.Node.timeEmit;
			}
			INTERFACE{
				:ppid_1:pid_41:ControlMsg = spec::Trickle.Node.ControlMsg;
				:ppid_1:pid_41:DataMsg1 = spec::Trickle.Node.DataMsg1;
				:ppid_1:pid_41:DataMsg2 = spec::Trickle.Node.DataMsg2;
				:ppid_1:pid_41:Log = spec::Trickle.Node.Log;
			}
		:ppid_41:pid_42 = spec::Trickle.Node.ControlProcess;
			DATA{
				:ppid_41:pid_42:e = spec::Trickle.Node.ControlProcess.e;
				:ppid_41:pid_42:tau = spec::Trickle.Node.ControlProcess.tau;
				:ppid_41:pid_42:tau_l = spec::Trickle.Node.ControlProcess.tau_l;
				:ppid_41:pid_42:tau_h = spec::Trickle.Node.ControlProcess.tau_h;
				:ppid_41:pid_42:k = spec::Trickle.Node.ControlProcess.k;
				:ppid_41:pid_42:c = spec::Trickle.Node.ControlProcess.c;
				:ppid_41:pid_42:i = spec::Trickle.Node.ControlProcess.i;
				:ppid_41:pid_42:t = spec::Trickle.Node.ControlProcess.t;
				:ppid_41:pid_42:consistent = spec::Trickle.Node.ControlProcess.consistent;
				:ppid_41:pid_42:cl = spec::Trickle.Node.ControlProcess.cl;
			}
		:ppid_42:pid_43 = spec::Trickle.Node.ControlProcess.cp0_init;
		:ppid_42:pid_44 = spec::Trickle.Node.ControlProcess.cp0;
		:ppid_42:pid_45 = spec::Trickle.Node.ControlProcess.cp1;
		:ppid_42:pid_46 = spec::Trickle.Node.ControlProcess.cp2;
		:ppid_42:pid_47 = spec::Trickle.Node.ControlProcess.cp3;
		:ppid_41:pid_48 = run::Trickle.n2.DataProcess1; // model is spec::Trickle.Node.DataProcess;
			DATA{
				:ppid_41:pid_48:mySeq = spec::Trickle.Node.DataProcess.mySeq;
				:ppid_41:pid_48:e = spec::Trickle.Node.DataProcess.e;
				:ppid_41:pid_48:tau = spec::Trickle.Node.DataProcess.tau;
				:ppid_41:pid_48:tau_l = spec::Trickle.Node.DataProcess.tau_l;
				:ppid_41:pid_48:tau_h = spec::Trickle.Node.DataProcess.tau_h;
				:ppid_41:pid_48:k = spec::Trickle.Node.DataProcess.k;
				:ppid_41:pid_48:c = spec::Trickle.Node.DataProcess.c;
				:ppid_41:pid_48:i = spec::Trickle.Node.DataProcess.i;
				:ppid_41:pid_48:t = spec::Trickle.Node.DataProcess.t;
				:ppid_41:pid_48:consistent = spec::Trickle.Node.DataProcess.consistent;
				:ppid_41:pid_48:cl = spec::Trickle.Node.DataProcess.cl;
				:ppid_41:pid_48:d.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_41:pid_48:d.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_41:pid_48:d.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_48:pid_49 = spec::Trickle.Node.DataProcess.dp0;
		:ppid_48:pid_50 = spec::Trickle.Node.DataProcess.dp1;
		:ppid_48:pid_51 = spec::Trickle.Node.DataProcess.dp2;
		:ppid_48:pid_52 = spec::Trickle.Node.DataProcess.dp3;
		:ppid_41:pid_53 = run::Trickle.n2.DataProcess2; // model is spec::Trickle.Node.DataProcess;
			DATA{
				:ppid_41:pid_53:mySeq = spec::Trickle.Node.DataProcess.mySeq;
				:ppid_41:pid_53:e = spec::Trickle.Node.DataProcess.e;
				:ppid_41:pid_53:tau = spec::Trickle.Node.DataProcess.tau;
				:ppid_41:pid_53:tau_l = spec::Trickle.Node.DataProcess.tau_l;
				:ppid_41:pid_53:tau_h = spec::Trickle.Node.DataProcess.tau_h;
				:ppid_41:pid_53:k = spec::Trickle.Node.DataProcess.k;
				:ppid_41:pid_53:c = spec::Trickle.Node.DataProcess.c;
				:ppid_41:pid_53:i = spec::Trickle.Node.DataProcess.i;
				:ppid_41:pid_53:t = spec::Trickle.Node.DataProcess.t;
				:ppid_41:pid_53:consistent = spec::Trickle.Node.DataProcess.consistent;
				:ppid_41:pid_53:cl = spec::Trickle.Node.DataProcess.cl;
				:ppid_41:pid_53:d.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_41:pid_53:d.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_41:pid_53:d.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_53:pid_54 = spec::Trickle.Node.DataProcess.dp0;
		:ppid_53:pid_55 = spec::Trickle.Node.DataProcess.dp1;
		:ppid_53:pid_56 = spec::Trickle.Node.DataProcess.dp2;
		:ppid_53:pid_57 = spec::Trickle.Node.DataProcess.dp3;
		:ppid_1:pid_58 = run::Trickle.n3; // model is spec::Trickle.Node;
			BUFFER NUMBER = 1;
			/*BUFFER{
				:ppid_1:pid_58:bufferNode = spec::Trickle.Node.bufferNode;
			}*/
			DATA{
				:ppid_1:pid_58:my_buff[0].seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_58:my_buff[0].fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_58:my_buff[0].offset = spec::Trickle.DATA_MESSAGE.offset;
				:ppid_1:pid_58:my_buff[1].seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_58:my_buff[1].fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_58:my_buff[1].offset = spec::Trickle.DATA_MESSAGE.offset;
				:ppid_1:pid_58:firmware[0] = spec::Trickle.Node.firmware;
				:ppid_1:pid_58:firmware[1] = spec::Trickle.Node.firmware;
				:ppid_1:pid_58:myseq_buff[0] = spec::Trickle.Node.myseq_buff;
				:ppid_1:pid_58:myseq_buff[1] = spec::Trickle.Node.myseq_buff;
				:ppid_1:pid_58:mydp_run[0] = spec::Trickle.Node.mydp_run;
				:ppid_1:pid_58:mydp_run[1] = spec::Trickle.Node.mydp_run;
				:ppid_1:pid_58:localTime = spec::Trickle.Node.localTime;
				:ppid_1:pid_58:z = spec::Trickle.Node.z;
				:ppid_1:pid_58:localTime = spec::Trickle.Node.localTime;
				:ppid_1:pid_58:undef_DM1 = spec::Trickle.Node.undef_DM1;
				:ppid_1:pid_58:undef_DM2 = spec::Trickle.Node.undef_DM2;
				:ppid_1:pid_58:seq_buff[0] = spec::Trickle.Node.seq_buff;
				:ppid_1:pid_58:seq_buff[1] = spec::Trickle.Node.seq_buff;
				:ppid_1:pid_58:i = spec::Trickle.Node.i;
				:ppid_1:pid_58:localPC = spec::Trickle.Node.localPC;
				:ppid_1:pid_58:new_seq_buff = spec::Trickle.Node.new_seq_buff;
				:ppid_1:pid_58:new_seq = spec::Trickle.Node.new_seq;
				:ppid_1:pid_58:new_fragment = spec::Trickle.Node.new_fragment;
				:ppid_1:pid_58:new_offset = spec::Trickle.Node.new_offset;
				:ppid_1:pid_58:timeEmit = spec::Trickle.Node.timeEmit;
			}
			INTERFACE{
				:ppid_1:pid_58:ControlMsg = spec::Trickle.Node.ControlMsg;
				:ppid_1:pid_58:DataMsg1 = spec::Trickle.Node.DataMsg1;
				:ppid_1:pid_58:DataMsg2 = spec::Trickle.Node.DataMsg2;
				:ppid_1:pid_58:Log = spec::Trickle.Node.Log;
			}
		:ppid_58:pid_59 = spec::Trickle.Node.ControlProcess;
			DATA{
				:ppid_58:pid_59:e = spec::Trickle.Node.ControlProcess.e;
				:ppid_58:pid_59:tau = spec::Trickle.Node.ControlProcess.tau;
				:ppid_58:pid_59:tau_l = spec::Trickle.Node.ControlProcess.tau_l;
				:ppid_58:pid_59:tau_h = spec::Trickle.Node.ControlProcess.tau_h;
				:ppid_58:pid_59:k = spec::Trickle.Node.ControlProcess.k;
				:ppid_58:pid_59:c = spec::Trickle.Node.ControlProcess.c;
				:ppid_58:pid_59:i = spec::Trickle.Node.ControlProcess.i;
				:ppid_58:pid_59:t = spec::Trickle.Node.ControlProcess.t;
				:ppid_58:pid_59:consistent = spec::Trickle.Node.ControlProcess.consistent;
				:ppid_58:pid_59:cl = spec::Trickle.Node.ControlProcess.cl;
			}
		:ppid_59:pid_60 = spec::Trickle.Node.ControlProcess.cp0_init;
		:ppid_59:pid_61 = spec::Trickle.Node.ControlProcess.cp0;
		:ppid_59:pid_62 = spec::Trickle.Node.ControlProcess.cp1;
		:ppid_59:pid_63 = spec::Trickle.Node.ControlProcess.cp2;
		:ppid_59:pid_64 = spec::Trickle.Node.ControlProcess.cp3;
		:ppid_58:pid_65 = run::Trickle.n3.DataProcess1; // model is spec::Trickle.Node.DataProcess;
			DATA{
				:ppid_58:pid_65:mySeq = spec::Trickle.Node.DataProcess.mySeq;
				:ppid_58:pid_65:e = spec::Trickle.Node.DataProcess.e;
				:ppid_58:pid_65:tau = spec::Trickle.Node.DataProcess.tau;
				:ppid_58:pid_65:tau_l = spec::Trickle.Node.DataProcess.tau_l;
				:ppid_58:pid_65:tau_h = spec::Trickle.Node.DataProcess.tau_h;
				:ppid_58:pid_65:k = spec::Trickle.Node.DataProcess.k;
				:ppid_58:pid_65:c = spec::Trickle.Node.DataProcess.c;
				:ppid_58:pid_65:i = spec::Trickle.Node.DataProcess.i;
				:ppid_58:pid_65:t = spec::Trickle.Node.DataProcess.t;
				:ppid_58:pid_65:consistent = spec::Trickle.Node.DataProcess.consistent;
				:ppid_58:pid_65:cl = spec::Trickle.Node.DataProcess.cl;
				:ppid_58:pid_65:d.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_58:pid_65:d.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_58:pid_65:d.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_65:pid_66 = spec::Trickle.Node.DataProcess.dp0;
		:ppid_65:pid_67 = spec::Trickle.Node.DataProcess.dp1;
		:ppid_65:pid_68 = spec::Trickle.Node.DataProcess.dp2;
		:ppid_65:pid_69 = spec::Trickle.Node.DataProcess.dp3;
		:ppid_58:pid_70 = run::Trickle.n3.DataProcess2; // model is spec::Trickle.Node.DataProcess;
			DATA{
				:ppid_58:pid_70:mySeq = spec::Trickle.Node.DataProcess.mySeq;
				:ppid_58:pid_70:e = spec::Trickle.Node.DataProcess.e;
				:ppid_58:pid_70:tau = spec::Trickle.Node.DataProcess.tau;
				:ppid_58:pid_70:tau_l = spec::Trickle.Node.DataProcess.tau_l;
				:ppid_58:pid_70:tau_h = spec::Trickle.Node.DataProcess.tau_h;
				:ppid_58:pid_70:k = spec::Trickle.Node.DataProcess.k;
				:ppid_58:pid_70:c = spec::Trickle.Node.DataProcess.c;
				:ppid_58:pid_70:i = spec::Trickle.Node.DataProcess.i;
				:ppid_58:pid_70:t = spec::Trickle.Node.DataProcess.t;
				:ppid_58:pid_70:consistent = spec::Trickle.Node.DataProcess.consistent;
				:ppid_58:pid_70:cl = spec::Trickle.Node.DataProcess.cl;
				:ppid_58:pid_70:d.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_58:pid_70:d.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_58:pid_70:d.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_70:pid_71 = spec::Trickle.Node.DataProcess.dp0;
		:ppid_70:pid_72 = spec::Trickle.Node.DataProcess.dp1;
		:ppid_70:pid_73 = spec::Trickle.Node.DataProcess.dp2;
		:ppid_70:pid_74 = spec::Trickle.Node.DataProcess.dp3;
		:ppid_1:pid_75 = run::Trickle.n4; // model is spec::Trickle.Node;
			BUFFER NUMBER = 1;
			/*BUFFER{
				:ppid_1:pid_75:bufferNode = spec::Trickle.Node.bufferNode;
			}*/
			DATA{
				:ppid_1:pid_75:my_buff[0].seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_75:my_buff[0].fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_75:my_buff[0].offset = spec::Trickle.DATA_MESSAGE.offset;
				:ppid_1:pid_75:my_buff[1].seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_75:my_buff[1].fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_75:my_buff[1].offset = spec::Trickle.DATA_MESSAGE.offset;
				:ppid_1:pid_75:firmware[0] = spec::Trickle.Node.firmware;
				:ppid_1:pid_75:firmware[1] = spec::Trickle.Node.firmware;
				:ppid_1:pid_75:myseq_buff[0] = spec::Trickle.Node.myseq_buff;
				:ppid_1:pid_75:myseq_buff[1] = spec::Trickle.Node.myseq_buff;
				:ppid_1:pid_75:mydp_run[0] = spec::Trickle.Node.mydp_run;
				:ppid_1:pid_75:mydp_run[1] = spec::Trickle.Node.mydp_run;
				:ppid_1:pid_75:localTime = spec::Trickle.Node.localTime;
				:ppid_1:pid_75:z = spec::Trickle.Node.z;
				:ppid_1:pid_75:localTime = spec::Trickle.Node.localTime;
				:ppid_1:pid_75:undef_DM1 = spec::Trickle.Node.undef_DM1;
				:ppid_1:pid_75:undef_DM2 = spec::Trickle.Node.undef_DM2;
				:ppid_1:pid_75:seq_buff[0] = spec::Trickle.Node.seq_buff;
				:ppid_1:pid_75:seq_buff[1] = spec::Trickle.Node.seq_buff;
				:ppid_1:pid_75:i = spec::Trickle.Node.i;
				:ppid_1:pid_75:localPC = spec::Trickle.Node.localPC;
				:ppid_1:pid_75:new_seq_buff = spec::Trickle.Node.new_seq_buff;
				:ppid_1:pid_75:new_seq = spec::Trickle.Node.new_seq;
				:ppid_1:pid_75:new_fragment = spec::Trickle.Node.new_fragment;
				:ppid_1:pid_75:new_offset = spec::Trickle.Node.new_offset;
				:ppid_1:pid_75:timeEmit = spec::Trickle.Node.timeEmit;
			}
			INTERFACE{
				:ppid_1:pid_75:ControlMsg = spec::Trickle.Node.ControlMsg;
				:ppid_1:pid_75:DataMsg1 = spec::Trickle.Node.DataMsg1;
				:ppid_1:pid_75:DataMsg2 = spec::Trickle.Node.DataMsg2;
				:ppid_1:pid_75:Log = spec::Trickle.Node.Log;
			}
		:ppid_75:pid_76 = spec::Trickle.Node.ControlProcess;
			DATA{
				:ppid_75:pid_76:e = spec::Trickle.Node.ControlProcess.e;
				:ppid_75:pid_76:tau = spec::Trickle.Node.ControlProcess.tau;
				:ppid_75:pid_76:tau_l = spec::Trickle.Node.ControlProcess.tau_l;
				:ppid_75:pid_76:tau_h = spec::Trickle.Node.ControlProcess.tau_h;
				:ppid_75:pid_76:k = spec::Trickle.Node.ControlProcess.k;
				:ppid_75:pid_76:c = spec::Trickle.Node.ControlProcess.c;
				:ppid_75:pid_76:i = spec::Trickle.Node.ControlProcess.i;
				:ppid_75:pid_76:t = spec::Trickle.Node.ControlProcess.t;
				:ppid_75:pid_76:consistent = spec::Trickle.Node.ControlProcess.consistent;
				:ppid_75:pid_76:cl = spec::Trickle.Node.ControlProcess.cl;
			}
		:ppid_76:pid_77 = spec::Trickle.Node.ControlProcess.cp0_init;
		:ppid_76:pid_78 = spec::Trickle.Node.ControlProcess.cp0;
		:ppid_76:pid_79 = spec::Trickle.Node.ControlProcess.cp1;
		:ppid_76:pid_80 = spec::Trickle.Node.ControlProcess.cp2;
		:ppid_76:pid_81 = spec::Trickle.Node.ControlProcess.cp3;
		:ppid_75:pid_82 = run::Trickle.n4.DataProcess1; // model is spec::Trickle.Node.DataProcess;
			DATA{
				:ppid_75:pid_82:mySeq = spec::Trickle.Node.DataProcess.mySeq;
				:ppid_75:pid_82:e = spec::Trickle.Node.DataProcess.e;
				:ppid_75:pid_82:tau = spec::Trickle.Node.DataProcess.tau;
				:ppid_75:pid_82:tau_l = spec::Trickle.Node.DataProcess.tau_l;
				:ppid_75:pid_82:tau_h = spec::Trickle.Node.DataProcess.tau_h;
				:ppid_75:pid_82:k = spec::Trickle.Node.DataProcess.k;
				:ppid_75:pid_82:c = spec::Trickle.Node.DataProcess.c;
				:ppid_75:pid_82:i = spec::Trickle.Node.DataProcess.i;
				:ppid_75:pid_82:t = spec::Trickle.Node.DataProcess.t;
				:ppid_75:pid_82:consistent = spec::Trickle.Node.DataProcess.consistent;
				:ppid_75:pid_82:cl = spec::Trickle.Node.DataProcess.cl;
				:ppid_75:pid_82:d.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_75:pid_82:d.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_75:pid_82:d.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_82:pid_83 = spec::Trickle.Node.DataProcess.dp0;
		:ppid_82:pid_84 = spec::Trickle.Node.DataProcess.dp1;
		:ppid_82:pid_85 = spec::Trickle.Node.DataProcess.dp2;
		:ppid_82:pid_86 = spec::Trickle.Node.DataProcess.dp3;
		:ppid_75:pid_87 = run::Trickle.n4.DataProcess2; // model is spec::Trickle.Node.DataProcess;
			DATA{
				:ppid_75:pid_87:mySeq = spec::Trickle.Node.DataProcess.mySeq;
				:ppid_75:pid_87:e = spec::Trickle.Node.DataProcess.e;
				:ppid_75:pid_87:tau = spec::Trickle.Node.DataProcess.tau;
				:ppid_75:pid_87:tau_l = spec::Trickle.Node.DataProcess.tau_l;
				:ppid_75:pid_87:tau_h = spec::Trickle.Node.DataProcess.tau_h;
				:ppid_75:pid_87:k = spec::Trickle.Node.DataProcess.k;
				:ppid_75:pid_87:c = spec::Trickle.Node.DataProcess.c;
				:ppid_75:pid_87:i = spec::Trickle.Node.DataProcess.i;
				:ppid_75:pid_87:t = spec::Trickle.Node.DataProcess.t;
				:ppid_75:pid_87:consistent = spec::Trickle.Node.DataProcess.consistent;
				:ppid_75:pid_87:cl = spec::Trickle.Node.DataProcess.cl;
				:ppid_75:pid_87:d.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_75:pid_87:d.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_75:pid_87:d.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_87:pid_88 = spec::Trickle.Node.DataProcess.dp0;
		:ppid_87:pid_89 = spec::Trickle.Node.DataProcess.dp1;
		:ppid_87:pid_90 = spec::Trickle.Node.DataProcess.dp2;
		:ppid_87:pid_91 = spec::Trickle.Node.DataProcess.dp3;
	}
	PC: true
	PtC: true
	DATA{
		:pid_2:uncoveredExit = 0;
		:pid_2:mess = mess_0;
		:pid_2:seqBuff[0] = seqBuff[0]_0;
		:pid_2:seqBuff[1] = seqBuff[1]_0;
		:pid_2:dataMessage.seq = dataMessage.seq_0;
		:pid_2:dataMessage.fragment = dataMessage.fragment_0;
		:pid_2:dataMessage.offset = dataMessage.offset_0;
		:pid_24:my_buff[0].seq = 1;
		:pid_24:my_buff[0].fragment = FRAGMENT_0;
		:pid_24:my_buff[0].offset = 0;
		:pid_24:my_buff[1].seq = 2;
		:pid_24:my_buff[1].fragment = FRAGMENT_1;
		:pid_24:my_buff[1].offset = 1;
		:pid_24:firmware[0] = FRAGMENT_0;
		:pid_24:firmware[1] = FRAGMENT_1;
		:pid_24:myseq_buff[0] = 1;
		:pid_24:myseq_buff[1] = 1;
		:pid_24:mydp_run[0] = true;
		:pid_24:mydp_run[1] = true;
		:pid_24:localTime = 0;
		:pid_24:z = $delta#initial;
		:pid_24:localTime = 0;
		:pid_24:undef_DM1 = false;
		:pid_24:undef_DM2 = false;
		:pid_24:seq_buff[0] = seq_buff[0]_0;
		:pid_24:seq_buff[1] = seq_buff[1]_0;
		:pid_24:i = i_0;
		:pid_24:localPC = true;
		:pid_24:new_seq_buff = new_seq_buff_0;
		:pid_24:new_seq = new_seq_0;
		:pid_24:new_fragment = new_fragment_0;
		:pid_24:new_offset = new_offset_0;
		:pid_24:timeEmit = timeEmit_0;
		:pid_25:e = e_0;
		:pid_25:tau = tau_0;
		:pid_25:tau_l = tau_l_0;
		:pid_25:tau_h = tau_h_0;
		:pid_25:k = k_0;
		:pid_25:c = c_0;
		:pid_25:i = i_0;
		:pid_25:t = t_0;
		:pid_25:consistent = consistent_0;
		:pid_25:cl = 0;
		:pid_31:mySeq = 1;
		:pid_31:e = e_0;
		:pid_31:tau = tau_0;
		:pid_31:tau_l = tau_l_0;
		:pid_31:tau_h = tau_h_0;
		:pid_31:k = k_0;
		:pid_31:c = c_0;
		:pid_31:i = i_0;
		:pid_31:t = t_0;
		:pid_31:consistent = consistent_0;
		:pid_31:cl = 0;
		:pid_31:d.seq = d.seq_0;
		:pid_31:d.fragment = d.fragment_0;
		:pid_31:d.offset = d.offset_0;
		:pid_36:mySeq = 2;
		:pid_36:e = e_1;
		:pid_36:tau = tau_1;
		:pid_36:tau_l = tau_l_1;
		:pid_36:tau_h = tau_h_1;
		:pid_36:k = k_1;
		:pid_36:c = c_1;
		:pid_36:i = i_1;
		:pid_36:t = t_1;
		:pid_36:consistent = consistent_1;
		:pid_36:cl = 0;
		:pid_36:d.seq = d.seq_1;
		:pid_36:d.fragment = d.fragment_1;
		:pid_36:d.offset = d.offset_1;
		:pid_41:my_buff[0].seq = 0;
		:pid_41:my_buff[0].fragment = UNDEF_FRAGMENT;
		:pid_41:my_buff[0].offset = 0;
		:pid_41:my_buff[1].seq = 0;
		:pid_41:my_buff[1].fragment = UNDEF_FRAGMENT;
		:pid_41:my_buff[1].offset = 1;
		:pid_41:firmware[0] = UNDEF_FRAGMENT;
		:pid_41:firmware[1] = UNDEF_FRAGMENT;
		:pid_41:myseq_buff[0] = 0;
		:pid_41:myseq_buff[1] = 0;
		:pid_41:mydp_run[0] = false;
		:pid_41:mydp_run[1] = false;
		:pid_41:localTime = 0;
		:pid_41:z = $delta#initial;
		:pid_41:localTime = 0;
		:pid_41:undef_DM1 = false;
		:pid_41:undef_DM2 = false;
		:pid_41:seq_buff[0] = seq_buff[0]_1;
		:pid_41:seq_buff[1] = seq_buff[1]_1;
		:pid_41:i = i_1;
		:pid_41:localPC = true;
		:pid_41:new_seq_buff = new_seq_buff_1;
		:pid_41:new_seq = new_seq_1;
		:pid_41:new_fragment = new_fragment_1;
		:pid_41:new_offset = new_offset_1;
		:pid_41:timeEmit = timeEmit_1;
		:pid_42:e = e_1;
		:pid_42:tau = tau_1;
		:pid_42:tau_l = tau_l_1;
		:pid_42:tau_h = tau_h_1;
		:pid_42:k = k_1;
		:pid_42:c = c_1;
		:pid_42:i = i_1;
		:pid_42:t = t_1;
		:pid_42:consistent = consistent_1;
		:pid_42:cl = 0;
		:pid_48:mySeq = 1;
		:pid_48:e = e_2;
		:pid_48:tau = tau_2;
		:pid_48:tau_l = tau_l_2;
		:pid_48:tau_h = tau_h_2;
		:pid_48:k = k_2;
		:pid_48:c = c_2;
		:pid_48:i = i_2;
		:pid_48:t = t_2;
		:pid_48:consistent = consistent_2;
		:pid_48:cl = 0;
		:pid_48:d.seq = d.seq_2;
		:pid_48:d.fragment = d.fragment_2;
		:pid_48:d.offset = d.offset_2;
		:pid_53:mySeq = 2;
		:pid_53:e = e_3;
		:pid_53:tau = tau_3;
		:pid_53:tau_l = tau_l_3;
		:pid_53:tau_h = tau_h_3;
		:pid_53:k = k_3;
		:pid_53:c = c_3;
		:pid_53:i = i_3;
		:pid_53:t = t_3;
		:pid_53:consistent = consistent_3;
		:pid_53:cl = 0;
		:pid_53:d.seq = d.seq_3;
		:pid_53:d.fragment = d.fragment_3;
		:pid_53:d.offset = d.offset_3;
		:pid_58:my_buff[0].seq = 0;
		:pid_58:my_buff[0].fragment = UNDEF_FRAGMENT;
		:pid_58:my_buff[0].offset = 0;
		:pid_58:my_buff[1].seq = 0;
		:pid_58:my_buff[1].fragment = UNDEF_FRAGMENT;
		:pid_58:my_buff[1].offset = 1;
		:pid_58:firmware[0] = UNDEF_FRAGMENT;
		:pid_58:firmware[1] = UNDEF_FRAGMENT;
		:pid_58:myseq_buff[0] = 0;
		:pid_58:myseq_buff[1] = 0;
		:pid_58:mydp_run[0] = false;
		:pid_58:mydp_run[1] = false;
		:pid_58:localTime = 0;
		:pid_58:z = $delta#initial;
		:pid_58:localTime = 0;
		:pid_58:undef_DM1 = false;
		:pid_58:undef_DM2 = false;
		:pid_58:seq_buff[0] = seq_buff[0]_2;
		:pid_58:seq_buff[1] = seq_buff[1]_2;
		:pid_58:i = i_2;
		:pid_58:localPC = true;
		:pid_58:new_seq_buff = new_seq_buff_2;
		:pid_58:new_seq = new_seq_2;
		:pid_58:new_fragment = new_fragment_2;
		:pid_58:new_offset = new_offset_2;
		:pid_58:timeEmit = timeEmit_2;
		:pid_59:e = e_2;
		:pid_59:tau = tau_2;
		:pid_59:tau_l = tau_l_2;
		:pid_59:tau_h = tau_h_2;
		:pid_59:k = k_2;
		:pid_59:c = c_2;
		:pid_59:i = i_2;
		:pid_59:t = t_2;
		:pid_59:consistent = consistent_2;
		:pid_59:cl = 0;
		:pid_65:mySeq = 1;
		:pid_65:e = e_4;
		:pid_65:tau = tau_4;
		:pid_65:tau_l = tau_l_4;
		:pid_65:tau_h = tau_h_4;
		:pid_65:k = k_4;
		:pid_65:c = c_4;
		:pid_65:i = i_4;
		:pid_65:t = t_4;
		:pid_65:consistent = consistent_4;
		:pid_65:cl = 0;
		:pid_65:d.seq = d.seq_4;
		:pid_65:d.fragment = d.fragment_4;
		:pid_65:d.offset = d.offset_4;
		:pid_70:mySeq = 2;
		:pid_70:e = e_5;
		:pid_70:tau = tau_5;
		:pid_70:tau_l = tau_l_5;
		:pid_70:tau_h = tau_h_5;
		:pid_70:k = k_5;
		:pid_70:c = c_5;
		:pid_70:i = i_5;
		:pid_70:t = t_5;
		:pid_70:consistent = consistent_5;
		:pid_70:cl = 0;
		:pid_70:d.seq = d.seq_5;
		:pid_70:d.fragment = d.fragment_5;
		:pid_70:d.offset = d.offset_5;
		:pid_75:my_buff[0].seq = 0;
		:pid_75:my_buff[0].fragment = UNDEF_FRAGMENT;
		:pid_75:my_buff[0].offset = 0;
		:pid_75:my_buff[1].seq = 0;
		:pid_75:my_buff[1].fragment = UNDEF_FRAGMENT;
		:pid_75:my_buff[1].offset = 1;
		:pid_75:firmware[0] = UNDEF_FRAGMENT;
		:pid_75:firmware[1] = UNDEF_FRAGMENT;
		:pid_75:myseq_buff[0] = 0;
		:pid_75:myseq_buff[1] = 0;
		:pid_75:mydp_run[0] = false;
		:pid_75:mydp_run[1] = false;
		:pid_75:localTime = 0;
		:pid_75:z = $delta#initial;
		:pid_75:localTime = 0;
		:pid_75:undef_DM1 = false;
		:pid_75:undef_DM2 = false;
		:pid_75:seq_buff[0] = seq_buff[0]_3;
		:pid_75:seq_buff[1] = seq_buff[1]_3;
		:pid_75:i = i_3;
		:pid_75:localPC = true;
		:pid_75:new_seq_buff = new_seq_buff_3;
		:pid_75:new_seq = new_seq_3;
		:pid_75:new_fragment = new_fragment_3;
		:pid_75:new_offset = new_offset_3;
		:pid_75:timeEmit = timeEmit_3;
		:pid_76:e = e_3;
		:pid_76:tau = tau_3;
		:pid_76:tau_l = tau_l_3;
		:pid_76:tau_h = tau_h_3;
		:pid_76:k = k_3;
		:pid_76:c = c_3;
		:pid_76:i = i_3;
		:pid_76:t = t_3;
		:pid_76:consistent = consistent_3;
		:pid_76:cl = 0;
		:pid_82:mySeq = 1;
		:pid_82:e = e_6;
		:pid_82:tau = tau_6;
		:pid_82:tau_l = tau_l_6;
		:pid_82:tau_h = tau_h_6;
		:pid_82:k = k_6;
		:pid_82:c = c_6;
		:pid_82:i = i_6;
		:pid_82:t = t_6;
		:pid_82:consistent = consistent_6;
		:pid_82:cl = 0;
		:pid_82:d.seq = d.seq_6;
		:pid_82:d.fragment = d.fragment_6;
		:pid_82:d.offset = d.offset_6;
		:pid_87:mySeq = 2;
		:pid_87:e = e_7;
		:pid_87:tau = tau_7;
		:pid_87:tau_l = tau_l_7;
		:pid_87:tau_h = tau_h_7;
		:pid_87:k = k_7;
		:pid_87:c = c_7;
		:pid_87:i = i_7;
		:pid_87:t = t_7;
		:pid_87:consistent = consistent_7;
		:pid_87:cl = 0;
		:pid_87:d.seq = d.seq_7;
		:pid_87:d.fragment = d.fragment_7;
		:pid_87:d.offset = d.offset_7;
	}
	BUFFER{
		:pid_24:bufferNode:<FIFO>#0{ }
		:pid_41:bufferNode:<FIFO>#0{ }
		:pid_58:bufferNode:<FIFO>#0{ }
		:pid_75:bufferNode:<FIFO>#0{ }
	}
	EC:<Id:2;Ev:2;H:1;W:1>{ SC: ( pid_4:o#0 , ( pid_27:cp0 , pid_32:dp0 , pid_37:dp0 ) , ( pid_44:cp0 , pid_49:dp0 , pid_54:dp0 ) , ( pid_61:cp0 , pid_66:dp0 , pid_71:dp0 ) , ( pid_78:cp0 , pid_83:dp0 , pid_88:dp0 ) )
		EXE: { |,| { |;| (:pid_77 , run) (:pid_77 , cp_init) } { |;| (:pid_60 , 
	run) (:pid_60 , cp_init) } { |;| (:pid_43 , run) (:pid_43 , cp_init) } { |;| 
	(:pid_26 , run) (:pid_26 , cp_init) } { |;| (:pid_3 , run) (:pid_3 , o_startup) }
	 }
		TRACE: { |,| (:pid_75 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_3 }) (:pid_58 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_2 }) (:pid_41 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_1 }) (:pid_24 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_0 }) }
		PC: ((z_0 > 0) && (z_1 > 0) && (z_2 > 0) && (z_3 > 0))
		DATA{
			:pid_2:uncoveredExit = 0;
			:pid_24:localTime = z_0;
			:pid_24:z = z_0;
			:pid_24:localPC = (z_0 > 0);
			:pid_25:tau_l = 4;
			:pid_25:tau_h = 8;
			:pid_25:k = 2;
			:pid_41:localTime = z_1;
			:pid_41:z = z_1;
			:pid_41:localPC = (z_1 > 0);
			:pid_42:tau_l = 4;
			:pid_42:tau_h = 8;
			:pid_42:k = 2;
			:pid_58:localTime = z_2;
			:pid_58:z = z_2;
			:pid_58:localPC = (z_2 > 0);
			:pid_59:tau_l = 4;
			:pid_59:tau_h = 8;
			:pid_59:k = 2;
			:pid_75:localTime = z_3;
			:pid_75:z = z_3;
			:pid_75:localPC = (z_3 > 0);
			:pid_76:tau_l = 4;
			:pid_76:tau_h = 8;
			:pid_76:k = 2;
		}
		EC:<Id:6;Ev:3;H:2;W:4>{ SC: ( pid_5:o#1 , ( pid_28:cp1 , pid_32:dp0 , pid_37:dp0 ) , ( pid_44:cp0 , pid_49:dp0 , pid_54:dp0 ) , ( pid_61:cp0 , pid_66:dp0 , pid_71:dp0 ) , ( pid_78:cp0 , pid_83:dp0 , pid_88:dp0 ) )
			EXE: { |;| (:pid_24 , run) (:pid_25 , run) (:pid_27 , run) (:pid_27 
	, cp_init) (:pid_2 , run) (:pid_4 , run) (:pid_4 , n1_out_Log) }
			TRACE: { |;| (:pid_24 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_4 }) (:pid_27 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_4 }) 
	(:pid_27 , ${ output#env inst::Trickle.Node.Log 0 ${ + param::Trickle.Node.z_0 
	param::Trickle.Node.z_4 } } @ (z_0 + z_4)) }
			/*FLAGS{ COVERAGE-ELEMENT }*/
			INFO{
				<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#1->run::pid_5:Trickle.Observer.o#1->prot::Trickle.Observer.o#1" as trace="tpid#1->run::pid_5:Trickle.Observer.o#1->prot::Trickle.Observer.o#1">
			}
			PC: ((t_4 < 4) && (0 <= (t_4 + -2)) && (z_0 > 0) && (z_1 > 0) && (z_2 > 0) && (z_3 > 
	0))
			DATA{
				:pid_2:uncoveredExit = 0;
				:pid_2:mess = INIT;
				:pid_24:localTime = (z_0 + z_4);
				:pid_24:z = z_4;
				:pid_24:localTime = z_4;
				:pid_24:localPC = ((t_4 < 4) && (0 <= (t_4 + -2)) && (z_0 > 0));
				:pid_25:e = 0;
				:pid_25:tau = 4;
				:pid_25:c = 0;
				:pid_25:t = t_4;
				:pid_25:cl = 0;
				:pid_31:cl = z_4;
				:pid_36:cl = z_4;
			}
			EC:<Id:11;Ev:6;H:3;W:8>{ SC: ( pid_6:o#2 , ( pid_28:cp1 , pid_32:dp0 , pid_37:dp0 ) , ( pid_45:cp1 , pid_49:dp0 , pid_54:dp0 ) , ( pid_61:cp0 , pid_66:dp0 , pid_71:dp0 ) , ( pid_78:cp0 , pid_83:dp0 , pid_88:dp0 ) )
				EXE: { |;| (:pid_41 , run) (:pid_42 , run) (:pid_44 , run) 
	(:pid_44 , cp_init) (:pid_2 , run) (:pid_5 , run) (:pid_5 , n2_out_Log) }
				TRACE: { |;| (:pid_41 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_9 }) (:pid_44 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_8 }) 
	(:pid_44 , ${ output#env inst::Trickle.Node.Log 0 ${ + param::Trickle.Node.z_1 
	param::Trickle.Node.z_9 } } @ (z_1 + z_9)) }
				/*FLAGS{ COVERAGE-ELEMENT }*/
				INFO{
					<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#2->run::pid_6:Trickle.Observer.o#2->prot::Trickle.Observer.o#2" as trace="tpid#2->run::pid_6:Trickle.Observer.o#2->prot::Trickle.Observer.o#2">
				}
				PC: ((t_4 < 4) && (t_8 < 4) && (0 <= (t_4 + -2)) && (0 <= (t_8 + -2)) && (z_0 > 0) 
	&& (z_1 > 0) && (z_2 > 0) && (z_3 > 0))
				DATA{
					:pid_2:uncoveredExit = 0;
					:pid_41:localTime = (z_1 + z_9);
					:pid_41:z = z_9;
					:pid_41:localTime = z_9;
					:pid_41:undef_DM1 = true;
					:pid_41:undef_DM2 = true;
					:pid_41:localPC = ((t_8 < 4) && (0 <= (t_8 + -2)) && (z_1 > 0));
					:pid_42:e = 0;
					:pid_42:tau = 4;
					:pid_42:c = 0;
					:pid_42:t = t_8;
					:pid_42:cl = 0;
					:pid_48:cl = z_9;
					:pid_53:cl = z_9;
				}
				EC:<Id:28;Ev:10;H:4;W:22>{ SC: ( pid_7:o#3 , ( pid_28:cp1 , pid_32:dp0 , pid_37:dp0 ) , ( pid_45:cp1 , pid_49:dp0 , pid_54:dp0 ) , ( pid_62:cp1 , pid_66:dp0 , pid_71:dp0 ) , ( pid_78:cp0 , pid_83:dp0 , pid_88:dp0 ) )
					EXE: { |;| (:pid_58 , run) (:pid_59 , run) (:pid_61 , run) 
	(:pid_61 , cp_init) (:pid_2 , run) (:pid_6 , run) (:pid_6 , n3_out_Log) }
					TRACE: { |;| (:pid_58 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_22 }) (:pid_61 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_15 }) 
	(:pid_61 , ${ output#env inst::Trickle.Node.Log 0 ${ + param::Trickle.Node.z_2 
	param::Trickle.Node.z_22 } } @ (z_2 + z_22)) }
					/*FLAGS{ COVERAGE-ELEMENT }*/
					INFO{
						<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#3->run::pid_7:Trickle.Observer.o#3->prot::Trickle.Observer.o#3" as trace="tpid#3->run::pid_7:Trickle.Observer.o#3->prot::Trickle.Observer.o#3">
					}
					PC: ((t_15 < 4) && (t_4 < 4) && (t_8 < 4) && (0 <= (t_15 + -2)) && (0 <= (t_4 + -2)) 
	&& (0 <= (t_8 + -2)) && (z_0 > 0) && (z_1 > 0) && (z_2 > 0) && (z_3 > 0))
					DATA{
						:pid_2:uncoveredExit = 0;
						:pid_58:localTime = (z_2 + z_22);
						:pid_58:z = z_22;
						:pid_58:localTime = z_22;
						:pid_58:undef_DM1 = true;
						:pid_58:undef_DM2 = true;
						:pid_58:localPC = ((t_15 < 4) && (0 <= (t_15 + -2)) && (z_2 > 0));
						:pid_59:e = 0;
						:pid_59:tau = 4;
						:pid_59:c = 0;
						:pid_59:t = t_15;
						:pid_59:cl = 0;
						:pid_65:cl = z_22;
						:pid_70:cl = z_22;
					}
					EC:<Id:51;Ev:11;H:5;W:22>{ SC: ( pid_8:o#4 , ( pid_28:cp1 , pid_32:dp0 , pid_37:dp0 ) , ( pid_45:cp1 , pid_49:dp0 , pid_54:dp0 ) , ( pid_62:cp1 , pid_66:dp0 , pid_71:dp0 ) , ( pid_79:cp1 , pid_83:dp0 , pid_88:dp0 ) )
						EXE: { |;| (:pid_75 , run) (:pid_76 , run) (:pid_78 , 
	run) (:pid_78 , cp_init) (:pid_2 , run) (:pid_7 , run) (:pid_7 , n4_out_Log) }
						TRACE: { |;| (:pid_75 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_39 }) (:pid_78 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_27 }) 
	(:pid_78 , ${ output#env inst::Trickle.Node.Log 0 ${ + param::Trickle.Node.z_3 
	param::Trickle.Node.z_39 } } @ (z_3 + z_39)) }
						/*FLAGS{ COVERAGE-ELEMENT }*/
						INFO{
							<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#4->run::pid_8:Trickle.Observer.o#4->prot::Trickle.Observer.o#4" as trace="tpid#4->run::pid_8:Trickle.Observer.o#4->prot::Trickle.Observer.o#4">
						}
						PC: ((t_15 < 4) && (t_27 < 4) && (t_4 < 4) && (t_8 < 4) && (0 <= (t_15 + -2)) && (0 
	<= (t_27 + -2)) && (0 <= (t_4 + -2)) && (0 <= (t_8 + -2)) && (z_0 > 0) && (z_1 > 
	0) && (z_2 > 0) && (z_3 > 0))
						DATA{
							:pid_2:uncoveredExit = 0;
							:pid_75:localTime = (z_3 + z_39);
							:pid_75:z = z_39;
							:pid_75:localTime = z_39;
							:pid_75:undef_DM1 = true;
							:pid_75:undef_DM2 = true;
							:pid_75:localPC = ((t_27 < 4) && (0 <= (t_27 + -2)) && (z_3 > 0));
							:pid_76:e = 0;
							:pid_76:tau = 4;
							:pid_76:c = 0;
							:pid_76:t = t_27;
							:pid_76:cl = 0;
							:pid_82:cl = z_39;
							:pid_87:cl = z_39;
						}
						EC:<Id:60;Ev:17;H:6;W:49>{ SC: ( pid_9:o#5 , ( pid_29:cp2 , pid_32:dp0 , pid_37:dp0 ) , ( pid_45:cp1 , pid_49:dp0 , pid_54:dp0 ) , ( pid_62:cp1 , pid_66:dp0 , pid_71:dp0 ) , ( pid_79:cp1 , pid_83:dp0 , pid_88:dp0 ) )
							EXE: { |;| (:pid_24 , run) (:pid_25 , run) (:pid_28 
	, run) (:pid_28 , cp_sendCM) (:pid_2 , run) (:pid_8 , run) (:pid_8 , n1_out_CM) }
							TRACE: { |;| (:pid_24 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_40 }) (:pid_28 , ${ output 
	inst::Trickle.Node.ControlMsg [ 1 , 1 ] ${ + param::Trickle.Node.z_0 
	param::Trickle.Node.z_4 param::Trickle.Node.z_40 } } @ (z_0 + z_4 + z_40)) }
							/*FLAGS{ COVERAGE-ELEMENT }*/
							INFO{
								<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#5->run::pid_9:Trickle.Observer.o#5->prot::Trickle.Observer.o#5" as trace="tpid#5->run::pid_9:Trickle.Observer.o#5->prot::Trickle.Observer.o#5">
							}
							PC: ((z_40 == t_4) && (t_15 < 4) && (t_27 < 4) && (t_4 < 4) && (t_8 < 4) && (0 <= 
	(t_15 + -2)) && (0 <= (t_27 + -2)) && (0 <= (t_4 + -2)) && (0 <= (t_8 + -2)) && 
	(z_0 > 0) && (z_1 > 0) && (z_2 > 0) && (z_3 > 0) && (z_4 > 0))
							DATA{
								:pid_2:uncoveredExit = 0;
								:pid_2:seqBuff[0] = 1;
								:pid_2:seqBuff[1] = 1;
								:pid_24:localTime = (z_0 + z_4 + z_40);
								:pid_24:z = z_40;
								:pid_24:localTime = (z_4 + z_40);
								:pid_24:localPC = ((z_40 == t_4) && (t_4 < 4) && (0 <= (t_4 + -2)) && (z_0 > 0) && (z_4 > 0));
								:pid_25:cl = z_40;
								:pid_31:cl = (z_4 + z_40);
								:pid_36:cl = (z_4 + z_40);
							}
							BUFFER{
								:pid_41:bufferNode:<FIFO>#0{
									:pid_24:ControlMsg([ 1 , 1 ] , (z_0 + z_4 + z_40));
								}
								:pid_58:bufferNode:<FIFO>#0{
									:pid_24:ControlMsg([ 1 , 1 ] , (z_0 + z_4 + z_40));
								}
							}
							EC:<Id:101;Ev:22;H:7;W:84>{ SC: ( pid_10:o#6 , ( pid_29:cp2 , pid_32:dp0 , pid_37:dp0 ) , ( pid_45:cp1 , pid_49:dp0 , pid_54:dp0 ) , ( pid_62:cp1 , pid_66:dp0 , pid_71:dp0 ) , ( pid_79:cp1 , pid_83:dp0 , pid_88:dp0 ) )
								EXE: { |;| (:pid_41 , run) (:pid_42 , run) 
	(:pid_45 , run) (:pid_45 , cp1_receiveCM_inconsistent) (:pid_2 , run) (:pid_9 , 
	run) (:pid_9 , n2_in_CM) }
								TRACE: { |;| (:pid_41 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_65 }) (:pid_45 , ${ input 
	inst::Trickle.Node.ControlMsg [ 1 , 1 ] ${ + param::Trickle.Node.z_0 
	param::Trickle.Node.z_4 param::Trickle.Node.z_40 } } @ (z_1 + z_65 + z_9)) 
	(:pid_45 , ${ newfresh inst::Trickle.Node.ControlProcess.t 
	param::Trickle.Node.ControlProcess.t_40 }) }
								/*FLAGS{ COVERAGE-ELEMENT }*/
								INFO{
									<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#6->run::pid_10:Trickle.Observer.o#6->prot::Trickle.Observer.o#6" as trace="tpid#6->run::pid_10:Trickle.Observer.o#6->prot::Trickle.Observer.o#6">
								}
								PC: ((z_40 == t_4) && (t_15 < 4) && (t_27 < 4) && (t_4 < 4) && (t_40 < 4) && (t_8 < 
	4) && (z_65 < t_8) && (0 <= (t_15 + -2)) && (0 <= (t_27 + -2)) && (0 <= (t_4 + 
	-2)) && (0 <= (t_40 + -2)) && (0 <= (t_8 + -2)) && ((z_0 + z_4 + z_40) <= (z_1 + 
	z_65 + z_9)) && (z_0 > 0) && (z_1 > 0) && (z_2 > 0) && (z_3 > 0) && (z_4 > 0) && 
	(z_9 > 0))
								DATA{
									:pid_2:uncoveredExit = 0;
									:pid_41:mydp_run[0] = true;
									:pid_41:mydp_run[1] = true;
									:pid_41:localTime = (z_1 + z_65 + z_9);
									:pid_41:z = z_65;
									:pid_41:localTime = (z_65 + z_9);
									:pid_41:seq_buff[0] = 1;
									:pid_41:seq_buff[1] = 1;
									:pid_41:localPC = ((t_40 < 4) && (t_8 < 4) && (z_65 < t_8) && (0 <= (t_40 + -2)) && (0 <= (t_8 + -2)) && ((z_0 + z_4 + z_40) <= (z_1 + z_65 + z_9)) && (z_1 > 0) && (z_9 > 0));
									:pid_41:timeEmit = (z_0 + z_4 + z_40);
									:pid_42:e = 0;
									:pid_42:c = 0;
									:pid_42:i = 2;
									:pid_42:t = t_40;
									:pid_42:consistent = false;
									:pid_42:cl = 0;
									:pid_48:cl = (z_65 + z_9);
									:pid_53:cl = (z_65 + z_9);
								}
								BUFFER{
									:pid_41:bufferNode:<FIFO>#0{ }
								}
								EC:<Id:142;Ev:26;H:8;W:120>{ SC: ( pid_11:o#7 , ( pid_29:cp2 , pid_32:dp0 , pid_37:dp0 ) , ( pid_45:cp1 , pid_49:dp0 , pid_54:dp0 ) , ( pid_62:cp1 , pid_66:dp0 , pid_71:dp0 ) , ( pid_79:cp1 , pid_83:dp0 , pid_88:dp0 ) )
									EXE: { |;| (:pid_58 , run) (:pid_59 , run) 
	(:pid_62 , run) (:pid_62 , cp1_receiveCM_inconsistent) (:pid_2 , run) (:pid_10 , 
	run) (:pid_10 , n3_in_CM) }
									TRACE: { |;| (:pid_58 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_86 }) (:pid_62 , ${ input 
	inst::Trickle.Node.ControlMsg [ 1 , 1 ] ${ + param::Trickle.Node.z_0 
	param::Trickle.Node.z_4 param::Trickle.Node.z_40 } } @ (z_2 + z_22 + z_86)) 
	(:pid_62 , ${ newfresh inst::Trickle.Node.ControlProcess.t 
	param::Trickle.Node.ControlProcess.t_58 }) }
									/*FLAGS{ COVERAGE-ELEMENT }*/
									INFO{
										<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#7->run::pid_11:Trickle.Observer.o#7->prot::Trickle.Observer.o#7" as trace="tpid#7->run::pid_11:Trickle.Observer.o#7->prot::Trickle.Observer.o#7">
									}
									PC: ((z_40 == t_4) && (t_15 < 4) && (t_27 < 4) && (t_4 < 4) && (t_40 < 4) && (t_58 < 
	4) && (t_8 < 4) && (z_65 < t_8) && (z_86 < t_15) && (0 <= (t_15 + -2)) && (0 <= 
	(t_27 + -2)) && (0 <= (t_4 + -2)) && (0 <= (t_40 + -2)) && (0 <= (t_58 + -2)) && 
	(0 <= (t_8 + -2)) && ((z_0 + z_4 + z_40) <= (z_1 + z_65 + z_9)) && ((z_0 + z_4 + 
	z_40) <= (z_2 + z_22 + z_86)) && (z_0 > 0) && (z_1 > 0) && (z_2 > 0) && (z_22 > 
	0) && (z_3 > 0) && (z_4 > 0) && (z_9 > 0))
									DATA{
										:pid_2:uncoveredExit = 0;
										:pid_58:mydp_run[0] = true;
										:pid_58:mydp_run[1] = true;
										:pid_58:localTime = (z_2 + z_22 + z_86);
										:pid_58:z = z_86;
										:pid_58:localTime = (z_22 + z_86);
										:pid_58:seq_buff[0] = 1;
										:pid_58:seq_buff[1] = 1;
										:pid_58:localPC = ((t_15 < 4) && (t_58 < 4) && (z_86 < t_15) && (0 <= (t_15 + -2)) && (0 <= (t_58 + -2)) && ((z_0 + z_4 + z_40) <= (z_2 + z_22 + z_86)) && (z_2 > 0) && (z_22 > 0));
										:pid_58:timeEmit = (z_0 + z_4 + z_40);
										:pid_59:e = 0;
										:pid_59:c = 0;
										:pid_59:i = 2;
										:pid_59:t = t_58;
										:pid_59:consistent = false;
										:pid_59:cl = 0;
										:pid_65:cl = (z_22 + z_86);
										:pid_70:cl = (z_22 + z_86);
									}
									BUFFER{
										:pid_58:bufferNode:<FIFO>#0{ }
									}
									EC:<Id:181;Ev:35;H:9;W:155>{ SC: ( pid_11:o#7 , ( pid_29:cp2 , pid_33:dp1 , pid_37:dp0 ) , ( pid_45:cp1 , pid_49:dp0 , pid_54:dp0 ) , ( pid_62:cp1 , pid_66:dp0 , pid_71:dp0 ) , ( pid_79:cp1 , pid_83:dp0 , pid_88:dp0 ) )
										EXE: { |;| (:pid_24 , run) (:pid_31 , 
	run) (:pid_32 , run) (:pid_32 , dp_init) (:pid_2 , run) }
										TRACE: { |;| (:pid_24 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_100 }) (:pid_32 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_54 }) }
										PC: ((z_40 == t_4) && (t_15 < 4) && (t_27 < 4) && (t_4 < 4) && (t_40 < 4) && (t_58 < 
	4) && (t_8 < 4) && (t_54 < 4) && (z_65 < t_8) && (z_86 < t_15) && (0 <= (t_15 + 
	-2)) && (0 <= (t_27 + -2)) && (0 <= (t_4 + -2)) && (0 <= (t_40 + -2)) && (0 <= 
	(t_58 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_54 + -2)) && ((z_0 + z_4 + z_40) 
	<= (z_1 + z_65 + z_9)) && ((z_0 + z_4 + z_40) <= (z_2 + z_22 + z_86)) && (z_0 > 
	0) && (z_1 > 0) && (z_2 > 0) && (z_22 > 0) && (z_3 > 0) && (z_4 > 0) && (z_40 > 
	0) && (z_9 > 0))
										DATA{
											:pid_2:uncoveredExit = 1;
											:pid_24:localTime = (z_0 + z_100 + z_4 + z_40);
											:pid_24:z = z_100;
											:pid_24:localTime = (z_100 + z_4 + z_40);
											:pid_24:localPC = ((z_40 == t_4) && (t_4 < 4) && (t_54 < 4) && (0 <= (t_4 + -2)) && (0 <= (t_54 + -2)) && (z_0 > 0) && (z_4 > 0) && (z_40 > 0));
											:pid_25:cl = (z_100 + z_40);
											:pid_31:e = 0;
											:pid_31:tau = 4;
											:pid_31:tau_l = 4;
											:pid_31:tau_h = 8;
											:pid_31:k = 2;
											:pid_31:c = 0;
											:pid_31:t = t_54;
											:pid_31:cl = 0;
											:pid_36:cl = (z_100 + z_4 + z_40);
										}
										EC:<Id:274;Ev:37;H:10;W:239>{ SC: ( pid_12:o#8 , ( pid_29:cp2 , pid_34:dp2 , pid_37:dp0 ) , ( pid_45:cp1 , pid_49:dp0 , pid_54:dp0 ) , ( pid_62:cp1 , pid_66:dp0 , pid_71:dp0 ) , ( pid_79:cp1 , pid_83:dp0 , pid_88:dp0 ) )
											EXE: { |;| (:pid_24 , run) (:pid_31 
	, run) (:pid_33 , run) (:pid_33 , dp_sendDM) (:pid_2 , run) (:pid_11 , run) 
	(:pid_11 , n1_out_DM) }
											TRACE: { |;| (:pid_24 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_136 }) (:pid_33 , ${ output 
	inst::Trickle.Node.DataMsg1 [ 1 , 1 , 0 ] ${ + param::Trickle.Node.z_0 
	param::Trickle.Node.z_100 param::Trickle.Node.z_136 param::Trickle.Node.z_4 
	param::Trickle.Node.z_40 } } @ (z_0 + z_100 + z_136 + z_4 + z_40)) }
											/*FLAGS{ COVERAGE-ELEMENT }*/
											INFO{
												<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#8->run::pid_12:Trickle.Observer.o#8->prot::Trickle.Observer.o#8" as trace="tpid#8->run::pid_12:Trickle.Observer.o#8->prot::Trickle.Observer.o#8">
											}
											PC: ((z_136 == t_54) && (z_40 == t_4) && (t_15 < 4) && (t_27 < 4) && (t_4 < 4) && 
	(t_40 < 4) && (t_58 < 4) && (t_8 < 4) && (t_54 < 4) && (z_65 < t_8) && (z_86 < 
	t_15) && (0 <= (t_15 + -2)) && (0 <= (t_27 + -2)) && (0 <= (t_4 + -2)) && (0 <= 
	(t_40 + -2)) && (0 <= (t_58 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_54 + -2)) && 
	((z_0 + z_4 + z_40) <= (z_1 + z_65 + z_9)) && ((z_0 + z_4 + z_40) <= (z_2 + z_22 
	+ z_86)) && (z_0 > 0) && (z_1 > 0) && (z_100 > 0) && (z_2 > 0) && (z_22 > 0) && 
	(z_3 > 0) && (z_4 > 0) && (z_40 > 0) && (z_9 > 0))
											DATA{
												:pid_2:uncoveredExit = 0;
												:pid_2:dataMessage.seq = 1;
												:pid_2:dataMessage.fragment = FRAGMENT_0;
												:pid_2:dataMessage.offset = 0;
												:pid_24:localTime = (z_0 + z_100 + z_136 + z_4 + z_40);
												:pid_24:z = z_136;
												:pid_24:localTime = (z_100 + z_136 + z_4 + z_40);
												:pid_24:localPC = ((z_136 == t_54) && (z_40 == t_4) && (t_4 < 4) && (t_54 < 4) && (0 <= (t_4 + -2)) && (0 <= (t_54 + -2)) && (z_0 > 0) && (z_100 > 0) && (z_4 > 0) && (z_40 > 0));
												:pid_25:cl = (z_100 + z_136 + z_40);
												:pid_31:cl = z_136;
												:pid_36:cl = (z_100 + z_136 + z_4 + z_40);
											}
											BUFFER{
												:pid_41:bufferNode:<FIFO>#0{
													:pid_24:DataMsg1([ 1 , 1 , 0 ] , (z_0 + z_100 + z_136 + z_4 + z_40));
												}
												:pid_58:bufferNode:<FIFO>#0{
													:pid_24:DataMsg1([ 1 , 1 , 0 ] , (z_0 + z_100 + z_136 + z_4 + z_40));
												}
											}
											EC:<Id:291;Ev:43;H:11;W:254>{ SC: ( pid_12:o#8 , ( pid_29:cp2 , pid_34:dp2 , pid_37:dp0 ) , ( pid_45:cp1 , pid_50:dp1 , pid_54:dp0 ) , ( pid_62:cp1 , pid_66:dp0 , pid_71:dp0 ) , ( pid_79:cp1 , pid_83:dp0 , pid_88:dp0 ) )
												EXE: { |;| (:pid_41 , run) 
	(:pid_48 , run) (:pid_49 , run) (:pid_49 , dp_init) (:pid_2 , run) }
												TRACE: { |;| (:pid_41 , ${ 
	newfresh inst::Trickle.Node.z param::Trickle.Node.z_145 }) (:pid_49 , ${ 
	newfresh inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_116 }
	) }
												PC: ((z_136 == t_54) && (z_40 == t_4) && (t_15 < 4) && (t_27 < 4) && (t_4 < 4) && 
	(t_40 < 4) && (t_58 < 4) && (t_8 < 4) && (t_116 < 4) && (t_54 < 4) && (z_65 < 
	t_8) && (z_86 < t_15) && (0 <= (t_15 + -2)) && (0 <= (t_27 + -2)) && (0 <= (t_4 
	+ -2)) && (0 <= (t_40 + -2)) && (0 <= (t_58 + -2)) && (0 <= (t_8 + -2)) && (0 <= 
	(t_116 + -2)) && (0 <= (t_54 + -2)) && ((z_0 + z_4 + z_40) <= (z_1 + z_65 + z_9))
	 && ((z_0 + z_4 + z_40) <= (z_2 + z_22 + z_86)) && (z_0 > 0) && (z_1 > 0) && 
	(z_100 > 0) && (z_2 > 0) && (z_22 > 0) && (z_3 > 0) && (z_4 > 0) && (z_40 > 0) 
	&& (z_65 > 0) && (z_9 > 0))
												DATA{
													:pid_2:uncoveredExit = 1;
													:pid_41:localTime = (z_1 + z_145 + z_65 + z_9);
													:pid_41:z = z_145;
													:pid_41:localTime = (z_145 + z_65 + z_9);
													:pid_41:localPC = ((t_40 < 4) && (t_8 < 4) && (t_116 < 4) && (z_65 < t_8) && (0 <= (t_40 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_116 + -2)) && ((z_0 + z_4 + z_40) <= (z_1 + z_65 + z_9)) && (z_1 > 0) && (z_65 > 0) && (z_9 > 0));
													:pid_42:cl = z_145;
													:pid_48:e = 0;
													:pid_48:tau = 4;
													:pid_48:tau_l = 4;
													:pid_48:tau_h = 8;
													:pid_48:k = 2;
													:pid_48:c = 0;
													:pid_48:t = t_116;
													:pid_48:cl = 0;
													:pid_53:cl = (z_145 + z_65 + z_9);
												}
												EC:<Id:347;Ev:47;H:12;W:304>{ SC: ( pid_13:o#9 , ( pid_29:cp2 , pid_34:dp2 , pid_37:dp0 ) , ( pid_45:cp1 , pid_50:dp1 , pid_54:dp0 ) , ( pid_62:cp1 , pid_66:dp0 , pid_71:dp0 ) , ( pid_79:cp1 , pid_83:dp0 , pid_88:dp0 ) )
													EXE: { |;| (:pid_41 , run) 
	(:pid_48 , run) (:pid_50 , run) (:pid_50 , dp1_receiveDM_consistent) (:pid_2 , 
	run) (:pid_12 , run) (:pid_12 , n2_in_DM) }
													TRACE: { |;| (:pid_41 , ${ 
	newfresh inst::Trickle.Node.z param::Trickle.Node.z_169 }) (:pid_50 , ${ input 
	inst::Trickle.Node.DataMsg1 [ 1 , 1 , 0 ] ${ + param::Trickle.Node.z_0 
	param::Trickle.Node.z_100 param::Trickle.Node.z_136 param::Trickle.Node.z_4 
	param::Trickle.Node.z_40 } } @ (z_1 + z_145 + z_169 + z_65 + z_9)) }
													/*FLAGS{ COVERAGE-ELEMENT }*/
													INFO{
														<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#9->run::pid_13:Trickle.Observer.o#9->prot::Trickle.Observer.o#9" as trace="tpid#9->run::pid_13:Trickle.Observer.o#9->prot::Trickle.Observer.o#9">
													}
													PC: ((z_136 == t_54) && (z_40 == t_4) && (t_15 < 4) && (t_27 < 4) && (t_4 < 4) && 
	(t_40 < 4) && (t_58 < 4) && (t_8 < 4) && (t_116 < 4) && (t_54 < 4) && (z_169 < 
	t_116) && (z_65 < t_8) && (z_86 < t_15) && (0 <= (t_15 + -2)) && (0 <= (t_27 + 
	-2)) && (0 <= (t_4 + -2)) && (0 <= (t_40 + -2)) && (0 <= (t_58 + -2)) && (0 <= 
	(t_8 + -2)) && (0 <= (t_116 + -2)) && (0 <= (t_54 + -2)) && ((z_0 + z_100 + 
	z_136 + z_4 + z_40) <= (z_1 + z_145 + z_169 + z_65 + z_9)) && ((z_0 + z_4 + z_40)
	 <= (z_1 + z_65 + z_9)) && ((z_0 + z_4 + z_40) <= (z_2 + z_22 + z_86)) && (z_0 > 
	0) && (z_1 > 0) && (z_100 > 0) && (z_145 > 0) && (z_2 > 0) && (z_22 > 0) && (z_3 
	> 0) && (z_4 > 0) && (z_40 > 0) && (z_65 > 0) && (z_9 > 0))
													DATA{
														:pid_2:uncoveredExit = 0;
														:pid_41:my_buff[0].seq = 1;
														:pid_41:my_buff[0].fragment = FRAGMENT_0;
														:pid_41:my_buff[0].offset = 0;
														:pid_41:firmware[0] = FRAGMENT_0;
														:pid_41:myseq_buff[0] = 1;
														:pid_41:localTime = (z_1 + z_145 + z_169 + z_65 + z_9);
														:pid_41:z = z_169;
														:pid_41:localTime = (z_145 + z_169 + z_65 + z_9);
														:pid_41:undef_DM1 = false;
														:pid_41:localPC = ((t_40 < 4) && (t_8 < 4) && (t_116 < 4) && (z_169 < t_116) && (z_65 < t_8) && (0 <= (t_40 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_116 + -2)) && ((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_1 + z_145 + z_169 + z_65 + z_9)) && ((z_0 + z_4 + z_40) <= (z_1 + z_65 + z_9)) && (z_1 > 0) && (z_145 > 0) && (z_65 > 0) && (z_9 > 0));
														:pid_41:timeEmit = (z_0 + z_100 + z_136 + z_4 + z_40);
														:pid_42:cl = (z_145 + z_169);
														:pid_48:c = 1;
														:pid_48:consistent = true;
														:pid_48:cl = z_169;
														:pid_48:d.seq = 1;
														:pid_48:d.fragment = FRAGMENT_0;
														:pid_48:d.offset = 0;
														:pid_53:cl = (z_145 + z_169 + z_65 + z_9);
													}
													BUFFER{
														:pid_41:bufferNode:<FIFO>#0{ }
													}
													EC:<Id:381;Ev:50;H:13;W:334>{ SC: ( pid_13:o#9 , ( pid_29:cp2 , pid_34:dp2 , pid_37:dp0 ) , ( pid_45:cp1 , pid_50:dp1 , pid_54:dp0 ) , ( pid_62:cp1 , pid_67:dp1 , pid_71:dp0 ) , ( pid_79:cp1 , pid_83:dp0 , pid_88:dp0 ) )
														EXE: { |;| (:pid_58 , 
	run) (:pid_65 , run) (:pid_66 , run) (:pid_66 , dp_init) (:pid_2 , run) }
														TRACE: { |;| (:pid_58 , 
	${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_186 }) (:pid_66 , ${ 
	newfresh inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_171 }
	) }
														PC: ((z_136 == t_54) && (z_40 == t_4) && (t_15 < 4) && (t_27 < 4) && (t_4 < 4) && 
	(t_40 < 4) && (t_58 < 4) && (t_8 < 4) && (t_116 < 4) && (t_171 < 4) && (t_54 < 4)
	 && (z_169 < t_116) && (z_65 < t_8) && (z_86 < t_15) && (0 <= (t_15 + -2)) && (0 
	<= (t_27 + -2)) && (0 <= (t_4 + -2)) && (0 <= (t_40 + -2)) && (0 <= (t_58 + -2)) 
	&& (0 <= (t_8 + -2)) && (0 <= (t_116 + -2)) && (0 <= (t_171 + -2)) && (0 <= 
	(t_54 + -2)) && ((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_1 + z_145 + z_169 + 
	z_65 + z_9)) && ((z_0 + z_4 + z_40) <= (z_1 + z_65 + z_9)) && ((z_0 + z_4 + z_40)
	 <= (z_2 + z_22 + z_86)) && (z_0 > 0) && (z_1 > 0) && (z_100 > 0) && (z_145 > 0) 
	&& (z_2 > 0) && (z_22 > 0) && (z_3 > 0) && (z_4 > 0) && (z_40 > 0) && (z_65 > 0) 
	&& (z_86 > 0) && (z_9 > 0))
														DATA{
															:pid_2:uncoveredExit = 1;
															:pid_58:localTime = (z_186 + z_2 + z_22 + z_86);
															:pid_58:z = z_186;
															:pid_58:localTime = (z_186 + z_22 + z_86);
															:pid_58:localPC = ((t_15 < 4) && (t_58 < 4) && (t_171 < 4) && (z_86 < t_15) && (0 <= (t_15 + -2)) && (0 <= (t_58 + -2)) && (0 <= (t_171 + -2)) && ((z_0 + z_4 + z_40) <= (z_2 + z_22 + z_86)) && (z_2 > 0) && (z_22 > 0) && (z_86 > 0));
															:pid_59:cl = z_186;
															:pid_65:e = 0;
															:pid_65:tau = 4;
															:pid_65:tau_l = 4;
															:pid_65:tau_h = 8;
															:pid_65:k = 2;
															:pid_65:c = 0;
															:pid_65:t = t_171;
															:pid_65:cl = 0;
															:pid_70:cl = (z_186 + z_22 + z_86);
														}
														EC:<Id:410;Ev:57;H:14;W:360>{ SC: ( pid_14:o#10 , ( pid_29:cp2 , pid_34:dp2 , pid_37:dp0 ) , ( pid_45:cp1 , pid_50:dp1 , pid_54:dp0 ) , ( pid_62:cp1 , pid_67:dp1 , pid_71:dp0 ) , ( pid_79:cp1 , pid_83:dp0 , pid_88:dp0 ) )
															EXE: { |;| (:pid_58 
	, run) (:pid_65 , run) (:pid_67 , run) (:pid_67 , dp1_receiveDM_consistent) 
	(:pid_2 , run) (:pid_13 , run) (:pid_13 , n3_in_DM) }
															TRACE: { |;| 
	(:pid_58 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_198 }) 
	(:pid_67 , ${ input inst::Trickle.Node.DataMsg1 [ 1 , 1 , 0 ] ${ + 
	param::Trickle.Node.z_0 param::Trickle.Node.z_100 param::Trickle.Node.z_136 
	param::Trickle.Node.z_4 param::Trickle.Node.z_40 } } @ (z_186 + z_198 + z_2 + 
	z_22 + z_86)) }
															/*FLAGS{ COVERAGE-ELEMENT }*/
															INFO{
																<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#10->run::pid_14:Trickle.Observer.o#10->prot::Trickle.Observer.o#10" as trace="tpid#10->run::pid_14:Trickle.Observer.o#10->prot::Trickle.Observer.o#10">
															}
															PC: ((z_136 == t_54) && (z_40 == t_4) && (t_15 < 4) && (t_27 < 4) && (t_4 < 4) && 
	(t_40 < 4) && (t_58 < 4) && (t_8 < 4) && (t_116 < 4) && (t_171 < 4) && (t_54 < 4)
	 && (z_169 < t_116) && (z_198 < t_171) && (z_65 < t_8) && (z_86 < t_15) && (0 <= 
	(t_15 + -2)) && (0 <= (t_27 + -2)) && (0 <= (t_4 + -2)) && (0 <= (t_40 + -2)) && 
	(0 <= (t_58 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_116 + -2)) && (0 <= (t_171 + 
	-2)) && (0 <= (t_54 + -2)) && ((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_1 + 
	z_145 + z_169 + z_65 + z_9)) && ((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_186 + 
	z_198 + z_2 + z_22 + z_86)) && ((z_0 + z_4 + z_40) <= (z_1 + z_65 + z_9)) && 
	((z_0 + z_4 + z_40) <= (z_2 + z_22 + z_86)) && (z_0 > 0) && (z_1 > 0) && (z_100 
	> 0) && (z_145 > 0) && (z_186 > 0) && (z_2 > 0) && (z_22 > 0) && (z_3 > 0) && 
	(z_4 > 0) && (z_40 > 0) && (z_65 > 0) && (z_86 > 0) && (z_9 > 0))
															DATA{
																:pid_2:uncoveredExit = 0;
																:pid_58:my_buff[0].seq = 1;
																:pid_58:my_buff[0].fragment = FRAGMENT_0;
																:pid_58:my_buff[0].offset = 0;
																:pid_58:firmware[0] = FRAGMENT_0;
																:pid_58:myseq_buff[0] = 1;
																:pid_58:localTime = (z_186 + z_198 + z_2 + z_22 + z_86);
																:pid_58:z = z_198;
																:pid_58:localTime = (z_186 + z_198 + z_22 + z_86);
																:pid_58:undef_DM1 = false;
																:pid_58:localPC = ((t_15 < 4) && (t_58 < 4) && (t_171 < 4) && (z_198 < t_171) && (z_86 < t_15) && (0 <= (t_15 + -2)) && (0 <= (t_58 + -2)) && (0 <= (t_171 + -2)) && ((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_186 + z_198 + z_2 + z_22 + z_86)) && ((z_0 + z_4 + z_40) <= (z_2 + z_22 + z_86)) && (z_186 > 0) && (z_2 > 0) && (z_22 > 0) && (z_86 > 0));
																:pid_58:timeEmit = (z_0 + z_100 + z_136 + z_4 + z_40);
																:pid_59:cl = (z_186 + z_198);
																:pid_65:c = 1;
																:pid_65:consistent = true;
																:pid_65:cl = z_198;
																:pid_65:d.seq = 1;
																:pid_65:d.fragment = FRAGMENT_0;
																:pid_65:d.offset = 0;
																:pid_70:cl = (z_186 + z_198 + z_22 + z_86);
															}
															BUFFER{
																:pid_58:bufferNode:<FIFO>#0{ }
															}
															EC:<Id:480;Ev:66;H:15;W:423>{ SC: ( pid_14:o#10 , ( pid_29:cp2 , pid_34:dp2 , pid_38:dp1 ) , ( pid_45:cp1 , pid_50:dp1 , pid_54:dp0 ) , ( pid_62:cp1 , pid_67:dp1 , pid_71:dp0 ) , ( pid_79:cp1 , pid_83:dp0 , pid_88:dp0 ) )
																EXE: { |;| 
	(:pid_24 , run) (:pid_36 , run) (:pid_37 , run) (:pid_37 , dp_init) (:pid_2 , 
	run) }
																TRACE: { |;| 
	(:pid_24 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_224 }) 
	(:pid_37 , ${ newfresh inst::Trickle.Node.DataProcess.t 
	param::Trickle.Node.DataProcess.t_215 }) }
																PC: ((z_136 == t_54) && (z_40 == t_4) && (t_15 < 4) && (t_27 < 4) && (t_4 < 4) && 
	(t_40 < 4) && (t_58 < 4) && (t_8 < 4) && (t_116 < 4) && (t_171 < 4) && (t_215 < 
	4) && (t_54 < 4) && (z_169 < t_116) && (z_198 < t_171) && (z_65 < t_8) && (z_86 
	< t_15) && (0 <= (t_15 + -2)) && (0 <= (t_27 + -2)) && (0 <= (t_4 + -2)) && (0 
	<= (t_40 + -2)) && (0 <= (t_58 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_116 + -2))
	 && (0 <= (t_171 + -2)) && (0 <= (t_215 + -2)) && (0 <= (t_54 + -2)) && ((z_0 + 
	z_100 + z_136 + z_4 + z_40) <= (z_1 + z_145 + z_169 + z_65 + z_9)) && ((z_0 + 
	z_100 + z_136 + z_4 + z_40) <= (z_186 + z_198 + z_2 + z_22 + z_86)) && ((z_0 + 
	z_4 + z_40) <= (z_1 + z_65 + z_9)) && ((z_0 + z_4 + z_40) <= (z_2 + z_22 + z_86))
	 && (z_0 > 0) && (z_1 > 0) && (z_100 > 0) && (z_136 > 0) && (z_145 > 0) && 
	(z_186 > 0) && (z_2 > 0) && (z_22 > 0) && (z_3 > 0) && (z_4 > 0) && (z_40 > 0) 
	&& (z_65 > 0) && (z_86 > 0) && (z_9 > 0))
																DATA{
																	:pid_2:uncoveredExit = 1;
																	:pid_24:localTime = (z_0 + z_100 + z_136 + z_224 + z_4 + z_40);
																	:pid_24:z = z_224;
																	:pid_24:localTime = (z_100 + z_136 + z_224 + z_4 + z_40);
																	:pid_24:localPC = ((z_136 == t_54) && (z_40 == t_4) && (t_4 < 4) && (t_215 < 4) && (t_54 < 4) && (0 <= (t_4 + -2)) && (0 <= (t_215 + -2)) && (0 <= (t_54 + -2)) && (z_0 > 0) && (z_100 > 0) && (z_136 > 0) && (z_4 > 0) && (z_40 > 0));
																	:pid_25:cl = (z_100 + z_136 + z_224 + z_40);
																	:pid_31:cl = (z_136 + z_224);
																	:pid_36:e = 0;
																	:pid_36:tau = 4;
																	:pid_36:tau_l = 4;
																	:pid_36:tau_h = 8;
																	:pid_36:k = 2;
																	:pid_36:c = 0;
																	:pid_36:t = t_215;
																	:pid_36:cl = 0;
																}
																EC:<Id:566;Ev:67;H:16;W:500>{ SC: ( pid_15:o#11 , ( pid_29:cp2 , pid_34:dp2 , pid_39:dp2 ) , ( pid_45:cp1 , pid_50:dp1 , pid_54:dp0 ) , ( pid_62:cp1 , pid_67:dp1 , pid_71:dp0 ) , ( pid_79:cp1 , pid_83:dp0 , pid_88:dp0 ) )
																	EXE: { |;| 
	(:pid_24 , run) (:pid_36 , run) (:pid_38 , run) (:pid_38 , dp_sendDM) (:pid_2 , 
	run) (:pid_14 , run) (:pid_14 , n1_out_DM) }
																	TRACE: { |;| 
	(:pid_24 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_260 }) 
	(:pid_38 , ${ output inst::Trickle.Node.DataMsg2 [ 2 , 2 , 1 ] ${ + 
	param::Trickle.Node.z_0 param::Trickle.Node.z_100 param::Trickle.Node.z_136 
	param::Trickle.Node.z_224 param::Trickle.Node.z_260 param::Trickle.Node.z_4 
	param::Trickle.Node.z_40 } } @ (z_0 + z_100 + z_136 + z_224 + z_260 + z_4 + z_40)
	) }
																	/*FLAGS{ COVERAGE-ELEMENT }*/
																	INFO{
																		<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#11->run::pid_15:Trickle.Observer.o#11->prot::Trickle.Observer.o#11" as trace="tpid#11->run::pid_15:Trickle.Observer.o#11->prot::Trickle.Observer.o#11">
																	}
																	PC: ((z_136 == t_54) && (z_260 == t_215) && (z_40 == t_4) && (t_15 < 4) && (t_27 < 4)
	 && (t_4 < 4) && (t_40 < 4) && (t_58 < 4) && (t_8 < 4) && (t_116 < 4) && (t_171 
	< 4) && (t_215 < 4) && (t_54 < 4) && (z_169 < t_116) && (z_198 < t_171) && (z_65 
	< t_8) && (z_86 < t_15) && (0 <= (t_15 + -2)) && (0 <= (t_27 + -2)) && (0 <= 
	(t_4 + -2)) && (0 <= (t_40 + -2)) && (0 <= (t_58 + -2)) && (0 <= (t_8 + -2)) && 
	(0 <= (t_116 + -2)) && (0 <= (t_171 + -2)) && (0 <= (t_215 + -2)) && (0 <= (t_54 
	+ -2)) && ((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_1 + z_145 + z_169 + z_65 + 
	z_9)) && ((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_186 + z_198 + z_2 + z_22 + 
	z_86)) && ((z_0 + z_4 + z_40) <= (z_1 + z_65 + z_9)) && ((z_0 + z_4 + z_40) <= 
	(z_2 + z_22 + z_86)) && (z_0 > 0) && (z_1 > 0) && (z_100 > 0) && (z_136 > 0) && 
	(z_145 > 0) && (z_186 > 0) && (z_2 > 0) && (z_22 > 0) && (z_224 > 0) && (z_3 > 0)
	 && (z_4 > 0) && (z_40 > 0) && (z_65 > 0) && (z_86 > 0) && (z_9 > 0))
																	DATA{
																		:pid_2:uncoveredExit = 0;
																		:pid_2:dataMessage.seq = 2;
																		:pid_2:dataMessage.fragment = FRAGMENT_1;
																		:pid_2:dataMessage.offset = 1;
																		:pid_24:localTime = (z_0 + z_100 + z_136 + z_224 + z_260 + z_4 + z_40);
																		:pid_24:z = z_260;
																		:pid_24:localTime = (z_100 + z_136 + z_224 + z_260 + z_4 + z_40);
																		:pid_24:localPC = ((z_136 == t_54) && (z_260 == t_215) && (z_40 == t_4) && (t_4 < 4) && (t_215 < 4) && (t_54 < 4) && (0 <= (t_4 + -2)) && (0 <= (t_215 + -2)) && (0 <= (t_54 + -2)) && (z_0 > 0) && (z_100 > 0) && (z_136 > 0) && (z_224 > 0) && (z_4 > 0) && (z_40 > 0));
																		:pid_25:cl = (z_100 + z_136 + z_224 + z_260 + z_40);
																		:pid_31:cl = (z_136 + z_224 + z_260);
																		:pid_36:cl = z_260;
																	}
																	BUFFER{
																		:pid_41:bufferNode:<FIFO>#0{
																			:pid_24:DataMsg2([ 2 , 2 , 1 ] , (z_0 + z_100 + z_136 + z_224 + z_260 + z_4 + z_40));
																		}
																		:pid_58:bufferNode:<FIFO>#0{
																			:pid_24:DataMsg2([ 2 , 2 , 1 ] , (z_0 + z_100 + z_136 + z_224 + z_260 + z_4 + z_40));
																		}
																	}
																	EC:<Id:573;Ev:74;H:17;W:506>{ SC: ( pid_15:o#11 , ( pid_29:cp2 , pid_34:dp2 , pid_39:dp2 ) , ( pid_45:cp1 , pid_50:dp1 , pid_55:dp1 ) , ( pid_62:cp1 , pid_67:dp1 , pid_71:dp0 ) , ( pid_79:cp1 , pid_83:dp0 , pid_88:dp0 ) )
																		EXE: { 
	|;| (:pid_41 , run) (:pid_53 , run) (:pid_54 , run) (:pid_54 , dp_init) (:pid_2 
	, run) }
																		TRACE: { 
	|;| (:pid_41 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_265 }) 
	(:pid_54 , ${ newfresh inst::Trickle.Node.DataProcess.t 
	param::Trickle.Node.DataProcess.t_253 }) }
																		PC: ((z_136 == t_54) && (z_260 == t_215) && (z_40 == t_4) && (t_15 < 4) && (t_27 < 4)
	 && (t_4 < 4) && (t_40 < 4) && (t_58 < 4) && (t_8 < 4) && (t_116 < 4) && (t_171 
	< 4) && (t_215 < 4) && (t_253 < 4) && (t_54 < 4) && (z_169 < t_116) && (z_198 < 
	t_171) && (z_65 < t_8) && (z_86 < t_15) && (0 <= (t_15 + -2)) && (0 <= (t_27 + 
	-2)) && (0 <= (t_4 + -2)) && (0 <= (t_40 + -2)) && (0 <= (t_58 + -2)) && (0 <= 
	(t_8 + -2)) && (0 <= (t_116 + -2)) && (0 <= (t_171 + -2)) && (0 <= (t_215 + -2)) 
	&& (0 <= (t_253 + -2)) && (0 <= (t_54 + -2)) && ((z_0 + z_100 + z_136 + z_4 + 
	z_40) <= (z_1 + z_145 + z_169 + z_65 + z_9)) && ((z_0 + z_100 + z_136 + z_4 + 
	z_40) <= (z_186 + z_198 + z_2 + z_22 + z_86)) && ((z_0 + z_4 + z_40) <= (z_1 + 
	z_65 + z_9)) && ((z_0 + z_4 + z_40) <= (z_2 + z_22 + z_86)) && (z_0 > 0) && (z_1 
	> 0) && (z_100 > 0) && (z_136 > 0) && (z_145 > 0) && (z_169 > 0) && (z_186 > 0) 
	&& (z_2 > 0) && (z_22 > 0) && (z_224 > 0) && (z_3 > 0) && (z_4 > 0) && (z_40 > 0)
	 && (z_65 > 0) && (z_86 > 0) && (z_9 > 0))
																		DATA{
																			:pid_2:uncoveredExit = 1;
																			:pid_41:localTime = (z_1 + z_145 + z_169 + z_265 + z_65 + z_9);
																			:pid_41:z = z_265;
																			:pid_41:localTime = (z_145 + z_169 + z_265 + z_65 + z_9);
																			:pid_41:localPC = ((t_40 < 4) && (t_8 < 4) && (t_116 < 4) && (t_253 < 4) && (z_169 < t_116) && (z_65 < t_8) && (0 <= (t_40 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_116 + -2)) && (0 <= (t_253 + -2)) && ((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_1 + z_145 + z_169 + z_65 + z_9)) && ((z_0 + z_4 + z_40) <= (z_1 + z_65 + z_9)) && (z_1 > 0) && (z_145 > 0) && (z_169 > 0) && (z_65 > 0) && (z_9 > 0));
																			:pid_42:cl = (z_145 + z_169 + z_265);
																			:pid_48:cl = (z_169 + z_265);
																			:pid_53:e = 0;
																			:pid_53:tau = 4;
																			:pid_53:tau_l = 4;
																			:pid_53:tau_h = 8;
																			:pid_53:k = 2;
																			:pid_53:c = 0;
																			:pid_53:t = t_253;
																			:pid_53:cl = 0;
																		}
																		EC:<Id:631;Ev:76;H:18;W:557>{ SC: ( pid_16:o#12 , ( pid_29:cp2 , pid_34:dp2 , pid_39:dp2 ) , ( pid_45:cp1 , pid_50:dp1 , pid_55:dp1 ) , ( pid_62:cp1 , pid_67:dp1 , pid_71:dp0 ) , ( pid_79:cp1 , pid_83:dp0 , pid_88:dp0 ) )
																			EXE: 
	{ |;| (:pid_41 , run) (:pid_53 , run) (:pid_55 , run) (:pid_55 , 
	dp1_receiveDM_consistent) (:pid_2 , run) (:pid_15 , run) (:pid_15 , n2_in_DM) }
																			
	TRACE: { |;| (:pid_41 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_293 }) (:pid_55 , ${ input inst::Trickle.Node.DataMsg2 [ 2 
	, 2 , 1 ] ${ + param::Trickle.Node.z_0 param::Trickle.Node.z_100 
	param::Trickle.Node.z_136 param::Trickle.Node.z_224 param::Trickle.Node.z_260 
	param::Trickle.Node.z_4 param::Trickle.Node.z_40 } } @ (z_1 + z_145 + z_169 + 
	z_265 + z_293 + z_65 + z_9)) }
																			/*FLAGS{ COVERAGE-ELEMENT }*/
																			INFO{
																				<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#12->run::pid_16:Trickle.Observer.o#12->prot::Trickle.Observer.o#12" as trace="tpid#12->run::pid_16:Trickle.Observer.o#12->prot::Trickle.Observer.o#12">
																			}
																			PC: ((z_136 == t_54) && (z_260 == t_215) && (z_40 == t_4) && (t_15 < 4) && (t_27 < 4)
	 && (t_4 < 4) && (t_40 < 4) && (t_58 < 4) && (t_8 < 4) && (t_116 < 4) && (t_171 
	< 4) && (t_215 < 4) && (t_253 < 4) && (t_54 < 4) && (z_169 < t_116) && (z_198 < 
	t_171) && (z_293 < t_253) && (z_65 < t_8) && (z_86 < t_15) && (0 <= (t_15 + -2)) 
	&& (0 <= (t_27 + -2)) && (0 <= (t_4 + -2)) && (0 <= (t_40 + -2)) && (0 <= (t_58 
	+ -2)) && (0 <= (t_8 + -2)) && (0 <= (t_116 + -2)) && (0 <= (t_171 + -2)) && (0 
	<= (t_215 + -2)) && (0 <= (t_253 + -2)) && (0 <= (t_54 + -2)) && ((z_0 + z_100 + 
	z_136 + z_224 + z_260 + z_4 + z_40) <= (z_1 + z_145 + z_169 + z_265 + z_293 + 
	z_65 + z_9)) && ((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_1 + z_145 + z_169 + 
	z_65 + z_9)) && ((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_186 + z_198 + z_2 + 
	z_22 + z_86)) && ((z_0 + z_4 + z_40) <= (z_1 + z_65 + z_9)) && ((z_0 + z_4 + 
	z_40) <= (z_2 + z_22 + z_86)) && (z_0 > 0) && (z_1 > 0) && (z_100 > 0) && (z_136 
	> 0) && (z_145 > 0) && (z_169 > 0) && (z_186 > 0) && (z_2 > 0) && (z_22 > 0) && 
	(z_224 > 0) && (z_265 > 0) && (z_3 > 0) && (z_4 > 0) && (z_40 > 0) && (z_65 > 0) 
	&& (z_86 > 0) && (z_9 > 0))
																			DATA{
																				:pid_2:uncoveredExit = 0;
																				:pid_41:my_buff[1].seq = 2;
																				:pid_41:my_buff[1].fragment = FRAGMENT_1;
																				:pid_41:my_buff[1].offset = 1;
																				:pid_41:firmware[1] = FRAGMENT_1;
																				:pid_41:myseq_buff[1] = 1;
																				:pid_41:localTime = (z_1 + z_145 + z_169 + z_265 + z_293 + z_65 + z_9);
																				:pid_41:z = z_293;
																				:pid_41:localTime = (z_145 + z_169 + z_265 + z_293 + z_65 + z_9);
																				:pid_41:undef_DM2 = false;
																				:pid_41:localPC = ((t_40 < 4) && (t_8 < 4) && (t_116 < 4) && (t_253 < 4) && (z_169 < t_116) && (z_293 < t_253) && (z_65 < t_8) && (0 <= (t_40 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_116 + -2)) && (0 <= (t_253 + -2)) && ((z_0 + z_100 + z_136 + z_224 + z_260 + z_4 + z_40) <= (z_1 + z_145 + z_169 + z_265 + z_293 + z_65 + z_9)) && ((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_1 + z_145 + z_169 + z_65 + z_9)) && ((z_0 + z_4 + z_40) <= (z_1 + z_65 + z_9)) && (z_1 > 0) && (z_145 > 0) && (z_169 > 0) && (z_265 > 0) && (z_65 > 0) && (z_9 > 0));
																				:pid_41:timeEmit = (z_0 + z_100 + z_136 + z_224 + z_260 + z_4 + z_40);
																				:pid_42:cl = (z_145 + z_169 + z_265 + z_293);
																				:pid_48:cl = (z_169 + z_265 + z_293);
																				:pid_53:c = 1;
																				:pid_53:consistent = true;
																				:pid_53:cl = z_293;
																				:pid_53:d.seq = 2;
																				:pid_53:d.fragment = FRAGMENT_1;
																				:pid_53:d.offset = 1;
																			}
																			BUFFER{
																				:pid_41:bufferNode:<FIFO>#0{ }
																			}
																			EC:<Id:645;Ev:80;H:19;W:569>{ SC: ( pid_16:o#12 , ( pid_29:cp2 , pid_34:dp2 , pid_39:dp2 ) , ( pid_45:cp1 , pid_50:dp1 , pid_55:dp1 ) , ( pid_62:cp1 , pid_67:dp1 , pid_72:dp1 ) , ( pid_79:cp1 , pid_83:dp0 , pid_88:dp0 ) )
																				
	EXE: { |;| (:pid_58 , run) (:pid_70 , run) (:pid_71 , run) (:pid_71 , dp_init) 
	(:pid_2 , run) }
																				
	TRACE: { |;| (:pid_58 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_302 }) (:pid_71 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_279 }) }
																				PC: ((z_136 == t_54) && (z_260 == t_215) && (z_40 == t_4) && (t_15 < 4) && (t_27 < 4)
	 && (t_4 < 4) && (t_40 < 4) && (t_58 < 4) && (t_8 < 4) && (t_116 < 4) && (t_171 
	< 4) && (t_215 < 4) && (t_253 < 4) && (t_279 < 4) && (t_54 < 4) && (z_169 < 
	t_116) && (z_198 < t_171) && (z_293 < t_253) && (z_65 < t_8) && (z_86 < t_15) && 
	(0 <= (t_15 + -2)) && (0 <= (t_27 + -2)) && (0 <= (t_4 + -2)) && (0 <= (t_40 + 
	-2)) && (0 <= (t_58 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_116 + -2)) && (0 <= 
	(t_171 + -2)) && (0 <= (t_215 + -2)) && (0 <= (t_253 + -2)) && (0 <= (t_279 + -2)
	) && (0 <= (t_54 + -2)) && ((z_0 + z_100 + z_136 + z_224 + z_260 + z_4 + z_40) 
	<= (z_1 + z_145 + z_169 + z_265 + z_293 + z_65 + z_9)) && ((z_0 + z_100 + z_136 
	+ z_4 + z_40) <= (z_1 + z_145 + z_169 + z_65 + z_9)) && ((z_0 + z_100 + z_136 + 
	z_4 + z_40) <= (z_186 + z_198 + z_2 + z_22 + z_86)) && ((z_0 + z_4 + z_40) <= 
	(z_1 + z_65 + z_9)) && ((z_0 + z_4 + z_40) <= (z_2 + z_22 + z_86)) && (z_0 > 0) 
	&& (z_1 > 0) && (z_100 > 0) && (z_136 > 0) && (z_145 > 0) && (z_169 > 0) && 
	(z_186 > 0) && (z_198 > 0) && (z_2 > 0) && (z_22 > 0) && (z_224 > 0) && (z_265 > 
	0) && (z_3 > 0) && (z_4 > 0) && (z_40 > 0) && (z_65 > 0) && (z_86 > 0) && (z_9 > 
	0))
																				DATA{
																					:pid_2:uncoveredExit = 1;
																					:pid_58:localTime = (z_186 + z_198 + z_2 + z_22 + z_302 + z_86);
																					:pid_58:z = z_302;
																					:pid_58:localTime = (z_186 + z_198 + z_22 + z_302 + z_86);
																					:pid_58:localPC = ((t_15 < 4) && (t_58 < 4) && (t_171 < 4) && (t_279 < 4) && (z_198 < t_171) && (z_86 < t_15) && (0 <= (t_15 + -2)) && (0 <= (t_58 + -2)) && (0 <= (t_171 + -2)) && (0 <= (t_279 + -2)) && ((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_186 + z_198 + z_2 + z_22 + z_86)) && ((z_0 + z_4 + z_40) <= (z_2 + z_22 + z_86)) && (z_186 > 0) && (z_198 > 0) && (z_2 > 0) && (z_22 > 0) && (z_86 > 0));
																					:pid_59:cl = (z_186 + z_198 + z_302);
																					:pid_65:cl = (z_198 + z_302);
																					:pid_70:e = 0;
																					:pid_70:tau = 4;
																					:pid_70:tau_l = 4;
																					:pid_70:tau_h = 8;
																					:pid_70:k = 2;
																					:pid_70:c = 0;
																					:pid_70:t = t_279;
																					:pid_70:cl = 0;
																				}
																				EC:<Id:679;Ev:85;H:20;W:599>{ SC: ( pid_17:o#13 , ( pid_29:cp2 , pid_34:dp2 , pid_39:dp2 ) , ( pid_45:cp1 , pid_50:dp1 , pid_55:dp1 ) , ( pid_62:cp1 , pid_67:dp1 , pid_72:dp1 ) , ( pid_79:cp1 , pid_83:dp0 , pid_88:dp0 ) )
																					
	EXE: { |;| (:pid_58 , run) (:pid_70 , run) (:pid_72 , run) (:pid_72 , 
	dp1_receiveDM_consistent) (:pid_2 , run) (:pid_16 , run) (:pid_16 , n3_in_DM) }
																					
	TRACE: { |;| (:pid_58 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_318 }) (:pid_72 , ${ input inst::Trickle.Node.DataMsg2 [ 2 
	, 2 , 1 ] ${ + param::Trickle.Node.z_0 param::Trickle.Node.z_100 
	param::Trickle.Node.z_136 param::Trickle.Node.z_224 param::Trickle.Node.z_260 
	param::Trickle.Node.z_4 param::Trickle.Node.z_40 } } @ (z_186 + z_198 + z_2 + 
	z_22 + z_302 + z_318 + z_86)) }
																					/*FLAGS{ COVERAGE-ELEMENT }*/
																					INFO{
																						<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#13->run::pid_17:Trickle.Observer.o#13->prot::Trickle.Observer.o#13" as trace="tpid#13->run::pid_17:Trickle.Observer.o#13->prot::Trickle.Observer.o#13">
																					}
																					PC: ((z_136 == t_54) && (z_260 == t_215) && (z_40 == t_4) && (t_15 < 4) && (t_27 < 4)
	 && (t_4 < 4) && (t_40 < 4) && (t_58 < 4) && (t_8 < 4) && (t_116 < 4) && (t_171 
	< 4) && (t_215 < 4) && (t_253 < 4) && (t_279 < 4) && (t_54 < 4) && (z_169 < 
	t_116) && (z_198 < t_171) && (z_293 < t_253) && (z_318 < t_279) && (z_65 < t_8) 
	&& (z_86 < t_15) && (0 <= (t_15 + -2)) && (0 <= (t_27 + -2)) && (0 <= (t_4 + -2))
	 && (0 <= (t_40 + -2)) && (0 <= (t_58 + -2)) && (0 <= (t_8 + -2)) && (0 <= 
	(t_116 + -2)) && (0 <= (t_171 + -2)) && (0 <= (t_215 + -2)) && (0 <= (t_253 + -2)
	) && (0 <= (t_279 + -2)) && (0 <= (t_54 + -2)) && ((z_0 + z_100 + z_136 + z_224 
	+ z_260 + z_4 + z_40) <= (z_1 + z_145 + z_169 + z_265 + z_293 + z_65 + z_9)) && 
	((z_0 + z_100 + z_136 + z_224 + z_260 + z_4 + z_40) <= (z_186 + z_198 + z_2 + 
	z_22 + z_302 + z_318 + z_86)) && ((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_1 + 
	z_145 + z_169 + z_65 + z_9)) && ((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_186 + 
	z_198 + z_2 + z_22 + z_86)) && ((z_0 + z_4 + z_40) <= (z_1 + z_65 + z_9)) && 
	((z_0 + z_4 + z_40) <= (z_2 + z_22 + z_86)) && (z_0 > 0) && (z_1 > 0) && (z_100 
	> 0) && (z_136 > 0) && (z_145 > 0) && (z_169 > 0) && (z_186 > 0) && (z_198 > 0) 
	&& (z_2 > 0) && (z_22 > 0) && (z_224 > 0) && (z_265 > 0) && (z_3 > 0) && (z_302 
	> 0) && (z_4 > 0) && (z_40 > 0) && (z_65 > 0) && (z_86 > 0) && (z_9 > 0))
																					DATA{
																						:pid_2:uncoveredExit = 0;
																						:pid_58:my_buff[1].seq = 2;
																						:pid_58:my_buff[1].fragment = FRAGMENT_1;
																						:pid_58:my_buff[1].offset = 1;
																						:pid_58:firmware[1] = FRAGMENT_1;
																						:pid_58:myseq_buff[1] = 1;
																						:pid_58:localTime = (z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_86);
																						:pid_58:z = z_318;
																						:pid_58:localTime = (z_186 + z_198 + z_22 + z_302 + z_318 + z_86);
																						:pid_58:undef_DM2 = false;
																						:pid_58:localPC = ((t_15 < 4) && (t_58 < 4) && (t_171 < 4) && (t_279 < 4) && (z_198 < t_171) && (z_318 < t_279) && (z_86 < t_15) && (0 <= (t_15 + -2)) && (0 <= (t_58 + -2)) && (0 <= (t_171 + -2)) && (0 <= (t_279 + -2)) && ((z_0 + z_100 + z_136 + z_224 + z_260 + z_4 + z_40) <= (z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_86)) && ((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_186 + z_198 + z_2 + z_22 + z_86)) && ((z_0 + z_4 + z_40) <= (z_2 + z_22 + z_86)) && (z_186 > 0) && (z_198 > 0) && (z_2 > 0) && (z_22 > 0) && (z_302 > 0) && (z_86 > 0));
																						:pid_58:timeEmit = (z_0 + z_100 + z_136 + z_224 + z_260 + z_4 + z_40);
																						:pid_59:cl = (z_186 + z_198 + z_302 + z_318);
																						:pid_65:cl = (z_198 + z_302 + z_318);
																						:pid_70:c = 1;
																						:pid_70:consistent = true;
																						:pid_70:cl = z_318;
																						:pid_70:d.seq = 2;
																						:pid_70:d.fragment = FRAGMENT_1;
																						:pid_70:d.offset = 1;
																					}
																					BUFFER{
																						:pid_58:bufferNode:<FIFO>#0{ }
																					}
																					EC:<Id:718;Ev:87;H:21;W:633>{ SC: ( pid_17:o#13 , ( pid_29:cp2 , pid_34:dp2 , pid_39:dp2 ) , ( pid_45:cp1 , pid_50:dp1 , pid_55:dp1 ) , ( pid_63:cp2 , pid_67:dp1 , pid_72:dp1 ) , ( pid_79:cp1 , pid_83:dp0 , pid_88:dp0 ) )
																					
		EXE: { |;| (:pid_58 , run) (:pid_59 , run) (:pid_62 , run) (:pid_62 , 
	cp_sendCM) (:pid_2 , run) }
																					
		TRACE: { |;| (:pid_58 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_338 }) (:pid_62 , ${ output inst::Trickle.Node.ControlMsg 
	[ 1 , 1 ] ${ + param::Trickle.Node.z_186 param::Trickle.Node.z_198 
	param::Trickle.Node.z_2 param::Trickle.Node.z_22 param::Trickle.Node.z_302 
	param::Trickle.Node.z_318 param::Trickle.Node.z_338 param::Trickle.Node.z_86 } } 
	@ (z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_86)) }
																						/*FLAGS{ COVERAGE-ELEMENT }*/
																						INFO{
																							<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#14->Node.ControlProcess->cp1.cp_sendCM" as trace="tpid#14->Node.ControlProcess->cp1.cp_sendCM">
																						}
																						PC: (((z_186 + z_198 + z_302 + z_318 + z_338) == t_58) && (z_136 == t_54) && (z_260 
	== t_215) && (z_40 == t_4) && (t_15 < 4) && (t_27 < 4) && (t_4 < 4) && (t_40 < 4)
	 && (t_58 < 4) && (t_8 < 4) && (t_116 < 4) && (t_171 < 4) && (t_215 < 4) && 
	(t_253 < 4) && (t_279 < 4) && (t_54 < 4) && (z_169 < t_116) && (z_198 < t_171) 
	&& (z_293 < t_253) && (z_318 < t_279) && (z_65 < t_8) && (z_86 < t_15) && (0 <= 
	(t_15 + -2)) && (0 <= (t_27 + -2)) && (0 <= (t_4 + -2)) && (0 <= (t_40 + -2)) && 
	(0 <= (t_58 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_116 + -2)) && (0 <= (t_171 + 
	-2)) && (0 <= (t_215 + -2)) && (0 <= (t_253 + -2)) && (0 <= (t_279 + -2)) && (0 
	<= (t_54 + -2)) && ((z_0 + z_100 + z_136 + z_224 + z_260 + z_4 + z_40) <= (z_1 + 
	z_145 + z_169 + z_265 + z_293 + z_65 + z_9)) && ((z_0 + z_100 + z_136 + z_224 + 
	z_260 + z_4 + z_40) <= (z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_86)) && 
	((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_1 + z_145 + z_169 + z_65 + z_9)) && 
	((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_186 + z_198 + z_2 + z_22 + z_86)) && 
	((z_0 + z_4 + z_40) <= (z_1 + z_65 + z_9)) && ((z_0 + z_4 + z_40) <= (z_2 + z_22 
	+ z_86)) && (z_0 > 0) && (z_1 > 0) && (z_100 > 0) && (z_136 > 0) && (z_145 > 0) 
	&& (z_169 > 0) && (z_186 > 0) && (z_198 > 0) && (z_2 > 0) && (z_22 > 0) && 
	(z_224 > 0) && (z_265 > 0) && (z_3 > 0) && (z_302 > 0) && (z_318 > 0) && (z_4 > 
	0) && (z_40 > 0) && (z_65 > 0) && (z_86 > 0) && (z_9 > 0))
																						DATA{
																							:pid_2:uncoveredExit = 1;
																							:pid_58:localTime = (z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_86);
																							:pid_58:z = z_338;
																							:pid_58:localTime = (z_186 + z_198 + z_22 + z_302 + z_318 + z_338 + z_86);
																							:pid_58:localPC = (((z_186 + z_198 + z_302 + z_318 + z_338) == t_58) && (t_15 < 4) && (t_58 < 4) && (t_171 < 4) && (t_279 < 4) && (z_198 < t_171) && (z_318 < t_279) && (z_86 < t_15) && (0 <= (t_15 + -2)) && (0 <= (t_58 + -2)) && (0 <= (t_171 + -2)) && (0 <= (t_279 + -2)) && ((z_0 + z_100 + z_136 + z_224 + z_260 + z_4 + z_40) <= (z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_86)) && ((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_186 + z_198 + z_2 + z_22 + z_86)) && ((z_0 + z_4 + z_40) <= (z_2 + z_22 + z_86)) && (z_186 > 0) && (z_198 > 0) && (z_2 > 0) && (z_22 > 0) && (z_302 > 0) && (z_318 > 0) && (z_86 > 0));
																							:pid_59:cl = (z_186 + z_198 + z_302 + z_318 + z_338);
																							:pid_65:cl = (z_198 + z_302 + z_318 + z_338);
																							:pid_70:cl = (z_318 + z_338);
																						}
																						BUFFER{
																							:pid_24:bufferNode:<FIFO>#0{
																								:pid_58:ControlMsg([ 1 , 1 ] , (z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_86));
																							}
																							:pid_75:bufferNode:<FIFO>#0{
																								:pid_58:ControlMsg([ 1 , 1 ] , (z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_86));
																							}
																						}
																						EC:<Id:735;Ev:94;H:22;W:648>{ SC: ( pid_17:o#13 , ( pid_29:cp2 , pid_34:dp2 , pid_39:dp2 ) , ( pid_45:cp1 , pid_50:dp1 , pid_55:dp1 ) , ( pid_63:cp2 , pid_67:dp1 , pid_72:dp1 ) , ( pid_79:cp1 , pid_83:dp0 , pid_88:dp0 ) )
																					
			EXE: { |;| (:pid_75 , run) (:pid_76 , run) (:pid_79 , run) (:pid_79 , 
	cp1_receiveCM_inconsistent) (:pid_2 , run) }
																					
			TRACE: { |;| (:pid_75 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_347 }) (:pid_79 , ${ input inst::Trickle.Node.ControlMsg [ 
	1 , 1 ] ${ + param::Trickle.Node.z_186 param::Trickle.Node.z_198 
	param::Trickle.Node.z_2 param::Trickle.Node.z_22 param::Trickle.Node.z_302 
	param::Trickle.Node.z_318 param::Trickle.Node.z_338 param::Trickle.Node.z_86 } } 
	@ (z_3 + z_347 + z_39)) (:pid_79 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_104 }) }
																							/*FLAGS{ COVERAGE-ELEMENT }*/
																							INFO{
																								<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#15->Node.ControlProcess->cp1.cp1_receiveCM_inconsistent" as trace="tpid#15->Node.ControlProcess->cp1.cp1_receiveCM_inconsistent">
																							}
																							PC: (((z_186 + z_198 + z_302 + z_318 + z_338) == t_58) && (z_136 == t_54) && (z_260 
	== t_215) && (z_40 == t_4) && (t_104 < 4) && (t_15 < 4) && (t_27 < 4) && (t_4 < 
	4) && (t_40 < 4) && (t_58 < 4) && (t_8 < 4) && (t_116 < 4) && (t_171 < 4) && 
	(t_215 < 4) && (t_253 < 4) && (t_279 < 4) && (t_54 < 4) && (z_169 < t_116) && 
	(z_198 < t_171) && (z_293 < t_253) && (z_318 < t_279) && (z_347 < t_27) && (z_65 
	< t_8) && (z_86 < t_15) && (0 <= (t_104 + -2)) && (0 <= (t_15 + -2)) && (0 <= 
	(t_27 + -2)) && (0 <= (t_4 + -2)) && (0 <= (t_40 + -2)) && (0 <= (t_58 + -2)) && 
	(0 <= (t_8 + -2)) && (0 <= (t_116 + -2)) && (0 <= (t_171 + -2)) && (0 <= (t_215 
	+ -2)) && (0 <= (t_253 + -2)) && (0 <= (t_279 + -2)) && (0 <= (t_54 + -2)) && 
	((z_0 + z_100 + z_136 + z_224 + z_260 + z_4 + z_40) <= (z_1 + z_145 + z_169 + 
	z_265 + z_293 + z_65 + z_9)) && ((z_0 + z_100 + z_136 + z_224 + z_260 + z_4 + 
	z_40) <= (z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_86)) && ((z_0 + z_100 + 
	z_136 + z_4 + z_40) <= (z_1 + z_145 + z_169 + z_65 + z_9)) && ((z_0 + z_100 + 
	z_136 + z_4 + z_40) <= (z_186 + z_198 + z_2 + z_22 + z_86)) && ((z_0 + z_4 + 
	z_40) <= (z_1 + z_65 + z_9)) && ((z_0 + z_4 + z_40) <= (z_2 + z_22 + z_86)) && 
	((z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_86) <= (z_3 + z_347 + 
	z_39)) && (z_0 > 0) && (z_1 > 0) && (z_100 > 0) && (z_136 > 0) && (z_145 > 0) && 
	(z_169 > 0) && (z_186 > 0) && (z_198 > 0) && (z_2 > 0) && (z_22 > 0) && (z_224 > 
	0) && (z_265 > 0) && (z_3 > 0) && (z_302 > 0) && (z_318 > 0) && (z_39 > 0) && 
	(z_4 > 0) && (z_40 > 0) && (z_65 > 0) && (z_86 > 0) && (z_9 > 0))
																							DATA{
																								:pid_2:uncoveredExit = 2;
																								:pid_75:mydp_run[0] = true;
																								:pid_75:mydp_run[1] = true;
																								:pid_75:localTime = (z_3 + z_347 + z_39);
																								:pid_75:z = z_347;
																								:pid_75:localTime = (z_347 + z_39);
																								:pid_75:seq_buff[0] = 1;
																								:pid_75:seq_buff[1] = 1;
																								:pid_75:localPC = ((t_104 < 4) && (t_27 < 4) && (z_347 < t_27) && (0 <= (t_104 + -2)) && (0 <= (t_27 + -2)) && ((z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_86) <= (z_3 + z_347 + z_39)) && (z_3 > 0) && (z_39 > 0));
																								:pid_75:timeEmit = (z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_86);
																								:pid_76:e = 0;
																								:pid_76:c = 0;
																								:pid_76:i = 2;
																								:pid_76:t = t_104;
																								:pid_76:consistent = false;
																								:pid_76:cl = 0;
																								:pid_82:cl = (z_347 + z_39);
																								:pid_87:cl = (z_347 + z_39);
																							}
																							BUFFER{
																								:pid_75:bufferNode:<FIFO>#0{ }
																							}
																							EC:<Id:795;Ev:95;H:23;W:648>{ SC: ( pid_18:o#14 , ( pid_29:cp2 , pid_34:dp2 , pid_39:dp2 ) , ( pid_45:cp1 , pid_50:dp1 , pid_55:dp1 ) , ( pid_63:cp2 , pid_67:dp1 , pid_72:dp1 ) , ( pid_80:cp2 , pid_83:dp0 , pid_88:dp0 ) )
																					
				EXE: { |;| (:pid_75 , run) (:pid_76 , run) (:pid_79 , run) (:pid_79 
	, cp_sendCM) (:pid_2 , run) (:pid_17 , run) (:pid_17 , n4_out_CM) }
																					
				TRACE: { |;| (:pid_75 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_375 }) (:pid_79 , ${ output inst::Trickle.Node.ControlMsg 
	[ 0 , 0 ] ${ + param::Trickle.Node.z_3 param::Trickle.Node.z_347 
	param::Trickle.Node.z_375 param::Trickle.Node.z_39 } } @ (z_3 + z_347 + z_375 + 
	z_39)) }
																								/*FLAGS{ COVERAGE-ELEMENT }*/
																								INFO{
																									<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#16->run::pid_18:Trickle.Observer.o#14->prot::Trickle.Observer.o#14" as trace="tpid#16->run::pid_18:Trickle.Observer.o#14->prot::Trickle.Observer.o#14">
																								}
																								PC: (((z_186 + z_198 + z_302 + z_318 + z_338) == t_58) && (z_136 == t_54) && (z_260 
	== t_215) && (z_375 == t_104) && (z_40 == t_4) && (t_104 < 4) && (t_15 < 4) && 
	(t_27 < 4) && (t_4 < 4) && (t_40 < 4) && (t_58 < 4) && (t_8 < 4) && (t_116 < 4) 
	&& (t_171 < 4) && (t_215 < 4) && (t_253 < 4) && (t_279 < 4) && (t_54 < 4) && 
	(z_169 < t_116) && (z_198 < t_171) && (z_293 < t_253) && (z_318 < t_279) && 
	(z_347 < t_27) && (z_65 < t_8) && (z_86 < t_15) && (0 <= (t_104 + -2)) && (0 <= 
	(t_15 + -2)) && (0 <= (t_27 + -2)) && (0 <= (t_4 + -2)) && (0 <= (t_40 + -2)) && 
	(0 <= (t_58 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_116 + -2)) && (0 <= (t_171 + 
	-2)) && (0 <= (t_215 + -2)) && (0 <= (t_253 + -2)) && (0 <= (t_279 + -2)) && (0 
	<= (t_54 + -2)) && ((z_0 + z_100 + z_136 + z_224 + z_260 + z_4 + z_40) <= (z_1 + 
	z_145 + z_169 + z_265 + z_293 + z_65 + z_9)) && ((z_0 + z_100 + z_136 + z_224 + 
	z_260 + z_4 + z_40) <= (z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_86)) && 
	((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_1 + z_145 + z_169 + z_65 + z_9)) && 
	((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_186 + z_198 + z_2 + z_22 + z_86)) && 
	((z_0 + z_4 + z_40) <= (z_1 + z_65 + z_9)) && ((z_0 + z_4 + z_40) <= (z_2 + z_22 
	+ z_86)) && ((z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_86) <= (z_3 
	+ z_347 + z_39)) && (z_0 > 0) && (z_1 > 0) && (z_100 > 0) && (z_136 > 0) && 
	(z_145 > 0) && (z_169 > 0) && (z_186 > 0) && (z_198 > 0) && (z_2 > 0) && (z_22 > 
	0) && (z_224 > 0) && (z_265 > 0) && (z_3 > 0) && (z_302 > 0) && (z_318 > 0) && 
	(z_347 > 0) && (z_39 > 0) && (z_4 > 0) && (z_40 > 0) && (z_65 > 0) && (z_86 > 0) 
	&& (z_9 > 0))
																								DATA{
																									:pid_2:uncoveredExit = 0;
																									:pid_2:seqBuff[0] = 0;
																									:pid_2:seqBuff[1] = 0;
																									:pid_75:localTime = (z_3 + z_347 + z_375 + z_39);
																									:pid_75:z = z_375;
																									:pid_75:localTime = (z_347 + z_375 + z_39);
																									:pid_75:localPC = ((z_375 == t_104) && (t_104 < 4) && (t_27 < 4) && (z_347 < t_27) && (0 <= (t_104 + -2)) && (0 <= (t_27 + -2)) && ((z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_86) <= (z_3 + z_347 + z_39)) && (z_3 > 0) && (z_347 > 0) && (z_39 > 0));
																									:pid_76:cl = z_375;
																									:pid_82:cl = (z_347 + z_375 + z_39);
																									:pid_87:cl = (z_347 + z_375 + z_39);
																								}
																								BUFFER{
																									:pid_41:bufferNode:<FIFO>#0{
																										:pid_75:ControlMsg([ 0 , 0 ] , (z_3 + z_347 + z_375 + z_39));
																									}
																								}
																								EC:<Id:805;Ev:105;H:24;W:648>{ SC: ( pid_18:o#14 , ( pid_29:cp2 , pid_34:dp2 , pid_39:dp2 ) , ( pid_45:cp1 , pid_50:dp1 , pid_55:dp1 ) , ( pid_63:cp2 , pid_67:dp1 , pid_72:dp1 ) , ( pid_79:cp1 , pid_83:dp0 , pid_88:dp0 ) )
																					
					EXE: { |;| (:pid_75 , run) (:pid_76 , run) (:pid_80 , run) 
	(:pid_80 , cp_resetTau) (:pid_2 , run) }
																					
					TRACE: { |;| (:pid_75 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_379 }) (:pid_80 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_109 }) }
																									PC: (((z_186 + z_198 + z_302 + z_318 + z_338) == t_58) && ((z_375 + z_379) == 4) && 
	(z_136 == t_54) && (z_260 == t_215) && (z_375 == t_104) && (z_40 == t_4) && 
	(t_104 < 4) && (t_109 < 8) && (t_15 < 4) && (t_27 < 4) && (t_4 < 4) && (t_40 < 4)
	 && (t_58 < 4) && (t_8 < 4) && (t_116 < 4) && (t_171 < 4) && (t_215 < 4) && 
	(t_253 < 4) && (t_279 < 4) && (t_54 < 4) && (z_169 < t_116) && (z_198 < t_171) 
	&& (z_293 < t_253) && (z_318 < t_279) && (z_347 < t_27) && (z_65 < t_8) && (z_86 
	< t_15) && (0 <= (t_104 + -2)) && (0 <= (t_109 + -4)) && (0 <= (t_15 + -2)) && 
	(0 <= (t_27 + -2)) && (0 <= (t_4 + -2)) && (0 <= (t_40 + -2)) && (0 <= (t_58 + 
	-2)) && (0 <= (t_8 + -2)) && (0 <= (t_116 + -2)) && (0 <= (t_171 + -2)) && (0 <= 
	(t_215 + -2)) && (0 <= (t_253 + -2)) && (0 <= (t_279 + -2)) && (0 <= (t_54 + -2))
	 && ((z_0 + z_100 + z_136 + z_224 + z_260 + z_4 + z_40) <= (z_1 + z_145 + z_169 
	+ z_265 + z_293 + z_65 + z_9)) && ((z_0 + z_100 + z_136 + z_224 + z_260 + z_4 + 
	z_40) <= (z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_86)) && ((z_0 + z_100 + 
	z_136 + z_4 + z_40) <= (z_1 + z_145 + z_169 + z_65 + z_9)) && ((z_0 + z_100 + 
	z_136 + z_4 + z_40) <= (z_186 + z_198 + z_2 + z_22 + z_86)) && ((z_0 + z_4 + 
	z_40) <= (z_1 + z_65 + z_9)) && ((z_0 + z_4 + z_40) <= (z_2 + z_22 + z_86)) && 
	((z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_86) <= (z_3 + z_347 + 
	z_39)) && ((z_375 + z_379) > t_104) && (z_0 > 0) && (z_1 > 0) && (z_100 > 0) && 
	(z_136 > 0) && (z_145 > 0) && (z_169 > 0) && (z_186 > 0) && (z_198 > 0) && (z_2 
	> 0) && (z_22 > 0) && (z_224 > 0) && (z_265 > 0) && (z_3 > 0) && (z_302 > 0) && 
	(z_318 > 0) && (z_347 > 0) && (z_375 > 0) && (z_39 > 0) && (z_4 > 0) && (z_40 > 
	0) && (z_65 > 0) && (z_86 > 0) && (z_9 > 0))
																									DATA{
																										:pid_2:uncoveredExit = 1;
																										:pid_75:localTime = (z_3 + z_347 + z_375 + z_379 + z_39);
																										:pid_75:z = z_379;
																										:pid_75:localTime = (z_347 + z_375 + z_379 + z_39);
																										:pid_75:localPC = (((z_375 + z_379) == 4) && (z_375 == t_104) && (t_104 < 4) && (t_109 < 8) && (t_27 < 4) && (z_347 < t_27) && (0 <= (t_104 + -2)) && (0 <= (t_109 + -4)) && (0 <= (t_27 + -2)) && ((z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_86) <= (z_3 + z_347 + z_39)) && ((z_375 + z_379) > t_104) && (z_3 > 0) && (z_347 > 0) && (z_375 > 0) && (z_39 > 0));
																										:pid_76:e = 1;
																										:pid_76:tau = 8;
																										:pid_76:c = 0;
																										:pid_76:t = t_109;
																										:pid_76:cl = 0;
																										:pid_82:cl = (z_347 + z_375 + z_379 + z_39);
																										:pid_87:cl = (z_347 + z_375 + z_379 + z_39);
																									}
																									EC:<Id:917;Ev:114;H:25;W:812>{ SC: ( pid_18:o#14 , ( pid_29:cp2 , pid_34:dp2 , pid_39:dp2 ) , ( pid_45:cp1 , pid_51:dp2 , pid_55:dp1 ) , ( pid_63:cp2 , pid_67:dp1 , pid_72:dp1 ) , ( pid_79:cp1 , pid_83:dp0 , pid_88:dp0 ) )
																					
						EXE: { |;| (:pid_41 , run) (:pid_48 , run) (:pid_50 , run) 
	(:pid_50 , dp_sendDM) (:pid_2 , run) }
																					
						TRACE: { |;| (:pid_41 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_417 }) (:pid_50 , ${ output inst::Trickle.Node.DataMsg1 [ 
	1 , 1 , 0 ] ${ + param::Trickle.Node.z_1 param::Trickle.Node.z_145 
	param::Trickle.Node.z_169 param::Trickle.Node.z_265 param::Trickle.Node.z_293 
	param::Trickle.Node.z_417 param::Trickle.Node.z_65 param::Trickle.Node.z_9 } } @ 
	(z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_65 + z_9)) }
																										PC: (((z_169 + z_265 + z_293 + z_417) == t_116) && ((z_186 + z_198 + z_302 + z_318 + 
	z_338) == t_58) && ((z_375 + z_379) == 4) && (z_136 == t_54) && (z_260 == t_215) 
	&& (z_375 == t_104) && (z_40 == t_4) && (t_104 < 4) && (t_109 < 8) && (t_15 < 4) 
	&& (t_27 < 4) && (t_4 < 4) && (t_40 < 4) && (t_58 < 4) && (t_8 < 4) && (t_116 < 
	4) && (t_171 < 4) && (t_215 < 4) && (t_253 < 4) && (t_279 < 4) && (t_54 < 4) && 
	(z_169 < t_116) && (z_198 < t_171) && (z_293 < t_253) && (z_318 < t_279) && 
	(z_347 < t_27) && (z_65 < t_8) && (z_86 < t_15) && (0 <= (t_104 + -2)) && (0 <= 
	(t_109 + -4)) && (0 <= (t_15 + -2)) && (0 <= (t_27 + -2)) && (0 <= (t_4 + -2)) 
	&& (0 <= (t_40 + -2)) && (0 <= (t_58 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_116 
	+ -2)) && (0 <= (t_171 + -2)) && (0 <= (t_215 + -2)) && (0 <= (t_253 + -2)) && 
	(0 <= (t_279 + -2)) && (0 <= (t_54 + -2)) && ((z_0 + z_100 + z_136 + z_224 + 
	z_260 + z_4 + z_40) <= (z_1 + z_145 + z_169 + z_265 + z_293 + z_65 + z_9)) && 
	((z_0 + z_100 + z_136 + z_224 + z_260 + z_4 + z_40) <= (z_186 + z_198 + z_2 + 
	z_22 + z_302 + z_318 + z_86)) && ((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_1 + 
	z_145 + z_169 + z_65 + z_9)) && ((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_186 + 
	z_198 + z_2 + z_22 + z_86)) && ((z_0 + z_4 + z_40) <= (z_1 + z_65 + z_9)) && 
	((z_0 + z_4 + z_40) <= (z_2 + z_22 + z_86)) && ((z_186 + z_198 + z_2 + z_22 + 
	z_302 + z_318 + z_338 + z_86) <= (z_3 + z_347 + z_39)) && ((z_375 + z_379) > 
	t_104) && (z_0 > 0) && (z_1 > 0) && (z_100 > 0) && (z_136 > 0) && (z_145 > 0) && 
	(z_169 > 0) && (z_186 > 0) && (z_198 > 0) && (z_2 > 0) && (z_22 > 0) && (z_224 > 
	0) && (z_265 > 0) && (z_293 > 0) && (z_3 > 0) && (z_302 > 0) && (z_318 > 0) && 
	(z_347 > 0) && (z_375 > 0) && (z_39 > 0) && (z_4 > 0) && (z_40 > 0) && (z_65 > 0)
	 && (z_86 > 0) && (z_9 > 0))
																										DATA{
																											:pid_2:uncoveredExit = 2;
																											:pid_41:localTime = (z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_65 + z_9);
																											:pid_41:z = z_417;
																											:pid_41:localTime = (z_145 + z_169 + z_265 + z_293 + z_417 + z_65 + z_9);
																											:pid_41:localPC = (((z_169 + z_265 + z_293 + z_417) == t_116) && (t_40 < 4) && (t_8 < 4) && (t_116 < 4) && (t_253 < 4) && (z_169 < t_116) && (z_293 < t_253) && (z_65 < t_8) && (0 <= (t_40 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_116 + -2)) && (0 <= (t_253 + -2)) && ((z_0 + z_100 + z_136 + z_224 + z_260 + z_4 + z_40) <= (z_1 + z_145 + z_169 + z_265 + z_293 + z_65 + z_9)) && ((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_1 + z_145 + z_169 + z_65 + z_9)) && ((z_0 + z_4 + z_40) <= (z_1 + z_65 + z_9)) && (z_1 > 0) && (z_145 > 0) && (z_169 > 0) && (z_265 > 0) && (z_293 > 0) && (z_65 > 0) && (z_9 > 0));
																											:pid_42:cl = (z_145 + z_169 + z_265 + z_293 + z_417);
																											:pid_48:cl = (z_169 + z_265 + z_293 + z_417);
																											:pid_53:cl = (z_293 + z_417);
																										}
																										BUFFER{
																											:pid_58:bufferNode:<FIFO>#0{
																												:pid_41:DataMsg1([ 1 , 1 , 0 ] , (z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_65 + z_9));
																											}
																										}
																										EC:<Id:1013;Ev:117;H:26;W:899>{ SC: ( pid_18:o#14 , ( pid_29:cp2 , pid_34:dp2 , pid_39:dp2 ) , ( pid_45:cp1 , pid_51:dp2 , pid_55:dp1 ) , ( pid_63:cp2 , pid_67:dp1 , pid_72:dp1 ) , ( pid_79:cp1 , pid_83:dp0 , pid_88:dp0 ) )
																					
							EXE: { |;| (:pid_58 , run) (:pid_65 , run) (:pid_67 , 
	run) (:pid_67 , dp1_receiveDM_consistent) (:pid_2 , run) }
																					
							TRACE: { |;| (:pid_58 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_454 }) (:pid_67 , ${ input inst::Trickle.Node.DataMsg1 [ 1 
	, 1 , 0 ] ${ + param::Trickle.Node.z_1 param::Trickle.Node.z_145 
	param::Trickle.Node.z_169 param::Trickle.Node.z_265 param::Trickle.Node.z_293 
	param::Trickle.Node.z_417 param::Trickle.Node.z_65 param::Trickle.Node.z_9 } } @ 
	(z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_454 + z_86)) }
																											/*FLAGS{ COVERAGE-ELEMENT }*/
																											INFO{
																												<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#17->Node.DataProcess1->dp1.dp1_receiveDM_consistent" as trace="tpid#17->Node.DataProcess1->dp1.dp1_receiveDM_consistent">
																												<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#18->Node.DataProcess1->dp1.dp1_receiveDM_consistent" as trace="tpid#18->Node.DataProcess1->dp1.dp1_receiveDM_consistent">
																											}
																											PC: (((z_169 + z_265 + z_293 + z_417) == t_116) && ((z_186 + z_198 + z_302 + z_318 + 
	z_338) == t_58) && ((z_375 + z_379) == 4) && (z_136 == t_54) && (z_260 == t_215) 
	&& (z_375 == t_104) && (z_40 == t_4) && ((z_198 + z_302 + z_318 + z_338 + z_454) 
	< t_171) && (t_104 < 4) && (t_109 < 8) && (t_15 < 4) && (t_27 < 4) && (t_4 < 4) 
	&& (t_40 < 4) && (t_58 < 4) && (t_8 < 4) && (t_116 < 4) && (t_171 < 4) && (t_215 
	< 4) && (t_253 < 4) && (t_279 < 4) && (t_54 < 4) && (z_169 < t_116) && (z_198 < 
	t_171) && (z_293 < t_253) && (z_318 < t_279) && (z_347 < t_27) && (z_65 < t_8) 
	&& (z_86 < t_15) && (0 <= (t_104 + -2)) && (0 <= (t_109 + -4)) && (0 <= (t_15 + 
	-2)) && (0 <= (t_27 + -2)) && (0 <= (t_4 + -2)) && (0 <= (t_40 + -2)) && (0 <= 
	(t_58 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_116 + -2)) && (0 <= (t_171 + -2)) 
	&& (0 <= (t_215 + -2)) && (0 <= (t_253 + -2)) && (0 <= (t_279 + -2)) && (0 <= 
	(t_54 + -2)) && ((z_0 + z_100 + z_136 + z_224 + z_260 + z_4 + z_40) <= (z_1 + 
	z_145 + z_169 + z_265 + z_293 + z_65 + z_9)) && ((z_0 + z_100 + z_136 + z_224 + 
	z_260 + z_4 + z_40) <= (z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_86)) && 
	((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_1 + z_145 + z_169 + z_65 + z_9)) && 
	((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_186 + z_198 + z_2 + z_22 + z_86)) && 
	((z_0 + z_4 + z_40) <= (z_1 + z_65 + z_9)) && ((z_0 + z_4 + z_40) <= (z_2 + z_22 
	+ z_86)) && ((z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_65 + z_9) <= 
	(z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_454 + z_86)) && ((z_186 
	+ z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_86) <= (z_3 + z_347 + z_39)) && 
	((z_375 + z_379) > t_104) && (z_0 > 0) && (z_1 > 0) && (z_100 > 0) && (z_136 > 0)
	 && (z_145 > 0) && (z_169 > 0) && (z_186 > 0) && (z_198 > 0) && (z_2 > 0) && 
	(z_22 > 0) && (z_224 > 0) && (z_265 > 0) && (z_293 > 0) && (z_3 > 0) && (z_302 > 
	0) && (z_318 > 0) && (z_338 > 0) && (z_347 > 0) && (z_375 > 0) && (z_39 > 0) && 
	(z_4 > 0) && (z_40 > 0) && (z_65 > 0) && (z_86 > 0) && (z_9 > 0))
																											DATA{
																												:pid_2:uncoveredExit = 3;
																												:pid_58:localTime = (z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_454 + z_86);
																												:pid_58:z = z_454;
																												:pid_58:localTime = (z_186 + z_198 + z_22 + z_302 + z_318 + z_338 + z_454 + z_86);
																												:pid_58:localPC = (((z_186 + z_198 + z_302 + z_318 + z_338) == t_58) && ((z_198 + z_302 + z_318 + z_338 + z_454) < t_171) && (t_15 < 4) && (t_58 < 4) && (t_171 < 4) && (t_279 < 4) && (z_198 < t_171) && (z_318 < t_279) && (z_86 < t_15) && (0 <= (t_15 + -2)) && (0 <= (t_58 + -2)) && (0 <= (t_171 + -2)) && (0 <= (t_279 + -2)) && ((z_0 + z_100 + z_136 + z_224 + z_260 + z_4 + z_40) <= (z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_86)) && ((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_186 + z_198 + z_2 + z_22 + z_86)) && ((z_0 + z_4 + z_40) <= (z_2 + z_22 + z_86)) && ((z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_65 + z_9) <= (z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_454 + z_86)) && (z_186 > 0) && (z_198 > 0) && (z_2 > 0) && (z_22 > 0) && (z_302 > 0) && (z_318 > 0) && (z_338 > 0) && (z_86 > 0));
																												:pid_58:timeEmit = (z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_65 + z_9);
																												:pid_59:cl = (z_186 + z_198 + z_302 + z_318 + z_338 + z_454);
																												:pid_65:c = 2;
																												:pid_65:cl = (z_198 + z_302 + z_318 + z_338 + z_454);
																												:pid_70:cl = (z_318 + z_338 + z_454);
																											}
																											BUFFER{
																												:pid_58:bufferNode:<FIFO>#0{ }
																											}
																											EC:<Id:1050;Ev:125;H:27;W:933>{ SC: ( pid_19:o#17 , ( pid_29:cp2 , pid_34:dp2 , pid_39:dp2 ) , ( pid_45:cp1 , pid_51:dp2 , pid_55:dp1 ) , ( pid_63:cp2 , pid_67:dp1 , pid_72:dp1 ) , ( pid_79:cp1 , pid_83:dp0 , pid_88:dp0 ) )
																					
								EXE: { |;| (:pid_41 , run) (:pid_42 , run) (:pid_45 
	, run) (:pid_45 , cp1_receiveCM_inconsistent) (:pid_2 , run) (:pid_18 , run) 
	(:pid_18 , n2_in_CM) }
																					
								TRACE: { |;| (:pid_41 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_465 }) (:pid_45 , ${ input 
	inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + param::Trickle.Node.z_3 
	param::Trickle.Node.z_347 param::Trickle.Node.z_375 param::Trickle.Node.z_39 } } 
	@ (z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_465 + z_65 + z_9)) (:pid_45 , 
	${ newfresh inst::Trickle.Node.ControlProcess.t 
	param::Trickle.Node.ControlProcess.t_143 }) }
																												PC: (((z_169 + z_265 + z_293 + z_417) == t_116) && ((z_186 + z_198 + z_302 + z_318 + 
	z_338) == t_58) && ((z_375 + z_379) == 4) && (z_136 == t_54) && (z_260 == t_215) 
	&& (z_375 == t_104) && (z_40 == t_4) && ((z_145 + z_169 + z_265 + z_293 + z_417 
	+ z_465) < t_40) && ((z_198 + z_302 + z_318 + z_338 + z_454) < t_171) && (t_104 
	< 4) && (t_109 < 8) && (t_143 < 4) && (t_15 < 4) && (t_27 < 4) && (t_4 < 4) && 
	(t_40 < 4) && (t_58 < 4) && (t_8 < 4) && (t_116 < 4) && (t_171 < 4) && (t_215 < 
	4) && (t_253 < 4) && (t_279 < 4) && (t_54 < 4) && (z_169 < t_116) && (z_198 < 
	t_171) && (z_293 < t_253) && (z_318 < t_279) && (z_347 < t_27) && (z_65 < t_8) 
	&& (z_86 < t_15) && (0 <= (t_104 + -2)) && (0 <= (t_109 + -4)) && (0 <= (t_143 + 
	-2)) && (0 <= (t_15 + -2)) && (0 <= (t_27 + -2)) && (0 <= (t_4 + -2)) && (0 <= 
	(t_40 + -2)) && (0 <= (t_58 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_116 + -2)) 
	&& (0 <= (t_171 + -2)) && (0 <= (t_215 + -2)) && (0 <= (t_253 + -2)) && (0 <= 
	(t_279 + -2)) && (0 <= (t_54 + -2)) && ((z_0 + z_100 + z_136 + z_224 + z_260 + 
	z_4 + z_40) <= (z_1 + z_145 + z_169 + z_265 + z_293 + z_65 + z_9)) && ((z_0 + 
	z_100 + z_136 + z_224 + z_260 + z_4 + z_40) <= (z_186 + z_198 + z_2 + z_22 + 
	z_302 + z_318 + z_86)) && ((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_1 + z_145 + 
	z_169 + z_65 + z_9)) && ((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_186 + z_198 + 
	z_2 + z_22 + z_86)) && ((z_0 + z_4 + z_40) <= (z_1 + z_65 + z_9)) && ((z_0 + z_4 
	+ z_40) <= (z_2 + z_22 + z_86)) && ((z_1 + z_145 + z_169 + z_265 + z_293 + z_417 
	+ z_65 + z_9) <= (z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_454 + 
	z_86)) && ((z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_86) <= (z_3 + 
	z_347 + z_39)) && ((z_3 + z_347 + z_375 + z_39) <= (z_1 + z_145 + z_169 + z_265 
	+ z_293 + z_417 + z_465 + z_65 + z_9)) && ((z_375 + z_379) > t_104) && (z_0 > 0) 
	&& (z_1 > 0) && (z_100 > 0) && (z_136 > 0) && (z_145 > 0) && (z_169 > 0) && 
	(z_186 > 0) && (z_198 > 0) && (z_2 > 0) && (z_22 > 0) && (z_224 > 0) && (z_265 > 
	0) && (z_293 > 0) && (z_3 > 0) && (z_302 > 0) && (z_318 > 0) && (z_338 > 0) && 
	(z_347 > 0) && (z_375 > 0) && (z_39 > 0) && (z_4 > 0) && (z_40 > 0) && (z_417 > 
	0) && (z_65 > 0) && (z_86 > 0) && (z_9 > 0))
																												DATA{
																													:pid_2:uncoveredExit = 0;
																													:pid_41:localTime = (z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_465 + z_65 + z_9);
																													:pid_41:z = z_465;
																													:pid_41:localTime = (z_145 + z_169 + z_265 + z_293 + z_417 + z_465 + z_65 + z_9);
																													:pid_41:seq_buff[0] = 0;
																													:pid_41:seq_buff[1] = 0;
																													:pid_41:localPC = (((z_169 + z_265 + z_293 + z_417) == t_116) && ((z_145 + z_169 + z_265 + z_293 + z_417 + z_465) < t_40) && (t_143 < 4) && (t_40 < 4) && (t_8 < 4) && (t_116 < 4) && (t_253 < 4) && (z_169 < t_116) && (z_293 < t_253) && (z_65 < t_8) && (0 <= (t_143 + -2)) && (0 <= (t_40 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_116 + -2)) && (0 <= (t_253 + -2)) && ((z_0 + z_100 + z_136 + z_224 + z_260 + z_4 + z_40) <= (z_1 + z_145 + z_169 + z_265 + z_293 + z_65 + z_9)) && ((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_1 + z_145 + z_169 + z_65 + z_9)) && ((z_0 + z_4 + z_40) <= (z_1 + z_65 + z_9)) && ((z_3 + z_347 + z_375 + z_39) <= (z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_465 + z_65 + z_9)) && (z_1 > 0) && (z_145 > 0) && (z_169 > 0) && (z_265 > 0) && (z_293 > 0) && (z_417 > 0) && (z_65 > 0) && (z_9 > 0));
																													:pid_41:timeEmit = (z_3 + z_347 + z_375 + z_39);
																													:pid_42:i = 2;
																													:pid_42:t = t_143;
																													:pid_42:cl = 0;
																													:pid_48:cl = (z_169 + z_265 + z_293 + z_417 + z_465);
																													:pid_53:cl = (z_293 + z_417 + z_465);
																												}
																												BUFFER{
																													:pid_41:bufferNode:<FIFO>#0{ }
																												}
																												EC:<Id:1136;Ev:129;H:28;W:1011>{ SC: ( pid_19:o#17 , ( pid_29:cp2 , pid_34:dp2 , pid_39:dp2 ) , ( pid_45:cp1 , pid_51:dp2 , pid_55:dp1 ) , ( pid_63:cp2 , pid_68:dp2 , pid_72:dp1 ) , ( pid_79:cp1 , pid_83:dp0 , pid_88:dp0 ) )
																					
									EXE: { |;| (:pid_58 , run) (:pid_65 , run) 
	(:pid_67 , run) (:pid_67 , dp1_reach_k) (:pid_2 , run) }
																					
									TRACE: (:pid_58 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_498 })
																													/*FLAGS{ COVERAGE-ELEMENT }*/
																													INFO{
																														<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#19->Node.DataProcess1->dp1.dp1_reach_k" as trace="tpid#19->Node.DataProcess1->dp1.dp1_reach_k">
																														<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#20->run::pid_19:Trickle.Observer.o#17->prot::Trickle.Observer.o#17" as trace="tpid#20->run::pid_19:Trickle.Observer.o#17->prot::Trickle.Observer.o#17">
																													}
																													PC: (((z_169 + z_265 + z_293 + z_417) == t_116) && ((z_186 + z_198 + z_302 + z_318 + 
	z_338) == t_58) && ((z_198 + z_302 + z_318 + z_338 + z_454 + z_498) == t_171) && 
	((z_375 + z_379) == 4) && (z_136 == t_54) && (z_260 == t_215) && (z_375 == t_104)
	 && (z_40 == t_4) && ((z_145 + z_169 + z_265 + z_293 + z_417 + z_465) < t_40) && 
	((z_198 + z_302 + z_318 + z_338 + z_454) < t_171) && (t_104 < 4) && (t_109 < 8) 
	&& (t_143 < 4) && (t_15 < 4) && (t_27 < 4) && (t_4 < 4) && (t_40 < 4) && (t_58 < 
	4) && (t_8 < 4) && (t_116 < 4) && (t_171 < 4) && (t_215 < 4) && (t_253 < 4) && 
	(t_279 < 4) && (t_54 < 4) && (z_169 < t_116) && (z_198 < t_171) && (z_293 < 
	t_253) && (z_318 < t_279) && (z_347 < t_27) && (z_65 < t_8) && (z_86 < t_15) && 
	(0 <= (t_104 + -2)) && (0 <= (t_109 + -4)) && (0 <= (t_143 + -2)) && (0 <= (t_15 
	+ -2)) && (0 <= (t_27 + -2)) && (0 <= (t_4 + -2)) && (0 <= (t_40 + -2)) && (0 <= 
	(t_58 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_116 + -2)) && (0 <= (t_171 + -2)) 
	&& (0 <= (t_215 + -2)) && (0 <= (t_253 + -2)) && (0 <= (t_279 + -2)) && (0 <= 
	(t_54 + -2)) && ((z_0 + z_100 + z_136 + z_224 + z_260 + z_4 + z_40) <= (z_1 + 
	z_145 + z_169 + z_265 + z_293 + z_65 + z_9)) && ((z_0 + z_100 + z_136 + z_224 + 
	z_260 + z_4 + z_40) <= (z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_86)) && 
	((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_1 + z_145 + z_169 + z_65 + z_9)) && 
	((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_186 + z_198 + z_2 + z_22 + z_86)) && 
	((z_0 + z_4 + z_40) <= (z_1 + z_65 + z_9)) && ((z_0 + z_4 + z_40) <= (z_2 + z_22 
	+ z_86)) && ((z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_65 + z_9) <= 
	(z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_454 + z_86)) && ((z_186 
	+ z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_86) <= (z_3 + z_347 + z_39)) && 
	((z_3 + z_347 + z_375 + z_39) <= (z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + 
	z_465 + z_65 + z_9)) && ((z_375 + z_379) > t_104) && (z_0 > 0) && (z_1 > 0) && 
	(z_100 > 0) && (z_136 > 0) && (z_145 > 0) && (z_169 > 0) && (z_186 > 0) && 
	(z_198 > 0) && (z_2 > 0) && (z_22 > 0) && (z_224 > 0) && (z_265 > 0) && (z_293 > 
	0) && (z_3 > 0) && (z_302 > 0) && (z_318 > 0) && (z_338 > 0) && (z_347 > 0) && 
	(z_375 > 0) && (z_39 > 0) && (z_4 > 0) && (z_40 > 0) && (z_417 > 0) && (z_454 > 
	0) && (z_65 > 0) && (z_86 > 0) && (z_9 > 0))
																													DATA{
																														:pid_2:uncoveredExit = 1;
																														:pid_58:localTime = (z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_454 + z_498 + z_86);
																														:pid_58:z = z_498;
																														:pid_58:localTime = (z_186 + z_198 + z_22 + z_302 + z_318 + z_338 + z_454 + z_498 + z_86);
																														:pid_58:localPC = (((z_186 + z_198 + z_302 + z_318 + z_338) == t_58) && ((z_198 + z_302 + z_318 + z_338 + z_454 + z_498) == t_171) && ((z_198 + z_302 + z_318 + z_338 + z_454) < t_171) && (t_15 < 4) && (t_58 < 4) && (t_171 < 4) && (t_279 < 4) && (z_198 < t_171) && (z_318 < t_279) && (z_86 < t_15) && (0 <= (t_15 + -2)) && (0 <= (t_58 + -2)) && (0 <= (t_171 + -2)) && (0 <= (t_279 + -2)) && ((z_0 + z_100 + z_136 + z_224 + z_260 + z_4 + z_40) <= (z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_86)) && ((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_186 + z_198 + z_2 + z_22 + z_86)) && ((z_0 + z_4 + z_40) <= (z_2 + z_22 + z_86)) && ((z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_65 + z_9) <= (z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_454 + z_86)) && (z_186 > 0) && (z_198 > 0) && (z_2 > 0) && (z_22 > 0) && (z_302 > 0) && (z_318 > 0) && (z_338 > 0) && (z_454 > 0) && (z_86 > 0));
																														:pid_59:cl = (z_186 + z_198 + z_302 + z_318 + z_338 + z_454 + z_498);
																														:pid_65:cl = (z_198 + z_302 + z_318 + z_338 + z_454 + z_498);
																														:pid_70:cl = (z_318 + z_338 + z_454 + z_498);
																													}
																													EC:<Id:1174;Ev:130;H:29;W:1011>{ SC: ( pid_19:o#17 , ( pid_29:cp2 , pid_34:dp2 , pid_39:dp2 ) , ( pid_45:cp1 , pid_51:dp2 , pid_55:dp1 ) , ( pid_63:cp2 , pid_68:dp2 , pid_72:dp1 ) , ( pid_80:cp2 , pid_83:dp0 , pid_88:dp0 ) )
																					
										EXE: { |;| (:pid_75 , run) (:pid_76 , run) 
	(:pid_79 , run) (:pid_79 , cp_sendCM) (:pid_2 , run) }
																					
										TRACE: { |;| (:pid_75 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_515 }) (:pid_79 , ${ output 
	inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + param::Trickle.Node.z_3 
	param::Trickle.Node.z_347 param::Trickle.Node.z_375 param::Trickle.Node.z_379 
	param::Trickle.Node.z_39 param::Trickle.Node.z_515 } } @ (z_3 + z_347 + z_375 + 
	z_379 + z_39 + z_515)) }
																														PC: (((z_169 + z_265 + z_293 + z_417) == t_116) && ((z_186 + z_198 + z_302 + z_318 + 
	z_338) == t_58) && ((z_198 + z_302 + z_318 + z_338 + z_454 + z_498) == t_171) && 
	((z_375 + z_379) == 4) && (z_136 == t_54) && (z_260 == t_215) && (z_375 == t_104)
	 && (z_40 == t_4) && (z_515 == t_109) && ((z_145 + z_169 + z_265 + z_293 + z_417 
	+ z_465) < t_40) && ((z_198 + z_302 + z_318 + z_338 + z_454) < t_171) && (t_104 
	< 4) && (t_109 < 8) && (t_143 < 4) && (t_15 < 4) && (t_27 < 4) && (t_4 < 4) && 
	(t_40 < 4) && (t_58 < 4) && (t_8 < 4) && (t_116 < 4) && (t_171 < 4) && (t_215 < 
	4) && (t_253 < 4) && (t_279 < 4) && (t_54 < 4) && (z_169 < t_116) && (z_198 < 
	t_171) && (z_293 < t_253) && (z_318 < t_279) && (z_347 < t_27) && (z_65 < t_8) 
	&& (z_86 < t_15) && (0 <= (t_104 + -2)) && (0 <= (t_109 + -4)) && (0 <= (t_143 + 
	-2)) && (0 <= (t_15 + -2)) && (0 <= (t_27 + -2)) && (0 <= (t_4 + -2)) && (0 <= 
	(t_40 + -2)) && (0 <= (t_58 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_116 + -2)) 
	&& (0 <= (t_171 + -2)) && (0 <= (t_215 + -2)) && (0 <= (t_253 + -2)) && (0 <= 
	(t_279 + -2)) && (0 <= (t_54 + -2)) && ((z_0 + z_100 + z_136 + z_224 + z_260 + 
	z_4 + z_40) <= (z_1 + z_145 + z_169 + z_265 + z_293 + z_65 + z_9)) && ((z_0 + 
	z_100 + z_136 + z_224 + z_260 + z_4 + z_40) <= (z_186 + z_198 + z_2 + z_22 + 
	z_302 + z_318 + z_86)) && ((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_1 + z_145 + 
	z_169 + z_65 + z_9)) && ((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_186 + z_198 + 
	z_2 + z_22 + z_86)) && ((z_0 + z_4 + z_40) <= (z_1 + z_65 + z_9)) && ((z_0 + z_4 
	+ z_40) <= (z_2 + z_22 + z_86)) && ((z_1 + z_145 + z_169 + z_265 + z_293 + z_417 
	+ z_65 + z_9) <= (z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_454 + 
	z_86)) && ((z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_86) <= (z_3 + 
	z_347 + z_39)) && ((z_3 + z_347 + z_375 + z_39) <= (z_1 + z_145 + z_169 + z_265 
	+ z_293 + z_417 + z_465 + z_65 + z_9)) && ((z_375 + z_379) > t_104) && (z_0 > 0) 
	&& (z_1 > 0) && (z_100 > 0) && (z_136 > 0) && (z_145 > 0) && (z_169 > 0) && 
	(z_186 > 0) && (z_198 > 0) && (z_2 > 0) && (z_22 > 0) && (z_224 > 0) && (z_265 > 
	0) && (z_293 > 0) && (z_3 > 0) && (z_302 > 0) && (z_318 > 0) && (z_338 > 0) && 
	(z_347 > 0) && (z_375 > 0) && (z_379 > 0) && (z_39 > 0) && (z_4 > 0) && (z_40 > 
	0) && (z_417 > 0) && (z_454 > 0) && (z_65 > 0) && (z_86 > 0) && (z_9 > 0))
																														DATA{
																															:pid_2:uncoveredExit = 2;
																															:pid_75:localTime = (z_3 + z_347 + z_375 + z_379 + z_39 + z_515);
																															:pid_75:z = z_515;
																															:pid_75:localTime = (z_347 + z_375 + z_379 + z_39 + z_515);
																															:pid_75:localPC = (((z_375 + z_379) == 4) && (z_375 == t_104) && (z_515 == t_109) && (t_104 < 4) && (t_109 < 8) && (t_27 < 4) && (z_347 < t_27) && (0 <= (t_104 + -2)) && (0 <= (t_109 + -4)) && (0 <= (t_27 + -2)) && ((z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_86) <= (z_3 + z_347 + z_39)) && ((z_375 + z_379) > t_104) && (z_3 > 0) && (z_347 > 0) && (z_375 > 0) && (z_379 > 0) && (z_39 > 0));
																															:pid_76:cl = z_515;
																															:pid_82:cl = (z_347 + z_375 + z_379 + z_39 + z_515);
																															:pid_87:cl = (z_347 + z_375 + z_379 + z_39 + z_515);
																														}
																														BUFFER{
																															:pid_41:bufferNode:<FIFO>#0{
																																:pid_75:ControlMsg([ 0 , 0 ] , (z_3 + z_347 + z_375 + z_379 + z_39 + z_515));
																															}
																														}
																														EC:<Id:1193;Ev:140;H:30;W:1063>{ SC: ( pid_19:o#17 , ( pid_29:cp2 , pid_34:dp2 , pid_39:dp2 ) , ( pid_45:cp1 , pid_51:dp2 , pid_56:dp2 ) , ( pid_63:cp2 , pid_68:dp2 , pid_72:dp1 ) , ( pid_80:cp2 , pid_83:dp0 , pid_88:dp0 ) )
																					
											EXE: { |;| (:pid_41 , run) (:pid_53 , 
	run) (:pid_55 , run) (:pid_55 , dp_sendDM) (:pid_2 , run) }
																					
											TRACE: { |;| (:pid_41 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_517 }) (:pid_55 , ${ output 
	inst::Trickle.Node.DataMsg2 [ 2 , 2 , 1 ] ${ + param::Trickle.Node.z_1 
	param::Trickle.Node.z_145 param::Trickle.Node.z_169 param::Trickle.Node.z_265 
	param::Trickle.Node.z_293 param::Trickle.Node.z_417 param::Trickle.Node.z_465 
	param::Trickle.Node.z_517 param::Trickle.Node.z_65 param::Trickle.Node.z_9 } } @ 
	(z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_465 + z_517 + z_65 + z_9)) }
																															PC: (((z_169 + z_265 + z_293 + z_417) == t_116) && ((z_186 + z_198 + z_302 + z_318 + 
	z_338) == t_58) && ((z_198 + z_302 + z_318 + z_338 + z_454 + z_498) == t_171) && 
	((z_293 + z_417 + z_465 + z_517) == t_253) && ((z_375 + z_379) == 4) && (z_136 
	== t_54) && (z_260 == t_215) && (z_375 == t_104) && (z_40 == t_4) && (z_515 == 
	t_109) && ((z_145 + z_169 + z_265 + z_293 + z_417 + z_465) < t_40) && ((z_198 + 
	z_302 + z_318 + z_338 + z_454) < t_171) && (t_104 < 4) && (t_109 < 8) && (t_143 
	< 4) && (t_15 < 4) && (t_27 < 4) && (t_4 < 4) && (t_40 < 4) && (t_58 < 4) && 
	(t_8 < 4) && (t_116 < 4) && (t_171 < 4) && (t_215 < 4) && (t_253 < 4) && (t_279 
	< 4) && (t_54 < 4) && (z_169 < t_116) && (z_198 < t_171) && (z_293 < t_253) && 
	(z_318 < t_279) && (z_347 < t_27) && (z_65 < t_8) && (z_86 < t_15) && (0 <= 
	(t_104 + -2)) && (0 <= (t_109 + -4)) && (0 <= (t_143 + -2)) && (0 <= (t_15 + -2))
	 && (0 <= (t_27 + -2)) && (0 <= (t_4 + -2)) && (0 <= (t_40 + -2)) && (0 <= (t_58 
	+ -2)) && (0 <= (t_8 + -2)) && (0 <= (t_116 + -2)) && (0 <= (t_171 + -2)) && (0 
	<= (t_215 + -2)) && (0 <= (t_253 + -2)) && (0 <= (t_279 + -2)) && (0 <= (t_54 + 
	-2)) && ((z_0 + z_100 + z_136 + z_224 + z_260 + z_4 + z_40) <= (z_1 + z_145 + 
	z_169 + z_265 + z_293 + z_65 + z_9)) && ((z_0 + z_100 + z_136 + z_224 + z_260 + 
	z_4 + z_40) <= (z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_86)) && ((z_0 + 
	z_100 + z_136 + z_4 + z_40) <= (z_1 + z_145 + z_169 + z_65 + z_9)) && ((z_0 + 
	z_100 + z_136 + z_4 + z_40) <= (z_186 + z_198 + z_2 + z_22 + z_86)) && ((z_0 + 
	z_4 + z_40) <= (z_1 + z_65 + z_9)) && ((z_0 + z_4 + z_40) <= (z_2 + z_22 + z_86))
	 && ((z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_65 + z_9) <= (z_186 + 
	z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_454 + z_86)) && ((z_186 + z_198 + 
	z_2 + z_22 + z_302 + z_318 + z_338 + z_86) <= (z_3 + z_347 + z_39)) && ((z_3 + 
	z_347 + z_375 + z_39) <= (z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_465 + 
	z_65 + z_9)) && ((z_375 + z_379) > t_104) && (z_0 > 0) && (z_1 > 0) && (z_100 > 
	0) && (z_136 > 0) && (z_145 > 0) && (z_169 > 0) && (z_186 > 0) && (z_198 > 0) && 
	(z_2 > 0) && (z_22 > 0) && (z_224 > 0) && (z_265 > 0) && (z_293 > 0) && (z_3 > 0)
	 && (z_302 > 0) && (z_318 > 0) && (z_338 > 0) && (z_347 > 0) && (z_375 > 0) && 
	(z_379 > 0) && (z_39 > 0) && (z_4 > 0) && (z_40 > 0) && (z_417 > 0) && (z_454 > 
	0) && (z_465 > 0) && (z_65 > 0) && (z_86 > 0) && (z_9 > 0))
																															DATA{
																																:pid_2:uncoveredExit = 3;
																																:pid_41:localTime = (z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_465 + z_517 + z_65 + z_9);
																																:pid_41:z = z_517;
																																:pid_41:localTime = (z_145 + z_169 + z_265 + z_293 + z_417 + z_465 + z_517 + z_65 + z_9);
																																:pid_41:localPC = (((z_169 + z_265 + z_293 + z_417) == t_116) && ((z_293 + z_417 + z_465 + z_517) == t_253) && ((z_145 + z_169 + z_265 + z_293 + z_417 + z_465) < t_40) && (t_143 < 4) && (t_40 < 4) && (t_8 < 4) && (t_116 < 4) && (t_253 < 4) && (z_169 < t_116) && (z_293 < t_253) && (z_65 < t_8) && (0 <= (t_143 + -2)) && (0 <= (t_40 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_116 + -2)) && (0 <= (t_253 + -2)) && ((z_0 + z_100 + z_136 + z_224 + z_260 + z_4 + z_40) <= (z_1 + z_145 + z_169 + z_265 + z_293 + z_65 + z_9)) && ((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_1 + z_145 + z_169 + z_65 + z_9)) && ((z_0 + z_4 + z_40) <= (z_1 + z_65 + z_9)) && ((z_3 + z_347 + z_375 + z_39) <= (z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_465 + z_65 + z_9)) && (z_1 > 0) && (z_145 > 0) && (z_169 > 0) && (z_265 > 0) && (z_293 > 0) && (z_417 > 0) && (z_465 > 0) && (z_65 > 0) && (z_9 > 0));
																																:pid_42:cl = z_517;
																																:pid_48:cl = (z_169 + z_265 + z_293 + z_417 + z_465 + z_517);
																																:pid_53:cl = (z_293 + z_417 + z_465 + z_517);
																															}
																															BUFFER{
																																:pid_58:bufferNode:<FIFO>#0{
																																	:pid_41:DataMsg2([ 2 , 2 , 1 ] , (z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_465 + z_517 + z_65 + z_9));
																																}
																															}
																															EC:<Id:1286;Ev:143;H:31;W:1146>{ SC: ( pid_19:o#17 , ( pid_29:cp2 , pid_34:dp2 , pid_39:dp2 ) , ( pid_45:cp1 , pid_51:dp2 , pid_56:dp2 ) , ( pid_63:cp2 , pid_68:dp2 , pid_72:dp1 ) , ( pid_80:cp2 , pid_83:dp0 , pid_89:dp1 ) )
																					
												EXE: { |;| (:pid_75 , run) (:pid_87 
	, run) (:pid_88 , run) (:pid_88 , dp_init) (:pid_2 , run) }
																					
												TRACE: { |;| (:pid_75 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_559 }) (:pid_88 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_483 }) }
																																PC: (((z_169 + z_265 + z_293 + z_417) == t_116) && ((z_186 + z_198 + z_302 + z_318 + 
	z_338) == t_58) && ((z_198 + z_302 + z_318 + z_338 + z_454 + z_498) == t_171) && 
	((z_293 + z_417 + z_465 + z_517) == t_253) && ((z_375 + z_379) == 4) && (z_136 
	== t_54) && (z_260 == t_215) && (z_375 == t_104) && (z_40 == t_4) && (z_515 == 
	t_109) && ((z_145 + z_169 + z_265 + z_293 + z_417 + z_465) < t_40) && ((z_198 + 
	z_302 + z_318 + z_338 + z_454) < t_171) && (t_104 < 4) && (t_109 < 8) && (t_143 
	< 4) && (t_15 < 4) && (t_27 < 4) && (t_4 < 4) && (t_40 < 4) && (t_58 < 4) && 
	(t_8 < 4) && (t_116 < 4) && (t_171 < 4) && (t_215 < 4) && (t_253 < 4) && (t_279 
	< 4) && (t_483 < 4) && (t_54 < 4) && (z_169 < t_116) && (z_198 < t_171) && 
	(z_293 < t_253) && (z_318 < t_279) && (z_347 < t_27) && (z_65 < t_8) && (z_86 < 
	t_15) && (0 <= (t_104 + -2)) && (0 <= (t_109 + -4)) && (0 <= (t_143 + -2)) && (0 
	<= (t_15 + -2)) && (0 <= (t_27 + -2)) && (0 <= (t_4 + -2)) && (0 <= (t_40 + -2)) 
	&& (0 <= (t_58 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_116 + -2)) && (0 <= 
	(t_171 + -2)) && (0 <= (t_215 + -2)) && (0 <= (t_253 + -2)) && (0 <= (t_279 + -2)
	) && (0 <= (t_483 + -2)) && (0 <= (t_54 + -2)) && ((z_0 + z_100 + z_136 + z_224 
	+ z_260 + z_4 + z_40) <= (z_1 + z_145 + z_169 + z_265 + z_293 + z_65 + z_9)) && 
	((z_0 + z_100 + z_136 + z_224 + z_260 + z_4 + z_40) <= (z_186 + z_198 + z_2 + 
	z_22 + z_302 + z_318 + z_86)) && ((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_1 + 
	z_145 + z_169 + z_65 + z_9)) && ((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_186 + 
	z_198 + z_2 + z_22 + z_86)) && ((z_0 + z_4 + z_40) <= (z_1 + z_65 + z_9)) && 
	((z_0 + z_4 + z_40) <= (z_2 + z_22 + z_86)) && ((z_1 + z_145 + z_169 + z_265 + 
	z_293 + z_417 + z_65 + z_9) <= (z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + 
	z_338 + z_454 + z_86)) && ((z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + 
	z_86) <= (z_3 + z_347 + z_39)) && ((z_3 + z_347 + z_375 + z_39) <= (z_1 + z_145 
	+ z_169 + z_265 + z_293 + z_417 + z_465 + z_65 + z_9)) && ((z_375 + z_379) > 
	t_104) && (z_0 > 0) && (z_1 > 0) && (z_100 > 0) && (z_136 > 0) && (z_145 > 0) && 
	(z_169 > 0) && (z_186 > 0) && (z_198 > 0) && (z_2 > 0) && (z_22 > 0) && (z_224 > 
	0) && (z_265 > 0) && (z_293 > 0) && (z_3 > 0) && (z_302 > 0) && (z_318 > 0) && 
	(z_338 > 0) && (z_347 > 0) && (z_375 > 0) && (z_379 > 0) && (z_39 > 0) && (z_4 > 
	0) && (z_40 > 0) && (z_417 > 0) && (z_454 > 0) && (z_465 > 0) && (z_515 > 0) && 
	(z_65 > 0) && (z_86 > 0) && (z_9 > 0))
																																DATA{
																																	:pid_2:uncoveredExit = 4;
																																	:pid_75:localTime = (z_3 + z_347 + z_375 + z_379 + z_39 + z_515 + z_559);
																																	:pid_75:z = z_559;
																																	:pid_75:localTime = (z_347 + z_375 + z_379 + z_39 + z_515 + z_559);
																																	:pid_75:localPC = (((z_375 + z_379) == 4) && (z_375 == t_104) && (z_515 == t_109) && (t_104 < 4) && (t_109 < 8) && (t_27 < 4) && (t_483 < 4) && (z_347 < t_27) && (0 <= (t_104 + -2)) && (0 <= (t_109 + -4)) && (0 <= (t_27 + -2)) && (0 <= (t_483 + -2)) && ((z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_86) <= (z_3 + z_347 + z_39)) && ((z_375 + z_379) > t_104) && (z_3 > 0) && (z_347 > 0) && (z_375 > 0) && (z_379 > 0) && (z_39 > 0) && (z_515 > 0));
																																	:pid_76:cl = (z_515 + z_559);
																																	:pid_82:cl = (z_347 + z_375 + z_379 + z_39 + z_515 + z_559);
																																	:pid_87:e = 0;
																																	:pid_87:tau = 4;
																																	:pid_87:tau_l = 4;
																																	:pid_87:tau_h = 8;
																																	:pid_87:k = 2;
																																	:pid_87:c = 0;
																																	:pid_87:t = t_483;
																																	:pid_87:cl = 0;
																																}
																																EC:<Id:1327;Ev:153;H:32;W:1184>{ SC: ( pid_19:o#17 , ( pid_29:cp2 , pid_34:dp2 , pid_39:dp2 ) , ( pid_46:cp2 , pid_51:dp2 , pid_56:dp2 ) , ( pid_63:cp2 , pid_68:dp2 , pid_72:dp1 ) , ( pid_80:cp2 , pid_83:dp0 , pid_89:dp1 ) )
																					
													EXE: { |;| (:pid_41 , run) 
	(:pid_42 , run) (:pid_45 , run) (:pid_45 , cp_sendCM) (:pid_2 , run) }
																					
													TRACE: { |;| (:pid_41 , ${ 
	newfresh inst::Trickle.Node.z param::Trickle.Node.z_569 }) (:pid_45 , ${ output 
	inst::Trickle.Node.ControlMsg [ 1 , 1 ] ${ + param::Trickle.Node.z_1 
	param::Trickle.Node.z_145 param::Trickle.Node.z_169 param::Trickle.Node.z_265 
	param::Trickle.Node.z_293 param::Trickle.Node.z_417 param::Trickle.Node.z_465 
	param::Trickle.Node.z_517 param::Trickle.Node.z_569 param::Trickle.Node.z_65 
	param::Trickle.Node.z_9 } } @ (z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + 
	z_465 + z_517 + z_569 + z_65 + z_9)) }
																																	PC: (((z_169 + z_265 + z_293 + z_417) == t_116) && ((z_186 + z_198 + z_302 + z_318 + 
	z_338) == t_58) && ((z_198 + z_302 + z_318 + z_338 + z_454 + z_498) == t_171) && 
	((z_293 + z_417 + z_465 + z_517) == t_253) && ((z_375 + z_379) == 4) && ((z_517 
	+ z_569) == t_143) && (z_136 == t_54) && (z_260 == t_215) && (z_375 == t_104) && 
	(z_40 == t_4) && (z_515 == t_109) && ((z_145 + z_169 + z_265 + z_293 + z_417 + 
	z_465) < t_40) && ((z_198 + z_302 + z_318 + z_338 + z_454) < t_171) && (t_104 < 
	4) && (t_109 < 8) && (t_143 < 4) && (t_15 < 4) && (t_27 < 4) && (t_4 < 4) && 
	(t_40 < 4) && (t_58 < 4) && (t_8 < 4) && (t_116 < 4) && (t_171 < 4) && (t_215 < 
	4) && (t_253 < 4) && (t_279 < 4) && (t_483 < 4) && (t_54 < 4) && (z_169 < t_116) 
	&& (z_198 < t_171) && (z_293 < t_253) && (z_318 < t_279) && (z_347 < t_27) && 
	(z_65 < t_8) && (z_86 < t_15) && (0 <= (t_104 + -2)) && (0 <= (t_109 + -4)) && 
	(0 <= (t_143 + -2)) && (0 <= (t_15 + -2)) && (0 <= (t_27 + -2)) && (0 <= (t_4 + 
	-2)) && (0 <= (t_40 + -2)) && (0 <= (t_58 + -2)) && (0 <= (t_8 + -2)) && (0 <= 
	(t_116 + -2)) && (0 <= (t_171 + -2)) && (0 <= (t_215 + -2)) && (0 <= (t_253 + -2)
	) && (0 <= (t_279 + -2)) && (0 <= (t_483 + -2)) && (0 <= (t_54 + -2)) && ((z_0 + 
	z_100 + z_136 + z_224 + z_260 + z_4 + z_40) <= (z_1 + z_145 + z_169 + z_265 + 
	z_293 + z_65 + z_9)) && ((z_0 + z_100 + z_136 + z_224 + z_260 + z_4 + z_40) <= 
	(z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_86)) && ((z_0 + z_100 + z_136 + 
	z_4 + z_40) <= (z_1 + z_145 + z_169 + z_65 + z_9)) && ((z_0 + z_100 + z_136 + 
	z_4 + z_40) <= (z_186 + z_198 + z_2 + z_22 + z_86)) && ((z_0 + z_4 + z_40) <= 
	(z_1 + z_65 + z_9)) && ((z_0 + z_4 + z_40) <= (z_2 + z_22 + z_86)) && ((z_1 + 
	z_145 + z_169 + z_265 + z_293 + z_417 + z_65 + z_9) <= (z_186 + z_198 + z_2 + 
	z_22 + z_302 + z_318 + z_338 + z_454 + z_86)) && ((z_186 + z_198 + z_2 + z_22 + 
	z_302 + z_318 + z_338 + z_86) <= (z_3 + z_347 + z_39)) && ((z_3 + z_347 + z_375 
	+ z_39) <= (z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_465 + z_65 + z_9)) 
	&& ((z_375 + z_379) > t_104) && (z_0 > 0) && (z_1 > 0) && (z_100 > 0) && (z_136 
	> 0) && (z_145 > 0) && (z_169 > 0) && (z_186 > 0) && (z_198 > 0) && (z_2 > 0) && 
	(z_22 > 0) && (z_224 > 0) && (z_265 > 0) && (z_293 > 0) && (z_3 > 0) && (z_302 > 
	0) && (z_318 > 0) && (z_338 > 0) && (z_347 > 0) && (z_375 > 0) && (z_379 > 0) && 
	(z_39 > 0) && (z_4 > 0) && (z_40 > 0) && (z_417 > 0) && (z_454 > 0) && (z_465 > 
	0) && (z_515 > 0) && (z_517 > 0) && (z_65 > 0) && (z_86 > 0) && (z_9 > 0))
																																	DATA{
																																		:pid_2:uncoveredExit = 5;
																																		:pid_41:localTime = (z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_465 + z_517 + z_569 + z_65 + z_9);
																																		:pid_41:z = z_569;
																																		:pid_41:localTime = (z_145 + z_169 + z_265 + z_293 + z_417 + z_465 + z_517 + z_569 + z_65 + z_9);
																																		:pid_41:localPC = (((z_169 + z_265 + z_293 + z_417) == t_116) && ((z_293 + z_417 + z_465 + z_517) == t_253) && ((z_517 + z_569) == t_143) && ((z_145 + z_169 + z_265 + z_293 + z_417 + z_465) < t_40) && (t_143 < 4) && (t_40 < 4) && (t_8 < 4) && (t_116 < 4) && (t_253 < 4) && (z_169 < t_116) && (z_293 < t_253) && (z_65 < t_8) && (0 <= (t_143 + -2)) && (0 <= (t_40 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_116 + -2)) && (0 <= (t_253 + -2)) && ((z_0 + z_100 + z_136 + z_224 + z_260 + z_4 + z_40) <= (z_1 + z_145 + z_169 + z_265 + z_293 + z_65 + z_9)) && ((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_1 + z_145 + z_169 + z_65 + z_9)) && ((z_0 + z_4 + z_40) <= (z_1 + z_65 + z_9)) && ((z_3 + z_347 + z_375 + z_39) <= (z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_465 + z_65 + z_9)) && (z_1 > 0) && (z_145 > 0) && (z_169 > 0) && (z_265 > 0) && (z_293 > 0) && (z_417 > 0) && (z_465 > 0) && (z_517 > 0) && (z_65 > 0) && (z_9 > 0));
																																		:pid_42:cl = (z_517 + z_569);
																																		:pid_48:cl = (z_169 + z_265 + z_293 + z_417 + z_465 + z_517 + z_569);
																																		:pid_53:cl = (z_293 + z_417 + z_465 + z_517 + z_569);
																																	}
																																	BUFFER{
																																		:pid_58:bufferNode:<FIFO>#0{
																																			:pid_41:DataMsg2([ 2 , 2 , 1 ] , (z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_465 + z_517 + z_65 + z_9));
																																			:pid_41:ControlMsg([ 1 , 1 ] , (z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_465 + z_517 + z_569 + z_65 + z_9));
																																		}
																																	}
																																	EC:<Id:1437;Ev:163;H:33;W:1284>{ SC: ( pid_19:o#17 , ( pid_29:cp2 , pid_34:dp2 , pid_39:dp2 ) , ( pid_46:cp2 , pid_51:dp2 , pid_55:dp1 ) , ( pid_63:cp2 , pid_68:dp2 , pid_72:dp1 ) , ( pid_80:cp2 , pid_83:dp0 , pid_89:dp1 ) )
																					
														EXE: { |;| (:pid_41 , run) 
	(:pid_53 , run) (:pid_56 , run) (:pid_56 , dp_resetTau) (:pid_2 , run) }
																					
														TRACE: { |;| (:pid_41 , ${ 
	newfresh inst::Trickle.Node.z param::Trickle.Node.z_609 }) (:pid_56 , ${ 
	newfresh inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_548 }
	) }
																																		PC: (((z_169 + z_265 + z_293 + z_417) == t_116) && ((z_186 + z_198 + z_302 + z_318 + 
	z_338) == t_58) && ((z_198 + z_302 + z_318 + z_338 + z_454 + z_498) == t_171) && 
	((z_293 + z_417 + z_465 + z_517) == t_253) && ((z_293 + z_417 + z_465 + z_517 + 
	z_569 + z_609) == 4) && ((z_375 + z_379) == 4) && ((z_517 + z_569) == t_143) && 
	(z_136 == t_54) && (z_260 == t_215) && (z_375 == t_104) && (z_40 == t_4) && 
	(z_515 == t_109) && ((z_145 + z_169 + z_265 + z_293 + z_417 + z_465) < t_40) && 
	((z_198 + z_302 + z_318 + z_338 + z_454) < t_171) && (t_104 < 4) && (t_109 < 8) 
	&& (t_143 < 4) && (t_15 < 4) && (t_27 < 4) && (t_4 < 4) && (t_40 < 4) && (t_58 < 
	4) && (t_8 < 4) && (t_116 < 4) && (t_171 < 4) && (t_215 < 4) && (t_253 < 4) && 
	(t_279 < 4) && (t_483 < 4) && (t_54 < 4) && (t_548 < 8) && (z_169 < t_116) && 
	(z_198 < t_171) && (z_293 < t_253) && (z_318 < t_279) && (z_347 < t_27) && (z_65 
	< t_8) && (z_86 < t_15) && (0 <= (t_104 + -2)) && (0 <= (t_109 + -4)) && (0 <= 
	(t_143 + -2)) && (0 <= (t_15 + -2)) && (0 <= (t_27 + -2)) && (0 <= (t_4 + -2)) 
	&& (0 <= (t_40 + -2)) && (0 <= (t_58 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_116 
	+ -2)) && (0 <= (t_171 + -2)) && (0 <= (t_215 + -2)) && (0 <= (t_253 + -2)) && 
	(0 <= (t_279 + -2)) && (0 <= (t_483 + -2)) && (0 <= (t_54 + -2)) && (0 <= (t_548 
	+ -4)) && ((z_0 + z_100 + z_136 + z_224 + z_260 + z_4 + z_40) <= (z_1 + z_145 + 
	z_169 + z_265 + z_293 + z_65 + z_9)) && ((z_0 + z_100 + z_136 + z_224 + z_260 + 
	z_4 + z_40) <= (z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_86)) && ((z_0 + 
	z_100 + z_136 + z_4 + z_40) <= (z_1 + z_145 + z_169 + z_65 + z_9)) && ((z_0 + 
	z_100 + z_136 + z_4 + z_40) <= (z_186 + z_198 + z_2 + z_22 + z_86)) && ((z_0 + 
	z_4 + z_40) <= (z_1 + z_65 + z_9)) && ((z_0 + z_4 + z_40) <= (z_2 + z_22 + z_86))
	 && ((z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_65 + z_9) <= (z_186 + 
	z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_454 + z_86)) && ((z_186 + z_198 + 
	z_2 + z_22 + z_302 + z_318 + z_338 + z_86) <= (z_3 + z_347 + z_39)) && ((z_3 + 
	z_347 + z_375 + z_39) <= (z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_465 + 
	z_65 + z_9)) && ((z_293 + z_417 + z_465 + z_517 + z_569 + z_609) > t_253) && 
	((z_375 + z_379) > t_104) && (z_0 > 0) && (z_1 > 0) && (z_100 > 0) && (z_136 > 0)
	 && (z_145 > 0) && (z_169 > 0) && (z_186 > 0) && (z_198 > 0) && (z_2 > 0) && 
	(z_22 > 0) && (z_224 > 0) && (z_265 > 0) && (z_293 > 0) && (z_3 > 0) && (z_302 > 
	0) && (z_318 > 0) && (z_338 > 0) && (z_347 > 0) && (z_375 > 0) && (z_379 > 0) && 
	(z_39 > 0) && (z_4 > 0) && (z_40 > 0) && (z_417 > 0) && (z_454 > 0) && (z_465 > 
	0) && (z_515 > 0) && (z_517 > 0) && (z_569 > 0) && (z_65 > 0) && (z_86 > 0) && 
	(z_9 > 0))
																																		DATA{
																																			:pid_2:uncoveredExit = 6;
																																			:pid_41:localTime = (z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_465 + z_517 + z_569 + z_609 + z_65 + z_9);
																																			:pid_41:z = z_609;
																																			:pid_41:localTime = (z_145 + z_169 + z_265 + z_293 + z_417 + z_465 + z_517 + z_569 + z_609 + z_65 + z_9);
																																			:pid_41:localPC = (((z_169 + z_265 + z_293 + z_417) == t_116) && ((z_293 + z_417 + z_465 + z_517) == t_253) && ((z_293 + z_417 + z_465 + z_517 + z_569 + z_609) == 4) && ((z_517 + z_569) == t_143) && ((z_145 + z_169 + z_265 + z_293 + z_417 + z_465) < t_40) && (t_143 < 4) && (t_40 < 4) && (t_8 < 4) && (t_116 < 4) && (t_253 < 4) && (t_548 < 8) && (z_169 < t_116) && (z_293 < t_253) && (z_65 < t_8) && (0 <= (t_143 + -2)) && (0 <= (t_40 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_116 + -2)) && (0 <= (t_253 + -2)) && (0 <= (t_548 + -4)) && ((z_0 + z_100 + z_136 + z_224 + z_260 + z_4 + z_40) <= (z_1 + z_145 + z_169 + z_265 + z_293 + z_65 + z_9)) && ((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_1 + z_145 + z_169 + z_65 + z_9)) && ((z_0 + z_4 + z_40) <= (z_1 + z_65 + z_9)) && ((z_3 + z_347 + z_375 + z_39) <= (z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_465 + z_65 + z_9)) && ((z_293 + z_417 + z_465 + z_517 + z_569 + z_609) > t_253) && (z_1 > 0) && (z_145 > 0) && (z_169 > 0) && (z_265 > 0) && (z_293 > 0) && (z_417 > 0) && (z_465 > 0) && (z_517 > 0) && (z_569 > 0) && (z_65 > 0) && (z_9 > 0));
																																			:pid_42:cl = (z_517 + z_569 + z_609);
																																			:pid_48:cl = (z_169 + z_265 + z_293 + z_417 + z_465 + z_517 + z_569 + z_609);
																																			:pid_53:e = 1;
																																			:pid_53:tau = 8;
																																			:pid_53:c = 0;
																																			:pid_53:t = t_548;
																																			:pid_53:cl = 0;
																																		}
																																		EC:<Id:1537;Ev:165;H:34;W:1374>{ SC: ( pid_19:o#17 , ( pid_29:cp2 , pid_34:dp2 , pid_39:dp2 ) , ( pid_45:cp1 , pid_51:dp2 , pid_55:dp1 ) , ( pid_63:cp2 , pid_68:dp2 , pid_72:dp1 ) , ( pid_80:cp2 , pid_83:dp0 , pid_89:dp1 ) )
																					
															EXE: { |;| (:pid_41 , 
	run) (:pid_42 , run) (:pid_46 , run) (:pid_46 , cp2_receiveCM_inconsistent) 
	(:pid_2 , run) }
																					
															TRACE: { |;| (:pid_41 , 
	${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_649 }) (:pid_46 , ${ 
	input inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + param::Trickle.Node.z_3 
	param::Trickle.Node.z_347 param::Trickle.Node.z_375 param::Trickle.Node.z_379 
	param::Trickle.Node.z_39 param::Trickle.Node.z_515 } } @ (z_1 + z_145 + z_169 + 
	z_265 + z_293 + z_417 + z_465 + z_517 + z_569 + z_609 + z_649 + z_65 + z_9)) 
	(:pid_46 , ${ newfresh inst::Trickle.Node.ControlProcess.t 
	param::Trickle.Node.ControlProcess.t_241 }) }
																																			PC: (((z_169 + z_265 + z_293 + z_417) == t_116) && ((z_186 + z_198 + z_302 + z_318 + 
	z_338) == t_58) && ((z_198 + z_302 + z_318 + z_338 + z_454 + z_498) == t_171) && 
	((z_293 + z_417 + z_465 + z_517) == t_253) && ((z_293 + z_417 + z_465 + z_517 + 
	z_569 + z_609) == 4) && ((z_375 + z_379) == 4) && ((z_517 + z_569) == t_143) && 
	(z_136 == t_54) && (z_260 == t_215) && (z_375 == t_104) && (z_40 == t_4) && 
	(z_515 == t_109) && ((z_145 + z_169 + z_265 + z_293 + z_417 + z_465) < t_40) && 
	((z_198 + z_302 + z_318 + z_338 + z_454) < t_171) && ((z_517 + z_569 + z_609 + 
	z_649) < 4) && (t_104 < 4) && (t_109 < 8) && (t_143 < 4) && (t_15 < 4) && (t_241 
	< 4) && (t_27 < 4) && (t_4 < 4) && (t_40 < 4) && (t_58 < 4) && (t_8 < 4) && 
	(t_116 < 4) && (t_171 < 4) && (t_215 < 4) && (t_253 < 4) && (t_279 < 4) && 
	(t_483 < 4) && (t_54 < 4) && (t_548 < 8) && (z_169 < t_116) && (z_198 < t_171) 
	&& (z_293 < t_253) && (z_318 < t_279) && (z_347 < t_27) && (z_65 < t_8) && (z_86 
	< t_15) && (0 <= (t_104 + -2)) && (0 <= (t_109 + -4)) && (0 <= (t_143 + -2)) && 
	(0 <= (t_15 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_27 + -2)) && (0 <= (t_4 + 
	-2)) && (0 <= (t_40 + -2)) && (0 <= (t_58 + -2)) && (0 <= (t_8 + -2)) && (0 <= 
	(t_116 + -2)) && (0 <= (t_171 + -2)) && (0 <= (t_215 + -2)) && (0 <= (t_253 + -2)
	) && (0 <= (t_279 + -2)) && (0 <= (t_483 + -2)) && (0 <= (t_54 + -2)) && (0 <= 
	(t_548 + -4)) && ((z_0 + z_100 + z_136 + z_224 + z_260 + z_4 + z_40) <= (z_1 + 
	z_145 + z_169 + z_265 + z_293 + z_65 + z_9)) && ((z_0 + z_100 + z_136 + z_224 + 
	z_260 + z_4 + z_40) <= (z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_86)) && 
	((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_1 + z_145 + z_169 + z_65 + z_9)) && 
	((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_186 + z_198 + z_2 + z_22 + z_86)) && 
	((z_0 + z_4 + z_40) <= (z_1 + z_65 + z_9)) && ((z_0 + z_4 + z_40) <= (z_2 + z_22 
	+ z_86)) && ((z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_65 + z_9) <= 
	(z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_454 + z_86)) && ((z_186 
	+ z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_86) <= (z_3 + z_347 + z_39)) && 
	((z_3 + z_347 + z_375 + z_379 + z_39 + z_515) <= (z_1 + z_145 + z_169 + z_265 + 
	z_293 + z_417 + z_465 + z_517 + z_569 + z_609 + z_649 + z_65 + z_9)) && ((z_3 + 
	z_347 + z_375 + z_39) <= (z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_465 + 
	z_65 + z_9)) && ((z_293 + z_417 + z_465 + z_517 + z_569 + z_609) > t_253) && 
	((z_375 + z_379) > t_104) && (z_0 > 0) && (z_1 > 0) && (z_100 > 0) && (z_136 > 0)
	 && (z_145 > 0) && (z_169 > 0) && (z_186 > 0) && (z_198 > 0) && (z_2 > 0) && 
	(z_22 > 0) && (z_224 > 0) && (z_265 > 0) && (z_293 > 0) && (z_3 > 0) && (z_302 > 
	0) && (z_318 > 0) && (z_338 > 0) && (z_347 > 0) && (z_375 > 0) && (z_379 > 0) && 
	(z_39 > 0) && (z_4 > 0) && (z_40 > 0) && (z_417 > 0) && (z_454 > 0) && (z_465 > 
	0) && (z_515 > 0) && (z_517 > 0) && (z_569 > 0) && (z_609 > 0) && (z_65 > 0) && 
	(z_86 > 0) && (z_9 > 0))
																																			DATA{
																																				:pid_2:uncoveredExit = 7;
																																				:pid_41:localTime = (z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_465 + z_517 + z_569 + z_609 + z_649 + z_65 + z_9);
																																				:pid_41:z = z_649;
																																				:pid_41:localTime = (z_145 + z_169 + z_265 + z_293 + z_417 + z_465 + z_517 + z_569 + z_609 + z_649 + z_65 + z_9);
																																				:pid_41:localPC = (((z_169 + z_265 + z_293 + z_417) == t_116) && ((z_293 + z_417 + z_465 + z_517) == t_253) && ((z_293 + z_417 + z_465 + z_517 + z_569 + z_609) == 4) && ((z_517 + z_569) == t_143) && ((z_145 + z_169 + z_265 + z_293 + z_417 + z_465) < t_40) && ((z_517 + z_569 + z_609 + z_649) < 4) && (t_143 < 4) && (t_241 < 4) && (t_40 < 4) && (t_8 < 4) && (t_116 < 4) && (t_253 < 4) && (t_548 < 8) && (z_169 < t_116) && (z_293 < t_253) && (z_65 < t_8) && (0 <= (t_143 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_40 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_116 + -2)) && (0 <= (t_253 + -2)) && (0 <= (t_548 + -4)) && ((z_0 + z_100 + z_136 + z_224 + z_260 + z_4 + z_40) <= (z_1 + z_145 + z_169 + z_265 + z_293 + z_65 + z_9)) && ((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_1 + z_145 + z_169 + z_65 + z_9)) && ((z_0 + z_4 + z_40) <= (z_1 + z_65 + z_9)) && ((z_3 + z_347 + z_375 + z_379 + z_39 + z_515) <= (z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_465 + z_517 + z_569 + z_609 + z_649 + z_65 + z_9)) && ((z_3 + z_347 + z_375 + z_39) <= (z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_465 + z_65 + z_9)) && ((z_293 + z_417 + z_465 + z_517 + z_569 + z_609) > t_253) && (z_1 > 0) && (z_145 > 0) && (z_169 > 0) && (z_265 > 0) && (z_293 > 0) && (z_417 > 0) && (z_465 > 0) && (z_517 > 0) && (z_569 > 0) && (z_609 > 0) && (z_65 > 0) && (z_9 > 0));
																																				:pid_41:timeEmit = (z_3 + z_347 + z_375 + z_379 + z_39 + z_515);
																																				:pid_42:e = 0;
																																				:pid_42:c = 0;
																																				:pid_42:i = 2;
																																				:pid_42:t = t_241;
																																				:pid_42:cl = 0;
																																				:pid_48:cl = (z_169 + z_265 + z_293 + z_417 + z_465 + z_517 + z_569 + z_609 + z_649);
																																				:pid_53:cl = z_649;
																																			}
																																			BUFFER{
																																				:pid_41:bufferNode:<FIFO>#0{ }
																																			}
																																			EC:<Id:1556;Ev:171;H:35;W:1391>{ SC: ( pid_19:o#17 , ( pid_29:cp2 , pid_34:dp2 , pid_39:dp2 ) , ( pid_46:cp2 , pid_51:dp2 , pid_55:dp1 ) , ( pid_63:cp2 , pid_68:dp2 , pid_72:dp1 ) , ( pid_80:cp2 , pid_83:dp0 , pid_89:dp1 ) )
																					
																EXE: { |;| (:pid_41 
	, run) (:pid_42 , run) (:pid_45 , run) (:pid_45 , cp_sendCM) (:pid_2 , run) }
																					
																TRACE: { |;| 
	(:pid_41 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_657 }) 
	(:pid_45 , ${ output inst::Trickle.Node.ControlMsg [ 1 , 1 ] ${ + 
	param::Trickle.Node.z_1 param::Trickle.Node.z_145 param::Trickle.Node.z_169 
	param::Trickle.Node.z_265 param::Trickle.Node.z_293 param::Trickle.Node.z_417 
	param::Trickle.Node.z_465 param::Trickle.Node.z_517 param::Trickle.Node.z_569 
	param::Trickle.Node.z_609 param::Trickle.Node.z_649 param::Trickle.Node.z_65 
	param::Trickle.Node.z_657 param::Trickle.Node.z_9 } } @ (z_1 + z_145 + z_169 + 
	z_265 + z_293 + z_417 + z_465 + z_517 + z_569 + z_609 + z_649 + z_65 + z_657 + 
	z_9)) }
																																				PC: (((z_169 + z_265 + z_293 + z_417) == t_116) && ((z_186 + z_198 + z_302 + z_318 + 
	z_338) == t_58) && ((z_198 + z_302 + z_318 + z_338 + z_454 + z_498) == t_171) && 
	((z_293 + z_417 + z_465 + z_517) == t_253) && ((z_293 + z_417 + z_465 + z_517 + 
	z_569 + z_609) == 4) && ((z_375 + z_379) == 4) && ((z_517 + z_569) == t_143) && 
	(z_136 == t_54) && (z_260 == t_215) && (z_375 == t_104) && (z_40 == t_4) && 
	(z_515 == t_109) && (z_657 == t_241) && ((z_145 + z_169 + z_265 + z_293 + z_417 
	+ z_465) < t_40) && ((z_198 + z_302 + z_318 + z_338 + z_454) < t_171) && ((z_517 
	+ z_569 + z_609 + z_649) < 4) && (t_104 < 4) && (t_109 < 8) && (t_143 < 4) && 
	(t_15 < 4) && (t_241 < 4) && (t_27 < 4) && (t_4 < 4) && (t_40 < 4) && (t_58 < 4) 
	&& (t_8 < 4) && (t_116 < 4) && (t_171 < 4) && (t_215 < 4) && (t_253 < 4) && 
	(t_279 < 4) && (t_483 < 4) && (t_54 < 4) && (t_548 < 8) && (z_169 < t_116) && 
	(z_198 < t_171) && (z_293 < t_253) && (z_318 < t_279) && (z_347 < t_27) && (z_65 
	< t_8) && (z_86 < t_15) && (0 <= (t_104 + -2)) && (0 <= (t_109 + -4)) && (0 <= 
	(t_143 + -2)) && (0 <= (t_15 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_27 + -2)) 
	&& (0 <= (t_4 + -2)) && (0 <= (t_40 + -2)) && (0 <= (t_58 + -2)) && (0 <= (t_8 + 
	-2)) && (0 <= (t_116 + -2)) && (0 <= (t_171 + -2)) && (0 <= (t_215 + -2)) && (0 
	<= (t_253 + -2)) && (0 <= (t_279 + -2)) && (0 <= (t_483 + -2)) && (0 <= (t_54 + 
	-2)) && (0 <= (t_548 + -4)) && ((z_0 + z_100 + z_136 + z_224 + z_260 + z_4 + 
	z_40) <= (z_1 + z_145 + z_169 + z_265 + z_293 + z_65 + z_9)) && ((z_0 + z_100 + 
	z_136 + z_224 + z_260 + z_4 + z_40) <= (z_186 + z_198 + z_2 + z_22 + z_302 + 
	z_318 + z_86)) && ((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_1 + z_145 + z_169 + 
	z_65 + z_9)) && ((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_186 + z_198 + z_2 + 
	z_22 + z_86)) && ((z_0 + z_4 + z_40) <= (z_1 + z_65 + z_9)) && ((z_0 + z_4 + 
	z_40) <= (z_2 + z_22 + z_86)) && ((z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + 
	z_65 + z_9) <= (z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_454 + 
	z_86)) && ((z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_86) <= (z_3 + 
	z_347 + z_39)) && ((z_3 + z_347 + z_375 + z_379 + z_39 + z_515) <= (z_1 + z_145 
	+ z_169 + z_265 + z_293 + z_417 + z_465 + z_517 + z_569 + z_609 + z_649 + z_65 + 
	z_9)) && ((z_3 + z_347 + z_375 + z_39) <= (z_1 + z_145 + z_169 + z_265 + z_293 + 
	z_417 + z_465 + z_65 + z_9)) && ((z_293 + z_417 + z_465 + z_517 + z_569 + z_609) 
	> t_253) && ((z_375 + z_379) > t_104) && (z_0 > 0) && (z_1 > 0) && (z_100 > 0) 
	&& (z_136 > 0) && (z_145 > 0) && (z_169 > 0) && (z_186 > 0) && (z_198 > 0) && 
	(z_2 > 0) && (z_22 > 0) && (z_224 > 0) && (z_265 > 0) && (z_293 > 0) && (z_3 > 0)
	 && (z_302 > 0) && (z_318 > 0) && (z_338 > 0) && (z_347 > 0) && (z_375 > 0) && 
	(z_379 > 0) && (z_39 > 0) && (z_4 > 0) && (z_40 > 0) && (z_417 > 0) && (z_454 > 
	0) && (z_465 > 0) && (z_515 > 0) && (z_517 > 0) && (z_569 > 0) && (z_609 > 0) && 
	(z_649 > 0) && (z_65 > 0) && (z_86 > 0) && (z_9 > 0))
																																				DATA{
																																					:pid_2:uncoveredExit = 8;
																																					:pid_41:localTime = (z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_465 + z_517 + z_569 + z_609 + z_649 + z_65 + z_657 + z_9);
																																					:pid_41:z = z_657;
																																					:pid_41:localTime = (z_145 + z_169 + z_265 + z_293 + z_417 + z_465 + z_517 + z_569 + z_609 + z_649 + z_65 + z_657 + z_9);
																																					:pid_41:localPC = (((z_169 + z_265 + z_293 + z_417) == t_116) && ((z_293 + z_417 + z_465 + z_517) == t_253) && ((z_293 + z_417 + z_465 + z_517 + z_569 + z_609) == 4) && ((z_517 + z_569) == t_143) && (z_657 == t_241) && ((z_145 + z_169 + z_265 + z_293 + z_417 + z_465) < t_40) && ((z_517 + z_569 + z_609 + z_649) < 4) && (t_143 < 4) && (t_241 < 4) && (t_40 < 4) && (t_8 < 4) && (t_116 < 4) && (t_253 < 4) && (t_548 < 8) && (z_169 < t_116) && (z_293 < t_253) && (z_65 < t_8) && (0 <= (t_143 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_40 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_116 + -2)) && (0 <= (t_253 + -2)) && (0 <= (t_548 + -4)) && ((z_0 + z_100 + z_136 + z_224 + z_260 + z_4 + z_40) <= (z_1 + z_145 + z_169 + z_265 + z_293 + z_65 + z_9)) && ((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_1 + z_145 + z_169 + z_65 + z_9)) && ((z_0 + z_4 + z_40) <= (z_1 + z_65 + z_9)) && ((z_3 + z_347 + z_375 + z_379 + z_39 + z_515) <= (z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_465 + z_517 + z_569 + z_609 + z_649 + z_65 + z_9)) && ((z_3 + z_347 + z_375 + z_39) <= (z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_465 + z_65 + z_9)) && ((z_293 + z_417 + z_465 + z_517 + z_569 + z_609) > t_253) && (z_1 > 0) && (z_145 > 0) && (z_169 > 0) && (z_265 > 0) && (z_293 > 0) && (z_417 > 0) && (z_465 > 0) && (z_517 > 0) && (z_569 > 0) && (z_609 > 0) && (z_649 > 0) && (z_65 > 0) && (z_9 > 0));
																																					:pid_42:cl = z_657;
																																					:pid_48:cl = (z_169 + z_265 + z_293 + z_417 + z_465 + z_517 + z_569 + z_609 + z_649 + z_657);
																																					:pid_53:cl = (z_649 + z_657);
																																				}
																																				BUFFER{
																																					:pid_58:bufferNode:<FIFO>#0{
																																						:pid_41:DataMsg2([ 2 , 2 , 1 ] , (z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_465 + z_517 + z_65 + z_9));
																																						:pid_41:ControlMsg([ 1 , 1 ] , (z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_465 + z_517 + z_569 + z_65 + z_9));
																																						:pid_41:ControlMsg([ 1 , 1 ] , (z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_465 + z_517 + z_569 + z_609 + z_649 + z_65 + z_657 + z_9));
																																					}
																																				}
																																				EC:<Id:1602;Ev:174;H:36;W:1431>{ SC: ( pid_19:o#17 , ( pid_29:cp2 , pid_34:dp2 , pid_39:dp2 ) , ( pid_46:cp2 , pid_51:dp2 , pid_55:dp1 ) , ( pid_63:cp2 , pid_68:dp2 , pid_72:dp1 ) , ( pid_80:cp2 , pid_83:dp0 , pid_90:dp2 ) )
																					
																	EXE: { |;| 
	(:pid_75 , run) (:pid_87 , run) (:pid_89 , run) (:pid_89 , dp1_reach_k) (:pid_2 
	, run) }
																					
																	TRACE: (:pid_75 
	, ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_683 })
																																					PC: (((z_169 + z_265 + z_293 + z_417) == t_116) && ((z_186 + z_198 + z_302 + z_318 + 
	z_338) == t_58) && ((z_198 + z_302 + z_318 + z_338 + z_454 + z_498) == t_171) && 
	((z_293 + z_417 + z_465 + z_517) == t_253) && ((z_293 + z_417 + z_465 + z_517 + 
	z_569 + z_609) == 4) && ((z_375 + z_379) == 4) && ((z_517 + z_569) == t_143) && 
	(z_136 == t_54) && (z_260 == t_215) && (z_375 == t_104) && (z_40 == t_4) && 
	(z_515 == t_109) && (z_657 == t_241) && (z_683 == t_483) && ((z_145 + z_169 + 
	z_265 + z_293 + z_417 + z_465) < t_40) && ((z_198 + z_302 + z_318 + z_338 + 
	z_454) < t_171) && ((z_517 + z_569 + z_609 + z_649) < 4) && (t_104 < 4) && 
	(t_109 < 8) && (t_143 < 4) && (t_15 < 4) && (t_241 < 4) && (t_27 < 4) && (t_4 < 
	4) && (t_40 < 4) && (t_58 < 4) && (t_8 < 4) && (t_116 < 4) && (t_171 < 4) && 
	(t_215 < 4) && (t_253 < 4) && (t_279 < 4) && (t_483 < 4) && (t_54 < 4) && (t_548 
	< 8) && (z_169 < t_116) && (z_198 < t_171) && (z_293 < t_253) && (z_318 < t_279) 
	&& (z_347 < t_27) && (z_65 < t_8) && (z_86 < t_15) && (0 <= (t_104 + -2)) && (0 
	<= (t_109 + -4)) && (0 <= (t_143 + -2)) && (0 <= (t_15 + -2)) && (0 <= (t_241 + 
	-2)) && (0 <= (t_27 + -2)) && (0 <= (t_4 + -2)) && (0 <= (t_40 + -2)) && (0 <= 
	(t_58 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_116 + -2)) && (0 <= (t_171 + -2)) 
	&& (0 <= (t_215 + -2)) && (0 <= (t_253 + -2)) && (0 <= (t_279 + -2)) && (0 <= 
	(t_483 + -2)) && (0 <= (t_54 + -2)) && (0 <= (t_548 + -4)) && ((z_0 + z_100 + 
	z_136 + z_224 + z_260 + z_4 + z_40) <= (z_1 + z_145 + z_169 + z_265 + z_293 + 
	z_65 + z_9)) && ((z_0 + z_100 + z_136 + z_224 + z_260 + z_4 + z_40) <= (z_186 + 
	z_198 + z_2 + z_22 + z_302 + z_318 + z_86)) && ((z_0 + z_100 + z_136 + z_4 + 
	z_40) <= (z_1 + z_145 + z_169 + z_65 + z_9)) && ((z_0 + z_100 + z_136 + z_4 + 
	z_40) <= (z_186 + z_198 + z_2 + z_22 + z_86)) && ((z_0 + z_4 + z_40) <= (z_1 + 
	z_65 + z_9)) && ((z_0 + z_4 + z_40) <= (z_2 + z_22 + z_86)) && ((z_1 + z_145 + 
	z_169 + z_265 + z_293 + z_417 + z_65 + z_9) <= (z_186 + z_198 + z_2 + z_22 + 
	z_302 + z_318 + z_338 + z_454 + z_86)) && ((z_186 + z_198 + z_2 + z_22 + z_302 + 
	z_318 + z_338 + z_86) <= (z_3 + z_347 + z_39)) && ((z_3 + z_347 + z_375 + z_379 
	+ z_39 + z_515) <= (z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_465 + z_517 
	+ z_569 + z_609 + z_649 + z_65 + z_9)) && ((z_3 + z_347 + z_375 + z_39) <= (z_1 
	+ z_145 + z_169 + z_265 + z_293 + z_417 + z_465 + z_65 + z_9)) && ((z_293 + 
	z_417 + z_465 + z_517 + z_569 + z_609) > t_253) && ((z_375 + z_379) > t_104) && 
	(z_0 > 0) && (z_1 > 0) && (z_100 > 0) && (z_136 > 0) && (z_145 > 0) && (z_169 > 
	0) && (z_186 > 0) && (z_198 > 0) && (z_2 > 0) && (z_22 > 0) && (z_224 > 0) && 
	(z_265 > 0) && (z_293 > 0) && (z_3 > 0) && (z_302 > 0) && (z_318 > 0) && (z_338 
	> 0) && (z_347 > 0) && (z_375 > 0) && (z_379 > 0) && (z_39 > 0) && (z_4 > 0) && 
	(z_40 > 0) && (z_417 > 0) && (z_454 > 0) && (z_465 > 0) && (z_515 > 0) && (z_517 
	> 0) && (z_559 > 0) && (z_569 > 0) && (z_609 > 0) && (z_649 > 0) && (z_65 > 0) 
	&& (z_86 > 0) && (z_9 > 0))
																																					DATA{
																																						:pid_2:uncoveredExit = 9;
																																						:pid_75:localTime = (z_3 + z_347 + z_375 + z_379 + z_39 + z_515 + z_559 + z_683);
																																						:pid_75:z = z_683;
																																						:pid_75:localTime = (z_347 + z_375 + z_379 + z_39 + z_515 + z_559 + z_683);
																																						:pid_75:localPC = (((z_375 + z_379) == 4) && (z_375 == t_104) && (z_515 == t_109) && (z_683 == t_483) && (t_104 < 4) && (t_109 < 8) && (t_27 < 4) && (t_483 < 4) && (z_347 < t_27) && (0 <= (t_104 + -2)) && (0 <= (t_109 + -4)) && (0 <= (t_27 + -2)) && (0 <= (t_483 + -2)) && ((z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_86) <= (z_3 + z_347 + z_39)) && ((z_375 + z_379) > t_104) && (z_3 > 0) && (z_347 > 0) && (z_375 > 0) && (z_379 > 0) && (z_39 > 0) && (z_515 > 0) && (z_559 > 0));
																																						:pid_76:cl = (z_515 + z_559 + z_683);
																																						:pid_82:cl = (z_347 + z_375 + z_379 + z_39 + z_515 + z_559 + z_683);
																																						:pid_87:cl = z_683;
																																					}
																																					EC:<Id:1627;Ev:178;H:37;W:1453>{ SC: ( pid_19:o#17 , ( pid_29:cp2 , pid_34:dp2 , pid_39:dp2 ) , ( pid_46:cp2 , pid_51:dp2 , pid_55:dp1 ) , ( pid_63:cp2 , pid_67:dp1 , pid_72:dp1 ) , ( pid_80:cp2 , pid_83:dp0 , pid_90:dp2 ) )
																					
																		EXE: { |;| 
	(:pid_58 , run) (:pid_65 , run) (:pid_68 , run) (:pid_68 , dp_resetTau) (:pid_2 
	, run) }
																					
																		TRACE: { |;| 
	(:pid_58 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_694 }) 
	(:pid_68 , ${ newfresh inst::Trickle.Node.DataProcess.t 
	param::Trickle.Node.DataProcess.t_619 }) }
																																						PC: (((z_169 + z_265 + z_293 + z_417) == t_116) && ((z_186 + z_198 + z_302 + z_318 + 
	z_338) == t_58) && ((z_198 + z_302 + z_318 + z_338 + z_454 + z_498) == t_171) && 
	((z_198 + z_302 + z_318 + z_338 + z_454 + z_498 + z_694) == 4) && ((z_293 + 
	z_417 + z_465 + z_517) == t_253) && ((z_293 + z_417 + z_465 + z_517 + z_569 + 
	z_609) == 4) && ((z_375 + z_379) == 4) && ((z_517 + z_569) == t_143) && (z_136 
	== t_54) && (z_260 == t_215) && (z_375 == t_104) && (z_40 == t_4) && (z_515 == 
	t_109) && (z_657 == t_241) && (z_683 == t_483) && ((z_145 + z_169 + z_265 + 
	z_293 + z_417 + z_465) < t_40) && ((z_198 + z_302 + z_318 + z_338 + z_454) < 
	t_171) && ((z_517 + z_569 + z_609 + z_649) < 4) && (t_104 < 4) && (t_109 < 8) && 
	(t_143 < 4) && (t_15 < 4) && (t_241 < 4) && (t_27 < 4) && (t_4 < 4) && (t_40 < 4)
	 && (t_58 < 4) && (t_8 < 4) && (t_116 < 4) && (t_171 < 4) && (t_215 < 4) && 
	(t_253 < 4) && (t_279 < 4) && (t_483 < 4) && (t_54 < 4) && (t_548 < 8) && (t_619 
	< 8) && (z_169 < t_116) && (z_198 < t_171) && (z_293 < t_253) && (z_318 < t_279) 
	&& (z_347 < t_27) && (z_65 < t_8) && (z_86 < t_15) && (0 <= (t_104 + -2)) && (0 
	<= (t_109 + -4)) && (0 <= (t_143 + -2)) && (0 <= (t_15 + -2)) && (0 <= (t_241 + 
	-2)) && (0 <= (t_27 + -2)) && (0 <= (t_4 + -2)) && (0 <= (t_40 + -2)) && (0 <= 
	(t_58 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_116 + -2)) && (0 <= (t_171 + -2)) 
	&& (0 <= (t_215 + -2)) && (0 <= (t_253 + -2)) && (0 <= (t_279 + -2)) && (0 <= 
	(t_483 + -2)) && (0 <= (t_54 + -2)) && (0 <= (t_548 + -4)) && (0 <= (t_619 + -4))
	 && ((z_0 + z_100 + z_136 + z_224 + z_260 + z_4 + z_40) <= (z_1 + z_145 + z_169 
	+ z_265 + z_293 + z_65 + z_9)) && ((z_0 + z_100 + z_136 + z_224 + z_260 + z_4 + 
	z_40) <= (z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_86)) && ((z_0 + z_100 + 
	z_136 + z_4 + z_40) <= (z_1 + z_145 + z_169 + z_65 + z_9)) && ((z_0 + z_100 + 
	z_136 + z_4 + z_40) <= (z_186 + z_198 + z_2 + z_22 + z_86)) && ((z_0 + z_4 + 
	z_40) <= (z_1 + z_65 + z_9)) && ((z_0 + z_4 + z_40) <= (z_2 + z_22 + z_86)) && 
	((z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_65 + z_9) <= (z_186 + z_198 + 
	z_2 + z_22 + z_302 + z_318 + z_338 + z_454 + z_86)) && ((z_186 + z_198 + z_2 + 
	z_22 + z_302 + z_318 + z_338 + z_86) <= (z_3 + z_347 + z_39)) && ((z_3 + z_347 + 
	z_375 + z_379 + z_39 + z_515) <= (z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + 
	z_465 + z_517 + z_569 + z_609 + z_649 + z_65 + z_9)) && ((z_3 + z_347 + z_375 + 
	z_39) <= (z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_465 + z_65 + z_9)) && 
	((z_198 + z_302 + z_318 + z_338 + z_454 + z_498 + z_694) > t_171) && ((z_293 + 
	z_417 + z_465 + z_517 + z_569 + z_609) > t_253) && ((z_375 + z_379) > t_104) && 
	(z_0 > 0) && (z_1 > 0) && (z_100 > 0) && (z_136 > 0) && (z_145 > 0) && (z_169 > 
	0) && (z_186 > 0) && (z_198 > 0) && (z_2 > 0) && (z_22 > 0) && (z_224 > 0) && 
	(z_265 > 0) && (z_293 > 0) && (z_3 > 0) && (z_302 > 0) && (z_318 > 0) && (z_338 
	> 0) && (z_347 > 0) && (z_375 > 0) && (z_379 > 0) && (z_39 > 0) && (z_4 > 0) && 
	(z_40 > 0) && (z_417 > 0) && (z_454 > 0) && (z_465 > 0) && (z_498 > 0) && (z_515 
	> 0) && (z_517 > 0) && (z_559 > 0) && (z_569 > 0) && (z_609 > 0) && (z_649 > 0) 
	&& (z_65 > 0) && (z_86 > 0) && (z_9 > 0))
																																						DATA{
																																							:pid_2:uncoveredExit = 10;
																																							:pid_58:localTime = (z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_454 + z_498 + z_694 + z_86);
																																							:pid_58:z = z_694;
																																							:pid_58:localTime = (z_186 + z_198 + z_22 + z_302 + z_318 + z_338 + z_454 + z_498 + z_694 + z_86);
																																							:pid_58:localPC = (((z_186 + z_198 + z_302 + z_318 + z_338) == t_58) && ((z_198 + z_302 + z_318 + z_338 + z_454 + z_498) == t_171) && ((z_198 + z_302 + z_318 + z_338 + z_454 + z_498 + z_694) == 4) && ((z_198 + z_302 + z_318 + z_338 + z_454) < t_171) && (t_15 < 4) && (t_58 < 4) && (t_171 < 4) && (t_279 < 4) && (t_619 < 8) && (z_198 < t_171) && (z_318 < t_279) && (z_86 < t_15) && (0 <= (t_15 + -2)) && (0 <= (t_58 + -2)) && (0 <= (t_171 + -2)) && (0 <= (t_279 + -2)) && (0 <= (t_619 + -4)) && ((z_0 + z_100 + z_136 + z_224 + z_260 + z_4 + z_40) <= (z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_86)) && ((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_186 + z_198 + z_2 + z_22 + z_86)) && ((z_0 + z_4 + z_40) <= (z_2 + z_22 + z_86)) && ((z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_65 + z_9) <= (z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_454 + z_86)) && ((z_198 + z_302 + z_318 + z_338 + z_454 + z_498 + z_694) > t_171) && (z_186 > 0) && (z_198 > 0) && (z_2 > 0) && (z_22 > 0) && (z_302 > 0) && (z_318 > 0) && (z_338 > 0) && (z_454 > 0) && (z_498 > 0) && (z_86 > 0));
																																							:pid_59:cl = (z_186 + z_198 + z_302 + z_318 + z_338 + z_454 + z_498 + z_694);
																																							:pid_65:e = 1;
																																							:pid_65:tau = 8;
																																							:pid_65:c = 0;
																																							:pid_65:t = t_619;
																																							:pid_65:cl = 0;
																																							:pid_70:cl = (z_318 + z_338 + z_454 + z_498 + z_694);
																																						}
																																						EC:<Id:1661;Ev:183;H:38;W:1483>{ SC: ( pid_19:o#17 , ( pid_29:cp2 , pid_34:dp2 , pid_39:dp2 ) , ( pid_46:cp2 , pid_51:dp2 , pid_56:dp2 ) , ( pid_63:cp2 , pid_67:dp1 , pid_72:dp1 ) , ( pid_80:cp2 , pid_83:dp0 , pid_90:dp2 ) )
																					
																			EXE: { 
	|;| (:pid_41 , run) (:pid_53 , run) (:pid_55 , run) (:pid_55 , dp_sendDM) 
	(:pid_2 , run) }
																					
																			TRACE: { 
	|;| (:pid_41 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_709 }) 
	(:pid_55 , ${ output inst::Trickle.Node.DataMsg2 [ 2 , 2 , 1 ] ${ + 
	param::Trickle.Node.z_1 param::Trickle.Node.z_145 param::Trickle.Node.z_169 
	param::Trickle.Node.z_265 param::Trickle.Node.z_293 param::Trickle.Node.z_417 
	param::Trickle.Node.z_465 param::Trickle.Node.z_517 param::Trickle.Node.z_569 
	param::Trickle.Node.z_609 param::Trickle.Node.z_649 param::Trickle.Node.z_65 
	param::Trickle.Node.z_657 param::Trickle.Node.z_709 param::Trickle.Node.z_9 } } 
	@ (z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_465 + z_517 + z_569 + z_609 + 
	z_649 + z_65 + z_657 + z_709 + z_9)) }
																																							PC: (((z_169 + z_265 + z_293 + z_417) == t_116) && ((z_186 + z_198 + z_302 + z_318 + 
	z_338) == t_58) && ((z_198 + z_302 + z_318 + z_338 + z_454 + z_498) == t_171) && 
	((z_198 + z_302 + z_318 + z_338 + z_454 + z_498 + z_694) == 4) && ((z_293 + 
	z_417 + z_465 + z_517) == t_253) && ((z_293 + z_417 + z_465 + z_517 + z_569 + 
	z_609) == 4) && ((z_375 + z_379) == 4) && ((z_517 + z_569) == t_143) && ((z_649 
	+ z_657 + z_709) == t_548) && (z_136 == t_54) && (z_260 == t_215) && (z_375 == 
	t_104) && (z_40 == t_4) && (z_515 == t_109) && (z_657 == t_241) && (z_683 == 
	t_483) && ((z_145 + z_169 + z_265 + z_293 + z_417 + z_465) < t_40) && ((z_198 + 
	z_302 + z_318 + z_338 + z_454) < t_171) && ((z_517 + z_569 + z_609 + z_649) < 4) 
	&& (t_104 < 4) && (t_109 < 8) && (t_143 < 4) && (t_15 < 4) && (t_241 < 4) && 
	(t_27 < 4) && (t_4 < 4) && (t_40 < 4) && (t_58 < 4) && (t_8 < 4) && (t_116 < 4) 
	&& (t_171 < 4) && (t_215 < 4) && (t_253 < 4) && (t_279 < 4) && (t_483 < 4) && 
	(t_54 < 4) && (t_548 < 8) && (t_619 < 8) && (z_169 < t_116) && (z_198 < t_171) 
	&& (z_293 < t_253) && (z_318 < t_279) && (z_347 < t_27) && (z_65 < t_8) && (z_86 
	< t_15) && (0 <= (t_104 + -2)) && (0 <= (t_109 + -4)) && (0 <= (t_143 + -2)) && 
	(0 <= (t_15 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_27 + -2)) && (0 <= (t_4 + 
	-2)) && (0 <= (t_40 + -2)) && (0 <= (t_58 + -2)) && (0 <= (t_8 + -2)) && (0 <= 
	(t_116 + -2)) && (0 <= (t_171 + -2)) && (0 <= (t_215 + -2)) && (0 <= (t_253 + -2)
	) && (0 <= (t_279 + -2)) && (0 <= (t_483 + -2)) && (0 <= (t_54 + -2)) && (0 <= 
	(t_548 + -4)) && (0 <= (t_619 + -4)) && ((z_0 + z_100 + z_136 + z_224 + z_260 + 
	z_4 + z_40) <= (z_1 + z_145 + z_169 + z_265 + z_293 + z_65 + z_9)) && ((z_0 + 
	z_100 + z_136 + z_224 + z_260 + z_4 + z_40) <= (z_186 + z_198 + z_2 + z_22 + 
	z_302 + z_318 + z_86)) && ((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_1 + z_145 + 
	z_169 + z_65 + z_9)) && ((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_186 + z_198 + 
	z_2 + z_22 + z_86)) && ((z_0 + z_4 + z_40) <= (z_1 + z_65 + z_9)) && ((z_0 + z_4 
	+ z_40) <= (z_2 + z_22 + z_86)) && ((z_1 + z_145 + z_169 + z_265 + z_293 + z_417 
	+ z_65 + z_9) <= (z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_454 + 
	z_86)) && ((z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_86) <= (z_3 + 
	z_347 + z_39)) && ((z_3 + z_347 + z_375 + z_379 + z_39 + z_515) <= (z_1 + z_145 
	+ z_169 + z_265 + z_293 + z_417 + z_465 + z_517 + z_569 + z_609 + z_649 + z_65 + 
	z_9)) && ((z_3 + z_347 + z_375 + z_39) <= (z_1 + z_145 + z_169 + z_265 + z_293 + 
	z_417 + z_465 + z_65 + z_9)) && ((z_198 + z_302 + z_318 + z_338 + z_454 + z_498 
	+ z_694) > t_171) && ((z_293 + z_417 + z_465 + z_517 + z_569 + z_609) > t_253) 
	&& ((z_375 + z_379) > t_104) && (z_0 > 0) && (z_1 > 0) && (z_100 > 0) && (z_136 
	> 0) && (z_145 > 0) && (z_169 > 0) && (z_186 > 0) && (z_198 > 0) && (z_2 > 0) && 
	(z_22 > 0) && (z_224 > 0) && (z_265 > 0) && (z_293 > 0) && (z_3 > 0) && (z_302 > 
	0) && (z_318 > 0) && (z_338 > 0) && (z_347 > 0) && (z_375 > 0) && (z_379 > 0) && 
	(z_39 > 0) && (z_4 > 0) && (z_40 > 0) && (z_417 > 0) && (z_454 > 0) && (z_465 > 
	0) && (z_498 > 0) && (z_515 > 0) && (z_517 > 0) && (z_559 > 0) && (z_569 > 0) && 
	(z_609 > 0) && (z_649 > 0) && (z_65 > 0) && (z_657 > 0) && (z_86 > 0) && (z_9 > 
	0))
																																							DATA{
																																								:pid_2:uncoveredExit = 11;
																																								:pid_41:localTime = (z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_465 + z_517 + z_569 + z_609 + z_649 + z_65 + z_657 + z_709 + z_9);
																																								:pid_41:z = z_709;
																																								:pid_41:localTime = (z_145 + z_169 + z_265 + z_293 + z_417 + z_465 + z_517 + z_569 + z_609 + z_649 + z_65 + z_657 + z_709 + z_9);
																																								:pid_41:localPC = (((z_169 + z_265 + z_293 + z_417) == t_116) && ((z_293 + z_417 + z_465 + z_517) == t_253) && ((z_293 + z_417 + z_465 + z_517 + z_569 + z_609) == 4) && ((z_517 + z_569) == t_143) && ((z_649 + z_657 + z_709) == t_548) && (z_657 == t_241) && ((z_145 + z_169 + z_265 + z_293 + z_417 + z_465) < t_40) && ((z_517 + z_569 + z_609 + z_649) < 4) && (t_143 < 4) && (t_241 < 4) && (t_40 < 4) && (t_8 < 4) && (t_116 < 4) && (t_253 < 4) && (t_548 < 8) && (z_169 < t_116) && (z_293 < t_253) && (z_65 < t_8) && (0 <= (t_143 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_40 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_116 + -2)) && (0 <= (t_253 + -2)) && (0 <= (t_548 + -4)) && ((z_0 + z_100 + z_136 + z_224 + z_260 + z_4 + z_40) <= (z_1 + z_145 + z_169 + z_265 + z_293 + z_65 + z_9)) && ((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_1 + z_145 + z_169 + z_65 + z_9)) && ((z_0 + z_4 + z_40) <= (z_1 + z_65 + z_9)) && ((z_3 + z_347 + z_375 + z_379 + z_39 + z_515) <= (z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_465 + z_517 + z_569 + z_609 + z_649 + z_65 + z_9)) && ((z_3 + z_347 + z_375 + z_39) <= (z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_465 + z_65 + z_9)) && ((z_293 + z_417 + z_465 + z_517 + z_569 + z_609) > t_253) && (z_1 > 0) && (z_145 > 0) && (z_169 > 0) && (z_265 > 0) && (z_293 > 0) && (z_417 > 0) && (z_465 > 0) && (z_517 > 0) && (z_569 > 0) && (z_609 > 0) && (z_649 > 0) && (z_65 > 0) && (z_657 > 0) && (z_9 > 0));
																																								:pid_42:cl = (z_657 + z_709);
																																								:pid_48:cl = (z_169 + z_265 + z_293 + z_417 + z_465 + z_517 + z_569 + z_609 + z_649 + z_657 + z_709);
																																								:pid_53:cl = (z_649 + z_657 + z_709);
																																							}
																																							BUFFER{
																																								:pid_58:bufferNode:<FIFO>#0{
																																									:pid_41:DataMsg2([ 2 , 2 , 1 ] , (z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_465 + z_517 + z_65 + z_9));
																																									:pid_41:ControlMsg([ 1 , 1 ] , (z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_465 + z_517 + z_569 + z_65 + z_9));
																																									:pid_41:ControlMsg([ 1 , 1 ] , (z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_465 + z_517 + z_569 + z_609 + z_649 + z_65 + z_657 + z_9));
																																									:pid_41:DataMsg2([ 2 , 2 , 1 ] , (z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_465 + z_517 + z_569 + z_609 + z_649 + z_65 + z_657 + z_709 + z_9));
																																								}
																																							}
																																							EC:<Id:1699;Ev:187;H:39;W:1516>{ SC: ( pid_19:o#17 , ( pid_29:cp2 , pid_34:dp2 , pid_39:dp2 ) , ( pid_46:cp2 , pid_51:dp2 , pid_56:dp2 ) , ( pid_63:cp2 , pid_68:dp2 , pid_72:dp1 ) , ( pid_80:cp2 , pid_83:dp0 , pid_90:dp2 ) )
																					
																				EXE: 
	{ |;| (:pid_58 , run) (:pid_65 , run) (:pid_67 , run) (:pid_67 , dp_sendDM) 
	(:pid_2 , run) }
																					
																				
	TRACE: { |;| (:pid_58 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_730 }) (:pid_67 , ${ output inst::Trickle.Node.DataMsg1 [ 
	1 , 1 , 0 ] ${ + param::Trickle.Node.z_186 param::Trickle.Node.z_198 
	param::Trickle.Node.z_2 param::Trickle.Node.z_22 param::Trickle.Node.z_302 
	param::Trickle.Node.z_318 param::Trickle.Node.z_338 param::Trickle.Node.z_454 
	param::Trickle.Node.z_498 param::Trickle.Node.z_694 param::Trickle.Node.z_730 
	param::Trickle.Node.z_86 } } @ (z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + 
	z_338 + z_454 + z_498 + z_694 + z_730 + z_86)) }
																																								PC: (((z_169 + z_265 + z_293 + z_417) == t_116) && ((z_186 + z_198 + z_302 + z_318 + 
	z_338) == t_58) && ((z_198 + z_302 + z_318 + z_338 + z_454 + z_498) == t_171) && 
	((z_198 + z_302 + z_318 + z_338 + z_454 + z_498 + z_694) == 4) && ((z_293 + 
	z_417 + z_465 + z_517) == t_253) && ((z_293 + z_417 + z_465 + z_517 + z_569 + 
	z_609) == 4) && ((z_375 + z_379) == 4) && ((z_517 + z_569) == t_143) && ((z_649 
	+ z_657 + z_709) == t_548) && (z_136 == t_54) && (z_260 == t_215) && (z_375 == 
	t_104) && (z_40 == t_4) && (z_515 == t_109) && (z_657 == t_241) && (z_683 == 
	t_483) && (z_730 == t_619) && ((z_145 + z_169 + z_265 + z_293 + z_417 + z_465) < 
	t_40) && ((z_198 + z_302 + z_318 + z_338 + z_454) < t_171) && ((z_517 + z_569 + 
	z_609 + z_649) < 4) && (t_104 < 4) && (t_109 < 8) && (t_143 < 4) && (t_15 < 4) 
	&& (t_241 < 4) && (t_27 < 4) && (t_4 < 4) && (t_40 < 4) && (t_58 < 4) && (t_8 < 
	4) && (t_116 < 4) && (t_171 < 4) && (t_215 < 4) && (t_253 < 4) && (t_279 < 4) && 
	(t_483 < 4) && (t_54 < 4) && (t_548 < 8) && (t_619 < 8) && (z_169 < t_116) && 
	(z_198 < t_171) && (z_293 < t_253) && (z_318 < t_279) && (z_347 < t_27) && (z_65 
	< t_8) && (z_86 < t_15) && (0 <= (t_104 + -2)) && (0 <= (t_109 + -4)) && (0 <= 
	(t_143 + -2)) && (0 <= (t_15 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_27 + -2)) 
	&& (0 <= (t_4 + -2)) && (0 <= (t_40 + -2)) && (0 <= (t_58 + -2)) && (0 <= (t_8 + 
	-2)) && (0 <= (t_116 + -2)) && (0 <= (t_171 + -2)) && (0 <= (t_215 + -2)) && (0 
	<= (t_253 + -2)) && (0 <= (t_279 + -2)) && (0 <= (t_483 + -2)) && (0 <= (t_54 + 
	-2)) && (0 <= (t_548 + -4)) && (0 <= (t_619 + -4)) && ((z_0 + z_100 + z_136 + 
	z_224 + z_260 + z_4 + z_40) <= (z_1 + z_145 + z_169 + z_265 + z_293 + z_65 + z_9)
	) && ((z_0 + z_100 + z_136 + z_224 + z_260 + z_4 + z_40) <= (z_186 + z_198 + z_2 
	+ z_22 + z_302 + z_318 + z_86)) && ((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_1 + 
	z_145 + z_169 + z_65 + z_9)) && ((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_186 + 
	z_198 + z_2 + z_22 + z_86)) && ((z_0 + z_4 + z_40) <= (z_1 + z_65 + z_9)) && 
	((z_0 + z_4 + z_40) <= (z_2 + z_22 + z_86)) && ((z_1 + z_145 + z_169 + z_265 + 
	z_293 + z_417 + z_65 + z_9) <= (z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + 
	z_338 + z_454 + z_86)) && ((z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + 
	z_86) <= (z_3 + z_347 + z_39)) && ((z_3 + z_347 + z_375 + z_379 + z_39 + z_515) 
	<= (z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_465 + z_517 + z_569 + z_609 
	+ z_649 + z_65 + z_9)) && ((z_3 + z_347 + z_375 + z_39) <= (z_1 + z_145 + z_169 
	+ z_265 + z_293 + z_417 + z_465 + z_65 + z_9)) && ((z_198 + z_302 + z_318 + 
	z_338 + z_454 + z_498 + z_694) > t_171) && ((z_293 + z_417 + z_465 + z_517 + 
	z_569 + z_609) > t_253) && ((z_375 + z_379) > t_104) && (z_0 > 0) && (z_1 > 0) 
	&& (z_100 > 0) && (z_136 > 0) && (z_145 > 0) && (z_169 > 0) && (z_186 > 0) && 
	(z_198 > 0) && (z_2 > 0) && (z_22 > 0) && (z_224 > 0) && (z_265 > 0) && (z_293 > 
	0) && (z_3 > 0) && (z_302 > 0) && (z_318 > 0) && (z_338 > 0) && (z_347 > 0) && 
	(z_375 > 0) && (z_379 > 0) && (z_39 > 0) && (z_4 > 0) && (z_40 > 0) && (z_417 > 
	0) && (z_454 > 0) && (z_465 > 0) && (z_498 > 0) && (z_515 > 0) && (z_517 > 0) && 
	(z_559 > 0) && (z_569 > 0) && (z_609 > 0) && (z_649 > 0) && (z_65 > 0) && (z_657 
	> 0) && (z_694 > 0) && (z_86 > 0) && (z_9 > 0))
																																								DATA{
																																									:pid_2:uncoveredExit = 12;
																																									:pid_58:localTime = (z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_454 + z_498 + z_694 + z_730 + z_86);
																																									:pid_58:z = z_730;
																																									:pid_58:localTime = (z_186 + z_198 + z_22 + z_302 + z_318 + z_338 + z_454 + z_498 + z_694 + z_730 + z_86);
																																									:pid_58:localPC = (((z_186 + z_198 + z_302 + z_318 + z_338) == t_58) && ((z_198 + z_302 + z_318 + z_338 + z_454 + z_498) == t_171) && ((z_198 + z_302 + z_318 + z_338 + z_454 + z_498 + z_694) == 4) && (z_730 == t_619) && ((z_198 + z_302 + z_318 + z_338 + z_454) < t_171) && (t_15 < 4) && (t_58 < 4) && (t_171 < 4) && (t_279 < 4) && (t_619 < 8) && (z_198 < t_171) && (z_318 < t_279) && (z_86 < t_15) && (0 <= (t_15 + -2)) && (0 <= (t_58 + -2)) && (0 <= (t_171 + -2)) && (0 <= (t_279 + -2)) && (0 <= (t_619 + -4)) && ((z_0 + z_100 + z_136 + z_224 + z_260 + z_4 + z_40) <= (z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_86)) && ((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_186 + z_198 + z_2 + z_22 + z_86)) && ((z_0 + z_4 + z_40) <= (z_2 + z_22 + z_86)) && ((z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_65 + z_9) <= (z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_454 + z_86)) && ((z_198 + z_302 + z_318 + z_338 + z_454 + z_498 + z_694) > t_171) && (z_186 > 0) && (z_198 > 0) && (z_2 > 0) && (z_22 > 0) && (z_302 > 0) && (z_318 > 0) && (z_338 > 0) && (z_454 > 0) && (z_498 > 0) && (z_694 > 0) && (z_86 > 0));
																																									:pid_59:cl = (z_186 + z_198 + z_302 + z_318 + z_338 + z_454 + z_498 + z_694 + z_730);
																																									:pid_65:cl = z_730;
																																									:pid_70:cl = (z_318 + z_338 + z_454 + z_498 + z_694 + z_730);
																																								}
																																								BUFFER{
																																									:pid_24:bufferNode:<FIFO>#0{
																																										:pid_58:ControlMsg([ 1 , 1 ] , (z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_86));
																																										:pid_58:DataMsg1([ 1 , 1 , 0 ] , (z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_454 + z_498 + z_694 + z_730 + z_86));
																																									}
																																									:pid_75:bufferNode:<FIFO>#0{
																																										:pid_58:DataMsg1([ 1 , 1 , 0 ] , (z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_454 + z_498 + z_694 + z_730 + z_86));
																																									}
																																								}
																																								EC:<Id:1727;Ev:192;H:40;W:1516>{ SC: ( pid_19:o#17 , ( pid_29:cp2 , pid_34:dp2 , pid_39:dp2 ) , ( pid_46:cp2 , pid_51:dp2 , pid_56:dp2 ) , ( pid_63:cp2 , pid_68:dp2 , pid_72:dp1 ) , ( pid_79:cp1 , pid_83:dp0 , pid_90:dp2 ) )
																					
																					
	EXE: { |;| (:pid_75 , run) (:pid_76 , run) (:pid_80 , run) (:pid_80 , 
	cp_resetTau) (:pid_2 , run) }
																					
																					
	TRACE: { |;| (:pid_75 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_747 }) (:pid_80 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_279 }) }
																																									PC: (((z_169 + z_265 + z_293 + z_417) == t_116) && ((z_186 + z_198 + z_302 + z_318 + 
	z_338) == t_58) && ((z_198 + z_302 + z_318 + z_338 + z_454 + z_498) == t_171) && 
	((z_198 + z_302 + z_318 + z_338 + z_454 + z_498 + z_694) == 4) && ((z_293 + 
	z_417 + z_465 + z_517) == t_253) && ((z_293 + z_417 + z_465 + z_517 + z_569 + 
	z_609) == 4) && ((z_375 + z_379) == 4) && ((z_515 + z_559 + z_683 + z_747) == 8) 
	&& ((z_517 + z_569) == t_143) && ((z_649 + z_657 + z_709) == t_548) && (z_136 == 
	t_54) && (z_260 == t_215) && (z_375 == t_104) && (z_40 == t_4) && (z_515 == 
	t_109) && (z_657 == t_241) && (z_683 == t_483) && (z_730 == t_619) && ((z_145 + 
	z_169 + z_265 + z_293 + z_417 + z_465) < t_40) && ((z_198 + z_302 + z_318 + 
	z_338 + z_454) < t_171) && ((z_517 + z_569 + z_609 + z_649) < 4) && (t_104 < 4) 
	&& (t_109 < 8) && (t_143 < 4) && (t_15 < 4) && (t_241 < 4) && (t_27 < 4) && 
	(t_279 < 8) && (t_4 < 4) && (t_40 < 4) && (t_58 < 4) && (t_8 < 4) && (t_116 < 4) 
	&& (t_171 < 4) && (t_215 < 4) && (t_253 < 4) && (t_279 < 4) && (t_483 < 4) && 
	(t_54 < 4) && (t_548 < 8) && (t_619 < 8) && (z_169 < t_116) && (z_198 < t_171) 
	&& (z_293 < t_253) && (z_318 < t_279) && (z_347 < t_27) && (z_65 < t_8) && (z_86 
	< t_15) && (0 <= (t_104 + -2)) && (0 <= (t_109 + -4)) && (0 <= (t_143 + -2)) && 
	(0 <= (t_15 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_27 + -2)) && (0 <= (t_279 
	+ -4)) && (0 <= (t_4 + -2)) && (0 <= (t_40 + -2)) && (0 <= (t_58 + -2)) && (0 <= 
	(t_8 + -2)) && (0 <= (t_116 + -2)) && (0 <= (t_171 + -2)) && (0 <= (t_215 + -2)) 
	&& (0 <= (t_253 + -2)) && (0 <= (t_279 + -2)) && (0 <= (t_483 + -2)) && (0 <= 
	(t_54 + -2)) && (0 <= (t_548 + -4)) && (0 <= (t_619 + -4)) && ((z_0 + z_100 + 
	z_136 + z_224 + z_260 + z_4 + z_40) <= (z_1 + z_145 + z_169 + z_265 + z_293 + 
	z_65 + z_9)) && ((z_0 + z_100 + z_136 + z_224 + z_260 + z_4 + z_40) <= (z_186 + 
	z_198 + z_2 + z_22 + z_302 + z_318 + z_86)) && ((z_0 + z_100 + z_136 + z_4 + 
	z_40) <= (z_1 + z_145 + z_169 + z_65 + z_9)) && ((z_0 + z_100 + z_136 + z_4 + 
	z_40) <= (z_186 + z_198 + z_2 + z_22 + z_86)) && ((z_0 + z_4 + z_40) <= (z_1 + 
	z_65 + z_9)) && ((z_0 + z_4 + z_40) <= (z_2 + z_22 + z_86)) && ((z_1 + z_145 + 
	z_169 + z_265 + z_293 + z_417 + z_65 + z_9) <= (z_186 + z_198 + z_2 + z_22 + 
	z_302 + z_318 + z_338 + z_454 + z_86)) && ((z_186 + z_198 + z_2 + z_22 + z_302 + 
	z_318 + z_338 + z_86) <= (z_3 + z_347 + z_39)) && ((z_3 + z_347 + z_375 + z_379 
	+ z_39 + z_515) <= (z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_465 + z_517 
	+ z_569 + z_609 + z_649 + z_65 + z_9)) && ((z_3 + z_347 + z_375 + z_39) <= (z_1 
	+ z_145 + z_169 + z_265 + z_293 + z_417 + z_465 + z_65 + z_9)) && ((z_198 + 
	z_302 + z_318 + z_338 + z_454 + z_498 + z_694) > t_171) && ((z_293 + z_417 + 
	z_465 + z_517 + z_569 + z_609) > t_253) && ((z_375 + z_379) > t_104) && ((z_515 
	+ z_559 + z_683 + z_747) > t_109) && (z_0 > 0) && (z_1 > 0) && (z_100 > 0) && 
	(z_136 > 0) && (z_145 > 0) && (z_169 > 0) && (z_186 > 0) && (z_198 > 0) && (z_2 
	> 0) && (z_22 > 0) && (z_224 > 0) && (z_265 > 0) && (z_293 > 0) && (z_3 > 0) && 
	(z_302 > 0) && (z_318 > 0) && (z_338 > 0) && (z_347 > 0) && (z_375 > 0) && 
	(z_379 > 0) && (z_39 > 0) && (z_4 > 0) && (z_40 > 0) && (z_417 > 0) && (z_454 > 
	0) && (z_465 > 0) && (z_498 > 0) && (z_515 > 0) && (z_517 > 0) && (z_559 > 0) && 
	(z_569 > 0) && (z_609 > 0) && (z_649 > 0) && (z_65 > 0) && (z_657 > 0) && (z_683 
	> 0) && (z_694 > 0) && (z_86 > 0) && (z_9 > 0))
																																									DATA{
																																										:pid_2:uncoveredExit = 13;
																																										:pid_75:localTime = (z_3 + z_347 + z_375 + z_379 + z_39 + z_515 + z_559 + z_683 + z_747);
																																										:pid_75:z = z_747;
																																										:pid_75:localTime = (z_347 + z_375 + z_379 + z_39 + z_515 + z_559 + z_683 + z_747);
																																										:pid_75:localPC = (((z_375 + z_379) == 4) && ((z_515 + z_559 + z_683 + z_747) == 8) && (z_375 == t_104) && (z_515 == t_109) && (z_683 == t_483) && (t_104 < 4) && (t_109 < 8) && (t_27 < 4) && (t_279 < 8) && (t_483 < 4) && (z_347 < t_27) && (0 <= (t_104 + -2)) && (0 <= (t_109 + -4)) && (0 <= (t_27 + -2)) && (0 <= (t_279 + -4)) && (0 <= (t_483 + -2)) && ((z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_86) <= (z_3 + z_347 + z_39)) && ((z_375 + z_379) > t_104) && ((z_515 + z_559 + z_683 + z_747) > t_109) && (z_3 > 0) && (z_347 > 0) && (z_375 > 0) && (z_379 > 0) && (z_39 > 0) && (z_515 > 0) && (z_559 > 0) && (z_683 > 0));
																																										:pid_76:e = 2;
																																										:pid_76:tau = 8;
																																										:pid_76:t = t_279;
																																										:pid_76:cl = 0;
																																										:pid_82:cl = (z_347 + z_375 + z_379 + z_39 + z_515 + z_559 + z_683 + z_747);
																																										:pid_87:cl = (z_683 + z_747);
																																									}
																																									EC:<Id:1769;Ev:196;H:41;W:1577>{ SC: ( pid_19:o#17 , ( pid_29:cp2 , pid_34:dp2 , pid_39:dp2 ) , ( pid_46:cp2 , pid_51:dp2 , pid_56:dp2 ) , ( pid_63:cp2 , pid_67:dp1 , pid_72:dp1 ) , ( pid_79:cp1 , pid_83:dp0 , pid_90:dp2 ) )
																					
																						
	EXE: { |;| (:pid_58 , run) (:pid_65 , run) (:pid_68 , run) (:pid_68 , 
	dp_resetTau) (:pid_2 , run) }
																					
																						
	TRACE: { |;| (:pid_58 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_766 }) (:pid_68 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_688 }) }
																																										PC: (((z_169 + z_265 + z_293 + z_417) == t_116) && ((z_186 + z_198 + z_302 + z_318 + 
	z_338) == t_58) && ((z_198 + z_302 + z_318 + z_338 + z_454 + z_498) == t_171) && 
	((z_198 + z_302 + z_318 + z_338 + z_454 + z_498 + z_694) == 4) && ((z_293 + 
	z_417 + z_465 + z_517) == t_253) && ((z_293 + z_417 + z_465 + z_517 + z_569 + 
	z_609) == 4) && ((z_375 + z_379) == 4) && ((z_515 + z_559 + z_683 + z_747) == 8) 
	&& ((z_517 + z_569) == t_143) && ((z_649 + z_657 + z_709) == t_548) && ((z_730 + 
	z_766) == 8) && (z_136 == t_54) && (z_260 == t_215) && (z_375 == t_104) && (z_40 
	== t_4) && (z_515 == t_109) && (z_657 == t_241) && (z_683 == t_483) && (z_730 == 
	t_619) && ((z_145 + z_169 + z_265 + z_293 + z_417 + z_465) < t_40) && ((z_198 + 
	z_302 + z_318 + z_338 + z_454) < t_171) && ((z_517 + z_569 + z_609 + z_649) < 4) 
	&& (t_104 < 4) && (t_109 < 8) && (t_143 < 4) && (t_15 < 4) && (t_241 < 4) && 
	(t_27 < 4) && (t_279 < 8) && (t_4 < 4) && (t_40 < 4) && (t_58 < 4) && (t_8 < 4) 
	&& (t_116 < 4) && (t_171 < 4) && (t_215 < 4) && (t_253 < 4) && (t_279 < 4) && 
	(t_483 < 4) && (t_54 < 4) && (t_548 < 8) && (t_619 < 8) && (t_688 < 8) && (z_169 
	< t_116) && (z_198 < t_171) && (z_293 < t_253) && (z_318 < t_279) && (z_347 < 
	t_27) && (z_65 < t_8) && (z_86 < t_15) && (0 <= (t_104 + -2)) && (0 <= (t_109 + 
	-4)) && (0 <= (t_143 + -2)) && (0 <= (t_15 + -2)) && (0 <= (t_241 + -2)) && (0 
	<= (t_27 + -2)) && (0 <= (t_279 + -4)) && (0 <= (t_4 + -2)) && (0 <= (t_40 + -2))
	 && (0 <= (t_58 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_116 + -2)) && (0 <= 
	(t_171 + -2)) && (0 <= (t_215 + -2)) && (0 <= (t_253 + -2)) && (0 <= (t_279 + -2)
	) && (0 <= (t_483 + -2)) && (0 <= (t_54 + -2)) && (0 <= (t_548 + -4)) && (0 <= 
	(t_619 + -4)) && (0 <= (t_688 + -4)) && ((z_0 + z_100 + z_136 + z_224 + z_260 + 
	z_4 + z_40) <= (z_1 + z_145 + z_169 + z_265 + z_293 + z_65 + z_9)) && ((z_0 + 
	z_100 + z_136 + z_224 + z_260 + z_4 + z_40) <= (z_186 + z_198 + z_2 + z_22 + 
	z_302 + z_318 + z_86)) && ((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_1 + z_145 + 
	z_169 + z_65 + z_9)) && ((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_186 + z_198 + 
	z_2 + z_22 + z_86)) && ((z_0 + z_4 + z_40) <= (z_1 + z_65 + z_9)) && ((z_0 + z_4 
	+ z_40) <= (z_2 + z_22 + z_86)) && ((z_1 + z_145 + z_169 + z_265 + z_293 + z_417 
	+ z_65 + z_9) <= (z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_454 + 
	z_86)) && ((z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_86) <= (z_3 + 
	z_347 + z_39)) && ((z_3 + z_347 + z_375 + z_379 + z_39 + z_515) <= (z_1 + z_145 
	+ z_169 + z_265 + z_293 + z_417 + z_465 + z_517 + z_569 + z_609 + z_649 + z_65 + 
	z_9)) && ((z_3 + z_347 + z_375 + z_39) <= (z_1 + z_145 + z_169 + z_265 + z_293 + 
	z_417 + z_465 + z_65 + z_9)) && ((z_198 + z_302 + z_318 + z_338 + z_454 + z_498 
	+ z_694) > t_171) && ((z_293 + z_417 + z_465 + z_517 + z_569 + z_609) > t_253) 
	&& ((z_375 + z_379) > t_104) && ((z_515 + z_559 + z_683 + z_747) > t_109) && 
	((z_730 + z_766) > t_619) && (z_0 > 0) && (z_1 > 0) && (z_100 > 0) && (z_136 > 0)
	 && (z_145 > 0) && (z_169 > 0) && (z_186 > 0) && (z_198 > 0) && (z_2 > 0) && 
	(z_22 > 0) && (z_224 > 0) && (z_265 > 0) && (z_293 > 0) && (z_3 > 0) && (z_302 > 
	0) && (z_318 > 0) && (z_338 > 0) && (z_347 > 0) && (z_375 > 0) && (z_379 > 0) && 
	(z_39 > 0) && (z_4 > 0) && (z_40 > 0) && (z_417 > 0) && (z_454 > 0) && (z_465 > 
	0) && (z_498 > 0) && (z_515 > 0) && (z_517 > 0) && (z_559 > 0) && (z_569 > 0) && 
	(z_609 > 0) && (z_649 > 0) && (z_65 > 0) && (z_657 > 0) && (z_683 > 0) && (z_694 
	> 0) && (z_730 > 0) && (z_86 > 0) && (z_9 > 0))
																																										DATA{
																																											:pid_2:uncoveredExit = 14;
																																											:pid_58:localTime = (z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_454 + z_498 + z_694 + z_730 + z_766 + z_86);
																																											:pid_58:z = z_766;
																																											:pid_58:localTime = (z_186 + z_198 + z_22 + z_302 + z_318 + z_338 + z_454 + z_498 + z_694 + z_730 + z_766 + z_86);
																																											:pid_58:localPC = (((z_186 + z_198 + z_302 + z_318 + z_338) == t_58) && ((z_198 + z_302 + z_318 + z_338 + z_454 + z_498) == t_171) && ((z_198 + z_302 + z_318 + z_338 + z_454 + z_498 + z_694) == 4) && ((z_730 + z_766) == 8) && (z_730 == t_619) && ((z_198 + z_302 + z_318 + z_338 + z_454) < t_171) && (t_15 < 4) && (t_58 < 4) && (t_171 < 4) && (t_279 < 4) && (t_619 < 8) && (t_688 < 8) && (z_198 < t_171) && (z_318 < t_279) && (z_86 < t_15) && (0 <= (t_15 + -2)) && (0 <= (t_58 + -2)) && (0 <= (t_171 + -2)) && (0 <= (t_279 + -2)) && (0 <= (t_619 + -4)) && (0 <= (t_688 + -4)) && ((z_0 + z_100 + z_136 + z_224 + z_260 + z_4 + z_40) <= (z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_86)) && ((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_186 + z_198 + z_2 + z_22 + z_86)) && ((z_0 + z_4 + z_40) <= (z_2 + z_22 + z_86)) && ((z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_65 + z_9) <= (z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_454 + z_86)) && ((z_198 + z_302 + z_318 + z_338 + z_454 + z_498 + z_694) > t_171) && ((z_730 + z_766) > t_619) && (z_186 > 0) && (z_198 > 0) && (z_2 > 0) && (z_22 > 0) && (z_302 > 0) && (z_318 > 0) && (z_338 > 0) && (z_454 > 0) && (z_498 > 0) && (z_694 > 0) && (z_730 > 0) && (z_86 > 0));
																																											:pid_59:cl = (z_186 + z_198 + z_302 + z_318 + z_338 + z_454 + z_498 + z_694 + z_730 + z_766);
																																											:pid_65:e = 2;
																																											:pid_65:tau = 8;
																																											:pid_65:t = t_688;
																																											:pid_65:cl = 0;
																																											:pid_70:cl = (z_318 + z_338 + z_454 + z_498 + z_694 + z_730 + z_766);
																																										}
																																										EC:<Id:1797;Ev:200;H:42;W:1601>{ SC: ( pid_20:o#19 , ( pid_29:cp2 , pid_34:dp2 , pid_39:dp2 ) , ( pid_46:cp2 , pid_51:dp2 , pid_56:dp2 ) , ( pid_63:cp2 , pid_69:dp3 , pid_72:dp1 ) , ( pid_79:cp1 , pid_83:dp0 , pid_90:dp2 ) )
																					
																						
		EXE: { |;| (:pid_58 , run) (:pid_65 , run) (:pid_67 , run) (:pid_67 , 
	dp1_DATA_EXPIR) (:pid_2 , run) (:pid_19 , run) (:pid_19 , n3_out_Log) }
																					
																						
		TRACE: { |;| (:pid_58 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_782 }) (:pid_67 , ${ output#env inst::Trickle.Node.Log 2 
	${ + param::Trickle.Node.z_186 param::Trickle.Node.z_198 param::Trickle.Node.z_2 
	param::Trickle.Node.z_22 param::Trickle.Node.z_302 param::Trickle.Node.z_318 
	param::Trickle.Node.z_338 param::Trickle.Node.z_454 param::Trickle.Node.z_498 
	param::Trickle.Node.z_694 param::Trickle.Node.z_730 param::Trickle.Node.z_766 
	param::Trickle.Node.z_782 param::Trickle.Node.z_86 } } @ (z_186 + z_198 + z_2 + 
	z_22 + z_302 + z_318 + z_338 + z_454 + z_498 + z_694 + z_730 + z_766 + z_782 + 
	z_86)) }
																																											/*FLAGS{ COVERAGE-ELEMENT }*/
																																											INFO{
																																												<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#21->run::pid_20:Trickle.Observer.o#19->prot::Trickle.Observer.o#19" as trace="tpid#21->run::pid_20:Trickle.Observer.o#19->prot::Trickle.Observer.o#19">
																																											}
																																											PC: (((z_169 + z_265 + z_293 + z_417) == t_116) && ((z_186 + z_198 + z_302 + z_318 + 
	z_338) == t_58) && ((z_198 + z_302 + z_318 + z_338 + z_454 + z_498) == t_171) && 
	((z_198 + z_302 + z_318 + z_338 + z_454 + z_498 + z_694) == 4) && ((z_293 + 
	z_417 + z_465 + z_517) == t_253) && ((z_293 + z_417 + z_465 + z_517 + z_569 + 
	z_609) == 4) && ((z_375 + z_379) == 4) && ((z_515 + z_559 + z_683 + z_747) == 8) 
	&& ((z_517 + z_569) == t_143) && ((z_649 + z_657 + z_709) == t_548) && ((z_730 + 
	z_766) == 8) && (z_136 == t_54) && (z_260 == t_215) && (z_375 == t_104) && (z_40 
	== t_4) && (z_515 == t_109) && (z_657 == t_241) && (z_683 == t_483) && (z_730 == 
	t_619) && ((z_145 + z_169 + z_265 + z_293 + z_417 + z_465) < t_40) && ((z_198 + 
	z_302 + z_318 + z_338 + z_454) < t_171) && ((z_517 + z_569 + z_609 + z_649) < 4) 
	&& (t_104 < 4) && (t_109 < 8) && (t_143 < 4) && (t_15 < 4) && (t_241 < 4) && 
	(t_27 < 4) && (t_279 < 8) && (t_4 < 4) && (t_40 < 4) && (t_58 < 4) && (t_8 < 4) 
	&& (t_116 < 4) && (t_171 < 4) && (t_215 < 4) && (t_253 < 4) && (t_279 < 4) && 
	(t_483 < 4) && (t_54 < 4) && (t_548 < 8) && (t_619 < 8) && (t_688 < 8) && (z_169 
	< t_116) && (z_198 < t_171) && (z_293 < t_253) && (z_318 < t_279) && (z_347 < 
	t_27) && (z_65 < t_8) && (z_86 < t_15) && (0 <= (t_104 + -2)) && (0 <= (t_109 + 
	-4)) && (0 <= (t_143 + -2)) && (0 <= (t_15 + -2)) && (0 <= (t_241 + -2)) && (0 
	<= (t_27 + -2)) && (0 <= (t_279 + -4)) && (0 <= (t_4 + -2)) && (0 <= (t_40 + -2))
	 && (0 <= (t_58 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_116 + -2)) && (0 <= 
	(t_171 + -2)) && (0 <= (t_215 + -2)) && (0 <= (t_253 + -2)) && (0 <= (t_279 + -2)
	) && (0 <= (t_483 + -2)) && (0 <= (t_54 + -2)) && (0 <= (t_548 + -4)) && (0 <= 
	(t_619 + -4)) && (0 <= (t_688 + -4)) && ((z_0 + z_100 + z_136 + z_224 + z_260 + 
	z_4 + z_40) <= (z_1 + z_145 + z_169 + z_265 + z_293 + z_65 + z_9)) && ((z_0 + 
	z_100 + z_136 + z_224 + z_260 + z_4 + z_40) <= (z_186 + z_198 + z_2 + z_22 + 
	z_302 + z_318 + z_86)) && ((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_1 + z_145 + 
	z_169 + z_65 + z_9)) && ((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_186 + z_198 + 
	z_2 + z_22 + z_86)) && ((z_0 + z_4 + z_40) <= (z_1 + z_65 + z_9)) && ((z_0 + z_4 
	+ z_40) <= (z_2 + z_22 + z_86)) && ((z_1 + z_145 + z_169 + z_265 + z_293 + z_417 
	+ z_65 + z_9) <= (z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_454 + 
	z_86)) && ((z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_86) <= (z_3 + 
	z_347 + z_39)) && ((z_3 + z_347 + z_375 + z_379 + z_39 + z_515) <= (z_1 + z_145 
	+ z_169 + z_265 + z_293 + z_417 + z_465 + z_517 + z_569 + z_609 + z_649 + z_65 + 
	z_9)) && ((z_3 + z_347 + z_375 + z_39) <= (z_1 + z_145 + z_169 + z_265 + z_293 + 
	z_417 + z_465 + z_65 + z_9)) && ((z_198 + z_302 + z_318 + z_338 + z_454 + z_498 
	+ z_694) > t_171) && ((z_293 + z_417 + z_465 + z_517 + z_569 + z_609) > t_253) 
	&& ((z_375 + z_379) > t_104) && ((z_515 + z_559 + z_683 + z_747) > t_109) && 
	((z_730 + z_766) > t_619) && (z_0 > 0) && (z_1 > 0) && (z_100 > 0) && (z_136 > 0)
	 && (z_145 > 0) && (z_169 > 0) && (z_186 > 0) && (z_198 > 0) && (z_2 > 0) && 
	(z_22 > 0) && (z_224 > 0) && (z_265 > 0) && (z_293 > 0) && (z_3 > 0) && (z_302 > 
	0) && (z_318 > 0) && (z_338 > 0) && (z_347 > 0) && (z_375 > 0) && (z_379 > 0) && 
	(z_39 > 0) && (z_4 > 0) && (z_40 > 0) && (z_417 > 0) && (z_454 > 0) && (z_465 > 
	0) && (z_498 > 0) && (z_515 > 0) && (z_517 > 0) && (z_559 > 0) && (z_569 > 0) && 
	(z_609 > 0) && (z_649 > 0) && (z_65 > 0) && (z_657 > 0) && (z_683 > 0) && (z_694 
	> 0) && (z_730 > 0) && (z_766 > 0) && (z_86 > 0) && (z_9 > 0))
																																											DATA{
																																												:pid_2:uncoveredExit = 0;
																																												:pid_2:mess = TERMIN_DM1;
																																												:pid_58:localTime = (z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_454 + z_498 + z_694 + z_730 + z_766 + z_782 + z_86);
																																												:pid_58:z = z_782;
																																												:pid_58:localTime = (z_186 + z_198 + z_22 + z_302 + z_318 + z_338 + z_454 + z_498 + z_694 + z_730 + z_766 + z_782 + z_86);
																																												:pid_58:localPC = (((z_186 + z_198 + z_302 + z_318 + z_338) == t_58) && ((z_198 + z_302 + z_318 + z_338 + z_454 + z_498) == t_171) && ((z_198 + z_302 + z_318 + z_338 + z_454 + z_498 + z_694) == 4) && ((z_730 + z_766) == 8) && (z_730 == t_619) && ((z_198 + z_302 + z_318 + z_338 + z_454) < t_171) && (t_15 < 4) && (t_58 < 4) && (t_171 < 4) && (t_279 < 4) && (t_619 < 8) && (t_688 < 8) && (z_198 < t_171) && (z_318 < t_279) && (z_86 < t_15) && (0 <= (t_15 + -2)) && (0 <= (t_58 + -2)) && (0 <= (t_171 + -2)) && (0 <= (t_279 + -2)) && (0 <= (t_619 + -4)) && (0 <= (t_688 + -4)) && ((z_0 + z_100 + z_136 + z_224 + z_260 + z_4 + z_40) <= (z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_86)) && ((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_186 + z_198 + z_2 + z_22 + z_86)) && ((z_0 + z_4 + z_40) <= (z_2 + z_22 + z_86)) && ((z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_65 + z_9) <= (z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_454 + z_86)) && ((z_198 + z_302 + z_318 + z_338 + z_454 + z_498 + z_694) > t_171) && ((z_730 + z_766) > t_619) && (z_186 > 0) && (z_198 > 0) && (z_2 > 0) && (z_22 > 0) && (z_302 > 0) && (z_318 > 0) && (z_338 > 0) && (z_454 > 0) && (z_498 > 0) && (z_694 > 0) && (z_730 > 0) && (z_766 > 0) && (z_86 > 0));
																																												:pid_59:cl = (z_186 + z_198 + z_302 + z_318 + z_338 + z_454 + z_498 + z_694 + z_730 + z_766 + z_782);
																																												:pid_65:e = 2;
																																												:pid_65:cl = z_782;
																																												:pid_70:cl = (z_318 + z_338 + z_454 + z_498 + z_694 + z_730 + z_766 + z_782);
																																											}
																																											EC:<Id:1822;Ev:202;H:43;W:1622>{ SC: ( pid_20:o#19 , ( pid_29:cp2 , pid_34:dp2 , pid_39:dp2 ) , ( pid_46:cp2 , pid_51:dp2 , pid_56:dp2 ) , ( pid_63:cp2 , pid_69:dp3 , pid_72:dp1 ) , ( pid_79:cp1 , pid_84:dp1 , pid_90:dp2 ) )
																					
																						
			EXE: { |;| (:pid_75 , run) (:pid_82 , run) (:pid_83 , run) (:pid_83 , 
	dp_init) (:pid_2 , run) }
																					
																						
			TRACE: { |;| (:pid_75 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_799 }) (:pid_83 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_723 }) }
																																												PC: (((z_169 + z_265 + z_293 + z_417) == t_116) && ((z_186 + z_198 + z_302 + z_318 + 
	z_338) == t_58) && ((z_198 + z_302 + z_318 + z_338 + z_454 + z_498) == t_171) && 
	((z_198 + z_302 + z_318 + z_338 + z_454 + z_498 + z_694) == 4) && ((z_293 + 
	z_417 + z_465 + z_517) == t_253) && ((z_293 + z_417 + z_465 + z_517 + z_569 + 
	z_609) == 4) && ((z_375 + z_379) == 4) && ((z_515 + z_559 + z_683 + z_747) == 8) 
	&& ((z_517 + z_569) == t_143) && ((z_649 + z_657 + z_709) == t_548) && ((z_730 + 
	z_766) == 8) && (z_136 == t_54) && (z_260 == t_215) && (z_375 == t_104) && (z_40 
	== t_4) && (z_515 == t_109) && (z_657 == t_241) && (z_683 == t_483) && (z_730 == 
	t_619) && ((z_145 + z_169 + z_265 + z_293 + z_417 + z_465) < t_40) && ((z_198 + 
	z_302 + z_318 + z_338 + z_454) < t_171) && ((z_517 + z_569 + z_609 + z_649) < 4) 
	&& (t_104 < 4) && (t_109 < 8) && (t_143 < 4) && (t_15 < 4) && (t_241 < 4) && 
	(t_27 < 4) && (t_279 < 8) && (t_4 < 4) && (t_40 < 4) && (t_58 < 4) && (t_8 < 4) 
	&& (t_116 < 4) && (t_171 < 4) && (t_215 < 4) && (t_253 < 4) && (t_279 < 4) && 
	(t_483 < 4) && (t_54 < 4) && (t_548 < 8) && (t_619 < 8) && (t_688 < 8) && (t_723 
	< 4) && (z_169 < t_116) && (z_198 < t_171) && (z_293 < t_253) && (z_318 < t_279) 
	&& (z_347 < t_27) && (z_65 < t_8) && (z_86 < t_15) && (0 <= (t_104 + -2)) && (0 
	<= (t_109 + -4)) && (0 <= (t_143 + -2)) && (0 <= (t_15 + -2)) && (0 <= (t_241 + 
	-2)) && (0 <= (t_27 + -2)) && (0 <= (t_279 + -4)) && (0 <= (t_4 + -2)) && (0 <= 
	(t_40 + -2)) && (0 <= (t_58 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_116 + -2)) 
	&& (0 <= (t_171 + -2)) && (0 <= (t_215 + -2)) && (0 <= (t_253 + -2)) && (0 <= 
	(t_279 + -2)) && (0 <= (t_483 + -2)) && (0 <= (t_54 + -2)) && (0 <= (t_548 + -4))
	 && (0 <= (t_619 + -4)) && (0 <= (t_688 + -4)) && (0 <= (t_723 + -2)) && ((z_0 + 
	z_100 + z_136 + z_224 + z_260 + z_4 + z_40) <= (z_1 + z_145 + z_169 + z_265 + 
	z_293 + z_65 + z_9)) && ((z_0 + z_100 + z_136 + z_224 + z_260 + z_4 + z_40) <= 
	(z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_86)) && ((z_0 + z_100 + z_136 + 
	z_4 + z_40) <= (z_1 + z_145 + z_169 + z_65 + z_9)) && ((z_0 + z_100 + z_136 + 
	z_4 + z_40) <= (z_186 + z_198 + z_2 + z_22 + z_86)) && ((z_0 + z_4 + z_40) <= 
	(z_1 + z_65 + z_9)) && ((z_0 + z_4 + z_40) <= (z_2 + z_22 + z_86)) && ((z_1 + 
	z_145 + z_169 + z_265 + z_293 + z_417 + z_65 + z_9) <= (z_186 + z_198 + z_2 + 
	z_22 + z_302 + z_318 + z_338 + z_454 + z_86)) && ((z_186 + z_198 + z_2 + z_22 + 
	z_302 + z_318 + z_338 + z_86) <= (z_3 + z_347 + z_39)) && ((z_3 + z_347 + z_375 
	+ z_379 + z_39 + z_515) <= (z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_465 
	+ z_517 + z_569 + z_609 + z_649 + z_65 + z_9)) && ((z_3 + z_347 + z_375 + z_39) 
	<= (z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_465 + z_65 + z_9)) && 
	((z_198 + z_302 + z_318 + z_338 + z_454 + z_498 + z_694) > t_171) && ((z_293 + 
	z_417 + z_465 + z_517 + z_569 + z_609) > t_253) && ((z_375 + z_379) > t_104) && 
	((z_515 + z_559 + z_683 + z_747) > t_109) && ((z_730 + z_766) > t_619) && (z_0 > 
	0) && (z_1 > 0) && (z_100 > 0) && (z_136 > 0) && (z_145 > 0) && (z_169 > 0) && 
	(z_186 > 0) && (z_198 > 0) && (z_2 > 0) && (z_22 > 0) && (z_224 > 0) && (z_265 > 
	0) && (z_293 > 0) && (z_3 > 0) && (z_302 > 0) && (z_318 > 0) && (z_338 > 0) && 
	(z_347 > 0) && (z_375 > 0) && (z_379 > 0) && (z_39 > 0) && (z_4 > 0) && (z_40 > 
	0) && (z_417 > 0) && (z_454 > 0) && (z_465 > 0) && (z_498 > 0) && (z_515 > 0) && 
	(z_517 > 0) && (z_559 > 0) && (z_569 > 0) && (z_609 > 0) && (z_649 > 0) && (z_65 
	> 0) && (z_657 > 0) && (z_683 > 0) && (z_694 > 0) && (z_730 > 0) && (z_747 > 0) 
	&& (z_766 > 0) && (z_86 > 0) && (z_9 > 0))
																																												DATA{
																																													:pid_2:uncoveredExit = 1;
																																													:pid_75:localTime = (z_3 + z_347 + z_375 + z_379 + z_39 + z_515 + z_559 + z_683 + z_747 + z_799);
																																													:pid_75:z = z_799;
																																													:pid_75:localTime = (z_347 + z_375 + z_379 + z_39 + z_515 + z_559 + z_683 + z_747 + z_799);
																																													:pid_75:localPC = (((z_375 + z_379) == 4) && ((z_515 + z_559 + z_683 + z_747) == 8) && (z_375 == t_104) && (z_515 == t_109) && (z_683 == t_483) && (t_104 < 4) && (t_109 < 8) && (t_27 < 4) && (t_279 < 8) && (t_483 < 4) && (t_723 < 4) && (z_347 < t_27) && (0 <= (t_104 + -2)) && (0 <= (t_109 + -4)) && (0 <= (t_27 + -2)) && (0 <= (t_279 + -4)) && (0 <= (t_483 + -2)) && (0 <= (t_723 + -2)) && ((z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_86) <= (z_3 + z_347 + z_39)) && ((z_375 + z_379) > t_104) && ((z_515 + z_559 + z_683 + z_747) > t_109) && (z_3 > 0) && (z_347 > 0) && (z_375 > 0) && (z_379 > 0) && (z_39 > 0) && (z_515 > 0) && (z_559 > 0) && (z_683 > 0) && (z_747 > 0));
																																													:pid_76:cl = z_799;
																																													:pid_82:e = 0;
																																													:pid_82:tau = 4;
																																													:pid_82:tau_l = 4;
																																													:pid_82:tau_h = 8;
																																													:pid_82:k = 2;
																																													:pid_82:c = 0;
																																													:pid_82:t = t_723;
																																													:pid_82:cl = 0;
																																													:pid_87:cl = (z_683 + z_747 + z_799);
																																												}
																																												EC:<Id:1836;Ev:208;H:44;W:1634>{ SC: ( pid_20:o#19 , ( pid_29:cp2 , pid_34:dp2 , pid_39:dp2 ) , ( pid_46:cp2 , pid_51:dp2 , pid_56:dp2 ) , ( pid_63:cp2 , pid_69:dp3 , pid_72:dp1 ) , ( pid_79:cp1 , pid_85:dp2 , pid_90:dp2 ) )
																					
																						
				EXE: { |;| (:pid_75 , run) (:pid_82 , run) (:pid_84 , run) (:pid_84 
	, dp1_reach_k) (:pid_2 , run) }
																					
																						
				TRACE: (:pid_75 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_807 })
																																													/*FLAGS{ COVERAGE-ELEMENT }*/
																																													INFO{
																																														<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#22->Node.DataProcess1->dp1.dp1_reach_k" as trace="tpid#22->Node.DataProcess1->dp1.dp1_reach_k">
																																													}
																																													PC: (((z_169 + z_265 + z_293 + z_417) == t_116) && ((z_186 + z_198 + z_302 + z_318 + 
	z_338) == t_58) && ((z_198 + z_302 + z_318 + z_338 + z_454 + z_498) == t_171) && 
	((z_198 + z_302 + z_318 + z_338 + z_454 + z_498 + z_694) == 4) && ((z_293 + 
	z_417 + z_465 + z_517) == t_253) && ((z_293 + z_417 + z_465 + z_517 + z_569 + 
	z_609) == 4) && ((z_375 + z_379) == 4) && ((z_515 + z_559 + z_683 + z_747) == 8) 
	&& ((z_517 + z_569) == t_143) && ((z_649 + z_657 + z_709) == t_548) && ((z_730 + 
	z_766) == 8) && (z_136 == t_54) && (z_260 == t_215) && (z_375 == t_104) && (z_40 
	== t_4) && (z_515 == t_109) && (z_657 == t_241) && (z_683 == t_483) && (z_730 == 
	t_619) && (z_807 == t_723) && ((z_145 + z_169 + z_265 + z_293 + z_417 + z_465) < 
	t_40) && ((z_198 + z_302 + z_318 + z_338 + z_454) < t_171) && ((z_517 + z_569 + 
	z_609 + z_649) < 4) && (t_104 < 4) && (t_109 < 8) && (t_143 < 4) && (t_15 < 4) 
	&& (t_241 < 4) && (t_27 < 4) && (t_279 < 8) && (t_4 < 4) && (t_40 < 4) && (t_58 
	< 4) && (t_8 < 4) && (t_116 < 4) && (t_171 < 4) && (t_215 < 4) && (t_253 < 4) && 
	(t_279 < 4) && (t_483 < 4) && (t_54 < 4) && (t_548 < 8) && (t_619 < 8) && (t_688 
	< 8) && (t_723 < 4) && (z_169 < t_116) && (z_198 < t_171) && (z_293 < t_253) && 
	(z_318 < t_279) && (z_347 < t_27) && (z_65 < t_8) && (z_86 < t_15) && (0 <= 
	(t_104 + -2)) && (0 <= (t_109 + -4)) && (0 <= (t_143 + -2)) && (0 <= (t_15 + -2))
	 && (0 <= (t_241 + -2)) && (0 <= (t_27 + -2)) && (0 <= (t_279 + -4)) && (0 <= 
	(t_4 + -2)) && (0 <= (t_40 + -2)) && (0 <= (t_58 + -2)) && (0 <= (t_8 + -2)) && 
	(0 <= (t_116 + -2)) && (0 <= (t_171 + -2)) && (0 <= (t_215 + -2)) && (0 <= 
	(t_253 + -2)) && (0 <= (t_279 + -2)) && (0 <= (t_483 + -2)) && (0 <= (t_54 + -2))
	 && (0 <= (t_548 + -4)) && (0 <= (t_619 + -4)) && (0 <= (t_688 + -4)) && (0 <= 
	(t_723 + -2)) && ((z_0 + z_100 + z_136 + z_224 + z_260 + z_4 + z_40) <= (z_1 + 
	z_145 + z_169 + z_265 + z_293 + z_65 + z_9)) && ((z_0 + z_100 + z_136 + z_224 + 
	z_260 + z_4 + z_40) <= (z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_86)) && 
	((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_1 + z_145 + z_169 + z_65 + z_9)) && 
	((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_186 + z_198 + z_2 + z_22 + z_86)) && 
	((z_0 + z_4 + z_40) <= (z_1 + z_65 + z_9)) && ((z_0 + z_4 + z_40) <= (z_2 + z_22 
	+ z_86)) && ((z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_65 + z_9) <= 
	(z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_454 + z_86)) && ((z_186 
	+ z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_86) <= (z_3 + z_347 + z_39)) && 
	((z_3 + z_347 + z_375 + z_379 + z_39 + z_515) <= (z_1 + z_145 + z_169 + z_265 + 
	z_293 + z_417 + z_465 + z_517 + z_569 + z_609 + z_649 + z_65 + z_9)) && ((z_3 + 
	z_347 + z_375 + z_39) <= (z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_465 + 
	z_65 + z_9)) && ((z_198 + z_302 + z_318 + z_338 + z_454 + z_498 + z_694) > t_171)
	 && ((z_293 + z_417 + z_465 + z_517 + z_569 + z_609) > t_253) && ((z_375 + z_379)
	 > t_104) && ((z_515 + z_559 + z_683 + z_747) > t_109) && ((z_730 + z_766) > 
	t_619) && (z_0 > 0) && (z_1 > 0) && (z_100 > 0) && (z_136 > 0) && (z_145 > 0) && 
	(z_169 > 0) && (z_186 > 0) && (z_198 > 0) && (z_2 > 0) && (z_22 > 0) && (z_224 > 
	0) && (z_265 > 0) && (z_293 > 0) && (z_3 > 0) && (z_302 > 0) && (z_318 > 0) && 
	(z_338 > 0) && (z_347 > 0) && (z_375 > 0) && (z_379 > 0) && (z_39 > 0) && (z_4 > 
	0) && (z_40 > 0) && (z_417 > 0) && (z_454 > 0) && (z_465 > 0) && (z_498 > 0) && 
	(z_515 > 0) && (z_517 > 0) && (z_559 > 0) && (z_569 > 0) && (z_609 > 0) && 
	(z_649 > 0) && (z_65 > 0) && (z_657 > 0) && (z_683 > 0) && (z_694 > 0) && (z_730 
	> 0) && (z_747 > 0) && (z_766 > 0) && (z_799 > 0) && (z_86 > 0) && (z_9 > 0))
																																													DATA{
																																														:pid_2:uncoveredExit = 2;
																																														:pid_75:localTime = (z_3 + z_347 + z_375 + z_379 + z_39 + z_515 + z_559 + z_683 + z_747 + z_799 + z_807);
																																														:pid_75:z = z_807;
																																														:pid_75:localTime = (z_347 + z_375 + z_379 + z_39 + z_515 + z_559 + z_683 + z_747 + z_799 + z_807);
																																														:pid_75:localPC = (((z_375 + z_379) == 4) && ((z_515 + z_559 + z_683 + z_747) == 8) && (z_375 == t_104) && (z_515 == t_109) && (z_683 == t_483) && (z_807 == t_723) && (t_104 < 4) && (t_109 < 8) && (t_27 < 4) && (t_279 < 8) && (t_483 < 4) && (t_723 < 4) && (z_347 < t_27) && (0 <= (t_104 + -2)) && (0 <= (t_109 + -4)) && (0 <= (t_27 + -2)) && (0 <= (t_279 + -4)) && (0 <= (t_483 + -2)) && (0 <= (t_723 + -2)) && ((z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_86) <= (z_3 + z_347 + z_39)) && ((z_375 + z_379) > t_104) && ((z_515 + z_559 + z_683 + z_747) > t_109) && (z_3 > 0) && (z_347 > 0) && (z_375 > 0) && (z_379 > 0) && (z_39 > 0) && (z_515 > 0) && (z_559 > 0) && (z_683 > 0) && (z_747 > 0) && (z_799 > 0));
																																														:pid_76:cl = (z_799 + z_807);
																																														:pid_82:cl = z_807;
																																														:pid_87:cl = (z_683 + z_747 + z_799 + z_807);
																																													}
																																													EC:<Id:1876;Ev:209;H:45;W:1634>{ SC: ( pid_20:o#19 , ( pid_29:cp2 , pid_34:dp2 , pid_39:dp2 ) , ( pid_46:cp2 , pid_51:dp2 , pid_56:dp2 ) , ( pid_63:cp2 , pid_69:dp3 , pid_72:dp1 ) , ( pid_81:cp3 , pid_85:dp2 , pid_90:dp2 ) )
																					
																						
					EXE: { |;| (:pid_75 , run) (:pid_76 , run) (:pid_79 , run) 
	(:pid_79 , cp_CTRL_EXPIR) (:pid_2 , run) }
																					
																						
					TRACE: { |;| (:pid_75 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_831 }) (:pid_79 , ${ output#env inst::Trickle.Node.Log 1 
	${ + param::Trickle.Node.z_3 param::Trickle.Node.z_347 param::Trickle.Node.z_375 
	param::Trickle.Node.z_379 param::Trickle.Node.z_39 param::Trickle.Node.z_515 
	param::Trickle.Node.z_559 param::Trickle.Node.z_683 param::Trickle.Node.z_747 
	param::Trickle.Node.z_799 param::Trickle.Node.z_807 param::Trickle.Node.z_831 } }
	 @ (z_3 + z_347 + z_375 + z_379 + z_39 + z_515 + z_559 + z_683 + z_747 + z_799 + 
	z_807 + z_831)) }
																																														PC: (((z_169 + z_265 + z_293 + z_417) == t_116) && ((z_186 + z_198 + z_302 + z_318 + 
	z_338) == t_58) && ((z_198 + z_302 + z_318 + z_338 + z_454 + z_498) == t_171) && 
	((z_198 + z_302 + z_318 + z_338 + z_454 + z_498 + z_694) == 4) && ((z_293 + 
	z_417 + z_465 + z_517) == t_253) && ((z_293 + z_417 + z_465 + z_517 + z_569 + 
	z_609) == 4) && ((z_375 + z_379) == 4) && ((z_515 + z_559 + z_683 + z_747) == 8) 
	&& ((z_517 + z_569) == t_143) && ((z_649 + z_657 + z_709) == t_548) && ((z_730 + 
	z_766) == 8) && (z_136 == t_54) && (z_260 == t_215) && (z_375 == t_104) && (z_40 
	== t_4) && (z_515 == t_109) && (z_657 == t_241) && (z_683 == t_483) && (z_730 == 
	t_619) && (z_807 == t_723) && ((z_145 + z_169 + z_265 + z_293 + z_417 + z_465) < 
	t_40) && ((z_198 + z_302 + z_318 + z_338 + z_454) < t_171) && ((z_517 + z_569 + 
	z_609 + z_649) < 4) && (t_104 < 4) && (t_109 < 8) && (t_143 < 4) && (t_15 < 4) 
	&& (t_241 < 4) && (t_27 < 4) && (t_279 < 8) && (t_4 < 4) && (t_40 < 4) && (t_58 
	< 4) && (t_8 < 4) && (t_116 < 4) && (t_171 < 4) && (t_215 < 4) && (t_253 < 4) && 
	(t_279 < 4) && (t_483 < 4) && (t_54 < 4) && (t_548 < 8) && (t_619 < 8) && (t_688 
	< 8) && (t_723 < 4) && (z_169 < t_116) && (z_198 < t_171) && (z_293 < t_253) && 
	(z_318 < t_279) && (z_347 < t_27) && (z_65 < t_8) && (z_86 < t_15) && (0 <= 
	(t_104 + -2)) && (0 <= (t_109 + -4)) && (0 <= (t_143 + -2)) && (0 <= (t_15 + -2))
	 && (0 <= (t_241 + -2)) && (0 <= (t_27 + -2)) && (0 <= (t_279 + -4)) && (0 <= 
	(t_4 + -2)) && (0 <= (t_40 + -2)) && (0 <= (t_58 + -2)) && (0 <= (t_8 + -2)) && 
	(0 <= (t_116 + -2)) && (0 <= (t_171 + -2)) && (0 <= (t_215 + -2)) && (0 <= 
	(t_253 + -2)) && (0 <= (t_279 + -2)) && (0 <= (t_483 + -2)) && (0 <= (t_54 + -2))
	 && (0 <= (t_548 + -4)) && (0 <= (t_619 + -4)) && (0 <= (t_688 + -4)) && (0 <= 
	(t_723 + -2)) && ((z_0 + z_100 + z_136 + z_224 + z_260 + z_4 + z_40) <= (z_1 + 
	z_145 + z_169 + z_265 + z_293 + z_65 + z_9)) && ((z_0 + z_100 + z_136 + z_224 + 
	z_260 + z_4 + z_40) <= (z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_86)) && 
	((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_1 + z_145 + z_169 + z_65 + z_9)) && 
	((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_186 + z_198 + z_2 + z_22 + z_86)) && 
	((z_0 + z_4 + z_40) <= (z_1 + z_65 + z_9)) && ((z_0 + z_4 + z_40) <= (z_2 + z_22 
	+ z_86)) && ((z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_65 + z_9) <= 
	(z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_454 + z_86)) && ((z_186 
	+ z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_86) <= (z_3 + z_347 + z_39)) && 
	((z_3 + z_347 + z_375 + z_379 + z_39 + z_515) <= (z_1 + z_145 + z_169 + z_265 + 
	z_293 + z_417 + z_465 + z_517 + z_569 + z_609 + z_649 + z_65 + z_9)) && ((z_3 + 
	z_347 + z_375 + z_39) <= (z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_465 + 
	z_65 + z_9)) && ((z_198 + z_302 + z_318 + z_338 + z_454 + z_498 + z_694) > t_171)
	 && ((z_293 + z_417 + z_465 + z_517 + z_569 + z_609) > t_253) && ((z_375 + z_379)
	 > t_104) && ((z_515 + z_559 + z_683 + z_747) > t_109) && ((z_730 + z_766) > 
	t_619) && (z_0 > 0) && (z_1 > 0) && (z_100 > 0) && (z_136 > 0) && (z_145 > 0) && 
	(z_169 > 0) && (z_186 > 0) && (z_198 > 0) && (z_2 > 0) && (z_22 > 0) && (z_224 > 
	0) && (z_265 > 0) && (z_293 > 0) && (z_3 > 0) && (z_302 > 0) && (z_318 > 0) && 
	(z_338 > 0) && (z_347 > 0) && (z_375 > 0) && (z_379 > 0) && (z_39 > 0) && (z_4 > 
	0) && (z_40 > 0) && (z_417 > 0) && (z_454 > 0) && (z_465 > 0) && (z_498 > 0) && 
	(z_515 > 0) && (z_517 > 0) && (z_559 > 0) && (z_569 > 0) && (z_609 > 0) && 
	(z_649 > 0) && (z_65 > 0) && (z_657 > 0) && (z_683 > 0) && (z_694 > 0) && (z_730 
	> 0) && (z_747 > 0) && (z_766 > 0) && (z_799 > 0) && (z_807 > 0) && (z_86 > 0) 
	&& (z_9 > 0))
																																														DATA{
																																															:pid_2:uncoveredExit = 3;
																																															:pid_75:localTime = (z_3 + z_347 + z_375 + z_379 + z_39 + z_515 + z_559 + z_683 + z_747 + z_799 + z_807 + z_831);
																																															:pid_75:z = z_831;
																																															:pid_75:localTime = (z_347 + z_375 + z_379 + z_39 + z_515 + z_559 + z_683 + z_747 + z_799 + z_807 + z_831);
																																															:pid_75:localPC = (((z_375 + z_379) == 4) && ((z_515 + z_559 + z_683 + z_747) == 8) && (z_375 == t_104) && (z_515 == t_109) && (z_683 == t_483) && (z_807 == t_723) && (t_104 < 4) && (t_109 < 8) && (t_27 < 4) && (t_279 < 8) && (t_483 < 4) && (t_723 < 4) && (z_347 < t_27) && (0 <= (t_104 + -2)) && (0 <= (t_109 + -4)) && (0 <= (t_27 + -2)) && (0 <= (t_279 + -4)) && (0 <= (t_483 + -2)) && (0 <= (t_723 + -2)) && ((z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_86) <= (z_3 + z_347 + z_39)) && ((z_375 + z_379) > t_104) && ((z_515 + z_559 + z_683 + z_747) > t_109) && (z_3 > 0) && (z_347 > 0) && (z_375 > 0) && (z_379 > 0) && (z_39 > 0) && (z_515 > 0) && (z_559 > 0) && (z_683 > 0) && (z_747 > 0) && (z_799 > 0) && (z_807 > 0));
																																															:pid_76:e = 2;
																																															:pid_76:cl = (z_799 + z_807 + z_831);
																																															:pid_82:cl = (z_807 + z_831);
																																															:pid_87:cl = (z_683 + z_747 + z_799 + z_807 + z_831);
																																														}
																																														EC:<Id:1883;Ev:216;H:46;W:1634>{ SC: ( pid_20:o#19 , ( pid_29:cp2 , pid_34:dp2 , pid_39:dp2 ) , ( pid_46:cp2 , pid_51:dp2 , pid_56:dp2 ) , ( pid_63:cp2 , pid_69:dp3 , pid_72:dp1 ) , ( pid_81:cp3 , pid_84:dp1 , pid_90:dp2 ) )
																					
																						
						EXE: { |;| (:pid_75 , run) (:pid_82 , run) (:pid_85 , run) 
	(:pid_85 , dp_resetTau) (:pid_2 , run) }
																					
																						
						TRACE: { |;| (:pid_75 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_835 }) (:pid_85 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_754 }) }
																																															PC: (((z_169 + z_265 + z_293 + z_417) == t_116) && ((z_186 + z_198 + z_302 + z_318 + 
	z_338) == t_58) && ((z_198 + z_302 + z_318 + z_338 + z_454 + z_498) == t_171) && 
	((z_198 + z_302 + z_318 + z_338 + z_454 + z_498 + z_694) == 4) && ((z_293 + 
	z_417 + z_465 + z_517) == t_253) && ((z_293 + z_417 + z_465 + z_517 + z_569 + 
	z_609) == 4) && ((z_375 + z_379) == 4) && ((z_515 + z_559 + z_683 + z_747) == 8) 
	&& ((z_517 + z_569) == t_143) && ((z_649 + z_657 + z_709) == t_548) && ((z_730 + 
	z_766) == 8) && ((z_807 + z_831 + z_835) == 4) && (z_136 == t_54) && (z_260 == 
	t_215) && (z_375 == t_104) && (z_40 == t_4) && (z_515 == t_109) && (z_657 == 
	t_241) && (z_683 == t_483) && (z_730 == t_619) && (z_807 == t_723) && ((z_145 + 
	z_169 + z_265 + z_293 + z_417 + z_465) < t_40) && ((z_198 + z_302 + z_318 + 
	z_338 + z_454) < t_171) && ((z_517 + z_569 + z_609 + z_649) < 4) && (t_104 < 4) 
	&& (t_109 < 8) && (t_143 < 4) && (t_15 < 4) && (t_241 < 4) && (t_27 < 4) && 
	(t_279 < 8) && (t_4 < 4) && (t_40 < 4) && (t_58 < 4) && (t_8 < 4) && (t_116 < 4) 
	&& (t_171 < 4) && (t_215 < 4) && (t_253 < 4) && (t_279 < 4) && (t_483 < 4) && 
	(t_54 < 4) && (t_548 < 8) && (t_619 < 8) && (t_688 < 8) && (t_723 < 4) && (t_754 
	< 8) && (z_169 < t_116) && (z_198 < t_171) && (z_293 < t_253) && (z_318 < t_279) 
	&& (z_347 < t_27) && (z_65 < t_8) && (z_86 < t_15) && (0 <= (t_104 + -2)) && (0 
	<= (t_109 + -4)) && (0 <= (t_143 + -2)) && (0 <= (t_15 + -2)) && (0 <= (t_241 + 
	-2)) && (0 <= (t_27 + -2)) && (0 <= (t_279 + -4)) && (0 <= (t_4 + -2)) && (0 <= 
	(t_40 + -2)) && (0 <= (t_58 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_116 + -2)) 
	&& (0 <= (t_171 + -2)) && (0 <= (t_215 + -2)) && (0 <= (t_253 + -2)) && (0 <= 
	(t_279 + -2)) && (0 <= (t_483 + -2)) && (0 <= (t_54 + -2)) && (0 <= (t_548 + -4))
	 && (0 <= (t_619 + -4)) && (0 <= (t_688 + -4)) && (0 <= (t_723 + -2)) && (0 <= 
	(t_754 + -4)) && ((z_0 + z_100 + z_136 + z_224 + z_260 + z_4 + z_40) <= (z_1 + 
	z_145 + z_169 + z_265 + z_293 + z_65 + z_9)) && ((z_0 + z_100 + z_136 + z_224 + 
	z_260 + z_4 + z_40) <= (z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_86)) && 
	((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_1 + z_145 + z_169 + z_65 + z_9)) && 
	((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_186 + z_198 + z_2 + z_22 + z_86)) && 
	((z_0 + z_4 + z_40) <= (z_1 + z_65 + z_9)) && ((z_0 + z_4 + z_40) <= (z_2 + z_22 
	+ z_86)) && ((z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_65 + z_9) <= 
	(z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_454 + z_86)) && ((z_186 
	+ z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_86) <= (z_3 + z_347 + z_39)) && 
	((z_3 + z_347 + z_375 + z_379 + z_39 + z_515) <= (z_1 + z_145 + z_169 + z_265 + 
	z_293 + z_417 + z_465 + z_517 + z_569 + z_609 + z_649 + z_65 + z_9)) && ((z_3 + 
	z_347 + z_375 + z_39) <= (z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_465 + 
	z_65 + z_9)) && ((z_198 + z_302 + z_318 + z_338 + z_454 + z_498 + z_694) > t_171)
	 && ((z_293 + z_417 + z_465 + z_517 + z_569 + z_609) > t_253) && ((z_375 + z_379)
	 > t_104) && ((z_515 + z_559 + z_683 + z_747) > t_109) && ((z_730 + z_766) > 
	t_619) && ((z_807 + z_831 + z_835) > t_723) && (z_0 > 0) && (z_1 > 0) && (z_100 
	> 0) && (z_136 > 0) && (z_145 > 0) && (z_169 > 0) && (z_186 > 0) && (z_198 > 0) 
	&& (z_2 > 0) && (z_22 > 0) && (z_224 > 0) && (z_265 > 0) && (z_293 > 0) && (z_3 
	> 0) && (z_302 > 0) && (z_318 > 0) && (z_338 > 0) && (z_347 > 0) && (z_375 > 0) 
	&& (z_379 > 0) && (z_39 > 0) && (z_4 > 0) && (z_40 > 0) && (z_417 > 0) && (z_454 
	> 0) && (z_465 > 0) && (z_498 > 0) && (z_515 > 0) && (z_517 > 0) && (z_559 > 0) 
	&& (z_569 > 0) && (z_609 > 0) && (z_649 > 0) && (z_65 > 0) && (z_657 > 0) && 
	(z_683 > 0) && (z_694 > 0) && (z_730 > 0) && (z_747 > 0) && (z_766 > 0) && 
	(z_799 > 0) && (z_807 > 0) && (z_831 > 0) && (z_86 > 0) && (z_9 > 0))
																																															DATA{
																																																:pid_2:uncoveredExit = 4;
																																																:pid_75:localTime = (z_3 + z_347 + z_375 + z_379 + z_39 + z_515 + z_559 + z_683 + z_747 + z_799 + z_807 + z_831 + z_835);
																																																:pid_75:z = z_835;
																																																:pid_75:localTime = (z_347 + z_375 + z_379 + z_39 + z_515 + z_559 + z_683 + z_747 + z_799 + z_807 + z_831 + z_835);
																																																:pid_75:localPC = (((z_375 + z_379) == 4) && ((z_515 + z_559 + z_683 + z_747) == 8) && ((z_807 + z_831 + z_835) == 4) && (z_375 == t_104) && (z_515 == t_109) && (z_683 == t_483) && (z_807 == t_723) && (t_104 < 4) && (t_109 < 8) && (t_27 < 4) && (t_279 < 8) && (t_483 < 4) && (t_723 < 4) && (t_754 < 8) && (z_347 < t_27) && (0 <= (t_104 + -2)) && (0 <= (t_109 + -4)) && (0 <= (t_27 + -2)) && (0 <= (t_279 + -4)) && (0 <= (t_483 + -2)) && (0 <= (t_723 + -2)) && (0 <= (t_754 + -4)) && ((z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_86) <= (z_3 + z_347 + z_39)) && ((z_375 + z_379) > t_104) && ((z_515 + z_559 + z_683 + z_747) > t_109) && ((z_807 + z_831 + z_835) > t_723) && (z_3 > 0) && (z_347 > 0) && (z_375 > 0) && (z_379 > 0) && (z_39 > 0) && (z_515 > 0) && (z_559 > 0) && (z_683 > 0) && (z_747 > 0) && (z_799 > 0) && (z_807 > 0) && (z_831 > 0));
																																																:pid_82:e = 1;
																																																:pid_82:tau = 8;
																																																:pid_82:c = 0;
																																																:pid_82:t = t_754;
																																																:pid_82:cl = 0;
																																																:pid_87:cl = (z_683 + z_747 + z_799 + z_807 + z_831 + z_835);
																																															}
																																															EC:<Id:1930;Ev:218;H:47;W:1714>{ SC: ( pid_20:o#19 , ( pid_29:cp2 , pid_34:dp2 , pid_39:dp2 ) , ( pid_46:cp2 , pid_51:dp2 , pid_56:dp2 ) , ( pid_63:cp2 , pid_69:dp3 , pid_72:dp1 ) , ( pid_81:cp3 , pid_85:dp2 , pid_90:dp2 ) )
																					
																						
							EXE: { |;| (:pid_75 , run) (:pid_82 , run) (:pid_84 , 
	run) (:pid_84 , dp1_reach_k) (:pid_2 , run) }
																					
																						
							TRACE: (:pid_75 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_863 })
																																																PC: (((z_169 + z_265 + z_293 + z_417) == t_116) && ((z_186 + z_198 + z_302 + z_318 + 
	z_338) == t_58) && ((z_198 + z_302 + z_318 + z_338 + z_454 + z_498) == t_171) && 
	((z_198 + z_302 + z_318 + z_338 + z_454 + z_498 + z_694) == 4) && ((z_293 + 
	z_417 + z_465 + z_517) == t_253) && ((z_293 + z_417 + z_465 + z_517 + z_569 + 
	z_609) == 4) && ((z_375 + z_379) == 4) && ((z_515 + z_559 + z_683 + z_747) == 8) 
	&& ((z_517 + z_569) == t_143) && ((z_649 + z_657 + z_709) == t_548) && ((z_730 + 
	z_766) == 8) && ((z_807 + z_831 + z_835) == 4) && (z_136 == t_54) && (z_260 == 
	t_215) && (z_375 == t_104) && (z_40 == t_4) && (z_515 == t_109) && (z_657 == 
	t_241) && (z_683 == t_483) && (z_730 == t_619) && (z_807 == t_723) && (z_863 == 
	t_754) && ((z_145 + z_169 + z_265 + z_293 + z_417 + z_465) < t_40) && ((z_198 + 
	z_302 + z_318 + z_338 + z_454) < t_171) && ((z_517 + z_569 + z_609 + z_649) < 4) 
	&& (t_104 < 4) && (t_109 < 8) && (t_143 < 4) && (t_15 < 4) && (t_241 < 4) && 
	(t_27 < 4) && (t_279 < 8) && (t_4 < 4) && (t_40 < 4) && (t_58 < 4) && (t_8 < 4) 
	&& (t_116 < 4) && (t_171 < 4) && (t_215 < 4) && (t_253 < 4) && (t_279 < 4) && 
	(t_483 < 4) && (t_54 < 4) && (t_548 < 8) && (t_619 < 8) && (t_688 < 8) && (t_723 
	< 4) && (t_754 < 8) && (z_169 < t_116) && (z_198 < t_171) && (z_293 < t_253) && 
	(z_318 < t_279) && (z_347 < t_27) && (z_65 < t_8) && (z_86 < t_15) && (0 <= 
	(t_104 + -2)) && (0 <= (t_109 + -4)) && (0 <= (t_143 + -2)) && (0 <= (t_15 + -2))
	 && (0 <= (t_241 + -2)) && (0 <= (t_27 + -2)) && (0 <= (t_279 + -4)) && (0 <= 
	(t_4 + -2)) && (0 <= (t_40 + -2)) && (0 <= (t_58 + -2)) && (0 <= (t_8 + -2)) && 
	(0 <= (t_116 + -2)) && (0 <= (t_171 + -2)) && (0 <= (t_215 + -2)) && (0 <= 
	(t_253 + -2)) && (0 <= (t_279 + -2)) && (0 <= (t_483 + -2)) && (0 <= (t_54 + -2))
	 && (0 <= (t_548 + -4)) && (0 <= (t_619 + -4)) && (0 <= (t_688 + -4)) && (0 <= 
	(t_723 + -2)) && (0 <= (t_754 + -4)) && ((z_0 + z_100 + z_136 + z_224 + z_260 + 
	z_4 + z_40) <= (z_1 + z_145 + z_169 + z_265 + z_293 + z_65 + z_9)) && ((z_0 + 
	z_100 + z_136 + z_224 + z_260 + z_4 + z_40) <= (z_186 + z_198 + z_2 + z_22 + 
	z_302 + z_318 + z_86)) && ((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_1 + z_145 + 
	z_169 + z_65 + z_9)) && ((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_186 + z_198 + 
	z_2 + z_22 + z_86)) && ((z_0 + z_4 + z_40) <= (z_1 + z_65 + z_9)) && ((z_0 + z_4 
	+ z_40) <= (z_2 + z_22 + z_86)) && ((z_1 + z_145 + z_169 + z_265 + z_293 + z_417 
	+ z_65 + z_9) <= (z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_454 + 
	z_86)) && ((z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_86) <= (z_3 + 
	z_347 + z_39)) && ((z_3 + z_347 + z_375 + z_379 + z_39 + z_515) <= (z_1 + z_145 
	+ z_169 + z_265 + z_293 + z_417 + z_465 + z_517 + z_569 + z_609 + z_649 + z_65 + 
	z_9)) && ((z_3 + z_347 + z_375 + z_39) <= (z_1 + z_145 + z_169 + z_265 + z_293 + 
	z_417 + z_465 + z_65 + z_9)) && ((z_198 + z_302 + z_318 + z_338 + z_454 + z_498 
	+ z_694) > t_171) && ((z_293 + z_417 + z_465 + z_517 + z_569 + z_609) > t_253) 
	&& ((z_375 + z_379) > t_104) && ((z_515 + z_559 + z_683 + z_747) > t_109) && 
	((z_730 + z_766) > t_619) && ((z_807 + z_831 + z_835) > t_723) && (z_0 > 0) && 
	(z_1 > 0) && (z_100 > 0) && (z_136 > 0) && (z_145 > 0) && (z_169 > 0) && (z_186 
	> 0) && (z_198 > 0) && (z_2 > 0) && (z_22 > 0) && (z_224 > 0) && (z_265 > 0) && 
	(z_293 > 0) && (z_3 > 0) && (z_302 > 0) && (z_318 > 0) && (z_338 > 0) && (z_347 
	> 0) && (z_375 > 0) && (z_379 > 0) && (z_39 > 0) && (z_4 > 0) && (z_40 > 0) && 
	(z_417 > 0) && (z_454 > 0) && (z_465 > 0) && (z_498 > 0) && (z_515 > 0) && 
	(z_517 > 0) && (z_559 > 0) && (z_569 > 0) && (z_609 > 0) && (z_649 > 0) && (z_65 
	> 0) && (z_657 > 0) && (z_683 > 0) && (z_694 > 0) && (z_730 > 0) && (z_747 > 0) 
	&& (z_766 > 0) && (z_799 > 0) && (z_807 > 0) && (z_831 > 0) && (z_835 > 0) && 
	(z_86 > 0) && (z_9 > 0))
																																																DATA{
																																																	:pid_2:uncoveredExit = 5;
																																																	:pid_75:localTime = (z_3 + z_347 + z_375 + z_379 + z_39 + z_515 + z_559 + z_683 + z_747 + z_799 + z_807 + z_831 + z_835 + z_863);
																																																	:pid_75:z = z_863;
																																																	:pid_75:localTime = (z_347 + z_375 + z_379 + z_39 + z_515 + z_559 + z_683 + z_747 + z_799 + z_807 + z_831 + z_835 + z_863);
																																																	:pid_75:localPC = (((z_375 + z_379) == 4) && ((z_515 + z_559 + z_683 + z_747) == 8) && ((z_807 + z_831 + z_835) == 4) && (z_375 == t_104) && (z_515 == t_109) && (z_683 == t_483) && (z_807 == t_723) && (z_863 == t_754) && (t_104 < 4) && (t_109 < 8) && (t_27 < 4) && (t_279 < 8) && (t_483 < 4) && (t_723 < 4) && (t_754 < 8) && (z_347 < t_27) && (0 <= (t_104 + -2)) && (0 <= (t_109 + -4)) && (0 <= (t_27 + -2)) && (0 <= (t_279 + -4)) && (0 <= (t_483 + -2)) && (0 <= (t_723 + -2)) && (0 <= (t_754 + -4)) && ((z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_86) <= (z_3 + z_347 + z_39)) && ((z_375 + z_379) > t_104) && ((z_515 + z_559 + z_683 + z_747) > t_109) && ((z_807 + z_831 + z_835) > t_723) && (z_3 > 0) && (z_347 > 0) && (z_375 > 0) && (z_379 > 0) && (z_39 > 0) && (z_515 > 0) && (z_559 > 0) && (z_683 > 0) && (z_747 > 0) && (z_799 > 0) && (z_807 > 0) && (z_831 > 0) && (z_835 > 0));
																																																	:pid_82:cl = z_863;
																																																	:pid_87:cl = (z_683 + z_747 + z_799 + z_807 + z_831 + z_835 + z_863);
																																																}
																																																EC:<Id:1943;Ev:223;H:48;W:1725>{ SC: ( pid_20:o#19 , ( pid_29:cp2 , pid_34:dp2 , pid_39:dp2 ) , ( pid_45:cp1 , pid_51:dp2 , pid_56:dp2 ) , ( pid_63:cp2 , pid_69:dp3 , pid_72:dp1 ) , ( pid_81:cp3 , pid_85:dp2 , pid_90:dp2 ) )
																					
																						
								EXE: { |;| (:pid_41 , run) (:pid_42 , run) (:pid_46 
	, run) (:pid_46 , cp_resetTau) (:pid_2 , run) }
																					
																						
								TRACE: { |;| (:pid_41 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_869 }) (:pid_46 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_306 }) }
																																																	PC: (((z_169 + z_265 + z_293 + z_417) == t_116) && ((z_186 + z_198 + z_302 + z_318 + 
	z_338) == t_58) && ((z_198 + z_302 + z_318 + z_338 + z_454 + z_498) == t_171) && 
	((z_198 + z_302 + z_318 + z_338 + z_454 + z_498 + z_694) == 4) && ((z_293 + 
	z_417 + z_465 + z_517) == t_253) && ((z_293 + z_417 + z_465 + z_517 + z_569 + 
	z_609) == 4) && ((z_375 + z_379) == 4) && ((z_515 + z_559 + z_683 + z_747) == 8) 
	&& ((z_517 + z_569) == t_143) && ((z_649 + z_657 + z_709) == t_548) && ((z_657 + 
	z_709 + z_869) == 4) && ((z_730 + z_766) == 8) && ((z_807 + z_831 + z_835) == 4) 
	&& (z_136 == t_54) && (z_260 == t_215) && (z_375 == t_104) && (z_40 == t_4) && 
	(z_515 == t_109) && (z_657 == t_241) && (z_683 == t_483) && (z_730 == t_619) && 
	(z_807 == t_723) && (z_863 == t_754) && ((z_145 + z_169 + z_265 + z_293 + z_417 
	+ z_465) < t_40) && ((z_198 + z_302 + z_318 + z_338 + z_454) < t_171) && ((z_517 
	+ z_569 + z_609 + z_649) < 4) && (t_104 < 4) && (t_109 < 8) && (t_143 < 4) && 
	(t_15 < 4) && (t_241 < 4) && (t_27 < 4) && (t_279 < 8) && (t_306 < 8) && (t_4 < 
	4) && (t_40 < 4) && (t_58 < 4) && (t_8 < 4) && (t_116 < 4) && (t_171 < 4) && 
	(t_215 < 4) && (t_253 < 4) && (t_279 < 4) && (t_483 < 4) && (t_54 < 4) && (t_548 
	< 8) && (t_619 < 8) && (t_688 < 8) && (t_723 < 4) && (t_754 < 8) && (z_169 < 
	t_116) && (z_198 < t_171) && (z_293 < t_253) && (z_318 < t_279) && (z_347 < t_27)
	 && (z_65 < t_8) && (z_86 < t_15) && (0 <= (t_104 + -2)) && (0 <= (t_109 + -4)) 
	&& (0 <= (t_143 + -2)) && (0 <= (t_15 + -2)) && (0 <= (t_241 + -2)) && (0 <= 
	(t_27 + -2)) && (0 <= (t_279 + -4)) && (0 <= (t_306 + -4)) && (0 <= (t_4 + -2)) 
	&& (0 <= (t_40 + -2)) && (0 <= (t_58 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_116 
	+ -2)) && (0 <= (t_171 + -2)) && (0 <= (t_215 + -2)) && (0 <= (t_253 + -2)) && 
	(0 <= (t_279 + -2)) && (0 <= (t_483 + -2)) && (0 <= (t_54 + -2)) && (0 <= (t_548 
	+ -4)) && (0 <= (t_619 + -4)) && (0 <= (t_688 + -4)) && (0 <= (t_723 + -2)) && 
	(0 <= (t_754 + -4)) && ((z_0 + z_100 + z_136 + z_224 + z_260 + z_4 + z_40) <= 
	(z_1 + z_145 + z_169 + z_265 + z_293 + z_65 + z_9)) && ((z_0 + z_100 + z_136 + 
	z_224 + z_260 + z_4 + z_40) <= (z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + 
	z_86)) && ((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_1 + z_145 + z_169 + z_65 + 
	z_9)) && ((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_186 + z_198 + z_2 + z_22 + 
	z_86)) && ((z_0 + z_4 + z_40) <= (z_1 + z_65 + z_9)) && ((z_0 + z_4 + z_40) <= 
	(z_2 + z_22 + z_86)) && ((z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_65 + 
	z_9) <= (z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_454 + z_86)) && 
	((z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_86) <= (z_3 + z_347 + 
	z_39)) && ((z_3 + z_347 + z_375 + z_379 + z_39 + z_515) <= (z_1 + z_145 + z_169 
	+ z_265 + z_293 + z_417 + z_465 + z_517 + z_569 + z_609 + z_649 + z_65 + z_9)) 
	&& ((z_3 + z_347 + z_375 + z_39) <= (z_1 + z_145 + z_169 + z_265 + z_293 + z_417 
	+ z_465 + z_65 + z_9)) && ((z_198 + z_302 + z_318 + z_338 + z_454 + z_498 + 
	z_694) > t_171) && ((z_293 + z_417 + z_465 + z_517 + z_569 + z_609) > t_253) && 
	((z_375 + z_379) > t_104) && ((z_515 + z_559 + z_683 + z_747) > t_109) && 
	((z_657 + z_709 + z_869) > t_241) && ((z_730 + z_766) > t_619) && ((z_807 + 
	z_831 + z_835) > t_723) && (z_0 > 0) && (z_1 > 0) && (z_100 > 0) && (z_136 > 0) 
	&& (z_145 > 0) && (z_169 > 0) && (z_186 > 0) && (z_198 > 0) && (z_2 > 0) && 
	(z_22 > 0) && (z_224 > 0) && (z_265 > 0) && (z_293 > 0) && (z_3 > 0) && (z_302 > 
	0) && (z_318 > 0) && (z_338 > 0) && (z_347 > 0) && (z_375 > 0) && (z_379 > 0) && 
	(z_39 > 0) && (z_4 > 0) && (z_40 > 0) && (z_417 > 0) && (z_454 > 0) && (z_465 > 
	0) && (z_498 > 0) && (z_515 > 0) && (z_517 > 0) && (z_559 > 0) && (z_569 > 0) && 
	(z_609 > 0) && (z_649 > 0) && (z_65 > 0) && (z_657 > 0) && (z_683 > 0) && (z_694 
	> 0) && (z_709 > 0) && (z_730 > 0) && (z_747 > 0) && (z_766 > 0) && (z_799 > 0) 
	&& (z_807 > 0) && (z_831 > 0) && (z_835 > 0) && (z_86 > 0) && (z_9 > 0))
																																																	DATA{
																																																		:pid_2:uncoveredExit = 6;
																																																		:pid_41:localTime = (z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_465 + z_517 + z_569 + z_609 + z_649 + z_65 + z_657 + z_709 + z_869 + z_9);
																																																		:pid_41:z = z_869;
																																																		:pid_41:localTime = (z_145 + z_169 + z_265 + z_293 + z_417 + z_465 + z_517 + z_569 + z_609 + z_649 + z_65 + z_657 + z_709 + z_869 + z_9);
																																																		:pid_41:localPC = (((z_169 + z_265 + z_293 + z_417) == t_116) && ((z_293 + z_417 + z_465 + z_517) == t_253) && ((z_293 + z_417 + z_465 + z_517 + z_569 + z_609) == 4) && ((z_517 + z_569) == t_143) && ((z_649 + z_657 + z_709) == t_548) && ((z_657 + z_709 + z_869) == 4) && (z_657 == t_241) && ((z_145 + z_169 + z_265 + z_293 + z_417 + z_465) < t_40) && ((z_517 + z_569 + z_609 + z_649) < 4) && (t_143 < 4) && (t_241 < 4) && (t_306 < 8) && (t_40 < 4) && (t_8 < 4) && (t_116 < 4) && (t_253 < 4) && (t_548 < 8) && (z_169 < t_116) && (z_293 < t_253) && (z_65 < t_8) && (0 <= (t_143 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_306 + -4)) && (0 <= (t_40 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_116 + -2)) && (0 <= (t_253 + -2)) && (0 <= (t_548 + -4)) && ((z_0 + z_100 + z_136 + z_224 + z_260 + z_4 + z_40) <= (z_1 + z_145 + z_169 + z_265 + z_293 + z_65 + z_9)) && ((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_1 + z_145 + z_169 + z_65 + z_9)) && ((z_0 + z_4 + z_40) <= (z_1 + z_65 + z_9)) && ((z_3 + z_347 + z_375 + z_379 + z_39 + z_515) <= (z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_465 + z_517 + z_569 + z_609 + z_649 + z_65 + z_9)) && ((z_3 + z_347 + z_375 + z_39) <= (z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_465 + z_65 + z_9)) && ((z_293 + z_417 + z_465 + z_517 + z_569 + z_609) > t_253) && ((z_657 + z_709 + z_869) > t_241) && (z_1 > 0) && (z_145 > 0) && (z_169 > 0) && (z_265 > 0) && (z_293 > 0) && (z_417 > 0) && (z_465 > 0) && (z_517 > 0) && (z_569 > 0) && (z_609 > 0) && (z_649 > 0) && (z_65 > 0) && (z_657 > 0) && (z_709 > 0) && (z_9 > 0));
																																																		:pid_42:e = 1;
																																																		:pid_42:tau = 8;
																																																		:pid_42:c = 0;
																																																		:pid_42:t = t_306;
																																																		:pid_42:cl = 0;
																																																		:pid_48:cl = (z_169 + z_265 + z_293 + z_417 + z_465 + z_517 + z_569 + z_609 + z_649 + z_657 + z_709 + z_869);
																																																		:pid_53:cl = (z_649 + z_657 + z_709 + z_869);
																																																	}
																																																	EC:<Id:1969;Ev:224;H:49;W:1725>{ SC: ( pid_20:o#19 , ( pid_29:cp2 , pid_34:dp2 , pid_39:dp2 ) , ( pid_45:cp1 , pid_51:dp2 , pid_56:dp2 ) , ( pid_63:cp2 , pid_69:dp3 , pid_72:dp1 ) , ( pid_81:cp3 , pid_84:dp1 , pid_90:dp2 ) )
																					
																						
									EXE: { |;| (:pid_75 , run) (:pid_82 , run) 
	(:pid_85 , run) (:pid_85 , dp_resetTau) (:pid_2 , run) }
																					
																						
									TRACE: { |;| (:pid_75 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_891 }) (:pid_85 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_785 }) }
																																																		PC: (((z_169 + z_265 + z_293 + z_417) == t_116) && ((z_186 + z_198 + z_302 + z_318 + 
	z_338) == t_58) && ((z_198 + z_302 + z_318 + z_338 + z_454 + z_498) == t_171) && 
	((z_198 + z_302 + z_318 + z_338 + z_454 + z_498 + z_694) == 4) && ((z_293 + 
	z_417 + z_465 + z_517) == t_253) && ((z_293 + z_417 + z_465 + z_517 + z_569 + 
	z_609) == 4) && ((z_375 + z_379) == 4) && ((z_515 + z_559 + z_683 + z_747) == 8) 
	&& ((z_517 + z_569) == t_143) && ((z_649 + z_657 + z_709) == t_548) && ((z_657 + 
	z_709 + z_869) == 4) && ((z_730 + z_766) == 8) && ((z_807 + z_831 + z_835) == 4) 
	&& ((z_863 + z_891) == 8) && (z_136 == t_54) && (z_260 == t_215) && (z_375 == 
	t_104) && (z_40 == t_4) && (z_515 == t_109) && (z_657 == t_241) && (z_683 == 
	t_483) && (z_730 == t_619) && (z_807 == t_723) && (z_863 == t_754) && ((z_145 + 
	z_169 + z_265 + z_293 + z_417 + z_465) < t_40) && ((z_198 + z_302 + z_318 + 
	z_338 + z_454) < t_171) && ((z_517 + z_569 + z_609 + z_649) < 4) && (t_104 < 4) 
	&& (t_109 < 8) && (t_143 < 4) && (t_15 < 4) && (t_241 < 4) && (t_27 < 4) && 
	(t_279 < 8) && (t_306 < 8) && (t_4 < 4) && (t_40 < 4) && (t_58 < 4) && (t_8 < 4) 
	&& (t_116 < 4) && (t_171 < 4) && (t_215 < 4) && (t_253 < 4) && (t_279 < 4) && 
	(t_483 < 4) && (t_54 < 4) && (t_548 < 8) && (t_619 < 8) && (t_688 < 8) && (t_723 
	< 4) && (t_754 < 8) && (t_785 < 8) && (z_169 < t_116) && (z_198 < t_171) && 
	(z_293 < t_253) && (z_318 < t_279) && (z_347 < t_27) && (z_65 < t_8) && (z_86 < 
	t_15) && (0 <= (t_104 + -2)) && (0 <= (t_109 + -4)) && (0 <= (t_143 + -2)) && (0 
	<= (t_15 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_27 + -2)) && (0 <= (t_279 + 
	-4)) && (0 <= (t_306 + -4)) && (0 <= (t_4 + -2)) && (0 <= (t_40 + -2)) && (0 <= 
	(t_58 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_116 + -2)) && (0 <= (t_171 + -2)) 
	&& (0 <= (t_215 + -2)) && (0 <= (t_253 + -2)) && (0 <= (t_279 + -2)) && (0 <= 
	(t_483 + -2)) && (0 <= (t_54 + -2)) && (0 <= (t_548 + -4)) && (0 <= (t_619 + -4))
	 && (0 <= (t_688 + -4)) && (0 <= (t_723 + -2)) && (0 <= (t_754 + -4)) && (0 <= 
	(t_785 + -4)) && ((z_0 + z_100 + z_136 + z_224 + z_260 + z_4 + z_40) <= (z_1 + 
	z_145 + z_169 + z_265 + z_293 + z_65 + z_9)) && ((z_0 + z_100 + z_136 + z_224 + 
	z_260 + z_4 + z_40) <= (z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_86)) && 
	((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_1 + z_145 + z_169 + z_65 + z_9)) && 
	((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_186 + z_198 + z_2 + z_22 + z_86)) && 
	((z_0 + z_4 + z_40) <= (z_1 + z_65 + z_9)) && ((z_0 + z_4 + z_40) <= (z_2 + z_22 
	+ z_86)) && ((z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_65 + z_9) <= 
	(z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_454 + z_86)) && ((z_186 
	+ z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_86) <= (z_3 + z_347 + z_39)) && 
	((z_3 + z_347 + z_375 + z_379 + z_39 + z_515) <= (z_1 + z_145 + z_169 + z_265 + 
	z_293 + z_417 + z_465 + z_517 + z_569 + z_609 + z_649 + z_65 + z_9)) && ((z_3 + 
	z_347 + z_375 + z_39) <= (z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_465 + 
	z_65 + z_9)) && ((z_198 + z_302 + z_318 + z_338 + z_454 + z_498 + z_694) > t_171)
	 && ((z_293 + z_417 + z_465 + z_517 + z_569 + z_609) > t_253) && ((z_375 + z_379)
	 > t_104) && ((z_515 + z_559 + z_683 + z_747) > t_109) && ((z_657 + z_709 + 
	z_869) > t_241) && ((z_730 + z_766) > t_619) && ((z_807 + z_831 + z_835) > t_723)
	 && ((z_863 + z_891) > t_754) && (z_0 > 0) && (z_1 > 0) && (z_100 > 0) && (z_136 
	> 0) && (z_145 > 0) && (z_169 > 0) && (z_186 > 0) && (z_198 > 0) && (z_2 > 0) && 
	(z_22 > 0) && (z_224 > 0) && (z_265 > 0) && (z_293 > 0) && (z_3 > 0) && (z_302 > 
	0) && (z_318 > 0) && (z_338 > 0) && (z_347 > 0) && (z_375 > 0) && (z_379 > 0) && 
	(z_39 > 0) && (z_4 > 0) && (z_40 > 0) && (z_417 > 0) && (z_454 > 0) && (z_465 > 
	0) && (z_498 > 0) && (z_515 > 0) && (z_517 > 0) && (z_559 > 0) && (z_569 > 0) && 
	(z_609 > 0) && (z_649 > 0) && (z_65 > 0) && (z_657 > 0) && (z_683 > 0) && (z_694 
	> 0) && (z_709 > 0) && (z_730 > 0) && (z_747 > 0) && (z_766 > 0) && (z_799 > 0) 
	&& (z_807 > 0) && (z_831 > 0) && (z_835 > 0) && (z_86 > 0) && (z_863 > 0) && 
	(z_9 > 0))
																																																		DATA{
																																																			:pid_2:uncoveredExit = 7;
																																																			:pid_75:localTime = (z_3 + z_347 + z_375 + z_379 + z_39 + z_515 + z_559 + z_683 + z_747 + z_799 + z_807 + z_831 + z_835 + z_863 + z_891);
																																																			:pid_75:z = z_891;
																																																			:pid_75:localTime = (z_347 + z_375 + z_379 + z_39 + z_515 + z_559 + z_683 + z_747 + z_799 + z_807 + z_831 + z_835 + z_863 + z_891);
																																																			:pid_75:localPC = (((z_375 + z_379) == 4) && ((z_515 + z_559 + z_683 + z_747) == 8) && ((z_807 + z_831 + z_835) == 4) && ((z_863 + z_891) == 8) && (z_375 == t_104) && (z_515 == t_109) && (z_683 == t_483) && (z_807 == t_723) && (z_863 == t_754) && (t_104 < 4) && (t_109 < 8) && (t_27 < 4) && (t_279 < 8) && (t_483 < 4) && (t_723 < 4) && (t_754 < 8) && (t_785 < 8) && (z_347 < t_27) && (0 <= (t_104 + -2)) && (0 <= (t_109 + -4)) && (0 <= (t_27 + -2)) && (0 <= (t_279 + -4)) && (0 <= (t_483 + -2)) && (0 <= (t_723 + -2)) && (0 <= (t_754 + -4)) && (0 <= (t_785 + -4)) && ((z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_86) <= (z_3 + z_347 + z_39)) && ((z_375 + z_379) > t_104) && ((z_515 + z_559 + z_683 + z_747) > t_109) && ((z_807 + z_831 + z_835) > t_723) && ((z_863 + z_891) > t_754) && (z_3 > 0) && (z_347 > 0) && (z_375 > 0) && (z_379 > 0) && (z_39 > 0) && (z_515 > 0) && (z_559 > 0) && (z_683 > 0) && (z_747 > 0) && (z_799 > 0) && (z_807 > 0) && (z_831 > 0) && (z_835 > 0) && (z_863 > 0));
																																																			:pid_82:e = 2;
																																																			:pid_82:tau = 8;
																																																			:pid_82:t = t_785;
																																																			:pid_82:cl = 0;
																																																			:pid_87:cl = (z_683 + z_747 + z_799 + z_807 + z_831 + z_835 + z_863 + z_891);
																																																		}
																																																		EC:<Id:1975;Ev:0;H:50;W:1725>{ SC: ( pid_21:o#20 , ( pid_29:cp2 , pid_34:dp2 , pid_39:dp2 ) , ( pid_45:cp1 , pid_51:dp2 , pid_56:dp2 ) , ( pid_63:cp2 , pid_69:dp3 , pid_72:dp1 ) , ( pid_81:cp3 , pid_86:dp3 , pid_90:dp2 ) )
																					
																						
										EXE: { |;| (:pid_75 , run) (:pid_82 , run) 
	(:pid_84 , run) (:pid_84 , dp1_DATA_EXPIR) (:pid_2 , run) (:pid_20 , run) 
	(:pid_20 , n4_out_Log) }
																					
																						
										TRACE: { |;| (:pid_75 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_895 }) (:pid_84 , ${ output#env 
	inst::Trickle.Node.Log 2 ${ + param::Trickle.Node.z_3 param::Trickle.Node.z_347 
	param::Trickle.Node.z_375 param::Trickle.Node.z_379 param::Trickle.Node.z_39 
	param::Trickle.Node.z_515 param::Trickle.Node.z_559 param::Trickle.Node.z_683 
	param::Trickle.Node.z_747 param::Trickle.Node.z_799 param::Trickle.Node.z_807 
	param::Trickle.Node.z_831 param::Trickle.Node.z_835 param::Trickle.Node.z_863 
	param::Trickle.Node.z_891 param::Trickle.Node.z_895 } } @ (z_3 + z_347 + z_375 + 
	z_379 + z_39 + z_515 + z_559 + z_683 + z_747 + z_799 + z_807 + z_831 + z_835 + 
	z_863 + z_891 + z_895)) }
																																																			/*FLAGS{ COVERAGE-ELEMENT & OBJECTIVE-ACHIEVED }*/
																																																			INFO{
																																																				<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#23->run::pid_21:Trickle.Observer.o#20->prot::Trickle.Observer.o#20" as trace="tpid#23->run::pid_21:Trickle.Observer.o#20->prot::Trickle.Observer.o#20">
																																																				<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#24" as trace="tpid#24">
																																																			}
																																																			PC: (((z_169 + z_265 + z_293 + z_417) == t_116) && ((z_186 + z_198 + z_302 + z_318 + 
	z_338) == t_58) && ((z_198 + z_302 + z_318 + z_338 + z_454 + z_498) == t_171) && 
	((z_198 + z_302 + z_318 + z_338 + z_454 + z_498 + z_694) == 4) && ((z_293 + 
	z_417 + z_465 + z_517) == t_253) && ((z_293 + z_417 + z_465 + z_517 + z_569 + 
	z_609) == 4) && ((z_375 + z_379) == 4) && ((z_515 + z_559 + z_683 + z_747) == 8) 
	&& ((z_517 + z_569) == t_143) && ((z_649 + z_657 + z_709) == t_548) && ((z_657 + 
	z_709 + z_869) == 4) && ((z_730 + z_766) == 8) && ((z_807 + z_831 + z_835) == 4) 
	&& ((z_863 + z_891) == 8) && (z_136 == t_54) && (z_260 == t_215) && (z_375 == 
	t_104) && (z_40 == t_4) && (z_515 == t_109) && (z_657 == t_241) && (z_683 == 
	t_483) && (z_730 == t_619) && (z_807 == t_723) && (z_863 == t_754) && ((z_145 + 
	z_169 + z_265 + z_293 + z_417 + z_465) < t_40) && ((z_198 + z_302 + z_318 + 
	z_338 + z_454) < t_171) && ((z_517 + z_569 + z_609 + z_649) < 4) && (t_104 < 4) 
	&& (t_109 < 8) && (t_143 < 4) && (t_15 < 4) && (t_241 < 4) && (t_27 < 4) && 
	(t_279 < 8) && (t_306 < 8) && (t_4 < 4) && (t_40 < 4) && (t_58 < 4) && (t_8 < 4) 
	&& (t_116 < 4) && (t_171 < 4) && (t_215 < 4) && (t_253 < 4) && (t_279 < 4) && 
	(t_483 < 4) && (t_54 < 4) && (t_548 < 8) && (t_619 < 8) && (t_688 < 8) && (t_723 
	< 4) && (t_754 < 8) && (t_785 < 8) && (z_169 < t_116) && (z_198 < t_171) && 
	(z_293 < t_253) && (z_318 < t_279) && (z_347 < t_27) && (z_65 < t_8) && (z_86 < 
	t_15) && (0 <= (t_104 + -2)) && (0 <= (t_109 + -4)) && (0 <= (t_143 + -2)) && (0 
	<= (t_15 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_27 + -2)) && (0 <= (t_279 + 
	-4)) && (0 <= (t_306 + -4)) && (0 <= (t_4 + -2)) && (0 <= (t_40 + -2)) && (0 <= 
	(t_58 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_116 + -2)) && (0 <= (t_171 + -2)) 
	&& (0 <= (t_215 + -2)) && (0 <= (t_253 + -2)) && (0 <= (t_279 + -2)) && (0 <= 
	(t_483 + -2)) && (0 <= (t_54 + -2)) && (0 <= (t_548 + -4)) && (0 <= (t_619 + -4))
	 && (0 <= (t_688 + -4)) && (0 <= (t_723 + -2)) && (0 <= (t_754 + -4)) && (0 <= 
	(t_785 + -4)) && ((z_0 + z_100 + z_136 + z_224 + z_260 + z_4 + z_40) <= (z_1 + 
	z_145 + z_169 + z_265 + z_293 + z_65 + z_9)) && ((z_0 + z_100 + z_136 + z_224 + 
	z_260 + z_4 + z_40) <= (z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_86)) && 
	((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_1 + z_145 + z_169 + z_65 + z_9)) && 
	((z_0 + z_100 + z_136 + z_4 + z_40) <= (z_186 + z_198 + z_2 + z_22 + z_86)) && 
	((z_0 + z_4 + z_40) <= (z_1 + z_65 + z_9)) && ((z_0 + z_4 + z_40) <= (z_2 + z_22 
	+ z_86)) && ((z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_65 + z_9) <= 
	(z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_454 + z_86)) && ((z_186 
	+ z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_86) <= (z_3 + z_347 + z_39)) && 
	((z_3 + z_347 + z_375 + z_379 + z_39 + z_515) <= (z_1 + z_145 + z_169 + z_265 + 
	z_293 + z_417 + z_465 + z_517 + z_569 + z_609 + z_649 + z_65 + z_9)) && ((z_3 + 
	z_347 + z_375 + z_39) <= (z_1 + z_145 + z_169 + z_265 + z_293 + z_417 + z_465 + 
	z_65 + z_9)) && ((z_198 + z_302 + z_318 + z_338 + z_454 + z_498 + z_694) > t_171)
	 && ((z_293 + z_417 + z_465 + z_517 + z_569 + z_609) > t_253) && ((z_375 + z_379)
	 > t_104) && ((z_515 + z_559 + z_683 + z_747) > t_109) && ((z_657 + z_709 + 
	z_869) > t_241) && ((z_730 + z_766) > t_619) && ((z_807 + z_831 + z_835) > t_723)
	 && ((z_863 + z_891) > t_754) && (z_0 > 0) && (z_1 > 0) && (z_100 > 0) && (z_136 
	> 0) && (z_145 > 0) && (z_169 > 0) && (z_186 > 0) && (z_198 > 0) && (z_2 > 0) && 
	(z_22 > 0) && (z_224 > 0) && (z_265 > 0) && (z_293 > 0) && (z_3 > 0) && (z_302 > 
	0) && (z_318 > 0) && (z_338 > 0) && (z_347 > 0) && (z_375 > 0) && (z_379 > 0) && 
	(z_39 > 0) && (z_4 > 0) && (z_40 > 0) && (z_417 > 0) && (z_454 > 0) && (z_465 > 
	0) && (z_498 > 0) && (z_515 > 0) && (z_517 > 0) && (z_559 > 0) && (z_569 > 0) && 
	(z_609 > 0) && (z_649 > 0) && (z_65 > 0) && (z_657 > 0) && (z_683 > 0) && (z_694 
	> 0) && (z_709 > 0) && (z_730 > 0) && (z_747 > 0) && (z_766 > 0) && (z_799 > 0) 
	&& (z_807 > 0) && (z_831 > 0) && (z_835 > 0) && (z_86 > 0) && (z_863 > 0) && 
	(z_891 > 0) && (z_9 > 0))
																																																			DATA{
																																																				:pid_2:uncoveredExit = 0;
																																																				:pid_75:localTime = (z_3 + z_347 + z_375 + z_379 + z_39 + z_515 + z_559 + z_683 + z_747 + z_799 + z_807 + z_831 + z_835 + z_863 + z_891 + z_895);
																																																				:pid_75:z = z_895;
																																																				:pid_75:localTime = (z_347 + z_375 + z_379 + z_39 + z_515 + z_559 + z_683 + z_747 + z_799 + z_807 + z_831 + z_835 + z_863 + z_891 + z_895);
																																																				:pid_75:localPC = (((z_375 + z_379) == 4) && ((z_515 + z_559 + z_683 + z_747) == 8) && ((z_807 + z_831 + z_835) == 4) && ((z_863 + z_891) == 8) && (z_375 == t_104) && (z_515 == t_109) && (z_683 == t_483) && (z_807 == t_723) && (z_863 == t_754) && (t_104 < 4) && (t_109 < 8) && (t_27 < 4) && (t_279 < 8) && (t_483 < 4) && (t_723 < 4) && (t_754 < 8) && (t_785 < 8) && (z_347 < t_27) && (0 <= (t_104 + -2)) && (0 <= (t_109 + -4)) && (0 <= (t_27 + -2)) && (0 <= (t_279 + -4)) && (0 <= (t_483 + -2)) && (0 <= (t_723 + -2)) && (0 <= (t_754 + -4)) && (0 <= (t_785 + -4)) && ((z_186 + z_198 + z_2 + z_22 + z_302 + z_318 + z_338 + z_86) <= (z_3 + z_347 + z_39)) && ((z_375 + z_379) > t_104) && ((z_515 + z_559 + z_683 + z_747) > t_109) && ((z_807 + z_831 + z_835) > t_723) && ((z_863 + z_891) > t_754) && (z_3 > 0) && (z_347 > 0) && (z_375 > 0) && (z_379 > 0) && (z_39 > 0) && (z_515 > 0) && (z_559 > 0) && (z_683 > 0) && (z_747 > 0) && (z_799 > 0) && (z_807 > 0) && (z_831 > 0) && (z_835 > 0) && (z_863 > 0) && (z_891 > 0));
																																																				:pid_82:e = 2;
																																																				:pid_82:cl = z_895;
																																																				:pid_87:cl = (z_683 + z_747 + z_799 + z_807 + z_831 + z_835 + z_863 + z_891 + z_895);
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
