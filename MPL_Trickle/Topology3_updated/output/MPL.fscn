EC:<Id:1;Ev:1;H:0;W:1>{ SC: ( pid_3:startup , ( pid_33:cp0_init , pid_39:dp0 , pid_44:dp0 ) , ( pid_50:cp0_init , pid_56:dp0 , pid_61:dp0 ) , ( pid_67:cp0_init , pid_73:dp0 , pid_78:dp0 ) , ( pid_84:cp0_init , pid_90:dp0 , pid_95:dp0 ) , ( pid_101:cp0_init , pid_107:dp0 , pid_112:dp0 ) )
	ALIAS{
		:ppid_-1:pid_0 = spec::Trickle;
		:ppid_-1:pid_1 = spec::Trickle;
		:ppid_1:pid_2 = spec::Trickle.Observer;
			DATA{
				:ppid_1:pid_2:uncoveredExit = spec::Trickle.Observer.uncoveredExit;
				:ppid_1:pid_2:mess = spec::Trickle.Observer.mess;
				:ppid_1:pid_2:seqBuff[0] = spec::Trickle.Observer.seqBuff;
				:ppid_1:pid_2:seqBuff[1] = spec::Trickle.Observer.seqBuff;
				:ppid_1:pid_2:dataMessage.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_2:dataMessage.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_2:dataMessage.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_2:pid_3 = spec::Trickle.Observer.startup;
		:ppid_2:pid_4 = spec::Trickle.Observer.o#0;
		:ppid_2:pid_5 = spec::Trickle.Observer.o#1;
		:ppid_2:pid_6 = spec::Trickle.Observer.o#2;
		:ppid_2:pid_7 = spec::Trickle.Observer.o#3;
		:ppid_2:pid_8 = spec::Trickle.Observer.o#4;
		:ppid_2:pid_9 = spec::Trickle.Observer.o#5;
		:ppid_2:pid_10 = spec::Trickle.Observer.o#6;
		:ppid_2:pid_11 = spec::Trickle.Observer.o#7;
		:ppid_2:pid_12 = spec::Trickle.Observer.o#8;
		:ppid_2:pid_13 = spec::Trickle.Observer.o#9;
		:ppid_2:pid_14 = spec::Trickle.Observer.o#10;
		:ppid_2:pid_15 = spec::Trickle.Observer.o#11;
		:ppid_2:pid_16 = spec::Trickle.Observer.o#12;
		:ppid_2:pid_17 = spec::Trickle.Observer.o#13;
		:ppid_2:pid_18 = spec::Trickle.Observer.o#14;
		:ppid_2:pid_19 = spec::Trickle.Observer.o#15;
		:ppid_2:pid_20 = spec::Trickle.Observer.o#16;
		:ppid_2:pid_21 = spec::Trickle.Observer.o#17;
		:ppid_2:pid_22 = spec::Trickle.Observer.o#18;
		:ppid_2:pid_23 = spec::Trickle.Observer.o#19;
		:ppid_2:pid_24 = spec::Trickle.Observer.o#20;
		:ppid_2:pid_25 = spec::Trickle.Observer.o#21;
		:ppid_2:pid_26 = spec::Trickle.Observer.o#22;
		:ppid_2:pid_27 = spec::Trickle.Observer.o#23;
		:ppid_2:pid_28 = spec::Trickle.Observer.o#24;
		:ppid_2:pid_29 = spec::Trickle.Observer.PASS;
		:ppid_2:pid_30 = spec::Trickle.Observer.FAILED;
		:ppid_1:pid_31 = run::Trickle.n1; // model is spec::Trickle.Node;
			BUFFER NUMBER = 1;
			/*BUFFER{
				:ppid_1:pid_31:bufferNode = spec::Trickle.Node.bufferNode;
			}*/
			DATA{
				:ppid_1:pid_31:my_buff[0].seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_31:my_buff[0].fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_31:my_buff[0].offset = spec::Trickle.DATA_MESSAGE.offset;
				:ppid_1:pid_31:my_buff[1].seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_31:my_buff[1].fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_31:my_buff[1].offset = spec::Trickle.DATA_MESSAGE.offset;
				:ppid_1:pid_31:firmware[0] = spec::Trickle.Node.firmware;
				:ppid_1:pid_31:firmware[1] = spec::Trickle.Node.firmware;
				:ppid_1:pid_31:myseq_buff[0] = spec::Trickle.Node.myseq_buff;
				:ppid_1:pid_31:myseq_buff[1] = spec::Trickle.Node.myseq_buff;
				:ppid_1:pid_31:mydp_run[0] = spec::Trickle.Node.mydp_run;
				:ppid_1:pid_31:mydp_run[1] = spec::Trickle.Node.mydp_run;
				:ppid_1:pid_31:node_time = spec::Trickle.Node.node_time;
				:ppid_1:pid_31:z = spec::Trickle.Node.z;
				:ppid_1:pid_31:localTime = spec::Trickle.Node.localTime;
				:ppid_1:pid_31:undef_DM1 = spec::Trickle.Node.undef_DM1;
				:ppid_1:pid_31:undef_DM2 = spec::Trickle.Node.undef_DM2;
				:ppid_1:pid_31:seq_buff[0] = spec::Trickle.Node.seq_buff;
				:ppid_1:pid_31:seq_buff[1] = spec::Trickle.Node.seq_buff;
				:ppid_1:pid_31:i = spec::Trickle.Node.i;
				:ppid_1:pid_31:localPC = spec::Trickle.Node.localPC;
				:ppid_1:pid_31:new_seq_buff = spec::Trickle.Node.new_seq_buff;
				:ppid_1:pid_31:new_seq = spec::Trickle.Node.new_seq;
				:ppid_1:pid_31:new_fragment = spec::Trickle.Node.new_fragment;
				:ppid_1:pid_31:new_offset = spec::Trickle.Node.new_offset;
				:ppid_1:pid_31:timeEmit = spec::Trickle.Node.timeEmit;
			}
			INTERFACE{
				:ppid_1:pid_31:ControlMsg = spec::Trickle.Node.ControlMsg;
				:ppid_1:pid_31:DataMsg1 = spec::Trickle.Node.DataMsg1;
				:ppid_1:pid_31:DataMsg2 = spec::Trickle.Node.DataMsg2;
				:ppid_1:pid_31:Log = spec::Trickle.Node.Log;
			}
		:ppid_31:pid_32 = spec::Trickle.Node.ControlProcess;
			DATA{
				:ppid_31:pid_32:e = spec::Trickle.Node.ControlProcess.e;
				:ppid_31:pid_32:tau = spec::Trickle.Node.ControlProcess.tau;
				:ppid_31:pid_32:tau_l = spec::Trickle.Node.ControlProcess.tau_l;
				:ppid_31:pid_32:tau_h = spec::Trickle.Node.ControlProcess.tau_h;
				:ppid_31:pid_32:k = spec::Trickle.Node.ControlProcess.k;
				:ppid_31:pid_32:c = spec::Trickle.Node.ControlProcess.c;
				:ppid_31:pid_32:i = spec::Trickle.Node.ControlProcess.i;
				:ppid_31:pid_32:t = spec::Trickle.Node.ControlProcess.t;
				:ppid_31:pid_32:consistent = spec::Trickle.Node.ControlProcess.consistent;
				:ppid_31:pid_32:cl = spec::Trickle.Node.ControlProcess.cl;
			}
		:ppid_32:pid_33 = spec::Trickle.Node.ControlProcess.cp0_init;
		:ppid_32:pid_34 = spec::Trickle.Node.ControlProcess.cp0;
		:ppid_32:pid_35 = spec::Trickle.Node.ControlProcess.cp1;
		:ppid_32:pid_36 = spec::Trickle.Node.ControlProcess.cp2;
		:ppid_32:pid_37 = spec::Trickle.Node.ControlProcess.cp3;
		:ppid_31:pid_38 = run::Trickle.n1.DataProcess1; // model is spec::Trickle.Node.DataProcess;
			DATA{
				:ppid_31:pid_38:mySeq = spec::Trickle.Node.DataProcess.mySeq;
				:ppid_31:pid_38:e = spec::Trickle.Node.DataProcess.e;
				:ppid_31:pid_38:tau = spec::Trickle.Node.DataProcess.tau;
				:ppid_31:pid_38:tau_l = spec::Trickle.Node.DataProcess.tau_l;
				:ppid_31:pid_38:tau_h = spec::Trickle.Node.DataProcess.tau_h;
				:ppid_31:pid_38:k = spec::Trickle.Node.DataProcess.k;
				:ppid_31:pid_38:c = spec::Trickle.Node.DataProcess.c;
				:ppid_31:pid_38:i = spec::Trickle.Node.DataProcess.i;
				:ppid_31:pid_38:t = spec::Trickle.Node.DataProcess.t;
				:ppid_31:pid_38:consistent = spec::Trickle.Node.DataProcess.consistent;
				:ppid_31:pid_38:cl = spec::Trickle.Node.DataProcess.cl;
				:ppid_31:pid_38:d.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_31:pid_38:d.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_31:pid_38:d.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_38:pid_39 = spec::Trickle.Node.DataProcess.dp0;
		:ppid_38:pid_40 = spec::Trickle.Node.DataProcess.dp1;
		:ppid_38:pid_41 = spec::Trickle.Node.DataProcess.dp2;
		:ppid_38:pid_42 = spec::Trickle.Node.DataProcess.dp3;
		:ppid_31:pid_43 = run::Trickle.n1.DataProcess2; // model is spec::Trickle.Node.DataProcess;
			DATA{
				:ppid_31:pid_43:mySeq = spec::Trickle.Node.DataProcess.mySeq;
				:ppid_31:pid_43:e = spec::Trickle.Node.DataProcess.e;
				:ppid_31:pid_43:tau = spec::Trickle.Node.DataProcess.tau;
				:ppid_31:pid_43:tau_l = spec::Trickle.Node.DataProcess.tau_l;
				:ppid_31:pid_43:tau_h = spec::Trickle.Node.DataProcess.tau_h;
				:ppid_31:pid_43:k = spec::Trickle.Node.DataProcess.k;
				:ppid_31:pid_43:c = spec::Trickle.Node.DataProcess.c;
				:ppid_31:pid_43:i = spec::Trickle.Node.DataProcess.i;
				:ppid_31:pid_43:t = spec::Trickle.Node.DataProcess.t;
				:ppid_31:pid_43:consistent = spec::Trickle.Node.DataProcess.consistent;
				:ppid_31:pid_43:cl = spec::Trickle.Node.DataProcess.cl;
				:ppid_31:pid_43:d.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_31:pid_43:d.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_31:pid_43:d.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_43:pid_44 = spec::Trickle.Node.DataProcess.dp0;
		:ppid_43:pid_45 = spec::Trickle.Node.DataProcess.dp1;
		:ppid_43:pid_46 = spec::Trickle.Node.DataProcess.dp2;
		:ppid_43:pid_47 = spec::Trickle.Node.DataProcess.dp3;
		:ppid_1:pid_48 = run::Trickle.n2; // model is spec::Trickle.Node;
			BUFFER NUMBER = 1;
			/*BUFFER{
				:ppid_1:pid_48:bufferNode = spec::Trickle.Node.bufferNode;
			}*/
			DATA{
				:ppid_1:pid_48:my_buff[0].seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_48:my_buff[0].fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_48:my_buff[0].offset = spec::Trickle.DATA_MESSAGE.offset;
				:ppid_1:pid_48:my_buff[1].seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_48:my_buff[1].fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_48:my_buff[1].offset = spec::Trickle.DATA_MESSAGE.offset;
				:ppid_1:pid_48:firmware[0] = spec::Trickle.Node.firmware;
				:ppid_1:pid_48:firmware[1] = spec::Trickle.Node.firmware;
				:ppid_1:pid_48:myseq_buff[0] = spec::Trickle.Node.myseq_buff;
				:ppid_1:pid_48:myseq_buff[1] = spec::Trickle.Node.myseq_buff;
				:ppid_1:pid_48:mydp_run[0] = spec::Trickle.Node.mydp_run;
				:ppid_1:pid_48:mydp_run[1] = spec::Trickle.Node.mydp_run;
				:ppid_1:pid_48:node_time = spec::Trickle.Node.node_time;
				:ppid_1:pid_48:z = spec::Trickle.Node.z;
				:ppid_1:pid_48:localTime = spec::Trickle.Node.localTime;
				:ppid_1:pid_48:undef_DM1 = spec::Trickle.Node.undef_DM1;
				:ppid_1:pid_48:undef_DM2 = spec::Trickle.Node.undef_DM2;
				:ppid_1:pid_48:seq_buff[0] = spec::Trickle.Node.seq_buff;
				:ppid_1:pid_48:seq_buff[1] = spec::Trickle.Node.seq_buff;
				:ppid_1:pid_48:i = spec::Trickle.Node.i;
				:ppid_1:pid_48:localPC = spec::Trickle.Node.localPC;
				:ppid_1:pid_48:new_seq_buff = spec::Trickle.Node.new_seq_buff;
				:ppid_1:pid_48:new_seq = spec::Trickle.Node.new_seq;
				:ppid_1:pid_48:new_fragment = spec::Trickle.Node.new_fragment;
				:ppid_1:pid_48:new_offset = spec::Trickle.Node.new_offset;
				:ppid_1:pid_48:timeEmit = spec::Trickle.Node.timeEmit;
			}
			INTERFACE{
				:ppid_1:pid_48:ControlMsg = spec::Trickle.Node.ControlMsg;
				:ppid_1:pid_48:DataMsg1 = spec::Trickle.Node.DataMsg1;
				:ppid_1:pid_48:DataMsg2 = spec::Trickle.Node.DataMsg2;
				:ppid_1:pid_48:Log = spec::Trickle.Node.Log;
			}
		:ppid_48:pid_49 = spec::Trickle.Node.ControlProcess;
			DATA{
				:ppid_48:pid_49:e = spec::Trickle.Node.ControlProcess.e;
				:ppid_48:pid_49:tau = spec::Trickle.Node.ControlProcess.tau;
				:ppid_48:pid_49:tau_l = spec::Trickle.Node.ControlProcess.tau_l;
				:ppid_48:pid_49:tau_h = spec::Trickle.Node.ControlProcess.tau_h;
				:ppid_48:pid_49:k = spec::Trickle.Node.ControlProcess.k;
				:ppid_48:pid_49:c = spec::Trickle.Node.ControlProcess.c;
				:ppid_48:pid_49:i = spec::Trickle.Node.ControlProcess.i;
				:ppid_48:pid_49:t = spec::Trickle.Node.ControlProcess.t;
				:ppid_48:pid_49:consistent = spec::Trickle.Node.ControlProcess.consistent;
				:ppid_48:pid_49:cl = spec::Trickle.Node.ControlProcess.cl;
			}
		:ppid_49:pid_50 = spec::Trickle.Node.ControlProcess.cp0_init;
		:ppid_49:pid_51 = spec::Trickle.Node.ControlProcess.cp0;
		:ppid_49:pid_52 = spec::Trickle.Node.ControlProcess.cp1;
		:ppid_49:pid_53 = spec::Trickle.Node.ControlProcess.cp2;
		:ppid_49:pid_54 = spec::Trickle.Node.ControlProcess.cp3;
		:ppid_48:pid_55 = run::Trickle.n2.DataProcess1; // model is spec::Trickle.Node.DataProcess;
			DATA{
				:ppid_48:pid_55:mySeq = spec::Trickle.Node.DataProcess.mySeq;
				:ppid_48:pid_55:e = spec::Trickle.Node.DataProcess.e;
				:ppid_48:pid_55:tau = spec::Trickle.Node.DataProcess.tau;
				:ppid_48:pid_55:tau_l = spec::Trickle.Node.DataProcess.tau_l;
				:ppid_48:pid_55:tau_h = spec::Trickle.Node.DataProcess.tau_h;
				:ppid_48:pid_55:k = spec::Trickle.Node.DataProcess.k;
				:ppid_48:pid_55:c = spec::Trickle.Node.DataProcess.c;
				:ppid_48:pid_55:i = spec::Trickle.Node.DataProcess.i;
				:ppid_48:pid_55:t = spec::Trickle.Node.DataProcess.t;
				:ppid_48:pid_55:consistent = spec::Trickle.Node.DataProcess.consistent;
				:ppid_48:pid_55:cl = spec::Trickle.Node.DataProcess.cl;
				:ppid_48:pid_55:d.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_48:pid_55:d.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_48:pid_55:d.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_55:pid_56 = spec::Trickle.Node.DataProcess.dp0;
		:ppid_55:pid_57 = spec::Trickle.Node.DataProcess.dp1;
		:ppid_55:pid_58 = spec::Trickle.Node.DataProcess.dp2;
		:ppid_55:pid_59 = spec::Trickle.Node.DataProcess.dp3;
		:ppid_48:pid_60 = run::Trickle.n2.DataProcess2; // model is spec::Trickle.Node.DataProcess;
			DATA{
				:ppid_48:pid_60:mySeq = spec::Trickle.Node.DataProcess.mySeq;
				:ppid_48:pid_60:e = spec::Trickle.Node.DataProcess.e;
				:ppid_48:pid_60:tau = spec::Trickle.Node.DataProcess.tau;
				:ppid_48:pid_60:tau_l = spec::Trickle.Node.DataProcess.tau_l;
				:ppid_48:pid_60:tau_h = spec::Trickle.Node.DataProcess.tau_h;
				:ppid_48:pid_60:k = spec::Trickle.Node.DataProcess.k;
				:ppid_48:pid_60:c = spec::Trickle.Node.DataProcess.c;
				:ppid_48:pid_60:i = spec::Trickle.Node.DataProcess.i;
				:ppid_48:pid_60:t = spec::Trickle.Node.DataProcess.t;
				:ppid_48:pid_60:consistent = spec::Trickle.Node.DataProcess.consistent;
				:ppid_48:pid_60:cl = spec::Trickle.Node.DataProcess.cl;
				:ppid_48:pid_60:d.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_48:pid_60:d.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_48:pid_60:d.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_60:pid_61 = spec::Trickle.Node.DataProcess.dp0;
		:ppid_60:pid_62 = spec::Trickle.Node.DataProcess.dp1;
		:ppid_60:pid_63 = spec::Trickle.Node.DataProcess.dp2;
		:ppid_60:pid_64 = spec::Trickle.Node.DataProcess.dp3;
		:ppid_1:pid_65 = run::Trickle.n3; // model is spec::Trickle.Node;
			BUFFER NUMBER = 1;
			/*BUFFER{
				:ppid_1:pid_65:bufferNode = spec::Trickle.Node.bufferNode;
			}*/
			DATA{
				:ppid_1:pid_65:my_buff[0].seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_65:my_buff[0].fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_65:my_buff[0].offset = spec::Trickle.DATA_MESSAGE.offset;
				:ppid_1:pid_65:my_buff[1].seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_65:my_buff[1].fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_65:my_buff[1].offset = spec::Trickle.DATA_MESSAGE.offset;
				:ppid_1:pid_65:firmware[0] = spec::Trickle.Node.firmware;
				:ppid_1:pid_65:firmware[1] = spec::Trickle.Node.firmware;
				:ppid_1:pid_65:myseq_buff[0] = spec::Trickle.Node.myseq_buff;
				:ppid_1:pid_65:myseq_buff[1] = spec::Trickle.Node.myseq_buff;
				:ppid_1:pid_65:mydp_run[0] = spec::Trickle.Node.mydp_run;
				:ppid_1:pid_65:mydp_run[1] = spec::Trickle.Node.mydp_run;
				:ppid_1:pid_65:node_time = spec::Trickle.Node.node_time;
				:ppid_1:pid_65:z = spec::Trickle.Node.z;
				:ppid_1:pid_65:localTime = spec::Trickle.Node.localTime;
				:ppid_1:pid_65:undef_DM1 = spec::Trickle.Node.undef_DM1;
				:ppid_1:pid_65:undef_DM2 = spec::Trickle.Node.undef_DM2;
				:ppid_1:pid_65:seq_buff[0] = spec::Trickle.Node.seq_buff;
				:ppid_1:pid_65:seq_buff[1] = spec::Trickle.Node.seq_buff;
				:ppid_1:pid_65:i = spec::Trickle.Node.i;
				:ppid_1:pid_65:localPC = spec::Trickle.Node.localPC;
				:ppid_1:pid_65:new_seq_buff = spec::Trickle.Node.new_seq_buff;
				:ppid_1:pid_65:new_seq = spec::Trickle.Node.new_seq;
				:ppid_1:pid_65:new_fragment = spec::Trickle.Node.new_fragment;
				:ppid_1:pid_65:new_offset = spec::Trickle.Node.new_offset;
				:ppid_1:pid_65:timeEmit = spec::Trickle.Node.timeEmit;
			}
			INTERFACE{
				:ppid_1:pid_65:ControlMsg = spec::Trickle.Node.ControlMsg;
				:ppid_1:pid_65:DataMsg1 = spec::Trickle.Node.DataMsg1;
				:ppid_1:pid_65:DataMsg2 = spec::Trickle.Node.DataMsg2;
				:ppid_1:pid_65:Log = spec::Trickle.Node.Log;
			}
		:ppid_65:pid_66 = spec::Trickle.Node.ControlProcess;
			DATA{
				:ppid_65:pid_66:e = spec::Trickle.Node.ControlProcess.e;
				:ppid_65:pid_66:tau = spec::Trickle.Node.ControlProcess.tau;
				:ppid_65:pid_66:tau_l = spec::Trickle.Node.ControlProcess.tau_l;
				:ppid_65:pid_66:tau_h = spec::Trickle.Node.ControlProcess.tau_h;
				:ppid_65:pid_66:k = spec::Trickle.Node.ControlProcess.k;
				:ppid_65:pid_66:c = spec::Trickle.Node.ControlProcess.c;
				:ppid_65:pid_66:i = spec::Trickle.Node.ControlProcess.i;
				:ppid_65:pid_66:t = spec::Trickle.Node.ControlProcess.t;
				:ppid_65:pid_66:consistent = spec::Trickle.Node.ControlProcess.consistent;
				:ppid_65:pid_66:cl = spec::Trickle.Node.ControlProcess.cl;
			}
		:ppid_66:pid_67 = spec::Trickle.Node.ControlProcess.cp0_init;
		:ppid_66:pid_68 = spec::Trickle.Node.ControlProcess.cp0;
		:ppid_66:pid_69 = spec::Trickle.Node.ControlProcess.cp1;
		:ppid_66:pid_70 = spec::Trickle.Node.ControlProcess.cp2;
		:ppid_66:pid_71 = spec::Trickle.Node.ControlProcess.cp3;
		:ppid_65:pid_72 = run::Trickle.n3.DataProcess1; // model is spec::Trickle.Node.DataProcess;
			DATA{
				:ppid_65:pid_72:mySeq = spec::Trickle.Node.DataProcess.mySeq;
				:ppid_65:pid_72:e = spec::Trickle.Node.DataProcess.e;
				:ppid_65:pid_72:tau = spec::Trickle.Node.DataProcess.tau;
				:ppid_65:pid_72:tau_l = spec::Trickle.Node.DataProcess.tau_l;
				:ppid_65:pid_72:tau_h = spec::Trickle.Node.DataProcess.tau_h;
				:ppid_65:pid_72:k = spec::Trickle.Node.DataProcess.k;
				:ppid_65:pid_72:c = spec::Trickle.Node.DataProcess.c;
				:ppid_65:pid_72:i = spec::Trickle.Node.DataProcess.i;
				:ppid_65:pid_72:t = spec::Trickle.Node.DataProcess.t;
				:ppid_65:pid_72:consistent = spec::Trickle.Node.DataProcess.consistent;
				:ppid_65:pid_72:cl = spec::Trickle.Node.DataProcess.cl;
				:ppid_65:pid_72:d.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_65:pid_72:d.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_65:pid_72:d.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_72:pid_73 = spec::Trickle.Node.DataProcess.dp0;
		:ppid_72:pid_74 = spec::Trickle.Node.DataProcess.dp1;
		:ppid_72:pid_75 = spec::Trickle.Node.DataProcess.dp2;
		:ppid_72:pid_76 = spec::Trickle.Node.DataProcess.dp3;
		:ppid_65:pid_77 = run::Trickle.n3.DataProcess2; // model is spec::Trickle.Node.DataProcess;
			DATA{
				:ppid_65:pid_77:mySeq = spec::Trickle.Node.DataProcess.mySeq;
				:ppid_65:pid_77:e = spec::Trickle.Node.DataProcess.e;
				:ppid_65:pid_77:tau = spec::Trickle.Node.DataProcess.tau;
				:ppid_65:pid_77:tau_l = spec::Trickle.Node.DataProcess.tau_l;
				:ppid_65:pid_77:tau_h = spec::Trickle.Node.DataProcess.tau_h;
				:ppid_65:pid_77:k = spec::Trickle.Node.DataProcess.k;
				:ppid_65:pid_77:c = spec::Trickle.Node.DataProcess.c;
				:ppid_65:pid_77:i = spec::Trickle.Node.DataProcess.i;
				:ppid_65:pid_77:t = spec::Trickle.Node.DataProcess.t;
				:ppid_65:pid_77:consistent = spec::Trickle.Node.DataProcess.consistent;
				:ppid_65:pid_77:cl = spec::Trickle.Node.DataProcess.cl;
				:ppid_65:pid_77:d.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_65:pid_77:d.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_65:pid_77:d.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_77:pid_78 = spec::Trickle.Node.DataProcess.dp0;
		:ppid_77:pid_79 = spec::Trickle.Node.DataProcess.dp1;
		:ppid_77:pid_80 = spec::Trickle.Node.DataProcess.dp2;
		:ppid_77:pid_81 = spec::Trickle.Node.DataProcess.dp3;
		:ppid_1:pid_82 = run::Trickle.n4; // model is spec::Trickle.Node;
			BUFFER NUMBER = 1;
			/*BUFFER{
				:ppid_1:pid_82:bufferNode = spec::Trickle.Node.bufferNode;
			}*/
			DATA{
				:ppid_1:pid_82:my_buff[0].seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_82:my_buff[0].fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_82:my_buff[0].offset = spec::Trickle.DATA_MESSAGE.offset;
				:ppid_1:pid_82:my_buff[1].seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_82:my_buff[1].fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_82:my_buff[1].offset = spec::Trickle.DATA_MESSAGE.offset;
				:ppid_1:pid_82:firmware[0] = spec::Trickle.Node.firmware;
				:ppid_1:pid_82:firmware[1] = spec::Trickle.Node.firmware;
				:ppid_1:pid_82:myseq_buff[0] = spec::Trickle.Node.myseq_buff;
				:ppid_1:pid_82:myseq_buff[1] = spec::Trickle.Node.myseq_buff;
				:ppid_1:pid_82:mydp_run[0] = spec::Trickle.Node.mydp_run;
				:ppid_1:pid_82:mydp_run[1] = spec::Trickle.Node.mydp_run;
				:ppid_1:pid_82:node_time = spec::Trickle.Node.node_time;
				:ppid_1:pid_82:z = spec::Trickle.Node.z;
				:ppid_1:pid_82:localTime = spec::Trickle.Node.localTime;
				:ppid_1:pid_82:undef_DM1 = spec::Trickle.Node.undef_DM1;
				:ppid_1:pid_82:undef_DM2 = spec::Trickle.Node.undef_DM2;
				:ppid_1:pid_82:seq_buff[0] = spec::Trickle.Node.seq_buff;
				:ppid_1:pid_82:seq_buff[1] = spec::Trickle.Node.seq_buff;
				:ppid_1:pid_82:i = spec::Trickle.Node.i;
				:ppid_1:pid_82:localPC = spec::Trickle.Node.localPC;
				:ppid_1:pid_82:new_seq_buff = spec::Trickle.Node.new_seq_buff;
				:ppid_1:pid_82:new_seq = spec::Trickle.Node.new_seq;
				:ppid_1:pid_82:new_fragment = spec::Trickle.Node.new_fragment;
				:ppid_1:pid_82:new_offset = spec::Trickle.Node.new_offset;
				:ppid_1:pid_82:timeEmit = spec::Trickle.Node.timeEmit;
			}
			INTERFACE{
				:ppid_1:pid_82:ControlMsg = spec::Trickle.Node.ControlMsg;
				:ppid_1:pid_82:DataMsg1 = spec::Trickle.Node.DataMsg1;
				:ppid_1:pid_82:DataMsg2 = spec::Trickle.Node.DataMsg2;
				:ppid_1:pid_82:Log = spec::Trickle.Node.Log;
			}
		:ppid_82:pid_83 = spec::Trickle.Node.ControlProcess;
			DATA{
				:ppid_82:pid_83:e = spec::Trickle.Node.ControlProcess.e;
				:ppid_82:pid_83:tau = spec::Trickle.Node.ControlProcess.tau;
				:ppid_82:pid_83:tau_l = spec::Trickle.Node.ControlProcess.tau_l;
				:ppid_82:pid_83:tau_h = spec::Trickle.Node.ControlProcess.tau_h;
				:ppid_82:pid_83:k = spec::Trickle.Node.ControlProcess.k;
				:ppid_82:pid_83:c = spec::Trickle.Node.ControlProcess.c;
				:ppid_82:pid_83:i = spec::Trickle.Node.ControlProcess.i;
				:ppid_82:pid_83:t = spec::Trickle.Node.ControlProcess.t;
				:ppid_82:pid_83:consistent = spec::Trickle.Node.ControlProcess.consistent;
				:ppid_82:pid_83:cl = spec::Trickle.Node.ControlProcess.cl;
			}
		:ppid_83:pid_84 = spec::Trickle.Node.ControlProcess.cp0_init;
		:ppid_83:pid_85 = spec::Trickle.Node.ControlProcess.cp0;
		:ppid_83:pid_86 = spec::Trickle.Node.ControlProcess.cp1;
		:ppid_83:pid_87 = spec::Trickle.Node.ControlProcess.cp2;
		:ppid_83:pid_88 = spec::Trickle.Node.ControlProcess.cp3;
		:ppid_82:pid_89 = run::Trickle.n4.DataProcess1; // model is spec::Trickle.Node.DataProcess;
			DATA{
				:ppid_82:pid_89:mySeq = spec::Trickle.Node.DataProcess.mySeq;
				:ppid_82:pid_89:e = spec::Trickle.Node.DataProcess.e;
				:ppid_82:pid_89:tau = spec::Trickle.Node.DataProcess.tau;
				:ppid_82:pid_89:tau_l = spec::Trickle.Node.DataProcess.tau_l;
				:ppid_82:pid_89:tau_h = spec::Trickle.Node.DataProcess.tau_h;
				:ppid_82:pid_89:k = spec::Trickle.Node.DataProcess.k;
				:ppid_82:pid_89:c = spec::Trickle.Node.DataProcess.c;
				:ppid_82:pid_89:i = spec::Trickle.Node.DataProcess.i;
				:ppid_82:pid_89:t = spec::Trickle.Node.DataProcess.t;
				:ppid_82:pid_89:consistent = spec::Trickle.Node.DataProcess.consistent;
				:ppid_82:pid_89:cl = spec::Trickle.Node.DataProcess.cl;
				:ppid_82:pid_89:d.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_82:pid_89:d.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_82:pid_89:d.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_89:pid_90 = spec::Trickle.Node.DataProcess.dp0;
		:ppid_89:pid_91 = spec::Trickle.Node.DataProcess.dp1;
		:ppid_89:pid_92 = spec::Trickle.Node.DataProcess.dp2;
		:ppid_89:pid_93 = spec::Trickle.Node.DataProcess.dp3;
		:ppid_82:pid_94 = run::Trickle.n4.DataProcess2; // model is spec::Trickle.Node.DataProcess;
			DATA{
				:ppid_82:pid_94:mySeq = spec::Trickle.Node.DataProcess.mySeq;
				:ppid_82:pid_94:e = spec::Trickle.Node.DataProcess.e;
				:ppid_82:pid_94:tau = spec::Trickle.Node.DataProcess.tau;
				:ppid_82:pid_94:tau_l = spec::Trickle.Node.DataProcess.tau_l;
				:ppid_82:pid_94:tau_h = spec::Trickle.Node.DataProcess.tau_h;
				:ppid_82:pid_94:k = spec::Trickle.Node.DataProcess.k;
				:ppid_82:pid_94:c = spec::Trickle.Node.DataProcess.c;
				:ppid_82:pid_94:i = spec::Trickle.Node.DataProcess.i;
				:ppid_82:pid_94:t = spec::Trickle.Node.DataProcess.t;
				:ppid_82:pid_94:consistent = spec::Trickle.Node.DataProcess.consistent;
				:ppid_82:pid_94:cl = spec::Trickle.Node.DataProcess.cl;
				:ppid_82:pid_94:d.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_82:pid_94:d.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_82:pid_94:d.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_94:pid_95 = spec::Trickle.Node.DataProcess.dp0;
		:ppid_94:pid_96 = spec::Trickle.Node.DataProcess.dp1;
		:ppid_94:pid_97 = spec::Trickle.Node.DataProcess.dp2;
		:ppid_94:pid_98 = spec::Trickle.Node.DataProcess.dp3;
		:ppid_1:pid_99 = run::Trickle.n5; // model is spec::Trickle.Node;
			BUFFER NUMBER = 1;
			/*BUFFER{
				:ppid_1:pid_99:bufferNode = spec::Trickle.Node.bufferNode;
			}*/
			DATA{
				:ppid_1:pid_99:my_buff[0].seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_99:my_buff[0].fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_99:my_buff[0].offset = spec::Trickle.DATA_MESSAGE.offset;
				:ppid_1:pid_99:my_buff[1].seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_99:my_buff[1].fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_99:my_buff[1].offset = spec::Trickle.DATA_MESSAGE.offset;
				:ppid_1:pid_99:firmware[0] = spec::Trickle.Node.firmware;
				:ppid_1:pid_99:firmware[1] = spec::Trickle.Node.firmware;
				:ppid_1:pid_99:myseq_buff[0] = spec::Trickle.Node.myseq_buff;
				:ppid_1:pid_99:myseq_buff[1] = spec::Trickle.Node.myseq_buff;
				:ppid_1:pid_99:mydp_run[0] = spec::Trickle.Node.mydp_run;
				:ppid_1:pid_99:mydp_run[1] = spec::Trickle.Node.mydp_run;
				:ppid_1:pid_99:node_time = spec::Trickle.Node.node_time;
				:ppid_1:pid_99:z = spec::Trickle.Node.z;
				:ppid_1:pid_99:localTime = spec::Trickle.Node.localTime;
				:ppid_1:pid_99:undef_DM1 = spec::Trickle.Node.undef_DM1;
				:ppid_1:pid_99:undef_DM2 = spec::Trickle.Node.undef_DM2;
				:ppid_1:pid_99:seq_buff[0] = spec::Trickle.Node.seq_buff;
				:ppid_1:pid_99:seq_buff[1] = spec::Trickle.Node.seq_buff;
				:ppid_1:pid_99:i = spec::Trickle.Node.i;
				:ppid_1:pid_99:localPC = spec::Trickle.Node.localPC;
				:ppid_1:pid_99:new_seq_buff = spec::Trickle.Node.new_seq_buff;
				:ppid_1:pid_99:new_seq = spec::Trickle.Node.new_seq;
				:ppid_1:pid_99:new_fragment = spec::Trickle.Node.new_fragment;
				:ppid_1:pid_99:new_offset = spec::Trickle.Node.new_offset;
				:ppid_1:pid_99:timeEmit = spec::Trickle.Node.timeEmit;
			}
			INTERFACE{
				:ppid_1:pid_99:ControlMsg = spec::Trickle.Node.ControlMsg;
				:ppid_1:pid_99:DataMsg1 = spec::Trickle.Node.DataMsg1;
				:ppid_1:pid_99:DataMsg2 = spec::Trickle.Node.DataMsg2;
				:ppid_1:pid_99:Log = spec::Trickle.Node.Log;
			}
		:ppid_99:pid_100 = spec::Trickle.Node.ControlProcess;
			DATA{
				:ppid_99:pid_100:e = spec::Trickle.Node.ControlProcess.e;
				:ppid_99:pid_100:tau = spec::Trickle.Node.ControlProcess.tau;
				:ppid_99:pid_100:tau_l = spec::Trickle.Node.ControlProcess.tau_l;
				:ppid_99:pid_100:tau_h = spec::Trickle.Node.ControlProcess.tau_h;
				:ppid_99:pid_100:k = spec::Trickle.Node.ControlProcess.k;
				:ppid_99:pid_100:c = spec::Trickle.Node.ControlProcess.c;
				:ppid_99:pid_100:i = spec::Trickle.Node.ControlProcess.i;
				:ppid_99:pid_100:t = spec::Trickle.Node.ControlProcess.t;
				:ppid_99:pid_100:consistent = spec::Trickle.Node.ControlProcess.consistent;
				:ppid_99:pid_100:cl = spec::Trickle.Node.ControlProcess.cl;
			}
		:ppid_100:pid_101 = spec::Trickle.Node.ControlProcess.cp0_init;
		:ppid_100:pid_102 = spec::Trickle.Node.ControlProcess.cp0;
		:ppid_100:pid_103 = spec::Trickle.Node.ControlProcess.cp1;
		:ppid_100:pid_104 = spec::Trickle.Node.ControlProcess.cp2;
		:ppid_100:pid_105 = spec::Trickle.Node.ControlProcess.cp3;
		:ppid_99:pid_106 = run::Trickle.n5.DataProcess1; // model is spec::Trickle.Node.DataProcess;
			DATA{
				:ppid_99:pid_106:mySeq = spec::Trickle.Node.DataProcess.mySeq;
				:ppid_99:pid_106:e = spec::Trickle.Node.DataProcess.e;
				:ppid_99:pid_106:tau = spec::Trickle.Node.DataProcess.tau;
				:ppid_99:pid_106:tau_l = spec::Trickle.Node.DataProcess.tau_l;
				:ppid_99:pid_106:tau_h = spec::Trickle.Node.DataProcess.tau_h;
				:ppid_99:pid_106:k = spec::Trickle.Node.DataProcess.k;
				:ppid_99:pid_106:c = spec::Trickle.Node.DataProcess.c;
				:ppid_99:pid_106:i = spec::Trickle.Node.DataProcess.i;
				:ppid_99:pid_106:t = spec::Trickle.Node.DataProcess.t;
				:ppid_99:pid_106:consistent = spec::Trickle.Node.DataProcess.consistent;
				:ppid_99:pid_106:cl = spec::Trickle.Node.DataProcess.cl;
				:ppid_99:pid_106:d.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_99:pid_106:d.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_99:pid_106:d.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_106:pid_107 = spec::Trickle.Node.DataProcess.dp0;
		:ppid_106:pid_108 = spec::Trickle.Node.DataProcess.dp1;
		:ppid_106:pid_109 = spec::Trickle.Node.DataProcess.dp2;
		:ppid_106:pid_110 = spec::Trickle.Node.DataProcess.dp3;
		:ppid_99:pid_111 = run::Trickle.n5.DataProcess2; // model is spec::Trickle.Node.DataProcess;
			DATA{
				:ppid_99:pid_111:mySeq = spec::Trickle.Node.DataProcess.mySeq;
				:ppid_99:pid_111:e = spec::Trickle.Node.DataProcess.e;
				:ppid_99:pid_111:tau = spec::Trickle.Node.DataProcess.tau;
				:ppid_99:pid_111:tau_l = spec::Trickle.Node.DataProcess.tau_l;
				:ppid_99:pid_111:tau_h = spec::Trickle.Node.DataProcess.tau_h;
				:ppid_99:pid_111:k = spec::Trickle.Node.DataProcess.k;
				:ppid_99:pid_111:c = spec::Trickle.Node.DataProcess.c;
				:ppid_99:pid_111:i = spec::Trickle.Node.DataProcess.i;
				:ppid_99:pid_111:t = spec::Trickle.Node.DataProcess.t;
				:ppid_99:pid_111:consistent = spec::Trickle.Node.DataProcess.consistent;
				:ppid_99:pid_111:cl = spec::Trickle.Node.DataProcess.cl;
				:ppid_99:pid_111:d.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_99:pid_111:d.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_99:pid_111:d.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_111:pid_112 = spec::Trickle.Node.DataProcess.dp0;
		:ppid_111:pid_113 = spec::Trickle.Node.DataProcess.dp1;
		:ppid_111:pid_114 = spec::Trickle.Node.DataProcess.dp2;
		:ppid_111:pid_115 = spec::Trickle.Node.DataProcess.dp3;
	}
	PC: true
	PtC: true
	DATA{
		:pid_2:uncoveredExit = 0;
		:pid_2:mess = mess_0;
		:pid_2:seqBuff[0] = seqBuff[0]_0;
		:pid_2:seqBuff[1] = seqBuff[1]_0;
		:pid_2:dataMessage.seq = dataMessage.seq_0;
		:pid_2:dataMessage.fragment = dataMessage.fragment_0;
		:pid_2:dataMessage.offset = dataMessage.offset_0;
		:pid_31:my_buff[0].seq = 1;
		:pid_31:my_buff[0].fragment = FRAGMENT_0;
		:pid_31:my_buff[0].offset = 0;
		:pid_31:my_buff[1].seq = 2;
		:pid_31:my_buff[1].fragment = FRAGMENT_1;
		:pid_31:my_buff[1].offset = 1;
		:pid_31:firmware[0] = FRAGMENT_0;
		:pid_31:firmware[1] = FRAGMENT_1;
		:pid_31:myseq_buff[0] = 1;
		:pid_31:myseq_buff[1] = 1;
		:pid_31:mydp_run[0] = true;
		:pid_31:mydp_run[1] = true;
		:pid_31:node_time = 0;
		:pid_31:z = $delta#initial;
		:pid_31:localTime = 0;
		:pid_31:undef_DM1 = false;
		:pid_31:undef_DM2 = false;
		:pid_31:seq_buff[0] = seq_buff[0]_0;
		:pid_31:seq_buff[1] = seq_buff[1]_0;
		:pid_31:i = i_0;
		:pid_31:localPC = true;
		:pid_31:new_seq_buff = new_seq_buff_0;
		:pid_31:new_seq = new_seq_0;
		:pid_31:new_fragment = new_fragment_0;
		:pid_31:new_offset = new_offset_0;
		:pid_31:timeEmit = timeEmit_0;
		:pid_32:e = e_0;
		:pid_32:tau = tau_0;
		:pid_32:tau_l = tau_l_0;
		:pid_32:tau_h = tau_h_0;
		:pid_32:k = k_0;
		:pid_32:c = c_0;
		:pid_32:i = i_0;
		:pid_32:t = t_0;
		:pid_32:consistent = consistent_0;
		:pid_32:cl = 0;
		:pid_38:mySeq = 1;
		:pid_38:e = e_0;
		:pid_38:tau = tau_0;
		:pid_38:tau_l = tau_l_0;
		:pid_38:tau_h = tau_h_0;
		:pid_38:k = k_0;
		:pid_38:c = c_0;
		:pid_38:i = i_0;
		:pid_38:t = t_0;
		:pid_38:consistent = consistent_0;
		:pid_38:cl = 0;
		:pid_38:d.seq = d.seq_0;
		:pid_38:d.fragment = d.fragment_0;
		:pid_38:d.offset = d.offset_0;
		:pid_43:mySeq = 2;
		:pid_43:e = e_1;
		:pid_43:tau = tau_1;
		:pid_43:tau_l = tau_l_1;
		:pid_43:tau_h = tau_h_1;
		:pid_43:k = k_1;
		:pid_43:c = c_1;
		:pid_43:i = i_1;
		:pid_43:t = t_1;
		:pid_43:consistent = consistent_1;
		:pid_43:cl = 0;
		:pid_43:d.seq = d.seq_1;
		:pid_43:d.fragment = d.fragment_1;
		:pid_43:d.offset = d.offset_1;
		:pid_48:my_buff[0].seq = 0;
		:pid_48:my_buff[0].fragment = UNDEF_FRAGMENT;
		:pid_48:my_buff[0].offset = 0;
		:pid_48:my_buff[1].seq = 0;
		:pid_48:my_buff[1].fragment = UNDEF_FRAGMENT;
		:pid_48:my_buff[1].offset = 1;
		:pid_48:firmware[0] = UNDEF_FRAGMENT;
		:pid_48:firmware[1] = UNDEF_FRAGMENT;
		:pid_48:myseq_buff[0] = 0;
		:pid_48:myseq_buff[1] = 0;
		:pid_48:mydp_run[0] = false;
		:pid_48:mydp_run[1] = false;
		:pid_48:node_time = 0;
		:pid_48:z = $delta#initial;
		:pid_48:localTime = 0;
		:pid_48:undef_DM1 = false;
		:pid_48:undef_DM2 = false;
		:pid_48:seq_buff[0] = seq_buff[0]_1;
		:pid_48:seq_buff[1] = seq_buff[1]_1;
		:pid_48:i = i_1;
		:pid_48:localPC = true;
		:pid_48:new_seq_buff = new_seq_buff_1;
		:pid_48:new_seq = new_seq_1;
		:pid_48:new_fragment = new_fragment_1;
		:pid_48:new_offset = new_offset_1;
		:pid_48:timeEmit = timeEmit_1;
		:pid_49:e = e_1;
		:pid_49:tau = tau_1;
		:pid_49:tau_l = tau_l_1;
		:pid_49:tau_h = tau_h_1;
		:pid_49:k = k_1;
		:pid_49:c = c_1;
		:pid_49:i = i_1;
		:pid_49:t = t_1;
		:pid_49:consistent = consistent_1;
		:pid_49:cl = 0;
		:pid_55:mySeq = 1;
		:pid_55:e = e_2;
		:pid_55:tau = tau_2;
		:pid_55:tau_l = tau_l_2;
		:pid_55:tau_h = tau_h_2;
		:pid_55:k = k_2;
		:pid_55:c = c_2;
		:pid_55:i = i_2;
		:pid_55:t = t_2;
		:pid_55:consistent = consistent_2;
		:pid_55:cl = 0;
		:pid_55:d.seq = d.seq_2;
		:pid_55:d.fragment = d.fragment_2;
		:pid_55:d.offset = d.offset_2;
		:pid_60:mySeq = 2;
		:pid_60:e = e_3;
		:pid_60:tau = tau_3;
		:pid_60:tau_l = tau_l_3;
		:pid_60:tau_h = tau_h_3;
		:pid_60:k = k_3;
		:pid_60:c = c_3;
		:pid_60:i = i_3;
		:pid_60:t = t_3;
		:pid_60:consistent = consistent_3;
		:pid_60:cl = 0;
		:pid_60:d.seq = d.seq_3;
		:pid_60:d.fragment = d.fragment_3;
		:pid_60:d.offset = d.offset_3;
		:pid_65:my_buff[0].seq = 0;
		:pid_65:my_buff[0].fragment = UNDEF_FRAGMENT;
		:pid_65:my_buff[0].offset = 0;
		:pid_65:my_buff[1].seq = 0;
		:pid_65:my_buff[1].fragment = UNDEF_FRAGMENT;
		:pid_65:my_buff[1].offset = 1;
		:pid_65:firmware[0] = UNDEF_FRAGMENT;
		:pid_65:firmware[1] = UNDEF_FRAGMENT;
		:pid_65:myseq_buff[0] = 0;
		:pid_65:myseq_buff[1] = 0;
		:pid_65:mydp_run[0] = false;
		:pid_65:mydp_run[1] = false;
		:pid_65:node_time = 0;
		:pid_65:z = $delta#initial;
		:pid_65:localTime = 0;
		:pid_65:undef_DM1 = false;
		:pid_65:undef_DM2 = false;
		:pid_65:seq_buff[0] = seq_buff[0]_2;
		:pid_65:seq_buff[1] = seq_buff[1]_2;
		:pid_65:i = i_2;
		:pid_65:localPC = true;
		:pid_65:new_seq_buff = new_seq_buff_2;
		:pid_65:new_seq = new_seq_2;
		:pid_65:new_fragment = new_fragment_2;
		:pid_65:new_offset = new_offset_2;
		:pid_65:timeEmit = timeEmit_2;
		:pid_66:e = e_2;
		:pid_66:tau = tau_2;
		:pid_66:tau_l = tau_l_2;
		:pid_66:tau_h = tau_h_2;
		:pid_66:k = k_2;
		:pid_66:c = c_2;
		:pid_66:i = i_2;
		:pid_66:t = t_2;
		:pid_66:consistent = consistent_2;
		:pid_66:cl = 0;
		:pid_72:mySeq = 1;
		:pid_72:e = e_4;
		:pid_72:tau = tau_4;
		:pid_72:tau_l = tau_l_4;
		:pid_72:tau_h = tau_h_4;
		:pid_72:k = k_4;
		:pid_72:c = c_4;
		:pid_72:i = i_4;
		:pid_72:t = t_4;
		:pid_72:consistent = consistent_4;
		:pid_72:cl = 0;
		:pid_72:d.seq = d.seq_4;
		:pid_72:d.fragment = d.fragment_4;
		:pid_72:d.offset = d.offset_4;
		:pid_77:mySeq = 2;
		:pid_77:e = e_5;
		:pid_77:tau = tau_5;
		:pid_77:tau_l = tau_l_5;
		:pid_77:tau_h = tau_h_5;
		:pid_77:k = k_5;
		:pid_77:c = c_5;
		:pid_77:i = i_5;
		:pid_77:t = t_5;
		:pid_77:consistent = consistent_5;
		:pid_77:cl = 0;
		:pid_77:d.seq = d.seq_5;
		:pid_77:d.fragment = d.fragment_5;
		:pid_77:d.offset = d.offset_5;
		:pid_82:my_buff[0].seq = 0;
		:pid_82:my_buff[0].fragment = UNDEF_FRAGMENT;
		:pid_82:my_buff[0].offset = 0;
		:pid_82:my_buff[1].seq = 0;
		:pid_82:my_buff[1].fragment = UNDEF_FRAGMENT;
		:pid_82:my_buff[1].offset = 1;
		:pid_82:firmware[0] = UNDEF_FRAGMENT;
		:pid_82:firmware[1] = UNDEF_FRAGMENT;
		:pid_82:myseq_buff[0] = 0;
		:pid_82:myseq_buff[1] = 0;
		:pid_82:mydp_run[0] = false;
		:pid_82:mydp_run[1] = false;
		:pid_82:node_time = 0;
		:pid_82:z = $delta#initial;
		:pid_82:localTime = 0;
		:pid_82:undef_DM1 = false;
		:pid_82:undef_DM2 = false;
		:pid_82:seq_buff[0] = seq_buff[0]_3;
		:pid_82:seq_buff[1] = seq_buff[1]_3;
		:pid_82:i = i_3;
		:pid_82:localPC = true;
		:pid_82:new_seq_buff = new_seq_buff_3;
		:pid_82:new_seq = new_seq_3;
		:pid_82:new_fragment = new_fragment_3;
		:pid_82:new_offset = new_offset_3;
		:pid_82:timeEmit = timeEmit_3;
		:pid_83:e = e_3;
		:pid_83:tau = tau_3;
		:pid_83:tau_l = tau_l_3;
		:pid_83:tau_h = tau_h_3;
		:pid_83:k = k_3;
		:pid_83:c = c_3;
		:pid_83:i = i_3;
		:pid_83:t = t_3;
		:pid_83:consistent = consistent_3;
		:pid_83:cl = 0;
		:pid_89:mySeq = 1;
		:pid_89:e = e_6;
		:pid_89:tau = tau_6;
		:pid_89:tau_l = tau_l_6;
		:pid_89:tau_h = tau_h_6;
		:pid_89:k = k_6;
		:pid_89:c = c_6;
		:pid_89:i = i_6;
		:pid_89:t = t_6;
		:pid_89:consistent = consistent_6;
		:pid_89:cl = 0;
		:pid_89:d.seq = d.seq_6;
		:pid_89:d.fragment = d.fragment_6;
		:pid_89:d.offset = d.offset_6;
		:pid_94:mySeq = 2;
		:pid_94:e = e_7;
		:pid_94:tau = tau_7;
		:pid_94:tau_l = tau_l_7;
		:pid_94:tau_h = tau_h_7;
		:pid_94:k = k_7;
		:pid_94:c = c_7;
		:pid_94:i = i_7;
		:pid_94:t = t_7;
		:pid_94:consistent = consistent_7;
		:pid_94:cl = 0;
		:pid_94:d.seq = d.seq_7;
		:pid_94:d.fragment = d.fragment_7;
		:pid_94:d.offset = d.offset_7;
		:pid_99:my_buff[0].seq = 0;
		:pid_99:my_buff[0].fragment = UNDEF_FRAGMENT;
		:pid_99:my_buff[0].offset = 0;
		:pid_99:my_buff[1].seq = 0;
		:pid_99:my_buff[1].fragment = UNDEF_FRAGMENT;
		:pid_99:my_buff[1].offset = 1;
		:pid_99:firmware[0] = UNDEF_FRAGMENT;
		:pid_99:firmware[1] = UNDEF_FRAGMENT;
		:pid_99:myseq_buff[0] = 0;
		:pid_99:myseq_buff[1] = 0;
		:pid_99:mydp_run[0] = false;
		:pid_99:mydp_run[1] = false;
		:pid_99:node_time = 0;
		:pid_99:z = $delta#initial;
		:pid_99:localTime = 0;
		:pid_99:undef_DM1 = false;
		:pid_99:undef_DM2 = false;
		:pid_99:seq_buff[0] = seq_buff[0]_4;
		:pid_99:seq_buff[1] = seq_buff[1]_4;
		:pid_99:i = i_4;
		:pid_99:localPC = true;
		:pid_99:new_seq_buff = new_seq_buff_4;
		:pid_99:new_seq = new_seq_4;
		:pid_99:new_fragment = new_fragment_4;
		:pid_99:new_offset = new_offset_4;
		:pid_99:timeEmit = timeEmit_4;
		:pid_100:e = e_4;
		:pid_100:tau = tau_4;
		:pid_100:tau_l = tau_l_4;
		:pid_100:tau_h = tau_h_4;
		:pid_100:k = k_4;
		:pid_100:c = c_4;
		:pid_100:i = i_4;
		:pid_100:t = t_4;
		:pid_100:consistent = consistent_4;
		:pid_100:cl = 0;
		:pid_106:mySeq = 1;
		:pid_106:e = e_8;
		:pid_106:tau = tau_8;
		:pid_106:tau_l = tau_l_8;
		:pid_106:tau_h = tau_h_8;
		:pid_106:k = k_8;
		:pid_106:c = c_8;
		:pid_106:i = i_8;
		:pid_106:t = t_8;
		:pid_106:consistent = consistent_8;
		:pid_106:cl = 0;
		:pid_106:d.seq = d.seq_8;
		:pid_106:d.fragment = d.fragment_8;
		:pid_106:d.offset = d.offset_8;
		:pid_111:mySeq = 2;
		:pid_111:e = e_9;
		:pid_111:tau = tau_9;
		:pid_111:tau_l = tau_l_9;
		:pid_111:tau_h = tau_h_9;
		:pid_111:k = k_9;
		:pid_111:c = c_9;
		:pid_111:i = i_9;
		:pid_111:t = t_9;
		:pid_111:consistent = consistent_9;
		:pid_111:cl = 0;
		:pid_111:d.seq = d.seq_9;
		:pid_111:d.fragment = d.fragment_9;
		:pid_111:d.offset = d.offset_9;
	}
	BUFFER{
		:pid_31:bufferNode:<FIFO>#0{ }
		:pid_48:bufferNode:<FIFO>#0{ }
		:pid_65:bufferNode:<FIFO>#0{ }
		:pid_82:bufferNode:<FIFO>#0{ }
		:pid_99:bufferNode:<FIFO>#0{ }
	}
	EC:<Id:2;Ev:2;H:1;W:1>{ SC: ( pid_4:o#0 , ( pid_34:cp0 , pid_39:dp0 , pid_44:dp0 ) , ( pid_51:cp0 , pid_56:dp0 , pid_61:dp0 ) , ( pid_68:cp0 , pid_73:dp0 , pid_78:dp0 ) , ( pid_85:cp0 , pid_90:dp0 , pid_95:dp0 ) , ( pid_102:cp0 , pid_107:dp0 , pid_112:dp0 ) )
		EXE: { |,| { |;| (:pid_101 , run) (:pid_101 , cp_init) } { |;| (:pid_84 
	, run) (:pid_84 , cp_init) } { |;| (:pid_67 , run) (:pid_67 , cp_init) } { |;| 
	(:pid_50 , run) (:pid_50 , cp_init) } { |;| (:pid_33 , run) (:pid_33 , cp_init) }
	 { |;| (:pid_3 , run) (:pid_3 , o_startup) } }
		TRACE: { |,| (:pid_99 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_4 }) (:pid_82 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_3 }) (:pid_65 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_2 }) (:pid_48 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_1 }) (:pid_31 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_0 }) }
		PC: ((z_0 > 0) && (z_1 > 0) && (z_2 > 0) && (z_3 > 0) && (z_4 > 0))
		DATA{
			:pid_2:uncoveredExit = 0;
			:pid_31:z = z_0;
			:pid_31:localTime = z_0;
			:pid_31:localPC = (z_0 > 0);
			:pid_32:tau_l = 4;
			:pid_32:tau_h = 8;
			:pid_32:k = 2;
			:pid_48:z = z_1;
			:pid_48:localTime = z_1;
			:pid_48:localPC = (z_1 > 0);
			:pid_49:tau_l = 4;
			:pid_49:tau_h = 8;
			:pid_49:k = 2;
			:pid_65:z = z_2;
			:pid_65:localTime = z_2;
			:pid_65:localPC = (z_2 > 0);
			:pid_66:tau_l = 4;
			:pid_66:tau_h = 8;
			:pid_66:k = 2;
			:pid_82:z = z_3;
			:pid_82:localTime = z_3;
			:pid_82:localPC = (z_3 > 0);
			:pid_83:tau_l = 4;
			:pid_83:tau_h = 8;
			:pid_83:k = 2;
			:pid_99:z = z_4;
			:pid_99:localTime = z_4;
			:pid_99:localPC = (z_4 > 0);
			:pid_100:tau_l = 4;
			:pid_100:tau_h = 8;
			:pid_100:k = 2;
		}
		EC:<Id:7;Ev:3;H:2;W:5>{ SC: ( pid_5:o#1 , ( pid_35:cp1 , pid_39:dp0 , pid_44:dp0 ) , ( pid_51:cp0 , pid_56:dp0 , pid_61:dp0 ) , ( pid_68:cp0 , pid_73:dp0 , pid_78:dp0 ) , ( pid_85:cp0 , pid_90:dp0 , pid_95:dp0 ) , ( pid_102:cp0 , pid_107:dp0 , pid_112:dp0 ) )
			EXE: { |;| (:pid_31 , run) (:pid_32 , run) (:pid_34 , run) (:pid_34 
	, cp_init) (:pid_2 , run) (:pid_4 , run) (:pid_4 , n1_out_Log) }
			TRACE: { |;| (:pid_31 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_5 }) (:pid_34 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_5 }) 
	(:pid_34 , ${ output#env inst::Trickle.Node.Log 0 ${ + param::Trickle.Node.z_0 
	param::Trickle.Node.z_5 } } @ z_5) }
			/*FLAGS{ COVERAGE-ELEMENT }*/
			INFO{
				<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#1->run::pid_5:Trickle.Observer.o#1->prot::Trickle.Observer.o#1" as trace="tpid#1->run::pid_5:Trickle.Observer.o#1->prot::Trickle.Observer.o#1">
			}
			PC: ((t_5 < 4) && (0 <= (t_5 + -2)) && (z_0 > 0) && (z_1 > 0) && (z_2 > 0) && (z_3 > 
	0) && (z_4 > 0))
			DATA{
				:pid_2:uncoveredExit = 0;
				:pid_2:mess = INIT;
				:pid_31:node_time = z_5;
				:pid_31:z = z_5;
				:pid_31:localTime = (z_0 + z_5);
				:pid_31:localPC = ((t_5 < 4) && (0 <= (t_5 + -2)) && (z_0 > 0));
				:pid_32:e = 0;
				:pid_32:tau = 4;
				:pid_32:c = 0;
				:pid_32:t = t_5;
				:pid_32:cl = 0;
				:pid_38:cl = z_5;
				:pid_43:cl = z_5;
			}
			EC:<Id:10;Ev:4;H:3;W:5>{ SC: ( pid_5:o#1 , ( pid_35:cp1 , pid_39:dp0 , pid_44:dp0 ) , ( pid_51:cp0 , pid_56:dp0 , pid_61:dp0 ) , ( pid_68:cp0 , pid_73:dp0 , pid_78:dp0 ) , ( pid_85:cp0 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
				EXE: { |;| (:pid_99 , run) (:pid_100 , run) (:pid_102 , run) 
	(:pid_102 , cp_init) (:pid_2 , run) }
				TRACE: { |;| (:pid_99 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_14 }) (:pid_102 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_13 }) 
	(:pid_102 , ${ output#env inst::Trickle.Node.Log 0 ${ + param::Trickle.Node.z_14 
	param::Trickle.Node.z_4 } } @ z_14) }
				PC: ((t_13 < 4) && (t_5 < 4) && (0 <= (t_13 + -2)) && (0 <= (t_5 + -2)) && (z_0 > 0) 
	&& (z_1 > 0) && (z_2 > 0) && (z_3 > 0) && (z_4 > 0))
				DATA{
					:pid_2:uncoveredExit = 1;
					:pid_99:node_time = z_14;
					:pid_99:z = z_14;
					:pid_99:localTime = (z_14 + z_4);
					:pid_99:undef_DM1 = true;
					:pid_99:undef_DM2 = true;
					:pid_99:localPC = ((t_13 < 4) && (0 <= (t_13 + -2)) && (z_4 > 0));
					:pid_100:e = 0;
					:pid_100:tau = 4;
					:pid_100:c = 0;
					:pid_100:t = t_13;
					:pid_100:cl = 0;
					:pid_106:cl = z_14;
					:pid_111:cl = z_14;
				}
				EC:<Id:17;Ev:0;H:4;W:5>{ SC: ( pid_6:o#2 , ( pid_35:cp1 , pid_39:dp0 , pid_44:dp0 ) , ( pid_52:cp1 , pid_56:dp0 , pid_61:dp0 ) , ( pid_68:cp0 , pid_73:dp0 , pid_78:dp0 ) , ( pid_85:cp0 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
					EXE: { |;| (:pid_48 , run) (:pid_49 , run) (:pid_51 , run) 
	(:pid_51 , cp_init) (:pid_2 , run) (:pid_5 , run) (:pid_5 , n2_out_Log) }
					TRACE: { |;| (:pid_48 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_16 }) (:pid_51 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_14 }) 
	(:pid_51 , ${ output#env inst::Trickle.Node.Log 0 ${ + param::Trickle.Node.z_1 
	param::Trickle.Node.z_16 } } @ z_16) }
					/*FLAGS{ COVERAGE-ELEMENT }*/
					INFO{
						<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#2->run::pid_6:Trickle.Observer.o#2->prot::Trickle.Observer.o#2" as trace="tpid#2->run::pid_6:Trickle.Observer.o#2->prot::Trickle.Observer.o#2">
					}
					PC: ((t_13 < 4) && (t_14 < 4) && (t_5 < 4) && (0 <= (t_13 + -2)) && (0 <= (t_14 + -2)
	) && (0 <= (t_5 + -2)) && (z_0 > 0) && (z_1 > 0) && (z_2 > 0) && (z_3 > 0) && 
	(z_4 > 0))
					DATA{
						:pid_2:uncoveredExit = 0;
						:pid_48:node_time = z_16;
						:pid_48:z = z_16;
						:pid_48:localTime = (z_1 + z_16);
						:pid_48:undef_DM1 = true;
						:pid_48:undef_DM2 = true;
						:pid_48:localPC = ((t_14 < 4) && (0 <= (t_14 + -2)) && (z_1 > 0));
						:pid_49:e = 0;
						:pid_49:tau = 4;
						:pid_49:c = 0;
						:pid_49:t = t_14;
						:pid_49:cl = 0;
						:pid_55:cl = z_16;
						:pid_60:cl = z_16;
					}
				}
			}
			EC:<Id:11;Ev:5;H:3;W:8>{ SC: ( pid_5:o#1 , ( pid_35:cp1 , pid_39:dp0 , pid_44:dp0 ) , ( pid_51:cp0 , pid_56:dp0 , pid_61:dp0 ) , ( pid_68:cp0 , pid_73:dp0 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_102:cp0 , pid_107:dp0 , pid_112:dp0 ) )
				EXE: { |;| (:pid_82 , run) (:pid_83 , run) (:pid_85 , run) 
	(:pid_85 , cp_init) (:pid_2 , run) }
				TRACE: { |;| (:pid_82 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_13 }) (:pid_85 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_12 }) 
	(:pid_85 , ${ output#env inst::Trickle.Node.Log 0 ${ + param::Trickle.Node.z_13 
	param::Trickle.Node.z_3 } } @ z_13) }
				PC: ((t_12 < 4) && (t_5 < 4) && (0 <= (t_12 + -2)) && (0 <= (t_5 + -2)) && (z_0 > 0) 
	&& (z_1 > 0) && (z_2 > 0) && (z_3 > 0) && (z_4 > 0))
				DATA{
					:pid_2:uncoveredExit = 1;
					:pid_82:node_time = z_13;
					:pid_82:z = z_13;
					:pid_82:localTime = (z_13 + z_3);
					:pid_82:undef_DM1 = true;
					:pid_82:undef_DM2 = true;
					:pid_82:localPC = ((t_12 < 4) && (0 <= (t_12 + -2)) && (z_3 > 0));
					:pid_83:e = 0;
					:pid_83:tau = 4;
					:pid_83:c = 0;
					:pid_83:t = t_12;
					:pid_83:cl = 0;
					:pid_89:cl = z_13;
					:pid_94:cl = z_13;
				}
				EC:<Id:24;Ev:0;H:4;W:8>{ SC: ( pid_6:o#2 , ( pid_35:cp1 , pid_39:dp0 , pid_44:dp0 ) , ( pid_52:cp1 , pid_56:dp0 , pid_61:dp0 ) , ( pid_68:cp0 , pid_73:dp0 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_102:cp0 , pid_107:dp0 , pid_112:dp0 ) )
					EXE: { |;| (:pid_48 , run) (:pid_49 , run) (:pid_51 , run) 
	(:pid_51 , cp_init) (:pid_2 , run) (:pid_5 , run) (:pid_5 , n2_out_Log) }
					TRACE: { |;| (:pid_48 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_21 }) (:pid_51 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_17 }) 
	(:pid_51 , ${ output#env inst::Trickle.Node.Log 0 ${ + param::Trickle.Node.z_1 
	param::Trickle.Node.z_21 } } @ z_21) }
					/*FLAGS{ COVERAGE-ELEMENT }*/
					INFO{
						<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#2->run::pid_6:Trickle.Observer.o#2->prot::Trickle.Observer.o#2" as trace="tpid#2->run::pid_6:Trickle.Observer.o#2->prot::Trickle.Observer.o#2">
					}
					PC: ((t_12 < 4) && (t_17 < 4) && (t_5 < 4) && (0 <= (t_12 + -2)) && (0 <= (t_17 + -2)
	) && (0 <= (t_5 + -2)) && (z_0 > 0) && (z_1 > 0) && (z_2 > 0) && (z_3 > 0) && 
	(z_4 > 0))
					DATA{
						:pid_2:uncoveredExit = 0;
						:pid_48:node_time = z_21;
						:pid_48:z = z_21;
						:pid_48:localTime = (z_1 + z_21);
						:pid_48:undef_DM1 = true;
						:pid_48:undef_DM2 = true;
						:pid_48:localPC = ((t_17 < 4) && (0 <= (t_17 + -2)) && (z_1 > 0));
						:pid_49:e = 0;
						:pid_49:tau = 4;
						:pid_49:c = 0;
						:pid_49:t = t_17;
						:pid_49:cl = 0;
						:pid_55:cl = z_21;
						:pid_60:cl = z_21;
					}
				}
			}
			EC:<Id:12;Ev:6;H:3;W:9>{ SC: ( pid_5:o#1 , ( pid_35:cp1 , pid_39:dp0 , pid_44:dp0 ) , ( pid_51:cp0 , pid_56:dp0 , pid_61:dp0 ) , ( pid_69:cp1 , pid_73:dp0 , pid_78:dp0 ) , ( pid_85:cp0 , pid_90:dp0 , pid_95:dp0 ) , ( pid_102:cp0 , pid_107:dp0 , pid_112:dp0 ) )
				EXE: { |;| (:pid_65 , run) (:pid_66 , run) (:pid_68 , run) 
	(:pid_68 , cp_init) (:pid_2 , run) }
				TRACE: { |;| (:pid_65 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_12 }) (:pid_68 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_11 }) 
	(:pid_68 , ${ output#env inst::Trickle.Node.Log 0 ${ + param::Trickle.Node.z_12 
	param::Trickle.Node.z_2 } } @ z_12) }
				PC: ((t_11 < 4) && (t_5 < 4) && (0 <= (t_11 + -2)) && (0 <= (t_5 + -2)) && (z_0 > 0) 
	&& (z_1 > 0) && (z_2 > 0) && (z_3 > 0) && (z_4 > 0))
				DATA{
					:pid_2:uncoveredExit = 1;
					:pid_65:node_time = z_12;
					:pid_65:z = z_12;
					:pid_65:localTime = (z_12 + z_2);
					:pid_65:undef_DM1 = true;
					:pid_65:undef_DM2 = true;
					:pid_65:localPC = ((t_11 < 4) && (0 <= (t_11 + -2)) && (z_2 > 0));
					:pid_66:e = 0;
					:pid_66:tau = 4;
					:pid_66:c = 0;
					:pid_66:t = t_11;
					:pid_66:cl = 0;
					:pid_72:cl = z_12;
					:pid_77:cl = z_12;
				}
				EC:<Id:31;Ev:0;H:4;W:9>{ SC: ( pid_6:o#2 , ( pid_35:cp1 , pid_39:dp0 , pid_44:dp0 ) , ( pid_52:cp1 , pid_56:dp0 , pid_61:dp0 ) , ( pid_69:cp1 , pid_73:dp0 , pid_78:dp0 ) , ( pid_85:cp0 , pid_90:dp0 , pid_95:dp0 ) , ( pid_102:cp0 , pid_107:dp0 , pid_112:dp0 ) )
					EXE: { |;| (:pid_48 , run) (:pid_49 , run) (:pid_51 , run) 
	(:pid_51 , cp_init) (:pid_2 , run) (:pid_5 , run) (:pid_5 , n2_out_Log) }
					TRACE: { |;| (:pid_48 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_26 }) (:pid_51 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_20 }) 
	(:pid_51 , ${ output#env inst::Trickle.Node.Log 0 ${ + param::Trickle.Node.z_1 
	param::Trickle.Node.z_26 } } @ z_26) }
					/*FLAGS{ COVERAGE-ELEMENT }*/
					INFO{
						<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#2->run::pid_6:Trickle.Observer.o#2->prot::Trickle.Observer.o#2" as trace="tpid#2->run::pid_6:Trickle.Observer.o#2->prot::Trickle.Observer.o#2">
					}
					PC: ((t_11 < 4) && (t_20 < 4) && (t_5 < 4) && (0 <= (t_11 + -2)) && (0 <= (t_20 + -2)
	) && (0 <= (t_5 + -2)) && (z_0 > 0) && (z_1 > 0) && (z_2 > 0) && (z_3 > 0) && 
	(z_4 > 0))
					DATA{
						:pid_2:uncoveredExit = 0;
						:pid_48:node_time = z_26;
						:pid_48:z = z_26;
						:pid_48:localTime = (z_1 + z_26);
						:pid_48:undef_DM1 = true;
						:pid_48:undef_DM2 = true;
						:pid_48:localPC = ((t_20 < 4) && (0 <= (t_20 + -2)) && (z_1 > 0));
						:pid_49:e = 0;
						:pid_49:tau = 4;
						:pid_49:c = 0;
						:pid_49:t = t_20;
						:pid_49:cl = 0;
						:pid_55:cl = z_26;
						:pid_60:cl = z_26;
					}
				}
			}
			EC:<Id:13;Ev:7;H:3;W:10>{ SC: ( pid_6:o#2 , ( pid_35:cp1 , pid_39:dp0 , pid_44:dp0 ) , ( pid_52:cp1 , pid_56:dp0 , pid_61:dp0 ) , ( pid_68:cp0 , pid_73:dp0 , pid_78:dp0 ) , ( pid_85:cp0 , pid_90:dp0 , pid_95:dp0 ) , ( pid_102:cp0 , pid_107:dp0 , pid_112:dp0 ) )
				EXE: { |;| (:pid_48 , run) (:pid_49 , run) (:pid_51 , run) 
	(:pid_51 , cp_init) (:pid_2 , run) (:pid_5 , run) (:pid_5 , n2_out_Log) }
				TRACE: { |;| (:pid_48 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_11 }) (:pid_51 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_10 }) 
	(:pid_51 , ${ output#env inst::Trickle.Node.Log 0 ${ + param::Trickle.Node.z_1 
	param::Trickle.Node.z_11 } } @ z_11) }
				/*FLAGS{ COVERAGE-ELEMENT }*/
				INFO{
					<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#2->run::pid_6:Trickle.Observer.o#2->prot::Trickle.Observer.o#2" as trace="tpid#2->run::pid_6:Trickle.Observer.o#2->prot::Trickle.Observer.o#2">
				}
				PC: ((t_10 < 4) && (t_5 < 4) && (0 <= (t_10 + -2)) && (0 <= (t_5 + -2)) && (z_0 > 0) 
	&& (z_1 > 0) && (z_2 > 0) && (z_3 > 0) && (z_4 > 0))
				DATA{
					:pid_2:uncoveredExit = 0;
					:pid_48:node_time = z_11;
					:pid_48:z = z_11;
					:pid_48:localTime = (z_1 + z_11);
					:pid_48:undef_DM1 = true;
					:pid_48:undef_DM2 = true;
					:pid_48:localPC = ((t_10 < 4) && (0 <= (t_10 + -2)) && (z_1 > 0));
					:pid_49:e = 0;
					:pid_49:tau = 4;
					:pid_49:c = 0;
					:pid_49:t = t_10;
					:pid_49:cl = 0;
					:pid_55:cl = z_11;
					:pid_60:cl = z_11;
				}
				EC:<Id:40;Ev:11;H:4;W:33>{ SC: ( pid_7:o#3 , ( pid_35:cp1 , pid_39:dp0 , pid_44:dp0 ) , ( pid_52:cp1 , pid_56:dp0 , pid_61:dp0 ) , ( pid_69:cp1 , pid_73:dp0 , pid_78:dp0 ) , ( pid_85:cp0 , pid_90:dp0 , pid_95:dp0 ) , ( pid_102:cp0 , pid_107:dp0 , pid_112:dp0 ) )
					EXE: { |;| (:pid_65 , run) (:pid_66 , run) (:pid_68 , run) 
	(:pid_68 , cp_init) (:pid_2 , run) (:pid_6 , run) (:pid_6 , n3_out_Log) }
					TRACE: { |;| (:pid_65 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_32 }) (:pid_68 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_23 }) 
	(:pid_68 , ${ output#env inst::Trickle.Node.Log 0 ${ + param::Trickle.Node.z_2 
	param::Trickle.Node.z_32 } } @ z_32) }
					/*FLAGS{ COVERAGE-ELEMENT }*/
					INFO{
						<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#3->run::pid_7:Trickle.Observer.o#3->prot::Trickle.Observer.o#3" as trace="tpid#3->run::pid_7:Trickle.Observer.o#3->prot::Trickle.Observer.o#3">
					}
					PC: ((t_10 < 4) && (t_23 < 4) && (t_5 < 4) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)
	) && (0 <= (t_5 + -2)) && (z_0 > 0) && (z_1 > 0) && (z_2 > 0) && (z_3 > 0) && 
	(z_4 > 0))
					DATA{
						:pid_2:uncoveredExit = 0;
						:pid_65:node_time = z_32;
						:pid_65:z = z_32;
						:pid_65:localTime = (z_2 + z_32);
						:pid_65:undef_DM1 = true;
						:pid_65:undef_DM2 = true;
						:pid_65:localPC = ((t_23 < 4) && (0 <= (t_23 + -2)) && (z_2 > 0));
						:pid_66:e = 0;
						:pid_66:tau = 4;
						:pid_66:c = 0;
						:pid_66:t = t_23;
						:pid_66:cl = 0;
						:pid_72:cl = z_32;
						:pid_77:cl = z_32;
					}
					EC:<Id:66;Ev:12;H:5;W:33>{ SC: ( pid_7:o#3 , ( pid_35:cp1 , pid_39:dp0 , pid_44:dp0 ) , ( pid_52:cp1 , pid_56:dp0 , pid_61:dp0 ) , ( pid_69:cp1 , pid_73:dp0 , pid_78:dp0 ) , ( pid_85:cp0 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
						EXE: { |;| (:pid_99 , run) (:pid_100 , run) (:pid_102 , 
	run) (:pid_102 , cp_init) (:pid_2 , run) }
						TRACE: { |;| (:pid_99 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_54 }) (:pid_102 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_40 }) 
	(:pid_102 , ${ output#env inst::Trickle.Node.Log 0 ${ + param::Trickle.Node.z_4 
	param::Trickle.Node.z_54 } } @ z_54) }
						PC: ((t_10 < 4) && (t_23 < 4) && (t_40 < 4) && (t_5 < 4) && (0 <= (t_10 + -2)) && (0 
	<= (t_23 + -2)) && (0 <= (t_40 + -2)) && (0 <= (t_5 + -2)) && (z_0 > 0) && (z_1 
	> 0) && (z_2 > 0) && (z_3 > 0) && (z_4 > 0))
						DATA{
							:pid_2:uncoveredExit = 1;
							:pid_99:node_time = z_54;
							:pid_99:z = z_54;
							:pid_99:localTime = (z_4 + z_54);
							:pid_99:undef_DM1 = true;
							:pid_99:undef_DM2 = true;
							:pid_99:localPC = ((t_40 < 4) && (0 <= (t_40 + -2)) && (z_4 > 0));
							:pid_100:e = 0;
							:pid_100:tau = 4;
							:pid_100:c = 0;
							:pid_100:t = t_40;
							:pid_100:cl = 0;
							:pid_106:cl = z_54;
							:pid_111:cl = z_54;
						}
						EC:<Id:73;Ev:0;H:6;W:33>{ SC: ( pid_8:o#4 , ( pid_35:cp1 , pid_39:dp0 , pid_44:dp0 ) , ( pid_52:cp1 , pid_56:dp0 , pid_61:dp0 ) , ( pid_69:cp1 , pid_73:dp0 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
							EXE: { |;| (:pid_82 , run) (:pid_83 , run) (:pid_85 
	, run) (:pid_85 , cp_init) (:pid_2 , run) (:pid_7 , run) (:pid_7 , n4_out_Log) }
							TRACE: { |;| (:pid_82 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_58 }) (:pid_85 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_41 }) 
	(:pid_85 , ${ output#env inst::Trickle.Node.Log 0 ${ + param::Trickle.Node.z_3 
	param::Trickle.Node.z_58 } } @ z_58) }
							/*FLAGS{ COVERAGE-ELEMENT }*/
							INFO{
								<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#4->run::pid_8:Trickle.Observer.o#4->prot::Trickle.Observer.o#4" as trace="tpid#4->run::pid_8:Trickle.Observer.o#4->prot::Trickle.Observer.o#4">
							}
							PC: ((t_10 < 4) && (t_23 < 4) && (t_40 < 4) && (t_41 < 4) && (t_5 < 4) && (0 <= 
	(t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_40 + -2)) && (0 <= (t_41 + -2)) 
	&& (0 <= (t_5 + -2)) && (z_0 > 0) && (z_1 > 0) && (z_2 > 0) && (z_3 > 0) && (z_4 
	> 0))
							DATA{
								:pid_2:uncoveredExit = 0;
								:pid_82:node_time = z_58;
								:pid_82:z = z_58;
								:pid_82:localTime = (z_3 + z_58);
								:pid_82:undef_DM1 = true;
								:pid_82:undef_DM2 = true;
								:pid_82:localPC = ((t_41 < 4) && (0 <= (t_41 + -2)) && (z_3 > 0));
								:pid_83:e = 0;
								:pid_83:tau = 4;
								:pid_83:c = 0;
								:pid_83:t = t_41;
								:pid_83:cl = 0;
								:pid_89:cl = z_58;
								:pid_94:cl = z_58;
							}
						}
					}
					EC:<Id:67;Ev:13;H:5;W:56>{ SC: ( pid_8:o#4 , ( pid_35:cp1 , pid_39:dp0 , pid_44:dp0 ) , ( pid_52:cp1 , pid_56:dp0 , pid_61:dp0 ) , ( pid_69:cp1 , pid_73:dp0 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_102:cp0 , pid_107:dp0 , pid_112:dp0 ) )
						EXE: { |;| (:pid_82 , run) (:pid_83 , run) (:pid_85 , 
	run) (:pid_85 , cp_init) (:pid_2 , run) (:pid_7 , run) (:pid_7 , n4_out_Log) }
						TRACE: { |;| (:pid_82 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_53 }) (:pid_85 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_39 }) 
	(:pid_85 , ${ output#env inst::Trickle.Node.Log 0 ${ + param::Trickle.Node.z_3 
	param::Trickle.Node.z_53 } } @ z_53) }
						/*FLAGS{ COVERAGE-ELEMENT }*/
						INFO{
							<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#4->run::pid_8:Trickle.Observer.o#4->prot::Trickle.Observer.o#4" as trace="tpid#4->run::pid_8:Trickle.Observer.o#4->prot::Trickle.Observer.o#4">
						}
						PC: ((t_10 < 4) && (t_23 < 4) && (t_39 < 4) && (t_5 < 4) && (0 <= (t_10 + -2)) && (0 
	<= (t_23 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_5 + -2)) && (z_0 > 0) && (z_1 
	> 0) && (z_2 > 0) && (z_3 > 0) && (z_4 > 0))
						DATA{
							:pid_2:uncoveredExit = 0;
							:pid_82:node_time = z_53;
							:pid_82:z = z_53;
							:pid_82:localTime = (z_3 + z_53);
							:pid_82:undef_DM1 = true;
							:pid_82:undef_DM2 = true;
							:pid_82:localPC = ((t_39 < 4) && (0 <= (t_39 + -2)) && (z_3 > 0));
							:pid_83:e = 0;
							:pid_83:tau = 4;
							:pid_83:c = 0;
							:pid_83:t = t_39;
							:pid_83:cl = 0;
							:pid_89:cl = z_53;
							:pid_94:cl = z_53;
						}
						EC:<Id:80;Ev:19;H:6;W:56>{ SC: ( pid_9:o#5 , ( pid_35:cp1 , pid_39:dp0 , pid_44:dp0 ) , ( pid_52:cp1 , pid_56:dp0 , pid_61:dp0 ) , ( pid_69:cp1 , pid_73:dp0 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
							EXE: { |;| (:pid_99 , run) (:pid_100 , run) 
	(:pid_102 , run) (:pid_102 , cp_init) (:pid_2 , run) (:pid_8 , run) (:pid_8 , 
	n5_out_Log) }
							TRACE: { |;| (:pid_99 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_64 }) (:pid_102 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_42 }) 
	(:pid_102 , ${ output#env inst::Trickle.Node.Log 0 ${ + param::Trickle.Node.z_4 
	param::Trickle.Node.z_64 } } @ z_64) }
							/*FLAGS{ COVERAGE-ELEMENT }*/
							INFO{
								<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#5->run::pid_9:Trickle.Observer.o#5->prot::Trickle.Observer.o#5" as trace="tpid#5->run::pid_9:Trickle.Observer.o#5->prot::Trickle.Observer.o#5">
							}
							PC: ((t_10 < 4) && (t_23 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (0 <= 
	(t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) 
	&& (0 <= (t_5 + -2)) && (z_0 > 0) && (z_1 > 0) && (z_2 > 0) && (z_3 > 0) && (z_4 
	> 0))
							DATA{
								:pid_2:uncoveredExit = 0;
								:pid_99:node_time = z_64;
								:pid_99:z = z_64;
								:pid_99:localTime = (z_4 + z_64);
								:pid_99:undef_DM1 = true;
								:pid_99:undef_DM2 = true;
								:pid_99:localPC = ((t_42 < 4) && (0 <= (t_42 + -2)) && (z_4 > 0));
								:pid_100:e = 0;
								:pid_100:tau = 4;
								:pid_100:c = 0;
								:pid_100:t = t_42;
								:pid_100:cl = 0;
								:pid_106:cl = z_64;
								:pid_111:cl = z_64;
							}
							EC:<Id:127;Ev:20;H:7;W:56>{ SC: ( pid_9:o#5 , ( pid_35:cp1 , pid_39:dp0 , pid_44:dp0 ) , ( pid_52:cp1 , pid_56:dp0 , pid_61:dp0 ) , ( pid_69:cp1 , pid_73:dp0 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
								EXE: { |;| (:pid_99 , run) (:pid_100 , run) 
	(:pid_103 , run) (:pid_103 , cp_sendCM) (:pid_2 , run) }
								TRACE: { |;| (:pid_99 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_94 }) (:pid_103 , ${ output 
	inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + param::Trickle.Node.z_4 
	param::Trickle.Node.z_64 param::Trickle.Node.z_94 } } @ (z_64 + z_94)) }
								PC: ((z_94 == t_42) && (t_10 < 4) && (t_23 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 
	< 4) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_39 + -2)) && (0 <= 
	(t_42 + -2)) && (0 <= (t_5 + -2)) && (z_0 > 0) && (z_1 > 0) && (z_2 > 0) && (z_3 
	> 0) && (z_4 > 0) && (z_64 > 0))
								DATA{
									:pid_2:uncoveredExit = 1;
									:pid_99:node_time = (z_64 + z_94);
									:pid_99:z = z_94;
									:pid_99:localTime = (z_4 + z_64 + z_94);
									:pid_99:localPC = ((z_94 == t_42) && (t_42 < 4) && (0 <= (t_42 + -2)) && (z_4 > 0) && (z_64 > 0));
									:pid_100:cl = z_94;
									:pid_106:cl = (z_64 + z_94);
									:pid_111:cl = (z_64 + z_94);
								}
								BUFFER{
									:pid_82:bufferNode:<FIFO>#0{
										:pid_99:ControlMsg([ 0 , 0 ] , (z_4 + z_64 + z_94));
									}
								}
								EC:<Id:134;Ev:0;H:8;W:56>{ SC: ( pid_10:o#6 , ( pid_36:cp2 , pid_39:dp0 , pid_44:dp0 ) , ( pid_52:cp1 , pid_56:dp0 , pid_61:dp0 ) , ( pid_69:cp1 , pid_73:dp0 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
									EXE: { |;| (:pid_31 , run) (:pid_32 , run) 
	(:pid_35 , run) (:pid_35 , cp_sendCM) (:pid_2 , run) (:pid_9 , run) (:pid_9 , 
	n1_out_CM) }
									TRACE: { |;| (:pid_31 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_95 }) (:pid_35 , ${ output 
	inst::Trickle.Node.ControlMsg [ 1 , 1 ] ${ + param::Trickle.Node.z_0 
	param::Trickle.Node.z_5 param::Trickle.Node.z_95 } } @ (z_5 + z_95)) }
									/*FLAGS{ COVERAGE-ELEMENT }*/
									INFO{
										<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#6->run::pid_10:Trickle.Observer.o#6->prot::Trickle.Observer.o#6" as trace="tpid#6->run::pid_10:Trickle.Observer.o#6->prot::Trickle.Observer.o#6">
									}
									PC: ((z_94 == t_42) && (z_95 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_39 < 4) && 
	(t_42 < 4) && (t_5 < 4) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= 
	(t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (z_0 > 0) && (z_1 > 0)
	 && (z_2 > 0) && (z_3 > 0) && (z_4 > 0) && (z_5 > 0) && (z_64 > 0))
									DATA{
										:pid_2:uncoveredExit = 0;
										:pid_2:seqBuff[0] = 1;
										:pid_2:seqBuff[1] = 1;
										:pid_31:node_time = (z_5 + z_95);
										:pid_31:z = z_95;
										:pid_31:localTime = (z_0 + z_5 + z_95);
										:pid_31:localPC = ((z_95 == t_5) && (t_5 < 4) && (0 <= (t_5 + -2)) && (z_0 > 0) && (z_5 > 0));
										:pid_32:cl = z_95;
										:pid_38:cl = (z_5 + z_95);
										:pid_43:cl = (z_5 + z_95);
									}
									BUFFER{
										:pid_48:bufferNode:<FIFO>#0{
											:pid_31:ControlMsg([ 1 , 1 ] , (z_0 + z_5 + z_95));
										}
										:pid_65:bufferNode:<FIFO>#0{
											:pid_31:ControlMsg([ 1 , 1 ] , (z_0 + z_5 + z_95));
										}
									}
								}
							}
							EC:<Id:128;Ev:21;H:7;W:109>{ SC: ( pid_9:o#5 , ( pid_35:cp1 , pid_39:dp0 , pid_44:dp0 ) , ( pid_52:cp1 , pid_56:dp0 , pid_61:dp0 ) , ( pid_69:cp1 , pid_73:dp0 , pid_78:dp0 ) , ( pid_87:cp2 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
								EXE: { |;| (:pid_82 , run) (:pid_83 , run) 
	(:pid_86 , run) (:pid_86 , cp_sendCM) (:pid_2 , run) }
								TRACE: { |;| (:pid_82 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_93 }) (:pid_86 , ${ output 
	inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + param::Trickle.Node.z_3 
	param::Trickle.Node.z_53 param::Trickle.Node.z_93 } } @ (z_53 + z_93)) }
								PC: ((z_93 == t_39) && (t_10 < 4) && (t_23 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 
	< 4) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_39 + -2)) && (0 <= 
	(t_42 + -2)) && (0 <= (t_5 + -2)) && (z_0 > 0) && (z_1 > 0) && (z_2 > 0) && (z_3 
	> 0) && (z_4 > 0) && (z_53 > 0))
								DATA{
									:pid_2:uncoveredExit = 1;
									:pid_82:node_time = (z_53 + z_93);
									:pid_82:z = z_93;
									:pid_82:localTime = (z_3 + z_53 + z_93);
									:pid_82:localPC = ((z_93 == t_39) && (t_39 < 4) && (0 <= (t_39 + -2)) && (z_3 > 0) && (z_53 > 0));
									:pid_83:cl = z_93;
									:pid_89:cl = (z_53 + z_93);
									:pid_94:cl = (z_53 + z_93);
								}
								BUFFER{
									:pid_48:bufferNode:<FIFO>#0{
										:pid_82:ControlMsg([ 0 , 0 ] , (z_3 + z_53 + z_93));
									}
								}
								EC:<Id:142;Ev:0;H:8;W:109>{ SC: ( pid_10:o#6 , ( pid_36:cp2 , pid_39:dp0 , pid_44:dp0 ) , ( pid_52:cp1 , pid_56:dp0 , pid_61:dp0 ) , ( pid_69:cp1 , pid_73:dp0 , pid_78:dp0 ) , ( pid_87:cp2 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
									EXE: { |;| (:pid_31 , run) (:pid_32 , run) 
	(:pid_35 , run) (:pid_35 , cp_sendCM) (:pid_2 , run) (:pid_9 , run) (:pid_9 , 
	n1_out_CM) }
									TRACE: { |;| (:pid_31 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_100 }) (:pid_35 , ${ output 
	inst::Trickle.Node.ControlMsg [ 1 , 1 ] ${ + param::Trickle.Node.z_0 
	param::Trickle.Node.z_100 param::Trickle.Node.z_5 } } @ (z_100 + z_5)) }
									/*FLAGS{ COVERAGE-ELEMENT }*/
									INFO{
										<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#6->run::pid_10:Trickle.Observer.o#6->prot::Trickle.Observer.o#6" as trace="tpid#6->run::pid_10:Trickle.Observer.o#6->prot::Trickle.Observer.o#6">
									}
									PC: ((z_100 == t_5) && (z_93 == t_39) && (t_10 < 4) && (t_23 < 4) && (t_39 < 4) && 
	(t_42 < 4) && (t_5 < 4) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= 
	(t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (z_0 > 0) && (z_1 > 0)
	 && (z_2 > 0) && (z_3 > 0) && (z_4 > 0) && (z_5 > 0) && (z_53 > 0))
									DATA{
										:pid_2:uncoveredExit = 0;
										:pid_2:seqBuff[0] = 1;
										:pid_2:seqBuff[1] = 1;
										:pid_31:node_time = (z_100 + z_5);
										:pid_31:z = z_100;
										:pid_31:localTime = (z_0 + z_100 + z_5);
										:pid_31:localPC = ((z_100 == t_5) && (t_5 < 4) && (0 <= (t_5 + -2)) && (z_0 > 0) && (z_5 > 0));
										:pid_32:cl = z_100;
										:pid_38:cl = (z_100 + z_5);
										:pid_43:cl = (z_100 + z_5);
									}
									BUFFER{
										:pid_48:bufferNode:<FIFO>#0{
											:pid_82:ControlMsg([ 0 , 0 ] , (z_3 + z_53 + z_93));
											:pid_31:ControlMsg([ 1 , 1 ] , (z_0 + z_100 + z_5));
										}
										:pid_65:bufferNode:<FIFO>#0{
											:pid_31:ControlMsg([ 1 , 1 ] , (z_0 + z_100 + z_5));
										}
									}
								}
							}
							EC:<Id:129;Ev:22;H:7;W:110>{ SC: ( pid_9:o#5 , ( pid_35:cp1 , pid_39:dp0 , pid_44:dp0 ) , ( pid_52:cp1 , pid_56:dp0 , pid_61:dp0 ) , ( pid_70:cp2 , pid_73:dp0 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
								EXE: { |;| (:pid_65 , run) (:pid_66 , run) 
	(:pid_69 , run) (:pid_69 , cp_sendCM) (:pid_2 , run) }
								TRACE: { |;| (:pid_65 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_92 }) (:pid_69 , ${ output 
	inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + param::Trickle.Node.z_2 
	param::Trickle.Node.z_32 param::Trickle.Node.z_92 } } @ (z_32 + z_92)) }
								PC: ((z_92 == t_23) && (t_10 < 4) && (t_23 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 
	< 4) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_39 + -2)) && (0 <= 
	(t_42 + -2)) && (0 <= (t_5 + -2)) && (z_0 > 0) && (z_1 > 0) && (z_2 > 0) && (z_3 
	> 0) && (z_32 > 0) && (z_4 > 0))
								DATA{
									:pid_2:uncoveredExit = 1;
									:pid_65:node_time = (z_32 + z_92);
									:pid_65:z = z_92;
									:pid_65:localTime = (z_2 + z_32 + z_92);
									:pid_65:localPC = ((z_92 == t_23) && (t_23 < 4) && (0 <= (t_23 + -2)) && (z_2 > 0) && (z_32 > 0));
									:pid_66:cl = z_92;
									:pid_72:cl = (z_32 + z_92);
									:pid_77:cl = (z_32 + z_92);
								}
								BUFFER{
									:pid_31:bufferNode:<FIFO>#0{
										:pid_65:ControlMsg([ 0 , 0 ] , (z_2 + z_32 + z_92));
									}
									:pid_48:bufferNode:<FIFO>#0{
										:pid_65:ControlMsg([ 0 , 0 ] , (z_2 + z_32 + z_92));
									}
									:pid_82:bufferNode:<FIFO>#0{
										:pid_65:ControlMsg([ 0 , 0 ] , (z_2 + z_32 + z_92));
									}
									:pid_99:bufferNode:<FIFO>#0{
										:pid_65:ControlMsg([ 0 , 0 ] , (z_2 + z_32 + z_92));
									}
								}
								EC:<Id:150;Ev:0;H:8;W:110>{ SC: ( pid_10:o#6 , ( pid_36:cp2 , pid_39:dp0 , pid_44:dp0 ) , ( pid_52:cp1 , pid_56:dp0 , pid_61:dp0 ) , ( pid_70:cp2 , pid_73:dp0 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
									EXE: { |;| (:pid_31 , run) (:pid_32 , run) 
	(:pid_35 , run) (:pid_35 , cp_sendCM) (:pid_2 , run) (:pid_9 , run) (:pid_9 , 
	n1_out_CM) }
									TRACE: { |;| (:pid_31 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_105 }) (:pid_35 , ${ output 
	inst::Trickle.Node.ControlMsg [ 1 , 1 ] ${ + param::Trickle.Node.z_0 
	param::Trickle.Node.z_105 param::Trickle.Node.z_5 } } @ (z_105 + z_5)) }
									/*FLAGS{ COVERAGE-ELEMENT }*/
									INFO{
										<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#6->run::pid_10:Trickle.Observer.o#6->prot::Trickle.Observer.o#6" as trace="tpid#6->run::pid_10:Trickle.Observer.o#6->prot::Trickle.Observer.o#6">
									}
									PC: ((z_105 == t_5) && (z_92 == t_23) && (t_10 < 4) && (t_23 < 4) && (t_39 < 4) && 
	(t_42 < 4) && (t_5 < 4) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= 
	(t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (z_0 > 0) && (z_1 > 0)
	 && (z_2 > 0) && (z_3 > 0) && (z_32 > 0) && (z_4 > 0) && (z_5 > 0))
									DATA{
										:pid_2:uncoveredExit = 0;
										:pid_2:seqBuff[0] = 1;
										:pid_2:seqBuff[1] = 1;
										:pid_31:node_time = (z_105 + z_5);
										:pid_31:z = z_105;
										:pid_31:localTime = (z_0 + z_105 + z_5);
										:pid_31:localPC = ((z_105 == t_5) && (t_5 < 4) && (0 <= (t_5 + -2)) && (z_0 > 0) && (z_5 > 0));
										:pid_32:cl = z_105;
										:pid_38:cl = (z_105 + z_5);
										:pid_43:cl = (z_105 + z_5);
									}
									BUFFER{
										:pid_48:bufferNode:<FIFO>#0{
											:pid_65:ControlMsg([ 0 , 0 ] , (z_2 + z_32 + z_92));
											:pid_31:ControlMsg([ 1 , 1 ] , (z_0 + z_105 + z_5));
										}
										:pid_65:bufferNode:<FIFO>#0{
											:pid_31:ControlMsg([ 1 , 1 ] , (z_0 + z_105 + z_5));
										}
									}
								}
							}
							EC:<Id:130;Ev:23;H:7;W:111>{ SC: ( pid_9:o#5 , ( pid_35:cp1 , pid_39:dp0 , pid_44:dp0 ) , ( pid_53:cp2 , pid_56:dp0 , pid_61:dp0 ) , ( pid_69:cp1 , pid_73:dp0 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
								EXE: { |;| (:pid_48 , run) (:pid_49 , run) 
	(:pid_52 , run) (:pid_52 , cp_sendCM) (:pid_2 , run) }
								TRACE: { |;| (:pid_48 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_91 }) (:pid_52 , ${ output 
	inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + param::Trickle.Node.z_1 
	param::Trickle.Node.z_11 param::Trickle.Node.z_91 } } @ (z_11 + z_91)) }
								PC: ((z_91 == t_10) && (t_10 < 4) && (t_23 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 
	< 4) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_39 + -2)) && (0 <= 
	(t_42 + -2)) && (0 <= (t_5 + -2)) && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) && 
	(z_2 > 0) && (z_3 > 0) && (z_4 > 0))
								DATA{
									:pid_2:uncoveredExit = 1;
									:pid_48:node_time = (z_11 + z_91);
									:pid_48:z = z_91;
									:pid_48:localTime = (z_1 + z_11 + z_91);
									:pid_48:localPC = ((z_91 == t_10) && (t_10 < 4) && (0 <= (t_10 + -2)) && (z_1 > 0) && (z_11 > 0));
									:pid_49:cl = z_91;
									:pid_55:cl = (z_11 + z_91);
									:pid_60:cl = (z_11 + z_91);
								}
								BUFFER{
									:pid_65:bufferNode:<FIFO>#0{
										:pid_48:ControlMsg([ 0 , 0 ] , (z_1 + z_11 + z_91));
									}
								}
								EC:<Id:161;Ev:0;H:8;W:111>{ SC: ( pid_10:o#6 , ( pid_36:cp2 , pid_39:dp0 , pid_44:dp0 ) , ( pid_53:cp2 , pid_56:dp0 , pid_61:dp0 ) , ( pid_69:cp1 , pid_73:dp0 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
									EXE: { |;| (:pid_31 , run) (:pid_32 , run) 
	(:pid_35 , run) (:pid_35 , cp_sendCM) (:pid_2 , run) (:pid_9 , run) (:pid_9 , 
	n1_out_CM) }
									TRACE: { |;| (:pid_31 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_110 }) (:pid_35 , ${ output 
	inst::Trickle.Node.ControlMsg [ 1 , 1 ] ${ + param::Trickle.Node.z_0 
	param::Trickle.Node.z_110 param::Trickle.Node.z_5 } } @ (z_110 + z_5)) }
									/*FLAGS{ COVERAGE-ELEMENT }*/
									INFO{
										<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#6->run::pid_10:Trickle.Observer.o#6->prot::Trickle.Observer.o#6" as trace="tpid#6->run::pid_10:Trickle.Observer.o#6->prot::Trickle.Observer.o#6">
									}
									PC: ((z_110 == t_5) && (z_91 == t_10) && (t_10 < 4) && (t_23 < 4) && (t_39 < 4) && 
	(t_42 < 4) && (t_5 < 4) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= 
	(t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (z_0 > 0) && (z_1 > 0)
	 && (z_11 > 0) && (z_2 > 0) && (z_3 > 0) && (z_4 > 0) && (z_5 > 0))
									DATA{
										:pid_2:uncoveredExit = 0;
										:pid_2:seqBuff[0] = 1;
										:pid_2:seqBuff[1] = 1;
										:pid_31:node_time = (z_110 + z_5);
										:pid_31:z = z_110;
										:pid_31:localTime = (z_0 + z_110 + z_5);
										:pid_31:localPC = ((z_110 == t_5) && (t_5 < 4) && (0 <= (t_5 + -2)) && (z_0 > 0) && (z_5 > 0));
										:pid_32:cl = z_110;
										:pid_38:cl = (z_110 + z_5);
										:pid_43:cl = (z_110 + z_5);
									}
									BUFFER{
										:pid_48:bufferNode:<FIFO>#0{
											:pid_31:ControlMsg([ 1 , 1 ] , (z_0 + z_110 + z_5));
										}
										:pid_65:bufferNode:<FIFO>#0{
											:pid_48:ControlMsg([ 0 , 0 ] , (z_1 + z_11 + z_91));
											:pid_31:ControlMsg([ 1 , 1 ] , (z_0 + z_110 + z_5));
										}
									}
								}
							}
							EC:<Id:131;Ev:24;H:7;W:112>{ SC: ( pid_10:o#6 , ( pid_36:cp2 , pid_39:dp0 , pid_44:dp0 ) , ( pid_52:cp1 , pid_56:dp0 , pid_61:dp0 ) , ( pid_69:cp1 , pid_73:dp0 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
								EXE: { |;| (:pid_31 , run) (:pid_32 , run) 
	(:pid_35 , run) (:pid_35 , cp_sendCM) (:pid_2 , run) (:pid_9 , run) (:pid_9 , 
	n1_out_CM) }
								TRACE: { |;| (:pid_31 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_90 }) (:pid_35 , ${ output 
	inst::Trickle.Node.ControlMsg [ 1 , 1 ] ${ + param::Trickle.Node.z_0 
	param::Trickle.Node.z_5 param::Trickle.Node.z_90 } } @ (z_5 + z_90)) }
								/*FLAGS{ COVERAGE-ELEMENT }*/
								INFO{
									<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#6->run::pid_10:Trickle.Observer.o#6->prot::Trickle.Observer.o#6" as trace="tpid#6->run::pid_10:Trickle.Observer.o#6->prot::Trickle.Observer.o#6">
								}
								PC: ((z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 
	4) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_39 + -2)) && (0 <= 
	(t_42 + -2)) && (0 <= (t_5 + -2)) && (z_0 > 0) && (z_1 > 0) && (z_2 > 0) && (z_3 
	> 0) && (z_4 > 0) && (z_5 > 0))
								DATA{
									:pid_2:uncoveredExit = 0;
									:pid_2:seqBuff[0] = 1;
									:pid_2:seqBuff[1] = 1;
									:pid_31:node_time = (z_5 + z_90);
									:pid_31:z = z_90;
									:pid_31:localTime = (z_0 + z_5 + z_90);
									:pid_31:localPC = ((z_90 == t_5) && (t_5 < 4) && (0 <= (t_5 + -2)) && (z_0 > 0) && (z_5 > 0));
									:pid_32:cl = z_90;
									:pid_38:cl = (z_5 + z_90);
									:pid_43:cl = (z_5 + z_90);
								}
								BUFFER{
									:pid_48:bufferNode:<FIFO>#0{
										:pid_31:ControlMsg([ 1 , 1 ] , (z_0 + z_5 + z_90));
									}
									:pid_65:bufferNode:<FIFO>#0{
										:pid_31:ControlMsg([ 1 , 1 ] , (z_0 + z_5 + z_90));
									}
								}
								EC:<Id:174;Ev:27;H:8;W:150>{ SC: ( pid_11:o#7 , ( pid_36:cp2 , pid_39:dp0 , pid_44:dp0 ) , ( pid_52:cp1 , pid_56:dp0 , pid_61:dp0 ) , ( pid_69:cp1 , pid_73:dp0 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
									EXE: { |;| (:pid_48 , run) (:pid_49 , run) 
	(:pid_52 , run) (:pid_52 , cp1_receiveCM_inconsistent) (:pid_2 , run) (:pid_10 , 
	run) (:pid_10 , n2_in_CM) }
									TRACE: { |;| (:pid_48 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_116 }) (:pid_52 , ${ input 
	inst::Trickle.Node.ControlMsg [ 1 , 1 ] ${ + param::Trickle.Node.z_0 
	param::Trickle.Node.z_5 param::Trickle.Node.z_90 } } @ (z_11 + z_116)) (:pid_52 
	, ${ newfresh inst::Trickle.Node.ControlProcess.t 
	param::Trickle.Node.ControlProcess.t_65 }) }
									/*FLAGS{ COVERAGE-ELEMENT }*/
									INFO{
										<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#7->run::pid_11:Trickle.Observer.o#7->prot::Trickle.Observer.o#7" as trace="tpid#7->run::pid_11:Trickle.Observer.o#7->prot::Trickle.Observer.o#7">
									}
									PC: ((z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 
	4) && (t_65 < 4) && (z_116 < t_10) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) 
	&& (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 
	+ -2)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && (z_0 > 0) && (z_1 > 0) 
	&& (z_11 > 0) && (z_2 > 0) && (z_3 > 0) && (z_4 > 0) && (z_5 > 0))
									DATA{
										:pid_2:uncoveredExit = 0;
										:pid_48:mydp_run[0] = true;
										:pid_48:mydp_run[1] = true;
										:pid_48:node_time = (z_11 + z_116);
										:pid_48:z = z_116;
										:pid_48:localTime = (z_1 + z_11 + z_116);
										:pid_48:seq_buff[0] = 1;
										:pid_48:seq_buff[1] = 1;
										:pid_48:localPC = ((t_10 < 4) && (t_65 < 4) && (z_116 < t_10) && (0 <= (t_10 + -2)) && (0 <= (t_65 + -2)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && (z_1 > 0) && (z_11 > 0));
										:pid_48:timeEmit = (z_0 + z_5 + z_90);
										:pid_49:e = 0;
										:pid_49:c = 0;
										:pid_49:i = 2;
										:pid_49:t = t_65;
										:pid_49:consistent = false;
										:pid_49:cl = 0;
										:pid_55:cl = (z_11 + z_116);
										:pid_60:cl = (z_11 + z_116);
									}
									BUFFER{
										:pid_48:bufferNode:<FIFO>#0{ }
									}
									EC:<Id:192;Ev:28;H:9;W:150>{ SC: ( pid_11:o#7 , ( pid_36:cp2 , pid_39:dp0 , pid_44:dp0 ) , ( pid_52:cp1 , pid_56:dp0 , pid_61:dp0 ) , ( pid_69:cp1 , pid_73:dp0 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
										EXE: { |;| (:pid_99 , run) (:pid_100 , 
	run) (:pid_103 , run) (:pid_103 , cp_sendCM) (:pid_2 , run) }
										TRACE: { |;| (:pid_99 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_134 }) (:pid_103 , ${ output 
	inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + param::Trickle.Node.z_134 
	param::Trickle.Node.z_4 param::Trickle.Node.z_64 } } @ (z_134 + z_64)) }
										PC: ((z_134 == t_42) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_39 < 4) && 
	(t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (z_116 < t_10) && (0 <= (t_10 + -2)) && 
	(0 <= (t_23 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + 
	-2)) && (0 <= (t_65 + -2)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && 
	(z_0 > 0) && (z_1 > 0) && (z_11 > 0) && (z_2 > 0) && (z_3 > 0) && (z_4 > 0) && 
	(z_5 > 0) && (z_64 > 0))
										DATA{
											:pid_2:uncoveredExit = 1;
											:pid_99:node_time = (z_134 + z_64);
											:pid_99:z = z_134;
											:pid_99:localTime = (z_134 + z_4 + z_64);
											:pid_99:localPC = ((z_134 == t_42) && (t_42 < 4) && (0 <= (t_42 + -2)) && (z_4 > 0) && (z_64 > 0));
											:pid_100:cl = z_134;
											:pid_106:cl = (z_134 + z_64);
											:pid_111:cl = (z_134 + z_64);
										}
										BUFFER{
											:pid_82:bufferNode:<FIFO>#0{
												:pid_99:ControlMsg([ 0 , 0 ] , (z_134 + z_4 + z_64));
											}
										}
										EC:<Id:202;Ev:0;H:10;W:150>{ SC: ( pid_12:o#8 , ( pid_36:cp2 , pid_39:dp0 , pid_44:dp0 ) , ( pid_52:cp1 , pid_56:dp0 , pid_61:dp0 ) , ( pid_69:cp1 , pid_73:dp0 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
											EXE: { |;| (:pid_65 , run) (:pid_66 
	, run) (:pid_69 , run) (:pid_69 , cp1_receiveCM_inconsistent) (:pid_2 , run) 
	(:pid_11 , run) (:pid_11 , n3_in_CM) }
											TRACE: { |;| (:pid_65 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_137 }) (:pid_69 , ${ input 
	inst::Trickle.Node.ControlMsg [ 1 , 1 ] ${ + param::Trickle.Node.z_0 
	param::Trickle.Node.z_5 param::Trickle.Node.z_90 } } @ (z_137 + z_32)) (:pid_69 
	, ${ newfresh inst::Trickle.Node.ControlProcess.t 
	param::Trickle.Node.ControlProcess.t_70 }) }
											/*FLAGS{ COVERAGE-ELEMENT }*/
											INFO{
												<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#8->run::pid_12:Trickle.Observer.o#8->prot::Trickle.Observer.o#8" as trace="tpid#8->run::pid_12:Trickle.Observer.o#8->prot::Trickle.Observer.o#8">
											}
											PC: ((z_134 == t_42) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_39 < 4) && 
	(t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_70 < 4) && (z_116 < t_10) && (z_137 
	< t_23) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_39 + -2)) && (0 
	<= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_70 + -2)) 
	&& ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_137 
	+ z_2 + z_32)) && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) && (z_2 > 0) && (z_3 > 0) 
	&& (z_32 > 0) && (z_4 > 0) && (z_5 > 0) && (z_64 > 0))
											DATA{
												:pid_2:uncoveredExit = 0;
												:pid_65:mydp_run[0] = true;
												:pid_65:mydp_run[1] = true;
												:pid_65:node_time = (z_137 + z_32);
												:pid_65:z = z_137;
												:pid_65:localTime = (z_137 + z_2 + z_32);
												:pid_65:seq_buff[0] = 1;
												:pid_65:seq_buff[1] = 1;
												:pid_65:localPC = ((t_23 < 4) && (t_70 < 4) && (z_137 < t_23) && (0 <= (t_23 + -2)) && (0 <= (t_70 + -2)) && ((z_0 + z_5 + z_90) <= (z_137 + z_2 + z_32)) && (z_2 > 0) && (z_32 > 0));
												:pid_65:timeEmit = (z_0 + z_5 + z_90);
												:pid_66:e = 0;
												:pid_66:c = 0;
												:pid_66:i = 2;
												:pid_66:t = t_70;
												:pid_66:consistent = false;
												:pid_66:cl = 0;
												:pid_72:cl = (z_137 + z_32);
												:pid_77:cl = (z_137 + z_32);
											}
											BUFFER{
												:pid_65:bufferNode:<FIFO>#0{ }
											}
										}
									}
									EC:<Id:193;Ev:29;H:9;W:166>{ SC: ( pid_11:o#7 , ( pid_36:cp2 , pid_39:dp0 , pid_44:dp0 ) , ( pid_52:cp1 , pid_56:dp0 , pid_61:dp0 ) , ( pid_69:cp1 , pid_73:dp0 , pid_78:dp0 ) , ( pid_87:cp2 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
										EXE: { |;| (:pid_82 , run) (:pid_83 , 
	run) (:pid_86 , run) (:pid_86 , cp_sendCM) (:pid_2 , run) }
										TRACE: { |;| (:pid_82 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_133 }) (:pid_86 , ${ output 
	inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + param::Trickle.Node.z_133 
	param::Trickle.Node.z_3 param::Trickle.Node.z_53 } } @ (z_133 + z_53)) }
										PC: ((z_133 == t_39) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_39 < 4) && 
	(t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (z_116 < t_10) && (0 <= (t_10 + -2)) && 
	(0 <= (t_23 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + 
	-2)) && (0 <= (t_65 + -2)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && 
	(z_0 > 0) && (z_1 > 0) && (z_11 > 0) && (z_2 > 0) && (z_3 > 0) && (z_4 > 0) && 
	(z_5 > 0) && (z_53 > 0))
										DATA{
											:pid_2:uncoveredExit = 1;
											:pid_82:node_time = (z_133 + z_53);
											:pid_82:z = z_133;
											:pid_82:localTime = (z_133 + z_3 + z_53);
											:pid_82:localPC = ((z_133 == t_39) && (t_39 < 4) && (0 <= (t_39 + -2)) && (z_3 > 0) && (z_53 > 0));
											:pid_83:cl = z_133;
											:pid_89:cl = (z_133 + z_53);
											:pid_94:cl = (z_133 + z_53);
										}
										BUFFER{
											:pid_48:bufferNode:<FIFO>#0{
												:pid_82:ControlMsg([ 0 , 0 ] , (z_133 + z_3 + z_53));
											}
										}
										EC:<Id:213;Ev:0;H:10;W:166>{ SC: ( pid_12:o#8 , ( pid_36:cp2 , pid_39:dp0 , pid_44:dp0 ) , ( pid_52:cp1 , pid_56:dp0 , pid_61:dp0 ) , ( pid_69:cp1 , pid_73:dp0 , pid_78:dp0 ) , ( pid_87:cp2 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
											EXE: { |;| (:pid_65 , run) (:pid_66 
	, run) (:pid_69 , run) (:pid_69 , cp1_receiveCM_inconsistent) (:pid_2 , run) 
	(:pid_11 , run) (:pid_11 , n3_in_CM) }
											TRACE: { |;| (:pid_65 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_142 }) (:pid_69 , ${ input 
	inst::Trickle.Node.ControlMsg [ 1 , 1 ] ${ + param::Trickle.Node.z_0 
	param::Trickle.Node.z_5 param::Trickle.Node.z_90 } } @ (z_142 + z_32)) (:pid_69 
	, ${ newfresh inst::Trickle.Node.ControlProcess.t 
	param::Trickle.Node.ControlProcess.t_73 }) }
											/*FLAGS{ COVERAGE-ELEMENT }*/
											INFO{
												<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#8->run::pid_12:Trickle.Observer.o#8->prot::Trickle.Observer.o#8" as trace="tpid#8->run::pid_12:Trickle.Observer.o#8->prot::Trickle.Observer.o#8">
											}
											PC: ((z_133 == t_39) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_39 < 4) && 
	(t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_73 < 4) && (z_116 < t_10) && (z_142 
	< t_23) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_39 + -2)) && (0 
	<= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_73 + -2)) 
	&& ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_142 
	+ z_2 + z_32)) && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) && (z_2 > 0) && (z_3 > 0) 
	&& (z_32 > 0) && (z_4 > 0) && (z_5 > 0) && (z_53 > 0))
											DATA{
												:pid_2:uncoveredExit = 0;
												:pid_65:mydp_run[0] = true;
												:pid_65:mydp_run[1] = true;
												:pid_65:node_time = (z_142 + z_32);
												:pid_65:z = z_142;
												:pid_65:localTime = (z_142 + z_2 + z_32);
												:pid_65:seq_buff[0] = 1;
												:pid_65:seq_buff[1] = 1;
												:pid_65:localPC = ((t_23 < 4) && (t_73 < 4) && (z_142 < t_23) && (0 <= (t_23 + -2)) && (0 <= (t_73 + -2)) && ((z_0 + z_5 + z_90) <= (z_142 + z_2 + z_32)) && (z_2 > 0) && (z_32 > 0));
												:pid_65:timeEmit = (z_0 + z_5 + z_90);
												:pid_66:e = 0;
												:pid_66:c = 0;
												:pid_66:i = 2;
												:pid_66:t = t_73;
												:pid_66:consistent = false;
												:pid_66:cl = 0;
												:pid_72:cl = (z_142 + z_32);
												:pid_77:cl = (z_142 + z_32);
											}
											BUFFER{
												:pid_65:bufferNode:<FIFO>#0{ }
											}
										}
									}
									EC:<Id:194;Ev:30;H:9;W:167>{ SC: ( pid_11:o#7 , ( pid_36:cp2 , pid_39:dp0 , pid_44:dp0 ) , ( pid_52:cp1 , pid_56:dp0 , pid_61:dp0 ) , ( pid_70:cp2 , pid_73:dp0 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
										EXE: { |;| (:pid_65 , run) (:pid_66 , 
	run) (:pid_69 , run) (:pid_69 , cp_sendCM) (:pid_2 , run) }
										TRACE: { |;| (:pid_65 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_132 }) (:pid_69 , ${ output 
	inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + param::Trickle.Node.z_132 
	param::Trickle.Node.z_2 param::Trickle.Node.z_32 } } @ (z_132 + z_32)) }
										PC: ((z_132 == t_23) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_39 < 4) && 
	(t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (z_116 < t_10) && (0 <= (t_10 + -2)) && 
	(0 <= (t_23 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + 
	-2)) && (0 <= (t_65 + -2)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && 
	(z_0 > 0) && (z_1 > 0) && (z_11 > 0) && (z_2 > 0) && (z_3 > 0) && (z_32 > 0) && 
	(z_4 > 0) && (z_5 > 0))
										DATA{
											:pid_2:uncoveredExit = 1;
											:pid_65:node_time = (z_132 + z_32);
											:pid_65:z = z_132;
											:pid_65:localTime = (z_132 + z_2 + z_32);
											:pid_65:localPC = ((z_132 == t_23) && (t_23 < 4) && (0 <= (t_23 + -2)) && (z_2 > 0) && (z_32 > 0));
											:pid_66:cl = z_132;
											:pid_72:cl = (z_132 + z_32);
											:pid_77:cl = (z_132 + z_32);
										}
										BUFFER{
											:pid_31:bufferNode:<FIFO>#0{
												:pid_65:ControlMsg([ 0 , 0 ] , (z_132 + z_2 + z_32));
											}
											:pid_48:bufferNode:<FIFO>#0{
												:pid_65:ControlMsg([ 0 , 0 ] , (z_132 + z_2 + z_32));
											}
											:pid_82:bufferNode:<FIFO>#0{
												:pid_65:ControlMsg([ 0 , 0 ] , (z_132 + z_2 + z_32));
											}
											:pid_99:bufferNode:<FIFO>#0{
												:pid_65:ControlMsg([ 0 , 0 ] , (z_132 + z_2 + z_32));
											}
										}
										EC:<Id:224;Ev:0;H:10;W:167>{ SC: ( pid_12:o#8 , ( pid_36:cp2 , pid_39:dp0 , pid_44:dp0 ) , ( pid_52:cp1 , pid_56:dp0 , pid_61:dp0 ) , ( pid_69:cp1 , pid_73:dp0 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
											EXE: { |;| (:pid_65 , run) (:pid_66 
	, run) (:pid_70 , run) (:pid_70 , cp2_receiveCM_inconsistent) (:pid_2 , run) 
	(:pid_11 , run) (:pid_11 , n3_in_CM) }
											TRACE: { |;| (:pid_65 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_147 }) (:pid_70 , ${ input 
	inst::Trickle.Node.ControlMsg [ 1 , 1 ] ${ + param::Trickle.Node.z_0 
	param::Trickle.Node.z_5 param::Trickle.Node.z_90 } } @ (z_132 + z_147 + z_32)) 
	(:pid_70 , ${ newfresh inst::Trickle.Node.ControlProcess.t 
	param::Trickle.Node.ControlProcess.t_78 }) }
											/*FLAGS{ COVERAGE-ELEMENT }*/
											INFO{
												<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#8->run::pid_12:Trickle.Observer.o#8->prot::Trickle.Observer.o#8" as trace="tpid#8->run::pid_12:Trickle.Observer.o#8->prot::Trickle.Observer.o#8">
											}
											PC: ((z_132 == t_23) && (z_90 == t_5) && ((z_132 + z_147) < 4) && (t_10 < 4) && 
	(t_23 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_78 < 4) 
	&& (z_116 < t_10) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_39 + 
	-2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= 
	(t_78 + -2)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + 
	z_90) <= (z_132 + z_147 + z_2 + z_32)) && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) 
	&& (z_132 > 0) && (z_2 > 0) && (z_3 > 0) && (z_32 > 0) && (z_4 > 0) && (z_5 > 0))
											DATA{
												:pid_2:uncoveredExit = 0;
												:pid_65:mydp_run[0] = true;
												:pid_65:mydp_run[1] = true;
												:pid_65:node_time = (z_132 + z_147 + z_32);
												:pid_65:z = z_147;
												:pid_65:localTime = (z_132 + z_147 + z_2 + z_32);
												:pid_65:seq_buff[0] = 1;
												:pid_65:seq_buff[1] = 1;
												:pid_65:localPC = ((z_132 == t_23) && ((z_132 + z_147) < 4) && (t_23 < 4) && (t_78 < 4) && (0 <= (t_23 + -2)) && (0 <= (t_78 + -2)) && ((z_0 + z_5 + z_90) <= (z_132 + z_147 + z_2 + z_32)) && (z_132 > 0) && (z_2 > 0) && (z_32 > 0));
												:pid_65:timeEmit = (z_0 + z_5 + z_90);
												:pid_66:e = 0;
												:pid_66:c = 0;
												:pid_66:i = 2;
												:pid_66:t = t_78;
												:pid_66:consistent = false;
												:pid_66:cl = 0;
												:pid_72:cl = (z_132 + z_147 + z_32);
												:pid_77:cl = (z_132 + z_147 + z_32);
											}
											BUFFER{
												:pid_65:bufferNode:<FIFO>#0{ }
											}
										}
									}
									EC:<Id:195;Ev:31;H:9;W:168>{ SC: ( pid_12:o#8 , ( pid_36:cp2 , pid_39:dp0 , pid_44:dp0 ) , ( pid_52:cp1 , pid_56:dp0 , pid_61:dp0 ) , ( pid_69:cp1 , pid_73:dp0 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
										EXE: { |;| (:pid_65 , run) (:pid_66 , 
	run) (:pid_69 , run) (:pid_69 , cp1_receiveCM_inconsistent) (:pid_2 , run) 
	(:pid_11 , run) (:pid_11 , n3_in_CM) }
										TRACE: { |;| (:pid_65 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_132 }) (:pid_69 , ${ input 
	inst::Trickle.Node.ControlMsg [ 1 , 1 ] ${ + param::Trickle.Node.z_0 
	param::Trickle.Node.z_5 param::Trickle.Node.z_90 } } @ (z_132 + z_32)) (:pid_69 
	, ${ newfresh inst::Trickle.Node.ControlProcess.t 
	param::Trickle.Node.ControlProcess.t_68 }) }
										/*FLAGS{ COVERAGE-ELEMENT }*/
										INFO{
											<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#8->run::pid_12:Trickle.Observer.o#8->prot::Trickle.Observer.o#8" as trace="tpid#8->run::pid_12:Trickle.Observer.o#8->prot::Trickle.Observer.o#8">
										}
										PC: ((z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 
	4) && (t_65 < 4) && (t_68 < 4) && (z_116 < t_10) && (z_132 < t_23) && (0 <= 
	(t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) 
	&& (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && ((z_0 + z_5 
	+ z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) 
	&& (z_0 > 0) && (z_1 > 0) && (z_11 > 0) && (z_2 > 0) && (z_3 > 0) && (z_32 > 0) 
	&& (z_4 > 0) && (z_5 > 0))
										DATA{
											:pid_2:uncoveredExit = 0;
											:pid_65:mydp_run[0] = true;
											:pid_65:mydp_run[1] = true;
											:pid_65:node_time = (z_132 + z_32);
											:pid_65:z = z_132;
											:pid_65:localTime = (z_132 + z_2 + z_32);
											:pid_65:seq_buff[0] = 1;
											:pid_65:seq_buff[1] = 1;
											:pid_65:localPC = ((t_23 < 4) && (t_68 < 4) && (z_132 < t_23) && (0 <= (t_23 + -2)) && (0 <= (t_68 + -2)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && (z_2 > 0) && (z_32 > 0));
											:pid_65:timeEmit = (z_0 + z_5 + z_90);
											:pid_66:e = 0;
											:pid_66:c = 0;
											:pid_66:i = 2;
											:pid_66:t = t_68;
											:pid_66:consistent = false;
											:pid_66:cl = 0;
											:pid_72:cl = (z_132 + z_32);
											:pid_77:cl = (z_132 + z_32);
										}
										BUFFER{
											:pid_65:bufferNode:<FIFO>#0{ }
										}
										EC:<Id:246;Ev:38;H:10;W:215>{ SC: ( pid_12:o#8 , ( pid_35:cp1 , pid_39:dp0 , pid_44:dp0 ) , ( pid_52:cp1 , pid_56:dp0 , pid_61:dp0 ) , ( pid_69:cp1 , pid_73:dp0 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
											EXE: { |;| (:pid_31 , run) (:pid_32 
	, run) (:pid_36 , run) (:pid_36 , cp_resetTau) (:pid_2 , run) }
											TRACE: { |;| (:pid_31 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_150 }) (:pid_36 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_79 }) }
											PC: (((z_150 + z_90) == 4) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_39 < 4)
	 && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (z_116 
	< t_10) && (z_132 < t_23) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= 
	(t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && 
	(0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + 
	z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_150 + z_90) > t_5)
	 && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) && (z_2 > 0) && (z_3 > 0) && (z_32 > 0) 
	&& (z_4 > 0) && (z_5 > 0) && (z_90 > 0))
											DATA{
												:pid_2:uncoveredExit = 1;
												:pid_31:node_time = (z_150 + z_5 + z_90);
												:pid_31:z = z_150;
												:pid_31:localTime = (z_0 + z_150 + z_5 + z_90);
												:pid_31:localPC = (((z_150 + z_90) == 4) && (z_90 == t_5) && (t_5 < 4) && (t_79 < 8) && (0 <= (t_5 + -2)) && (0 <= (t_79 + -4)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_5 > 0) && (z_90 > 0));
												:pid_32:e = 1;
												:pid_32:tau = 8;
												:pid_32:c = 0;
												:pid_32:t = t_79;
												:pid_32:cl = 0;
												:pid_38:cl = (z_150 + z_5 + z_90);
												:pid_43:cl = (z_150 + z_5 + z_90);
											}
											EC:<Id:318;Ev:49;H:11;W:280>{ SC: ( pid_12:o#8 , ( pid_35:cp1 , pid_40:dp1 , pid_44:dp0 ) , ( pid_52:cp1 , pid_56:dp0 , pid_61:dp0 ) , ( pid_69:cp1 , pid_73:dp0 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
												EXE: { |;| (:pid_31 , run) 
	(:pid_38 , run) (:pid_39 , run) (:pid_39 , dp_init) (:pid_2 , run) }
												TRACE: { |;| (:pid_31 , ${ 
	newfresh inst::Trickle.Node.z param::Trickle.Node.z_185 }) (:pid_39 , ${ 
	newfresh inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_96 })
	 }
												PC: (((z_150 + z_90) == 4) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_39 < 4)
	 && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_96 < 
	4) && (z_116 < t_10) && (z_132 < t_23) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)
	) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= 
	(t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_96 + -2)) 
	&& ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 
	+ z_2 + z_32)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) 
	&& (z_150 > 0) && (z_2 > 0) && (z_3 > 0) && (z_32 > 0) && (z_4 > 0) && (z_5 > 0) 
	&& (z_90 > 0))
												DATA{
													:pid_2:uncoveredExit = 2;
													:pid_31:node_time = (z_150 + z_185 + z_5 + z_90);
													:pid_31:z = z_185;
													:pid_31:localTime = (z_0 + z_150 + z_185 + z_5 + z_90);
													:pid_31:localPC = (((z_150 + z_90) == 4) && (z_90 == t_5) && (t_5 < 4) && (t_79 < 8) && (t_96 < 4) && (0 <= (t_5 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_96 + -2)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_150 > 0) && (z_5 > 0) && (z_90 > 0));
													:pid_32:cl = z_185;
													:pid_38:e = 0;
													:pid_38:tau = 4;
													:pid_38:tau_l = 4;
													:pid_38:tau_h = 8;
													:pid_38:k = 2;
													:pid_38:c = 0;
													:pid_38:t = t_96;
													:pid_38:cl = 0;
													:pid_43:cl = (z_150 + z_185 + z_5 + z_90);
												}
												EC:<Id:448;Ev:62;H:12;W:399>{ SC: ( pid_13:o#9 , ( pid_35:cp1 , pid_41:dp2 , pid_44:dp0 ) , ( pid_52:cp1 , pid_56:dp0 , pid_61:dp0 ) , ( pid_69:cp1 , pid_73:dp0 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
													EXE: { |;| (:pid_31 , run) 
	(:pid_38 , run) (:pid_40 , run) (:pid_40 , dp_sendDM) (:pid_2 , run) (:pid_12 , 
	run) (:pid_12 , n1_out_DM1) }
													TRACE: { |;| (:pid_31 , ${ 
	newfresh inst::Trickle.Node.z param::Trickle.Node.z_240 }) (:pid_40 , ${ output 
	inst::Trickle.Node.DataMsg1 [ 1 , 1 , 0 ] ${ + param::Trickle.Node.z_0 
	param::Trickle.Node.z_150 param::Trickle.Node.z_185 param::Trickle.Node.z_240 
	param::Trickle.Node.z_5 param::Trickle.Node.z_90 } } @ (z_150 + z_185 + z_240 + 
	z_5 + z_90)) }
													/*FLAGS{ COVERAGE-ELEMENT }*/
													INFO{
														<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#9->run::pid_13:Trickle.Observer.o#9->prot::Trickle.Observer.o#9" as trace="tpid#9->run::pid_13:Trickle.Observer.o#9->prot::Trickle.Observer.o#9">
													}
													PC: (((z_150 + z_90) == 4) && (z_240 == t_96) && (z_90 == t_5) && (t_10 < 4) && 
	(t_23 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) 
	&& (t_79 < 8) && (t_96 < 4) && (z_116 < t_10) && (z_132 < t_23) && (0 <= (t_10 + 
	-2)) && (0 <= (t_23 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= 
	(t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && 
	(0 <= (t_96 + -2)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + 
	z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && 
	(z_1 > 0) && (z_11 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_3 > 0) 
	&& (z_32 > 0) && (z_4 > 0) && (z_5 > 0) && (z_90 > 0))
													DATA{
														:pid_2:uncoveredExit = 0;
														:pid_2:dataMessage.seq = 1;
														:pid_2:dataMessage.fragment = FRAGMENT_0;
														:pid_2:dataMessage.offset = 0;
														:pid_31:node_time = (z_150 + z_185 + z_240 + z_5 + z_90);
														:pid_31:z = z_240;
														:pid_31:localTime = (z_0 + z_150 + z_185 + z_240 + z_5 + z_90);
														:pid_31:localPC = (((z_150 + z_90) == 4) && (z_240 == t_96) && (z_90 == t_5) && (t_5 < 4) && (t_79 < 8) && (t_96 < 4) && (0 <= (t_5 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_96 + -2)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_150 > 0) && (z_185 > 0) && (z_5 > 0) && (z_90 > 0));
														:pid_32:cl = (z_185 + z_240);
														:pid_38:cl = z_240;
														:pid_43:cl = (z_150 + z_185 + z_240 + z_5 + z_90);
													}
													BUFFER{
														:pid_48:bufferNode:<FIFO>#0{
															:pid_31:DataMsg1([ 1 , 1 , 0 ] , (z_0 + z_150 + z_185 + z_240 + z_5 + z_90));
														}
														:pid_65:bufferNode:<FIFO>#0{
															:pid_31:DataMsg1([ 1 , 1 , 0 ] , (z_0 + z_150 + z_185 + z_240 + z_5 + z_90));
														}
													}
													EC:<Id:594;Ev:70;H:13;W:532>{ SC: ( pid_13:o#9 , ( pid_35:cp1 , pid_41:dp2 , pid_44:dp0 ) , ( pid_52:cp1 , pid_57:dp1 , pid_61:dp0 ) , ( pid_69:cp1 , pid_73:dp0 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
														EXE: { |;| (:pid_48 , 
	run) (:pid_55 , run) (:pid_56 , run) (:pid_56 , dp_init) (:pid_2 , run) }
														TRACE: { |;| (:pid_48 , 
	${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_306 }) (:pid_56 , ${ 
	newfresh inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_220 }
	) }
														PC: (((z_150 + z_90) == 4) && (z_240 == t_96) && (z_90 == t_5) && (t_10 < 4) && 
	(t_23 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) 
	&& (t_79 < 8) && (t_220 < 4) && (t_96 < 4) && (z_116 < t_10) && (z_132 < t_23) 
	&& (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 
	+ -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= 
	(t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + z_5 + z_90) 
	<= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && 
	((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && 
	(z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_3 > 0) && (z_32 > 0) && (z_4 > 0) 
	&& (z_5 > 0) && (z_90 > 0))
														DATA{
															:pid_2:uncoveredExit = 1;
															:pid_48:node_time = (z_11 + z_116 + z_306);
															:pid_48:z = z_306;
															:pid_48:localTime = (z_1 + z_11 + z_116 + z_306);
															:pid_48:localPC = ((t_10 < 4) && (t_65 < 4) && (t_220 < 4) && (z_116 < t_10) && (0 <= (t_10 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_220 + -2)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0));
															:pid_49:cl = z_306;
															:pid_55:e = 0;
															:pid_55:tau = 4;
															:pid_55:tau_l = 4;
															:pid_55:tau_h = 8;
															:pid_55:k = 2;
															:pid_55:c = 0;
															:pid_55:t = t_220;
															:pid_55:cl = 0;
															:pid_60:cl = (z_11 + z_116 + z_306);
														}
														EC:<Id:686;Ev:85;H:14;W:616>{ SC: ( pid_14:o#10 , ( pid_35:cp1 , pid_41:dp2 , pid_44:dp0 ) , ( pid_52:cp1 , pid_57:dp1 , pid_61:dp0 ) , ( pid_69:cp1 , pid_73:dp0 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
															EXE: { |;| (:pid_48 
	, run) (:pid_55 , run) (:pid_57 , run) (:pid_57 , dp1_receiveDM_consistent) 
	(:pid_2 , run) (:pid_13 , run) (:pid_13 , n2_in_DM1) }
															TRACE: { |;| 
	(:pid_48 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_346 }) 
	(:pid_57 , ${ input inst::Trickle.Node.DataMsg1 [ 1 , 1 , 0 ] ${ + 
	param::Trickle.Node.z_0 param::Trickle.Node.z_150 param::Trickle.Node.z_185 
	param::Trickle.Node.z_240 param::Trickle.Node.z_5 param::Trickle.Node.z_90 } } @ 
	(z_11 + z_116 + z_306 + z_346)) }
															/*FLAGS{ COVERAGE-ELEMENT }*/
															INFO{
																<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#10->run::pid_14:Trickle.Observer.o#10->prot::Trickle.Observer.o#10" as trace="tpid#10->run::pid_14:Trickle.Observer.o#10->prot::Trickle.Observer.o#10">
															}
															PC: (((z_150 + z_90) == 4) && (z_240 == t_96) && (z_90 == t_5) && (t_10 < 4) && 
	(t_23 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) 
	&& (t_79 < 8) && (t_220 < 4) && (t_96 < 4) && (z_116 < t_10) && (z_132 < t_23) 
	&& (z_346 < t_220) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_39 + 
	-2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= 
	(t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_96 + -2)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + 
	z_346)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) 
	<= (z_132 + z_2 + z_32)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && 
	(z_11 > 0) && (z_116 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_3 > 0)
	 && (z_306 > 0) && (z_32 > 0) && (z_4 > 0) && (z_5 > 0) && (z_90 > 0))
															DATA{
																:pid_2:uncoveredExit = 0;
																:pid_48:my_buff[0].seq = 1;
																:pid_48:my_buff[0].fragment = FRAGMENT_0;
																:pid_48:my_buff[0].offset = 0;
																:pid_48:firmware[0] = FRAGMENT_0;
																:pid_48:myseq_buff[0] = 1;
																:pid_48:node_time = (z_11 + z_116 + z_306 + z_346);
																:pid_48:z = z_346;
																:pid_48:localTime = (z_1 + z_11 + z_116 + z_306 + z_346);
																:pid_48:undef_DM1 = false;
																:pid_48:localPC = ((t_10 < 4) && (t_65 < 4) && (t_220 < 4) && (z_116 < t_10) && (z_346 < t_220) && (0 <= (t_10 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_220 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_306 > 0));
																:pid_48:timeEmit = (z_0 + z_150 + z_185 + z_240 + z_5 + z_90);
																:pid_49:cl = (z_306 + z_346);
																:pid_55:c = 1;
																:pid_55:consistent = true;
																:pid_55:cl = z_346;
																:pid_55:d.seq = 1;
																:pid_55:d.fragment = FRAGMENT_0;
																:pid_55:d.offset = 0;
																:pid_60:cl = (z_11 + z_116 + z_306 + z_346);
															}
															BUFFER{
																:pid_48:bufferNode:<FIFO>#0{ }
															}
															EC:<Id:844;Ev:90;H:15;W:759>{ SC: ( pid_14:o#10 , ( pid_35:cp1 , pid_41:dp2 , pid_44:dp0 ) , ( pid_52:cp1 , pid_57:dp1 , pid_61:dp0 ) , ( pid_69:cp1 , pid_74:dp1 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																EXE: { |;| 
	(:pid_65 , run) (:pid_72 , run) (:pid_73 , run) (:pid_73 , dp_init) (:pid_2 , 
	run) }
																TRACE: { |;| 
	(:pid_65 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_422 }) 
	(:pid_73 , ${ newfresh inst::Trickle.Node.DataProcess.t 
	param::Trickle.Node.DataProcess.t_338 }) }
																PC: (((z_150 + z_90) == 4) && (z_240 == t_96) && (z_90 == t_5) && (t_10 < 4) && 
	(t_23 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) 
	&& (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_96 < 4) && (z_116 < t_10) && 
	(z_132 < t_23) && (z_346 < t_220) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && 
	(0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + 
	-2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= 
	(t_338 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_5 + z_90) <= (z_1 + 
	z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_150 + z_90)
	 > t_5) && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_132 > 0) && 
	(z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0)
	 && (z_4 > 0) && (z_5 > 0) && (z_90 > 0))
																DATA{
																	:pid_2:uncoveredExit = 1;
																	:pid_65:node_time = (z_132 + z_32 + z_422);
																	:pid_65:z = z_422;
																	:pid_65:localTime = (z_132 + z_2 + z_32 + z_422);
																	:pid_65:localPC = ((t_23 < 4) && (t_68 < 4) && (t_338 < 4) && (z_132 < t_23) && (0 <= (t_23 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_338 + -2)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && (z_132 > 0) && (z_2 > 0) && (z_32 > 0));
																	:pid_66:cl = z_422;
																	:pid_72:e = 0;
																	:pid_72:tau = 4;
																	:pid_72:tau_l = 4;
																	:pid_72:tau_h = 8;
																	:pid_72:k = 2;
																	:pid_72:c = 0;
																	:pid_72:t = t_338;
																	:pid_72:cl = 0;
																	:pid_77:cl = (z_132 + z_32 + z_422);
																}
																EC:<Id:904;Ev:108;H:16;W:814>{ SC: ( pid_15:o#11 , ( pid_35:cp1 , pid_41:dp2 , pid_44:dp0 ) , ( pid_52:cp1 , pid_57:dp1 , pid_61:dp0 ) , ( pid_69:cp1 , pid_74:dp1 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																	EXE: { |;| 
	(:pid_65 , run) (:pid_72 , run) (:pid_74 , run) (:pid_74 , 
	dp1_receiveDM_consistent) (:pid_2 , run) (:pid_14 , run) (:pid_14 , n3_in_DM1) }
																	TRACE: { |;| 
	(:pid_65 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_447 }) 
	(:pid_74 , ${ input inst::Trickle.Node.DataMsg1 [ 1 , 1 , 0 ] ${ + 
	param::Trickle.Node.z_0 param::Trickle.Node.z_150 param::Trickle.Node.z_185 
	param::Trickle.Node.z_240 param::Trickle.Node.z_5 param::Trickle.Node.z_90 } } @ 
	(z_132 + z_32 + z_422 + z_447)) }
																	/*FLAGS{ COVERAGE-ELEMENT }*/
																	INFO{
																		<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#11->run::pid_15:Trickle.Observer.o#11->prot::Trickle.Observer.o#11" as trace="tpid#11->run::pid_15:Trickle.Observer.o#11->prot::Trickle.Observer.o#11">
																	}
																	PC: (((z_150 + z_90) == 4) && (z_240 == t_96) && (z_90 == t_5) && (t_10 < 4) && 
	(t_23 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) 
	&& (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_96 < 4) && (z_116 < t_10) && 
	(z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && (0 <= (t_10 + -2)) && (0 
	<= (t_23 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) 
	&& (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= 
	(t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + 
	z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + 
	z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && 
	((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + 
	z_2 + z_32)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) 
	&& (z_116 > 0) && (z_132 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_3 
	> 0) && (z_306 > 0) && (z_32 > 0) && (z_4 > 0) && (z_422 > 0) && (z_5 > 0) && 
	(z_90 > 0))
																	DATA{
																		:pid_2:uncoveredExit = 0;
																		:pid_65:my_buff[0].seq = 1;
																		:pid_65:my_buff[0].fragment = FRAGMENT_0;
																		:pid_65:my_buff[0].offset = 0;
																		:pid_65:firmware[0] = FRAGMENT_0;
																		:pid_65:myseq_buff[0] = 1;
																		:pid_65:node_time = (z_132 + z_32 + z_422 + z_447);
																		:pid_65:z = z_447;
																		:pid_65:localTime = (z_132 + z_2 + z_32 + z_422 + z_447);
																		:pid_65:undef_DM1 = false;
																		:pid_65:localPC = ((t_23 < 4) && (t_68 < 4) && (t_338 < 4) && (z_132 < t_23) && (z_447 < t_338) && (0 <= (t_23 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_338 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && (z_132 > 0) && (z_2 > 0) && (z_32 > 0) && (z_422 > 0));
																		:pid_65:timeEmit = (z_0 + z_150 + z_185 + z_240 + z_5 + z_90);
																		:pid_66:cl = (z_422 + z_447);
																		:pid_72:c = 1;
																		:pid_72:consistent = true;
																		:pid_72:cl = z_447;
																		:pid_72:d.seq = 1;
																		:pid_72:d.fragment = FRAGMENT_0;
																		:pid_72:d.offset = 0;
																		:pid_77:cl = (z_132 + z_32 + z_422 + z_447);
																	}
																	BUFFER{
																		:pid_65:bufferNode:<FIFO>#0{ }
																	}
																	EC:<Id:1107;Ev:120;H:17;W:999>{ SC: ( pid_15:o#11 , ( pid_35:cp1 , pid_41:dp2 , pid_45:dp1 ) , ( pid_52:cp1 , pid_57:dp1 , pid_61:dp0 ) , ( pid_69:cp1 , pid_74:dp1 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																		EXE: { 
	|;| (:pid_31 , run) (:pid_43 , run) (:pid_44 , run) (:pid_44 , dp_init) (:pid_2 
	, run) }
																		TRACE: { 
	|;| (:pid_31 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_535 }) 
	(:pid_44 , ${ newfresh inst::Trickle.Node.DataProcess.t 
	param::Trickle.Node.DataProcess.t_434 }) }
																		PC: (((z_150 + z_90) == 4) && (z_240 == t_96) && (z_90 == t_5) && (t_10 < 4) && 
	(t_23 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) 
	&& (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_96 < 4) && 
	(z_116 < t_10) && (z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && (0 <= 
	(t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) 
	&& (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 
	+ -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && 
	(0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 
	+ z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= 
	(z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + 
	z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_150 + z_90) > t_5)
	 && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_132 > 0) && (z_150 
	> 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && 
	(z_32 > 0) && (z_4 > 0) && (z_422 > 0) && (z_5 > 0) && (z_90 > 0))
																		DATA{
																			:pid_2:uncoveredExit = 1;
																			:pid_31:node_time = (z_150 + z_185 + z_240 + z_5 + z_535 + z_90);
																			:pid_31:z = z_535;
																			:pid_31:localTime = (z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_90);
																			:pid_31:localPC = (((z_150 + z_90) == 4) && (z_240 == t_96) && (z_90 == t_5) && (t_5 < 4) && (t_79 < 8) && (t_434 < 4) && (t_96 < 4) && (0 <= (t_5 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_434 + -2)) && (0 <= (t_96 + -2)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_150 > 0) && (z_185 > 0) && (z_240 > 0) && (z_5 > 0) && (z_90 > 0));
																			:pid_32:cl = (z_185 + z_240 + z_535);
																			:pid_38:cl = (z_240 + z_535);
																			:pid_43:e = 0;
																			:pid_43:tau = 4;
																			:pid_43:tau_l = 4;
																			:pid_43:tau_h = 8;
																			:pid_43:k = 2;
																			:pid_43:c = 0;
																			:pid_43:t = t_434;
																			:pid_43:cl = 0;
																		}
																		EC:<Id:1250;Ev:131;H:18;W:1130>{ SC: ( pid_16:o#12 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_61:dp0 ) , ( pid_69:cp1 , pid_74:dp1 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																			EXE: 
	{ |;| (:pid_31 , run) (:pid_43 , run) (:pid_45 , run) (:pid_45 , dp_sendDM) 
	(:pid_2 , run) (:pid_15 , run) (:pid_15 , n1_out_DM2) }
																			
	TRACE: { |;| (:pid_31 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_595 }) (:pid_45 , ${ output inst::Trickle.Node.DataMsg2 [ 
	2 , 2 , 1 ] ${ + param::Trickle.Node.z_0 param::Trickle.Node.z_150 
	param::Trickle.Node.z_185 param::Trickle.Node.z_240 param::Trickle.Node.z_5 
	param::Trickle.Node.z_535 param::Trickle.Node.z_595 param::Trickle.Node.z_90 } } 
	@ (z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90)) }
																			/*FLAGS{ COVERAGE-ELEMENT }*/
																			INFO{
																				<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#12->run::pid_16:Trickle.Observer.o#12->prot::Trickle.Observer.o#12" as trace="tpid#12->run::pid_16:Trickle.Observer.o#12->prot::Trickle.Observer.o#12">
																			}
																			PC: (((z_150 + z_90) == 4) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) 
	&& (t_10 < 4) && (t_23 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 
	4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && 
	(t_96 < 4) && (z_116 < t_10) && (z_132 < t_23) && (z_346 < t_220) && (z_447 < 
	t_338) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_39 + -2)) && (0 
	<= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) 
	&& (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= 
	(t_434 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= 
	(z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_150 
	+ z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_132 
	> 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && 
	(z_306 > 0) && (z_32 > 0) && (z_4 > 0) && (z_422 > 0) && (z_5 > 0) && (z_535 > 0)
	 && (z_90 > 0))
																			DATA{
																				:pid_2:uncoveredExit = 0;
																				:pid_2:dataMessage.seq = 2;
																				:pid_2:dataMessage.fragment = FRAGMENT_1;
																				:pid_2:dataMessage.offset = 1;
																				:pid_31:node_time = (z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90);
																				:pid_31:z = z_595;
																				:pid_31:localTime = (z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90);
																				:pid_31:localPC = (((z_150 + z_90) == 4) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && (t_5 < 4) && (t_79 < 8) && (t_434 < 4) && (t_96 < 4) && (0 <= (t_5 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_434 + -2)) && (0 <= (t_96 + -2)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_150 > 0) && (z_185 > 0) && (z_240 > 0) && (z_5 > 0) && (z_535 > 0) && (z_90 > 0));
																				:pid_32:cl = (z_185 + z_240 + z_535 + z_595);
																				:pid_38:cl = (z_240 + z_535 + z_595);
																				:pid_43:cl = z_595;
																			}
																			BUFFER{
																				:pid_48:bufferNode:<FIFO>#0{
																					:pid_31:DataMsg2([ 2 , 2 , 1 ] , (z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90));
																				}
																				:pid_65:bufferNode:<FIFO>#0{
																					:pid_31:DataMsg2([ 2 , 2 , 1 ] , (z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90));
																				}
																			}
																			EC:<Id:1367;Ev:140;H:19;W:1236>{ SC: ( pid_16:o#12 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_69:cp1 , pid_74:dp1 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																				
	EXE: { |;| (:pid_48 , run) (:pid_60 , run) (:pid_61 , run) (:pid_61 , dp_init) 
	(:pid_2 , run) }
																				
	TRACE: { |;| (:pid_48 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_651 }) (:pid_61 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_513 }) }
																				PC: (((z_150 + z_90) == 4) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) 
	&& (t_10 < 4) && (t_23 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 
	4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && 
	(t_513 < 4) && (t_96 < 4) && (z_116 < t_10) && (z_132 < t_23) && (z_346 < t_220) 
	&& (z_447 < t_338) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_39 + 
	-2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= 
	(t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) 
	&& (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + 
	z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && 
	((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) 
	<= (z_132 + z_2 + z_32)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && 
	(z_11 > 0) && (z_116 > 0) && (z_132 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 
	0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && 
	(z_4 > 0) && (z_422 > 0) && (z_5 > 0) && (z_535 > 0) && (z_90 > 0))
																				DATA{
																					:pid_2:uncoveredExit = 1;
																					:pid_48:node_time = (z_11 + z_116 + z_306 + z_346 + z_651);
																					:pid_48:z = z_651;
																					:pid_48:localTime = (z_1 + z_11 + z_116 + z_306 + z_346 + z_651);
																					:pid_48:localPC = ((t_10 < 4) && (t_65 < 4) && (t_220 < 4) && (t_513 < 4) && (z_116 < t_10) && (z_346 < t_220) && (0 <= (t_10 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_220 + -2)) && (0 <= (t_513 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_306 > 0) && (z_346 > 0));
																					:pid_49:cl = (z_306 + z_346 + z_651);
																					:pid_55:cl = (z_346 + z_651);
																					:pid_60:e = 0;
																					:pid_60:tau = 4;
																					:pid_60:tau_l = 4;
																					:pid_60:tau_h = 8;
																					:pid_60:k = 2;
																					:pid_60:c = 0;
																					:pid_60:t = t_513;
																					:pid_60:cl = 0;
																				}
																				EC:<Id:1462;Ev:153;H:20;W:1322>{ SC: ( pid_17:o#13 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_69:cp1 , pid_74:dp1 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
	EXE: { |;| (:pid_48 , run) (:pid_60 , run) (:pid_62 , run) (:pid_62 , 
	dp1_receiveDM_consistent) (:pid_2 , run) (:pid_16 , run) (:pid_16 , n2_in_DM2) }
																					
	TRACE: { |;| (:pid_48 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_696 }) (:pid_62 , ${ input inst::Trickle.Node.DataMsg2 [ 2 
	, 2 , 1 ] ${ + param::Trickle.Node.z_0 param::Trickle.Node.z_150 
	param::Trickle.Node.z_185 param::Trickle.Node.z_240 param::Trickle.Node.z_5 
	param::Trickle.Node.z_535 param::Trickle.Node.z_595 param::Trickle.Node.z_90 } } 
	@ (z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) }
																					/*FLAGS{ COVERAGE-ELEMENT }*/
																					INFO{
																						<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#13->run::pid_17:Trickle.Observer.o#13->prot::Trickle.Observer.o#13" as trace="tpid#13->run::pid_17:Trickle.Observer.o#13->prot::Trickle.Observer.o#13">
																					}
																					PC: (((z_150 + z_90) == 4) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) 
	&& (t_10 < 4) && (t_23 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 
	4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && 
	(t_513 < 4) && (t_96 < 4) && (z_116 < t_10) && (z_132 < t_23) && (z_346 < t_220) 
	&& (z_447 < t_338) && (z_696 < t_513) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2))
	 && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 
	+ -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 
	<= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_96 + 
	-2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + 
	z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 
	+ z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + 
	z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) 
	&& ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) 
	&& (z_132 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 
	> 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && 
	(z_5 > 0) && (z_535 > 0) && (z_651 > 0) && (z_90 > 0))
																					DATA{
																						:pid_2:uncoveredExit = 0;
																						:pid_48:my_buff[1].seq = 2;
																						:pid_48:my_buff[1].fragment = FRAGMENT_1;
																						:pid_48:my_buff[1].offset = 1;
																						:pid_48:firmware[1] = FRAGMENT_1;
																						:pid_48:myseq_buff[1] = 1;
																						:pid_48:node_time = (z_11 + z_116 + z_306 + z_346 + z_651 + z_696);
																						:pid_48:z = z_696;
																						:pid_48:localTime = (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696);
																						:pid_48:undef_DM2 = false;
																						:pid_48:localPC = ((t_10 < 4) && (t_65 < 4) && (t_220 < 4) && (t_513 < 4) && (z_116 < t_10) && (z_346 < t_220) && (z_696 < t_513) && (0 <= (t_10 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_220 + -2)) && (0 <= (t_513 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_306 > 0) && (z_346 > 0) && (z_651 > 0));
																						:pid_48:timeEmit = (z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90);
																						:pid_49:cl = (z_306 + z_346 + z_651 + z_696);
																						:pid_55:cl = (z_346 + z_651 + z_696);
																						:pid_60:c = 1;
																						:pid_60:consistent = true;
																						:pid_60:cl = z_696;
																						:pid_60:d.seq = 2;
																						:pid_60:d.fragment = FRAGMENT_1;
																						:pid_60:d.offset = 1;
																					}
																					BUFFER{
																						:pid_48:bufferNode:<FIFO>#0{ }
																					}
																					EC:<Id:1593;Ev:159;H:21;W:1440>{ SC: ( pid_17:o#13 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_69:cp1 , pid_74:dp1 , pid_79:dp1 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
		EXE: { |;| (:pid_65 , run) (:pid_77 , run) (:pid_78 , run) (:pid_78 , 
	dp_init) (:pid_2 , run) }
																					
		TRACE: { |;| (:pid_65 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_762 }) (:pid_78 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_568 }) }
																						PC: (((z_150 + z_90) == 4) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) 
	&& (t_10 < 4) && (t_23 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 
	4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && 
	(t_513 < 4) && (t_568 < 4) && (t_96 < 4) && (z_116 < t_10) && (z_132 < t_23) && 
	(z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && (0 <= (t_10 + -2)) && 
	(0 <= (t_23 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + 
	-2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= 
	(t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)
	) && (0 <= (t_568 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + 
	z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + 
	z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + 
	z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 
	+ z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && 
	(z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_132 > 0) && (z_150 > 0) && (z_185 > 
	0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && 
	(z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_535 > 
	0) && (z_651 > 0) && (z_90 > 0))
																						DATA{
																							:pid_2:uncoveredExit = 1;
																							:pid_65:node_time = (z_132 + z_32 + z_422 + z_447 + z_762);
																							:pid_65:z = z_762;
																							:pid_65:localTime = (z_132 + z_2 + z_32 + z_422 + z_447 + z_762);
																							:pid_65:localPC = ((t_23 < 4) && (t_68 < 4) && (t_338 < 4) && (t_568 < 4) && (z_132 < t_23) && (z_447 < t_338) && (0 <= (t_23 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_568 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && (z_132 > 0) && (z_2 > 0) && (z_32 > 0) && (z_422 > 0) && (z_447 > 0));
																							:pid_66:cl = (z_422 + z_447 + z_762);
																							:pid_72:cl = (z_447 + z_762);
																							:pid_77:e = 0;
																							:pid_77:tau = 4;
																							:pid_77:tau_l = 4;
																							:pid_77:tau_h = 8;
																							:pid_77:k = 2;
																							:pid_77:c = 0;
																							:pid_77:t = t_568;
																							:pid_77:cl = 0;
																						}
																						EC:<Id:1662;Ev:177;H:22;W:1503>{ SC: ( pid_18:o#14 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_69:cp1 , pid_74:dp1 , pid_79:dp1 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
			EXE: { |;| (:pid_65 , run) (:pid_77 , run) (:pid_79 , run) (:pid_79 , 
	dp1_receiveDM_consistent) (:pid_2 , run) (:pid_17 , run) (:pid_17 , n3_in_DM2) }
																					
			TRACE: { |;| (:pid_65 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_792 }) (:pid_79 , ${ input inst::Trickle.Node.DataMsg2 [ 2 
	, 2 , 1 ] ${ + param::Trickle.Node.z_0 param::Trickle.Node.z_150 
	param::Trickle.Node.z_185 param::Trickle.Node.z_240 param::Trickle.Node.z_5 
	param::Trickle.Node.z_535 param::Trickle.Node.z_595 param::Trickle.Node.z_90 } } 
	@ (z_132 + z_32 + z_422 + z_447 + z_762 + z_792)) }
																							/*FLAGS{ COVERAGE-ELEMENT }*/
																							INFO{
																								<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#14->run::pid_18:Trickle.Observer.o#14->prot::Trickle.Observer.o#14" as trace="tpid#14->run::pid_18:Trickle.Observer.o#14->prot::Trickle.Observer.o#14">
																							}
																							PC: (((z_150 + z_90) == 4) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) 
	&& (t_10 < 4) && (t_23 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 
	4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && 
	(t_513 < 4) && (t_568 < 4) && (t_96 < 4) && (z_116 < t_10) && (z_132 < t_23) && 
	(z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && (0 
	<= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2))
	 && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 
	+ -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && 
	(0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + 
	z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + 
	z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + 
	z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 
	+ z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) 
	<= (z_132 + z_2 + z_32)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && 
	(z_11 > 0) && (z_116 > 0) && (z_132 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 
	0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && 
	(z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_535 > 0) && (z_651 > 
	0) && (z_762 > 0) && (z_90 > 0))
																							DATA{
																								:pid_2:uncoveredExit = 0;
																								:pid_65:my_buff[1].seq = 2;
																								:pid_65:my_buff[1].fragment = FRAGMENT_1;
																								:pid_65:my_buff[1].offset = 1;
																								:pid_65:firmware[1] = FRAGMENT_1;
																								:pid_65:myseq_buff[1] = 1;
																								:pid_65:node_time = (z_132 + z_32 + z_422 + z_447 + z_762 + z_792);
																								:pid_65:z = z_792;
																								:pid_65:localTime = (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792);
																								:pid_65:undef_DM2 = false;
																								:pid_65:localPC = ((t_23 < 4) && (t_68 < 4) && (t_338 < 4) && (t_568 < 4) && (z_132 < t_23) && (z_447 < t_338) && (z_792 < t_568) && (0 <= (t_23 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_568 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && (z_132 > 0) && (z_2 > 0) && (z_32 > 0) && (z_422 > 0) && (z_447 > 0) && (z_762 > 0));
																								:pid_65:timeEmit = (z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90);
																								:pid_66:cl = (z_422 + z_447 + z_762 + z_792);
																								:pid_72:cl = (z_447 + z_762 + z_792);
																								:pid_77:c = 1;
																								:pid_77:consistent = true;
																								:pid_77:cl = z_792;
																								:pid_77:d.seq = 2;
																								:pid_77:d.fragment = FRAGMENT_1;
																								:pid_77:d.offset = 1;
																							}
																							BUFFER{
																								:pid_65:bufferNode:<FIFO>#0{ }
																							}
																							EC:<Id:1864;Ev:179;H:23;W:1503>{ SC: ( pid_18:o#14 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_69:cp1 , pid_74:dp1 , pid_79:dp1 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
				EXE: { |;| (:pid_99 , run) (:pid_100 , run) (:pid_103 , run) 
	(:pid_103 , cp_sendCM) (:pid_2 , run) }
																					
				TRACE: { |;| (:pid_99 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_884 }) (:pid_103 , ${ output inst::Trickle.Node.ControlMsg 
	[ 0 , 0 ] ${ + param::Trickle.Node.z_4 param::Trickle.Node.z_64 
	param::Trickle.Node.z_884 } } @ (z_64 + z_884)) }
																								PC: (((z_150 + z_90) == 4) && (z_240 == t_96) && (z_595 == t_434) && (z_884 == t_42) 
	&& (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 
	< 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && 
	(t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_96 < 4) && (z_116 < t_10) && 
	(z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && 
	(z_792 < t_568) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_39 + -2))
	 && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 
	+ -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 
	<= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_96 + 
	-2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + 
	z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + 
	z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + 
	z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + 
	z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 
	+ z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && 
	(z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_132 > 0) && (z_150 > 0) && (z_185 > 
	0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && 
	(z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_535 > 
	0) && (z_64 > 0) && (z_651 > 0) && (z_762 > 0) && (z_90 > 0))
																								DATA{
																									:pid_2:uncoveredExit = 1;
																									:pid_99:node_time = (z_64 + z_884);
																									:pid_99:z = z_884;
																									:pid_99:localTime = (z_4 + z_64 + z_884);
																									:pid_99:localPC = ((z_884 == t_42) && (t_42 < 4) && (0 <= (t_42 + -2)) && (z_4 > 0) && (z_64 > 0));
																									:pid_100:cl = z_884;
																									:pid_106:cl = (z_64 + z_884);
																									:pid_111:cl = (z_64 + z_884);
																								}
																								BUFFER{
																									:pid_82:bufferNode:<FIFO>#0{
																										:pid_99:ControlMsg([ 0 , 0 ] , (z_4 + z_64 + z_884));
																									}
																								}
																								EC:<Id:1889;Ev:0;H:24;W:1710>{ SC: ( pid_18:o#14 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_79:dp1 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
					EXE: { |;| (:pid_65 , run) (:pid_66 , run) (:pid_69 , run) 
	(:pid_69 , cp_sendCM) (:pid_2 , run) }
																					
					TRACE: { |;| (:pid_65 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_892 }) (:pid_69 , ${ output inst::Trickle.Node.ControlMsg 
	[ 1 , 1 ] ${ + param::Trickle.Node.z_132 param::Trickle.Node.z_2 
	param::Trickle.Node.z_32 param::Trickle.Node.z_422 param::Trickle.Node.z_447 
	param::Trickle.Node.z_762 param::Trickle.Node.z_792 param::Trickle.Node.z_892 } }
	 @ (z_132 + z_32 + z_422 + z_447 + z_762 + z_792 + z_892)) }
																									/*FLAGS{ COVERAGE-ELEMENT }*/
																									INFO{
																										<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#15->Node.ControlProcess->cp1.cp_sendCM" as trace="tpid#15->Node.ControlProcess->cp1.cp_sendCM">
																									}
																									PC: (((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_892) == t_68) && 
	(z_240 == t_96) && (z_595 == t_434) && (z_884 == t_42) && (z_90 == t_5) && (t_10 
	< 4) && (t_23 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && 
	(t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 
	< 4) && (t_568 < 4) && (t_96 < 4) && (z_116 < t_10) && (z_132 < t_23) && (z_346 
	< t_220) && (z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && (0 <= (t_10 
	+ -2)) && (0 <= (t_23 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 
	<= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) 
	&& (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= 
	(t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + 
	z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + 
	z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + 
	z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 
	+ z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 
	+ z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) 
	&& ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 
	+ z_2 + z_32)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) 
	&& (z_116 > 0) && (z_132 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && 
	(z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0)
	 && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_535 > 0) && (z_64 > 0) && 
	(z_651 > 0) && (z_762 > 0) && (z_792 > 0) && (z_90 > 0))
																									DATA{
																										:pid_2:uncoveredExit = 2;
																										:pid_65:node_time = (z_132 + z_32 + z_422 + z_447 + z_762 + z_792 + z_892);
																										:pid_65:z = z_892;
																										:pid_65:localTime = (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_892);
																										:pid_65:localPC = (((z_422 + z_447 + z_762 + z_792 + z_892) == t_68) && (t_23 < 4) && (t_68 < 4) && (t_338 < 4) && (t_568 < 4) && (z_132 < t_23) && (z_447 < t_338) && (z_792 < t_568) && (0 <= (t_23 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_568 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && (z_132 > 0) && (z_2 > 0) && (z_32 > 0) && (z_422 > 0) && (z_447 > 0) && (z_762 > 0) && (z_792 > 0));
																										:pid_66:cl = (z_422 + z_447 + z_762 + z_792 + z_892);
																										:pid_72:cl = (z_447 + z_762 + z_792 + z_892);
																										:pid_77:cl = (z_792 + z_892);
																									}
																									BUFFER{
																										:pid_31:bufferNode:<FIFO>#0{
																											:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_892));
																										}
																										:pid_48:bufferNode:<FIFO>#0{
																											:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_892));
																										}
																										:pid_82:bufferNode:<FIFO>#0{
																											:pid_99:ControlMsg([ 0 , 0 ] , (z_4 + z_64 + z_884));
																											:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_892));
																										}
																										:pid_99:bufferNode:<FIFO>#0{
																											:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_892));
																										}
																									}
																								}
																							}
																							EC:<Id:1865;Ev:180;H:23;W:1688>{ SC: ( pid_18:o#14 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_69:cp1 , pid_74:dp1 , pid_79:dp1 ) , ( pid_87:cp2 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
				EXE: { |;| (:pid_82 , run) (:pid_83 , run) (:pid_86 , run) (:pid_86 
	, cp_sendCM) (:pid_2 , run) }
																					
				TRACE: { |;| (:pid_82 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_883 }) (:pid_86 , ${ output inst::Trickle.Node.ControlMsg 
	[ 0 , 0 ] ${ + param::Trickle.Node.z_3 param::Trickle.Node.z_53 
	param::Trickle.Node.z_883 } } @ (z_53 + z_883)) }
																								PC: (((z_150 + z_90) == 4) && (z_240 == t_96) && (z_595 == t_434) && (z_883 == t_39) 
	&& (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 
	< 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && 
	(t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_96 < 4) && (z_116 < t_10) && 
	(z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && 
	(z_792 < t_568) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_39 + -2))
	 && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 
	+ -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 
	<= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_96 + 
	-2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + 
	z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + 
	z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + 
	z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + 
	z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 
	+ z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && 
	(z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_132 > 0) && (z_150 > 0) && (z_185 > 
	0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && 
	(z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0)
	 && (z_535 > 0) && (z_651 > 0) && (z_762 > 0) && (z_90 > 0))
																								DATA{
																									:pid_2:uncoveredExit = 1;
																									:pid_82:node_time = (z_53 + z_883);
																									:pid_82:z = z_883;
																									:pid_82:localTime = (z_3 + z_53 + z_883);
																									:pid_82:localPC = ((z_883 == t_39) && (t_39 < 4) && (0 <= (t_39 + -2)) && (z_3 > 0) && (z_53 > 0));
																									:pid_83:cl = z_883;
																									:pid_89:cl = (z_53 + z_883);
																									:pid_94:cl = (z_53 + z_883);
																								}
																								BUFFER{
																									:pid_48:bufferNode:<FIFO>#0{
																										:pid_82:ControlMsg([ 0 , 0 ] , (z_3 + z_53 + z_883));
																									}
																								}
																								EC:<Id:1899;Ev:0;H:24;W:1719>{ SC: ( pid_18:o#14 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_79:dp1 ) , ( pid_87:cp2 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
					EXE: { |;| (:pid_65 , run) (:pid_66 , run) (:pid_69 , run) 
	(:pid_69 , cp_sendCM) (:pid_2 , run) }
																					
					TRACE: { |;| (:pid_65 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_897 }) (:pid_69 , ${ output inst::Trickle.Node.ControlMsg 
	[ 1 , 1 ] ${ + param::Trickle.Node.z_132 param::Trickle.Node.z_2 
	param::Trickle.Node.z_32 param::Trickle.Node.z_422 param::Trickle.Node.z_447 
	param::Trickle.Node.z_762 param::Trickle.Node.z_792 param::Trickle.Node.z_897 } }
	 @ (z_132 + z_32 + z_422 + z_447 + z_762 + z_792 + z_897)) }
																									/*FLAGS{ COVERAGE-ELEMENT }*/
																									INFO{
																										<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#15->Node.ControlProcess->cp1.cp_sendCM" as trace="tpid#15->Node.ControlProcess->cp1.cp_sendCM">
																									}
																									PC: (((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_897) == t_68) && 
	(z_240 == t_96) && (z_595 == t_434) && (z_883 == t_39) && (z_90 == t_5) && (t_10 
	< 4) && (t_23 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && 
	(t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 
	< 4) && (t_568 < 4) && (t_96 < 4) && (z_116 < t_10) && (z_132 < t_23) && (z_346 
	< t_220) && (z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && (0 <= (t_10 
	+ -2)) && (0 <= (t_23 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 
	<= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) 
	&& (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= 
	(t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + 
	z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + 
	z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + 
	z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 
	+ z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 
	+ z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) 
	&& ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 
	+ z_2 + z_32)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) 
	&& (z_116 > 0) && (z_132 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && 
	(z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0)
	 && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && 
	(z_651 > 0) && (z_762 > 0) && (z_792 > 0) && (z_90 > 0))
																									DATA{
																										:pid_2:uncoveredExit = 2;
																										:pid_65:node_time = (z_132 + z_32 + z_422 + z_447 + z_762 + z_792 + z_897);
																										:pid_65:z = z_897;
																										:pid_65:localTime = (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_897);
																										:pid_65:localPC = (((z_422 + z_447 + z_762 + z_792 + z_897) == t_68) && (t_23 < 4) && (t_68 < 4) && (t_338 < 4) && (t_568 < 4) && (z_132 < t_23) && (z_447 < t_338) && (z_792 < t_568) && (0 <= (t_23 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_568 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && (z_132 > 0) && (z_2 > 0) && (z_32 > 0) && (z_422 > 0) && (z_447 > 0) && (z_762 > 0) && (z_792 > 0));
																										:pid_66:cl = (z_422 + z_447 + z_762 + z_792 + z_897);
																										:pid_72:cl = (z_447 + z_762 + z_792 + z_897);
																										:pid_77:cl = (z_792 + z_897);
																									}
																									BUFFER{
																										:pid_31:bufferNode:<FIFO>#0{
																											:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_897));
																										}
																										:pid_48:bufferNode:<FIFO>#0{
																											:pid_82:ControlMsg([ 0 , 0 ] , (z_3 + z_53 + z_883));
																											:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_897));
																										}
																										:pid_82:bufferNode:<FIFO>#0{
																											:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_897));
																										}
																										:pid_99:bufferNode:<FIFO>#0{
																											:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_897));
																										}
																									}
																								}
																							}
																							EC:<Id:1866;Ev:181;H:23;W:1689>{ SC: ( pid_18:o#14 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_79:dp1 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
				EXE: { |;| (:pid_65 , run) (:pid_66 , run) (:pid_69 , run) (:pid_69 
	, cp_sendCM) (:pid_2 , run) }
																					
				TRACE: { |;| (:pid_65 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_882 }) (:pid_69 , ${ output inst::Trickle.Node.ControlMsg 
	[ 1 , 1 ] ${ + param::Trickle.Node.z_132 param::Trickle.Node.z_2 
	param::Trickle.Node.z_32 param::Trickle.Node.z_422 param::Trickle.Node.z_447 
	param::Trickle.Node.z_762 param::Trickle.Node.z_792 param::Trickle.Node.z_882 } }
	 @ (z_132 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882)) }
																								/*FLAGS{ COVERAGE-ELEMENT }*/
																								INFO{
																									<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#15->Node.ControlProcess->cp1.cp_sendCM" as trace="tpid#15->Node.ControlProcess->cp1.cp_sendCM">
																								}
																								PC: (((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && 
	(z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) 
	&& (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 
	8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && 
	(t_96 < 4) && (z_116 < t_10) && (z_132 < t_23) && (z_346 < t_220) && (z_447 < 
	t_338) && (z_696 < t_513) && (z_792 < t_568) && (0 <= (t_10 + -2)) && (0 <= 
	(t_23 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && 
	(0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + 
	-2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 
	<= (t_568 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + 
	z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= 
	(z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_150 
	+ z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_132 
	> 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && 
	(z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 
	0) && (z_5 > 0) && (z_535 > 0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) && 
	(z_90 > 0))
																								DATA{
																									:pid_2:uncoveredExit = 1;
																									:pid_65:node_time = (z_132 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																									:pid_65:z = z_882;
																									:pid_65:localTime = (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																									:pid_65:localPC = (((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (t_23 < 4) && (t_68 < 4) && (t_338 < 4) && (t_568 < 4) && (z_132 < t_23) && (z_447 < t_338) && (z_792 < t_568) && (0 <= (t_23 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_568 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && (z_132 > 0) && (z_2 > 0) && (z_32 > 0) && (z_422 > 0) && (z_447 > 0) && (z_762 > 0) && (z_792 > 0));
																									:pid_66:cl = (z_422 + z_447 + z_762 + z_792 + z_882);
																									:pid_72:cl = (z_447 + z_762 + z_792 + z_882);
																									:pid_77:cl = (z_792 + z_882);
																								}
																								BUFFER{
																									:pid_31:bufferNode:<FIFO>#0{
																										:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																									}
																									:pid_48:bufferNode:<FIFO>#0{
																										:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																									}
																									:pid_82:bufferNode:<FIFO>#0{
																										:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																									}
																									:pid_99:bufferNode:<FIFO>#0{
																										:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																									}
																								}
																								EC:<Id:1911;Ev:201;H:24;W:1730>{ SC: ( pid_18:o#14 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_79:dp1 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
					EXE: { |;| (:pid_82 , run) (:pid_83 , run) (:pid_86 , run) 
	(:pid_86 , cp1_receiveCM_inconsistent) (:pid_2 , run) }
																					
					TRACE: { |;| (:pid_82 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_903 }) (:pid_86 , ${ input inst::Trickle.Node.ControlMsg [ 
	1 , 1 ] ${ + param::Trickle.Node.z_132 param::Trickle.Node.z_2 
	param::Trickle.Node.z_32 param::Trickle.Node.z_422 param::Trickle.Node.z_447 
	param::Trickle.Node.z_762 param::Trickle.Node.z_792 param::Trickle.Node.z_882 } }
	 @ (z_53 + z_903)) (:pid_86 , ${ newfresh inst::Trickle.Node.ControlProcess.t 
	param::Trickle.Node.ControlProcess.t_241 }) }
																									/*FLAGS{ COVERAGE-ELEMENT }*/
																									INFO{
																										<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#16->Node.ControlProcess->cp1.cp1_receiveCM_inconsistent" as trace="tpid#16->Node.ControlProcess->cp1.cp1_receiveCM_inconsistent">
																									}
																									PC: (((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && 
	(z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) 
	&& (t_241 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 
	4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && 
	(t_568 < 4) && (t_96 < 4) && (z_116 < t_10) && (z_132 < t_23) && (z_346 < t_220) 
	&& (z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 
	<= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)
	) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= 
	(t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) 
	&& (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= 
	(t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= 
	(z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + 
	z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + 
	z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + 
	z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 
	+ z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) 
	&& ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_132 + z_2 + z_32 + z_422 
	+ z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_150 + z_90) > 
	t_5) && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_132 > 0) && 
	(z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 
	0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && 
	(z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 
	0) && (z_90 > 0))
																									DATA{
																										:pid_2:uncoveredExit = 2;
																										:pid_82:mydp_run[0] = true;
																										:pid_82:mydp_run[1] = true;
																										:pid_82:node_time = (z_53 + z_903);
																										:pid_82:z = z_903;
																										:pid_82:localTime = (z_3 + z_53 + z_903);
																										:pid_82:seq_buff[0] = 1;
																										:pid_82:seq_buff[1] = 1;
																										:pid_82:localPC = ((t_241 < 4) && (t_39 < 4) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && (z_3 > 0) && (z_53 > 0));
																										:pid_82:timeEmit = (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																										:pid_83:e = 0;
																										:pid_83:c = 0;
																										:pid_83:i = 2;
																										:pid_83:t = t_241;
																										:pid_83:consistent = false;
																										:pid_83:cl = 0;
																										:pid_89:cl = (z_53 + z_903);
																										:pid_94:cl = (z_53 + z_903);
																									}
																									BUFFER{
																										:pid_82:bufferNode:<FIFO>#0{ }
																									}
																									EC:<Id:2145;Ev:202;H:25;W:1730>{ SC: ( pid_18:o#14 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_79:dp1 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
						EXE: { |;| (:pid_99 , run) (:pid_100 , run) (:pid_103 , run) 
	(:pid_103 , cp_sendCM) (:pid_2 , run) }
																					
						TRACE: { |;| (:pid_99 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_1004 }) (:pid_103 , ${ output 
	inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + param::Trickle.Node.z_1004 
	param::Trickle.Node.z_4 param::Trickle.Node.z_64 } } @ (z_1004 + z_64)) }
																										PC: (((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && 
	(z_1004 == t_42) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && 
	(t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) 
	&& (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && 
	(t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_96 < 4) && (z_116 < t_10) && 
	(z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && 
	(z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && 
	(0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + 
	-2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= 
	(t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)
	) && (0 <= (t_568 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + 
	z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 
	+ z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 
	+ z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + 
	z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) 
	&& ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 
	+ z_903)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) && 
	(z_116 > 0) && (z_132 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 
	> 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && 
	(z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_64 > 
	0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) && (z_90 > 0))
																										DATA{
																											:pid_2:uncoveredExit = 3;
																											:pid_99:node_time = (z_1004 + z_64);
																											:pid_99:z = z_1004;
																											:pid_99:localTime = (z_1004 + z_4 + z_64);
																											:pid_99:localPC = ((z_1004 == t_42) && (t_42 < 4) && (0 <= (t_42 + -2)) && (z_4 > 0) && (z_64 > 0));
																											:pid_100:cl = z_1004;
																											:pid_106:cl = (z_1004 + z_64);
																											:pid_111:cl = (z_1004 + z_64);
																										}
																										BUFFER{
																											:pid_82:bufferNode:<FIFO>#0{
																												:pid_99:ControlMsg([ 0 , 0 ] , (z_1004 + z_4 + z_64));
																											}
																										}
																										EC:<Id:2168;Ev:0;H:26;W:1966>{ SC: ( pid_19:o#15 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_80:dp2 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
							EXE: { |;| (:pid_65 , run) (:pid_77 , run) (:pid_79 , 
	run) (:pid_79 , dp_sendDM) (:pid_2 , run) (:pid_18 , run) (:pid_18 , n3_out_DM2) 
	}
																					
							TRACE: { |;| (:pid_65 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_1007 }) (:pid_79 , ${ output inst::Trickle.Node.DataMsg2 [ 
	2 , 2 , 1 ] ${ + param::Trickle.Node.z_1007 param::Trickle.Node.z_132 
	param::Trickle.Node.z_2 param::Trickle.Node.z_32 param::Trickle.Node.z_422 
	param::Trickle.Node.z_447 param::Trickle.Node.z_762 param::Trickle.Node.z_792 
	param::Trickle.Node.z_882 } } @ (z_1007 + z_132 + z_32 + z_422 + z_447 + z_762 + 
	z_792 + z_882)) }
																											/*FLAGS{ COVERAGE-ELEMENT }*/
																											INFO{
																												<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#17->run::pid_19:Trickle.Observer.o#15->prot::Trickle.Observer.o#15" as trace="tpid#17->run::pid_19:Trickle.Observer.o#15->prot::Trickle.Observer.o#15">
																											}
																											PC: (((z_1007 + z_792 + z_882) == t_568) && ((z_150 + z_90) == 4) && ((z_422 + z_447 
	+ z_762 + z_792 + z_882) == t_68) && (z_1004 == t_42) && (z_240 == t_96) && 
	(z_595 == t_434) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && 
	(t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) 
	&& (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && 
	(t_96 < 4) && (z_116 < t_10) && (z_132 < t_23) && (z_346 < t_220) && (z_447 < 
	t_338) && (z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + 
	-2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= 
	(t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && 
	(0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 
	+ -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_96 + -2)) && 
	((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + 
	z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + 
	z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + 
	z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + 
	z_90) <= (z_132 + z_2 + z_32)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + 
	z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_150 + z_90) > t_5) && (z_0 > 0) 
	&& (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_132 > 0) && (z_150 > 0) && 
	(z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0)
	 && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 
	> 0) && (z_535 > 0) && (z_64 > 0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) 
	&& (z_882 > 0) && (z_90 > 0))
																											DATA{
																												:pid_2:uncoveredExit = 0;
																												:pid_65:node_time = (z_1007 + z_132 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																												:pid_65:z = z_1007;
																												:pid_65:localTime = (z_1007 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																												:pid_65:localPC = (((z_1007 + z_792 + z_882) == t_568) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (t_23 < 4) && (t_68 < 4) && (t_338 < 4) && (t_568 < 4) && (z_132 < t_23) && (z_447 < t_338) && (z_792 < t_568) && (0 <= (t_23 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_568 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && (z_132 > 0) && (z_2 > 0) && (z_32 > 0) && (z_422 > 0) && (z_447 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0));
																												:pid_66:cl = (z_1007 + z_422 + z_447 + z_762 + z_792 + z_882);
																												:pid_72:cl = (z_1007 + z_447 + z_762 + z_792 + z_882);
																												:pid_77:cl = (z_1007 + z_792 + z_882);
																											}
																											BUFFER{
																												:pid_31:bufferNode:<FIFO>#0{
																													:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																													:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1007 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																												}
																												:pid_48:bufferNode:<FIFO>#0{
																													:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																													:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1007 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																												}
																												:pid_82:bufferNode:<FIFO>#0{
																													:pid_99:ControlMsg([ 0 , 0 ] , (z_1004 + z_4 + z_64));
																													:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1007 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																												}
																												:pid_99:bufferNode:<FIFO>#0{
																													:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																													:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1007 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																												}
																											}
																										}
																									}
																									EC:<Id:2146;Ev:203;H:25;W:1945>{ SC: ( pid_18:o#14 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_79:dp1 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
						EXE: { |;| (:pid_99 , run) (:pid_100 , run) (:pid_103 , run) 
	(:pid_103 , cp1_receiveCM_inconsistent) (:pid_2 , run) }
																					
						TRACE: { |;| (:pid_99 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_1004 }) (:pid_103 , ${ input inst::Trickle.Node.ControlMsg 
	[ 1 , 1 ] ${ + param::Trickle.Node.z_132 param::Trickle.Node.z_2 
	param::Trickle.Node.z_32 param::Trickle.Node.z_422 param::Trickle.Node.z_447 
	param::Trickle.Node.z_762 param::Trickle.Node.z_792 param::Trickle.Node.z_882 } }
	 @ (z_1004 + z_64)) (:pid_103 , ${ newfresh inst::Trickle.Node.ControlProcess.t 
	param::Trickle.Node.ControlProcess.t_292 }) }
																										PC: (((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && 
	(z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) 
	&& (t_241 < 4) && (t_292 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 
	< 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && 
	(t_513 < 4) && (t_568 < 4) && (t_96 < 4) && (z_1004 < t_42) && (z_116 < t_10) && 
	(z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && 
	(z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && 
	(0 <= (t_241 + -2)) && (0 <= (t_292 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 
	+ -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= 
	(t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2))
	 && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + 
	z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + 
	z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + 
	z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 
	+ z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) 
	<= (z_132 + z_2 + z_32)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 
	+ z_882) <= (z_1004 + z_4 + z_64)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + 
	z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_150 + z_90) > t_5) && 
	(z_0 > 0) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_132 > 0) && (z_150 > 0)
	 && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 
	> 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && 
	(z_53 > 0) && (z_535 > 0) && (z_64 > 0) && (z_651 > 0) && (z_762 > 0) && (z_792 
	> 0) && (z_90 > 0))
																										DATA{
																											:pid_2:uncoveredExit = 3;
																											:pid_99:mydp_run[0] = true;
																											:pid_99:mydp_run[1] = true;
																											:pid_99:node_time = (z_1004 + z_64);
																											:pid_99:z = z_1004;
																											:pid_99:localTime = (z_1004 + z_4 + z_64);
																											:pid_99:seq_buff[0] = 1;
																											:pid_99:seq_buff[1] = 1;
																											:pid_99:localPC = ((t_292 < 4) && (t_42 < 4) && (z_1004 < t_42) && (0 <= (t_292 + -2)) && (0 <= (t_42 + -2)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1004 + z_4 + z_64)) && (z_4 > 0) && (z_64 > 0));
																											:pid_99:timeEmit = (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																											:pid_100:e = 0;
																											:pid_100:c = 0;
																											:pid_100:i = 2;
																											:pid_100:t = t_292;
																											:pid_100:consistent = false;
																											:pid_100:cl = 0;
																											:pid_106:cl = (z_1004 + z_64);
																											:pid_111:cl = (z_1004 + z_64);
																										}
																										BUFFER{
																											:pid_99:bufferNode:<FIFO>#0{ }
																										}
																										EC:<Id:2184;Ev:0;H:26;W:1981>{ SC: ( pid_19:o#15 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_80:dp2 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
							EXE: { |;| (:pid_65 , run) (:pid_77 , run) (:pid_79 , 
	run) (:pid_79 , dp_sendDM) (:pid_2 , run) (:pid_18 , run) (:pid_18 , n3_out_DM2) 
	}
																					
							TRACE: { |;| (:pid_65 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_1012 }) (:pid_79 , ${ output inst::Trickle.Node.DataMsg2 [ 
	2 , 2 , 1 ] ${ + param::Trickle.Node.z_1012 param::Trickle.Node.z_132 
	param::Trickle.Node.z_2 param::Trickle.Node.z_32 param::Trickle.Node.z_422 
	param::Trickle.Node.z_447 param::Trickle.Node.z_762 param::Trickle.Node.z_792 
	param::Trickle.Node.z_882 } } @ (z_1012 + z_132 + z_32 + z_422 + z_447 + z_762 + 
	z_792 + z_882)) }
																											/*FLAGS{ COVERAGE-ELEMENT }*/
																											INFO{
																												<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#17->run::pid_19:Trickle.Observer.o#15->prot::Trickle.Observer.o#15" as trace="tpid#17->run::pid_19:Trickle.Observer.o#15->prot::Trickle.Observer.o#15">
																											}
																											PC: (((z_1012 + z_792 + z_882) == t_568) && ((z_150 + z_90) == 4) && ((z_422 + z_447 
	+ z_762 + z_792 + z_882) == t_68) && (z_240 == t_96) && (z_595 == t_434) && 
	(z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_292 < 4) && (t_39 
	< 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && 
	(t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_96 
	< 4) && (z_1004 < t_42) && (z_116 < t_10) && (z_132 < t_23) && (z_346 < t_220) 
	&& (z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 
	<= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_292 + 
	-2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= 
	(t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) 
	&& (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= 
	(t_568 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + 
	z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= 
	(z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_132 
	+ z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1004 + z_4 + z_64)) 
	&& ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 
	+ z_903)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) && 
	(z_116 > 0) && (z_132 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 
	> 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && 
	(z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_64 > 
	0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0))
																											DATA{
																												:pid_2:uncoveredExit = 0;
																												:pid_65:node_time = (z_1012 + z_132 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																												:pid_65:z = z_1012;
																												:pid_65:localTime = (z_1012 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																												:pid_65:localPC = (((z_1012 + z_792 + z_882) == t_568) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (t_23 < 4) && (t_68 < 4) && (t_338 < 4) && (t_568 < 4) && (z_132 < t_23) && (z_447 < t_338) && (z_792 < t_568) && (0 <= (t_23 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_568 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && (z_132 > 0) && (z_2 > 0) && (z_32 > 0) && (z_422 > 0) && (z_447 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0));
																												:pid_66:cl = (z_1012 + z_422 + z_447 + z_762 + z_792 + z_882);
																												:pid_72:cl = (z_1012 + z_447 + z_762 + z_792 + z_882);
																												:pid_77:cl = (z_1012 + z_792 + z_882);
																											}
																											BUFFER{
																												:pid_31:bufferNode:<FIFO>#0{
																													:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																													:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1012 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																												}
																												:pid_48:bufferNode:<FIFO>#0{
																													:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																													:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1012 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																												}
																												:pid_82:bufferNode:<FIFO>#0{
																													:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1012 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																												}
																												:pid_99:bufferNode:<FIFO>#0{
																													:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1012 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																												}
																											}
																										}
																									}
																									EC:<Id:2147;Ev:204;H:25;W:1946>{ SC: ( pid_18:o#14 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_79:dp1 ) , ( pid_87:cp2 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
						EXE: { |;| (:pid_82 , run) (:pid_83 , run) (:pid_86 , run) 
	(:pid_86 , cp_sendCM) (:pid_2 , run) }
																					
						TRACE: { |;| (:pid_82 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_1003 }) (:pid_86 , ${ output inst::Trickle.Node.ControlMsg 
	[ 0 , 0 ] ${ + param::Trickle.Node.z_1003 param::Trickle.Node.z_3 
	param::Trickle.Node.z_53 param::Trickle.Node.z_903 } } @ (z_1003 + z_53 + z_903))
	 }
																										PC: (((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && 
	(z_1003 == t_241) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && 
	(t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) 
	&& (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && 
	(t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_96 < 4) && (z_116 < t_10) && 
	(z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && 
	(z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && 
	(0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + 
	-2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= 
	(t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)
	) && (0 <= (t_568 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + 
	z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 
	+ z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 
	+ z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + 
	z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) 
	&& ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 
	+ z_903)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) && 
	(z_116 > 0) && (z_132 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 
	> 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && 
	(z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_651 > 
	0) && (z_762 > 0) && (z_792 > 0) && (z_90 > 0) && (z_903 > 0))
																										DATA{
																											:pid_2:uncoveredExit = 3;
																											:pid_82:node_time = (z_1003 + z_53 + z_903);
																											:pid_82:z = z_1003;
																											:pid_82:localTime = (z_1003 + z_3 + z_53 + z_903);
																											:pid_82:localPC = ((z_1003 == t_241) && (t_241 < 4) && (t_39 < 4) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																											:pid_83:cl = z_1003;
																											:pid_89:cl = (z_1003 + z_53 + z_903);
																											:pid_94:cl = (z_1003 + z_53 + z_903);
																										}
																										BUFFER{
																											:pid_48:bufferNode:<FIFO>#0{
																												:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																												:pid_82:ControlMsg([ 0 , 0 ] , (z_1003 + z_3 + z_53 + z_903));
																											}
																										}
																										EC:<Id:2199;Ev:0;H:26;W:1995>{ SC: ( pid_19:o#15 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_80:dp2 ) , ( pid_87:cp2 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
							EXE: { |;| (:pid_65 , run) (:pid_77 , run) (:pid_79 , 
	run) (:pid_79 , dp_sendDM) (:pid_2 , run) (:pid_18 , run) (:pid_18 , n3_out_DM2) 
	}
																					
							TRACE: { |;| (:pid_65 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_1017 }) (:pid_79 , ${ output inst::Trickle.Node.DataMsg2 [ 
	2 , 2 , 1 ] ${ + param::Trickle.Node.z_1017 param::Trickle.Node.z_132 
	param::Trickle.Node.z_2 param::Trickle.Node.z_32 param::Trickle.Node.z_422 
	param::Trickle.Node.z_447 param::Trickle.Node.z_762 param::Trickle.Node.z_792 
	param::Trickle.Node.z_882 } } @ (z_1017 + z_132 + z_32 + z_422 + z_447 + z_762 + 
	z_792 + z_882)) }
																											/*FLAGS{ COVERAGE-ELEMENT }*/
																											INFO{
																												<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#17->run::pid_19:Trickle.Observer.o#15->prot::Trickle.Observer.o#15" as trace="tpid#17->run::pid_19:Trickle.Observer.o#15->prot::Trickle.Observer.o#15">
																											}
																											PC: (((z_1017 + z_792 + z_882) == t_568) && ((z_150 + z_90) == 4) && ((z_422 + z_447 
	+ z_762 + z_792 + z_882) == t_68) && (z_1003 == t_241) && (z_240 == t_96) && 
	(z_595 == t_434) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && 
	(t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) 
	&& (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && 
	(t_96 < 4) && (z_116 < t_10) && (z_132 < t_23) && (z_346 < t_220) && (z_447 < 
	t_338) && (z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + 
	-2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= 
	(t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && 
	(0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 
	+ -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_96 + -2)) && 
	((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + 
	z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + 
	z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + 
	z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + 
	z_90) <= (z_132 + z_2 + z_32)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + 
	z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_150 + z_90) > t_5) && (z_0 > 0) 
	&& (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_132 > 0) && (z_150 > 0) && 
	(z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0)
	 && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 
	> 0) && (z_535 > 0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) 
	&& (z_90 > 0) && (z_903 > 0))
																											DATA{
																												:pid_2:uncoveredExit = 0;
																												:pid_65:node_time = (z_1017 + z_132 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																												:pid_65:z = z_1017;
																												:pid_65:localTime = (z_1017 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																												:pid_65:localPC = (((z_1017 + z_792 + z_882) == t_568) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (t_23 < 4) && (t_68 < 4) && (t_338 < 4) && (t_568 < 4) && (z_132 < t_23) && (z_447 < t_338) && (z_792 < t_568) && (0 <= (t_23 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_568 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && (z_132 > 0) && (z_2 > 0) && (z_32 > 0) && (z_422 > 0) && (z_447 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0));
																												:pid_66:cl = (z_1017 + z_422 + z_447 + z_762 + z_792 + z_882);
																												:pid_72:cl = (z_1017 + z_447 + z_762 + z_792 + z_882);
																												:pid_77:cl = (z_1017 + z_792 + z_882);
																											}
																											BUFFER{
																												:pid_31:bufferNode:<FIFO>#0{
																													:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																													:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1017 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																												}
																												:pid_48:bufferNode:<FIFO>#0{
																													:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																													:pid_82:ControlMsg([ 0 , 0 ] , (z_1003 + z_3 + z_53 + z_903));
																													:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1017 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																												}
																												:pid_82:bufferNode:<FIFO>#0{
																													:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1017 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																												}
																												:pid_99:bufferNode:<FIFO>#0{
																													:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																													:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1017 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																												}
																											}
																										}
																									}
																									EC:<Id:2148;Ev:205;H:25;W:1947>{ SC: ( pid_18:o#14 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_79:dp1 ) , ( pid_86:cp1 , pid_91:dp1 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
						EXE: { |;| (:pid_82 , run) (:pid_89 , run) (:pid_90 , run) 
	(:pid_90 , dp_init) (:pid_2 , run) }
																					
						TRACE: { |;| (:pid_82 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_1003 }) (:pid_90 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_652 }) }
																										PC: (((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && 
	(z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) 
	&& (t_241 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 
	4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && 
	(t_568 < 4) && (t_652 < 4) && (t_96 < 4) && (z_116 < t_10) && (z_132 < t_23) && 
	(z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && 
	(z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2))
	 && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 
	+ -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 
	<= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + 
	-2)) && (0 <= (t_652 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + 
	z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + 
	z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) 
	<= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + 
	z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + 
	z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && 
	((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + 
	z_2 + z_32)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= 
	(z_3 + z_53 + z_903)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && 
	(z_11 > 0) && (z_116 > 0) && (z_132 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 
	0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && 
	(z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0)
	 && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) && (z_90 > 0) && (z_903 > 0))
																										DATA{
																											:pid_2:uncoveredExit = 3;
																											:pid_82:node_time = (z_1003 + z_53 + z_903);
																											:pid_82:z = z_1003;
																											:pid_82:localTime = (z_1003 + z_3 + z_53 + z_903);
																											:pid_82:localPC = ((t_241 < 4) && (t_39 < 4) && (t_652 < 4) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_652 + -2)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																											:pid_83:cl = z_1003;
																											:pid_89:e = 0;
																											:pid_89:tau = 4;
																											:pid_89:tau_l = 4;
																											:pid_89:tau_h = 8;
																											:pid_89:k = 2;
																											:pid_89:c = 0;
																											:pid_89:t = t_652;
																											:pid_89:cl = 0;
																											:pid_94:cl = (z_1003 + z_53 + z_903);
																										}
																										EC:<Id:2214;Ev:0;H:26;W:2009>{ SC: ( pid_19:o#15 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
							EXE: { |;| (:pid_65 , run) (:pid_77 , run) (:pid_79 , 
	run) (:pid_79 , dp_sendDM) (:pid_2 , run) (:pid_18 , run) (:pid_18 , n3_out_DM2) 
	}
																					
							TRACE: { |;| (:pid_65 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_1022 }) (:pid_79 , ${ output inst::Trickle.Node.DataMsg2 [ 
	2 , 2 , 1 ] ${ + param::Trickle.Node.z_1022 param::Trickle.Node.z_132 
	param::Trickle.Node.z_2 param::Trickle.Node.z_32 param::Trickle.Node.z_422 
	param::Trickle.Node.z_447 param::Trickle.Node.z_762 param::Trickle.Node.z_792 
	param::Trickle.Node.z_882 } } @ (z_1022 + z_132 + z_32 + z_422 + z_447 + z_762 + 
	z_792 + z_882)) }
																											/*FLAGS{ COVERAGE-ELEMENT }*/
																											INFO{
																												<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#17->run::pid_19:Trickle.Observer.o#15->prot::Trickle.Observer.o#15" as trace="tpid#17->run::pid_19:Trickle.Observer.o#15->prot::Trickle.Observer.o#15">
																											}
																											PC: (((z_1022 + z_792 + z_882) == t_568) && ((z_150 + z_90) == 4) && ((z_422 + z_447 
	+ z_762 + z_792 + z_882) == t_68) && (z_240 == t_96) && (z_595 == t_434) && 
	(z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_42 
	< 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && 
	(t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_652 < 4) && (t_96 
	< 4) && (z_116 < t_10) && (z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) 
	&& (z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && 
	(0 <= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + 
	-2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= 
	(t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2))
	 && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_652 + -2)) && (0 <= 
	(t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= 
	(z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + 
	z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + 
	z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + 
	z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 
	+ z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) 
	&& ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_132 + z_2 + z_32 + z_422 
	+ z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_150 + z_90) > 
	t_5) && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_132 > 0) && 
	(z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 
	0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && 
	(z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 
	0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																											DATA{
																												:pid_2:uncoveredExit = 0;
																												:pid_65:node_time = (z_1022 + z_132 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																												:pid_65:z = z_1022;
																												:pid_65:localTime = (z_1022 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																												:pid_65:localPC = (((z_1022 + z_792 + z_882) == t_568) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (t_23 < 4) && (t_68 < 4) && (t_338 < 4) && (t_568 < 4) && (z_132 < t_23) && (z_447 < t_338) && (z_792 < t_568) && (0 <= (t_23 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_568 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && (z_132 > 0) && (z_2 > 0) && (z_32 > 0) && (z_422 > 0) && (z_447 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0));
																												:pid_66:cl = (z_1022 + z_422 + z_447 + z_762 + z_792 + z_882);
																												:pid_72:cl = (z_1022 + z_447 + z_762 + z_792 + z_882);
																												:pid_77:cl = (z_1022 + z_792 + z_882);
																											}
																											BUFFER{
																												:pid_31:bufferNode:<FIFO>#0{
																													:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																													:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1022 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																												}
																												:pid_48:bufferNode:<FIFO>#0{
																													:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																													:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1022 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																												}
																												:pid_82:bufferNode:<FIFO>#0{
																													:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1022 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																												}
																												:pid_99:bufferNode:<FIFO>#0{
																													:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																													:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1022 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																												}
																											}
																										}
																									}
																									EC:<Id:2149;Ev:206;H:25;W:1948>{ SC: ( pid_18:o#14 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_79:dp1 ) , ( pid_86:cp1 , pid_90:dp0 , pid_96:dp1 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
						EXE: { |;| (:pid_82 , run) (:pid_94 , run) (:pid_95 , run) 
	(:pid_95 , dp_init) (:pid_2 , run) }
																					
						TRACE: { |;| (:pid_82 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_1003 }) (:pid_95 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_653 }) }
																										PC: (((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && 
	(z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) 
	&& (t_241 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 
	4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && 
	(t_568 < 4) && (t_653 < 4) && (t_96 < 4) && (z_116 < t_10) && (z_132 < t_23) && 
	(z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && 
	(z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2))
	 && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 
	+ -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 
	<= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + 
	-2)) && (0 <= (t_653 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + 
	z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + 
	z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) 
	<= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + 
	z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + 
	z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && 
	((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + 
	z_2 + z_32)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= 
	(z_3 + z_53 + z_903)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && 
	(z_11 > 0) && (z_116 > 0) && (z_132 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 
	0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && 
	(z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0)
	 && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) && (z_90 > 0) && (z_903 > 0))
																										DATA{
																											:pid_2:uncoveredExit = 3;
																											:pid_82:node_time = (z_1003 + z_53 + z_903);
																											:pid_82:z = z_1003;
																											:pid_82:localTime = (z_1003 + z_3 + z_53 + z_903);
																											:pid_82:localPC = ((t_241 < 4) && (t_39 < 4) && (t_653 < 4) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_653 + -2)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																											:pid_83:cl = z_1003;
																											:pid_89:cl = (z_1003 + z_53 + z_903);
																											:pid_94:e = 0;
																											:pid_94:tau = 4;
																											:pid_94:tau_l = 4;
																											:pid_94:tau_h = 8;
																											:pid_94:k = 2;
																											:pid_94:c = 0;
																											:pid_94:t = t_653;
																											:pid_94:cl = 0;
																										}
																										EC:<Id:2229;Ev:217;H:26;W:2023>{ SC: ( pid_19:o#15 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_80:dp2 ) , ( pid_86:cp1 , pid_90:dp0 , pid_96:dp1 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
							EXE: { |;| (:pid_65 , run) (:pid_77 , run) (:pid_79 , 
	run) (:pid_79 , dp_sendDM) (:pid_2 , run) (:pid_18 , run) (:pid_18 , n3_out_DM2) 
	}
																					
							TRACE: { |;| (:pid_65 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_1027 }) (:pid_79 , ${ output inst::Trickle.Node.DataMsg2 [ 
	2 , 2 , 1 ] ${ + param::Trickle.Node.z_1027 param::Trickle.Node.z_132 
	param::Trickle.Node.z_2 param::Trickle.Node.z_32 param::Trickle.Node.z_422 
	param::Trickle.Node.z_447 param::Trickle.Node.z_762 param::Trickle.Node.z_792 
	param::Trickle.Node.z_882 } } @ (z_1027 + z_132 + z_32 + z_422 + z_447 + z_762 + 
	z_792 + z_882)) }
																											/*FLAGS{ COVERAGE-ELEMENT }*/
																											INFO{
																												<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#17->run::pid_19:Trickle.Observer.o#15->prot::Trickle.Observer.o#15" as trace="tpid#17->run::pid_19:Trickle.Observer.o#15->prot::Trickle.Observer.o#15">
																											}
																											PC: (((z_1027 + z_792 + z_882) == t_568) && ((z_150 + z_90) == 4) && ((z_422 + z_447 
	+ z_762 + z_792 + z_882) == t_68) && (z_240 == t_96) && (z_595 == t_434) && 
	(z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_42 
	< 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && 
	(t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_653 < 4) && (t_96 
	< 4) && (z_116 < t_10) && (z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) 
	&& (z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && 
	(0 <= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + 
	-2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= 
	(t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2))
	 && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= 
	(t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= 
	(z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + 
	z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + 
	z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + 
	z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 
	+ z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) 
	&& ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_132 + z_2 + z_32 + z_422 
	+ z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_150 + z_90) > 
	t_5) && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_132 > 0) && 
	(z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 
	0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && 
	(z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 
	0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																											DATA{
																												:pid_2:uncoveredExit = 0;
																												:pid_65:node_time = (z_1027 + z_132 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																												:pid_65:z = z_1027;
																												:pid_65:localTime = (z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																												:pid_65:localPC = (((z_1027 + z_792 + z_882) == t_568) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (t_23 < 4) && (t_68 < 4) && (t_338 < 4) && (t_568 < 4) && (z_132 < t_23) && (z_447 < t_338) && (z_792 < t_568) && (0 <= (t_23 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_568 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && (z_132 > 0) && (z_2 > 0) && (z_32 > 0) && (z_422 > 0) && (z_447 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0));
																												:pid_66:cl = (z_1027 + z_422 + z_447 + z_762 + z_792 + z_882);
																												:pid_72:cl = (z_1027 + z_447 + z_762 + z_792 + z_882);
																												:pid_77:cl = (z_1027 + z_792 + z_882);
																											}
																											BUFFER{
																												:pid_31:bufferNode:<FIFO>#0{
																													:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																													:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																												}
																												:pid_48:bufferNode:<FIFO>#0{
																													:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																													:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																												}
																												:pid_82:bufferNode:<FIFO>#0{
																													:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																												}
																												:pid_99:bufferNode:<FIFO>#0{
																													:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																													:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																												}
																											}
																											EC:<Id:2389;Ev:219;H:27;W:2023>{ SC: ( pid_19:o#15 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_80:dp2 ) , ( pid_86:cp1 , pid_90:dp0 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
								EXE: { |;| (:pid_99 , run) (:pid_100 , run) 
	(:pid_103 , run) (:pid_103 , cp_sendCM) (:pid_2 , run) }
																					
								TRACE: { |;| (:pid_99 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1084 }) (:pid_103 , ${ output 
	inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + param::Trickle.Node.z_1084 
	param::Trickle.Node.z_4 param::Trickle.Node.z_64 } } @ (z_1084 + z_64)) }
																												PC: (((z_1027 + z_792 + z_882) == t_568) && ((z_150 + z_90) == 4) && ((z_422 + z_447 
	+ z_762 + z_792 + z_882) == t_68) && (z_1084 == t_42) && (z_240 == t_96) && 
	(z_595 == t_434) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && 
	(t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) 
	&& (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && 
	(t_653 < 4) && (t_96 < 4) && (z_116 < t_10) && (z_132 < t_23) && (z_346 < t_220) 
	&& (z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 
	<= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)
	) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= 
	(t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) 
	&& (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= 
	(t_653 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + 
	z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= 
	(z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_132 
	+ z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) 
	&& ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) 
	&& (z_132 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 
	> 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && 
	(z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_64 > 0) && (z_651 > 
	0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																												DATA{
																													:pid_2:uncoveredExit = 1;
																													:pid_99:node_time = (z_1084 + z_64);
																													:pid_99:z = z_1084;
																													:pid_99:localTime = (z_1084 + z_4 + z_64);
																													:pid_99:localPC = ((z_1084 == t_42) && (t_42 < 4) && (0 <= (t_42 + -2)) && (z_4 > 0) && (z_64 > 0));
																													:pid_100:cl = z_1084;
																													:pid_106:cl = (z_1084 + z_64);
																													:pid_111:cl = (z_1084 + z_64);
																												}
																												BUFFER{
																													:pid_82:bufferNode:<FIFO>#0{
																														:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																														:pid_99:ControlMsg([ 0 , 0 ] , (z_1084 + z_4 + z_64));
																													}
																												}
																												EC:<Id:2424;Ev:0;H:28;W:2205>{ SC: ( pid_20:o#16 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_80:dp2 ) , ( pid_86:cp1 , pid_90:dp0 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
									EXE: { |;| (:pid_82 , run) (:pid_94 , run) 
	(:pid_96 , run) (:pid_96 , dp1_receiveDM_consistent) (:pid_2 , run) (:pid_19 , 
	run) (:pid_19 , n4_in_DM2) }
																					
									TRACE: { |;| (:pid_82 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1093 }) (:pid_96 , ${ input 
	inst::Trickle.Node.DataMsg2 [ 2 , 2 , 1 ] ${ + param::Trickle.Node.z_1027 
	param::Trickle.Node.z_132 param::Trickle.Node.z_2 param::Trickle.Node.z_32 
	param::Trickle.Node.z_422 param::Trickle.Node.z_447 param::Trickle.Node.z_762 
	param::Trickle.Node.z_792 param::Trickle.Node.z_882 } } @ (z_1003 + z_1093 + 
	z_53 + z_903)) }
																													/*FLAGS{ COVERAGE-ELEMENT }*/
																													INFO{
																														<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#18->run::pid_20:Trickle.Observer.o#16->prot::Trickle.Observer.o#16" as trace="tpid#18->run::pid_20:Trickle.Observer.o#16->prot::Trickle.Observer.o#16">
																													}
																													PC: (((z_1027 + z_792 + z_882) == t_568) && ((z_150 + z_90) == 4) && ((z_422 + z_447 
	+ z_762 + z_792 + z_882) == t_68) && (z_1084 == t_42) && (z_240 == t_96) && 
	(z_595 == t_434) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && 
	(t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) 
	&& (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && 
	(t_653 < 4) && (t_96 < 4) && (z_1093 < t_653) && (z_116 < t_10) && (z_132 < t_23)
	 && (z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && 
	(z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2))
	 && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 
	+ -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 
	<= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + 
	-2)) && (0 <= (t_653 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + 
	z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + 
	z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) 
	<= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + 
	z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + 
	z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && 
	((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + 
	z_2 + z_32)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + 
	z_882) <= (z_1003 + z_1093 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_150 + 
	z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && (z_11 > 0) && (z_116 > 
	0) && (z_132 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && 
	(z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0)
	 && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_64 > 0) && 
	(z_651 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && (z_903 
	> 0))
																													DATA{
																														:pid_2:uncoveredExit = 0;
																														:pid_82:my_buff[1].seq = 2;
																														:pid_82:my_buff[1].fragment = FRAGMENT_1;
																														:pid_82:my_buff[1].offset = 1;
																														:pid_82:firmware[1] = FRAGMENT_1;
																														:pid_82:myseq_buff[1] = 1;
																														:pid_82:node_time = (z_1003 + z_1093 + z_53 + z_903);
																														:pid_82:z = z_1093;
																														:pid_82:localTime = (z_1003 + z_1093 + z_3 + z_53 + z_903);
																														:pid_82:undef_DM2 = false;
																														:pid_82:localPC = ((t_241 < 4) && (t_39 < 4) && (t_653 < 4) && (z_1093 < t_653) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_653 + -2)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1093 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																														:pid_82:timeEmit = (z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																														:pid_83:cl = (z_1003 + z_1093);
																														:pid_89:cl = (z_1003 + z_1093 + z_53 + z_903);
																														:pid_94:c = 1;
																														:pid_94:consistent = true;
																														:pid_94:cl = z_1093;
																														:pid_94:d.seq = 2;
																														:pid_94:d.fragment = FRAGMENT_1;
																														:pid_94:d.offset = 1;
																													}
																													BUFFER{
																														:pid_82:bufferNode:<FIFO>#0{
																															:pid_99:ControlMsg([ 0 , 0 ] , (z_1084 + z_4 + z_64));
																														}
																													}
																												}
																											}
																											EC:<Id:2390;Ev:220;H:27;W:2173>{ SC: ( pid_19:o#15 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_80:dp2 ) , ( pid_86:cp1 , pid_90:dp0 , pid_96:dp1 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
								EXE: { |;| (:pid_99 , run) (:pid_100 , run) 
	(:pid_103 , run) (:pid_103 , cp1_receiveCM_inconsistent) (:pid_2 , run) }
																					
								TRACE: { |;| (:pid_99 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1084 }) (:pid_103 , ${ input 
	inst::Trickle.Node.ControlMsg [ 1 , 1 ] ${ + param::Trickle.Node.z_132 
	param::Trickle.Node.z_2 param::Trickle.Node.z_32 param::Trickle.Node.z_422 
	param::Trickle.Node.z_447 param::Trickle.Node.z_762 param::Trickle.Node.z_792 
	param::Trickle.Node.z_882 } } @ (z_1084 + z_64)) (:pid_103 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_326 }) }
																												PC: (((z_1027 + z_792 + z_882) == t_568) && ((z_150 + z_90) == 4) && ((z_422 + z_447 
	+ z_762 + z_792 + z_882) == t_68) && (z_240 == t_96) && (z_595 == t_434) && 
	(z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_326 < 4) && (t_39 
	< 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && 
	(t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && 
	(t_653 < 4) && (t_96 < 4) && (z_1084 < t_42) && (z_116 < t_10) && (z_132 < t_23) 
	&& (z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && 
	(z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2))
	 && (0 <= (t_326 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= 
	(t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && 
	(0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= 
	(t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_96 + -2))
	 && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + 
	z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + 
	z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + 
	z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + 
	z_90) <= (z_132 + z_2 + z_32)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + 
	z_792 + z_882) <= (z_1084 + z_4 + z_64)) && ((z_132 + z_2 + z_32 + z_422 + z_447 
	+ z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_150 + z_90) > t_5) && 
	(z_0 > 0) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_132 > 0) && (z_150 > 0)
	 && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 
	> 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && 
	(z_53 > 0) && (z_535 > 0) && (z_64 > 0) && (z_651 > 0) && (z_762 > 0) && (z_792 
	> 0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																												DATA{
																													:pid_2:uncoveredExit = 1;
																													:pid_99:mydp_run[0] = true;
																													:pid_99:mydp_run[1] = true;
																													:pid_99:node_time = (z_1084 + z_64);
																													:pid_99:z = z_1084;
																													:pid_99:localTime = (z_1084 + z_4 + z_64);
																													:pid_99:seq_buff[0] = 1;
																													:pid_99:seq_buff[1] = 1;
																													:pid_99:localPC = ((t_326 < 4) && (t_42 < 4) && (z_1084 < t_42) && (0 <= (t_326 + -2)) && (0 <= (t_42 + -2)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1084 + z_4 + z_64)) && (z_4 > 0) && (z_64 > 0));
																													:pid_99:timeEmit = (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																													:pid_100:e = 0;
																													:pid_100:c = 0;
																													:pid_100:i = 2;
																													:pid_100:t = t_326;
																													:pid_100:consistent = false;
																													:pid_100:cl = 0;
																													:pid_106:cl = (z_1084 + z_64);
																													:pid_111:cl = (z_1084 + z_64);
																												}
																												BUFFER{
																													:pid_99:bufferNode:<FIFO>#0{
																														:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																													}
																												}
																												EC:<Id:2441;Ev:0;H:28;W:2221>{ SC: ( pid_20:o#16 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_80:dp2 ) , ( pid_86:cp1 , pid_90:dp0 , pid_96:dp1 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
									EXE: { |;| (:pid_82 , run) (:pid_94 , run) 
	(:pid_96 , run) (:pid_96 , dp1_receiveDM_consistent) (:pid_2 , run) (:pid_19 , 
	run) (:pid_19 , n4_in_DM2) }
																					
									TRACE: { |;| (:pid_82 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1098 }) (:pid_96 , ${ input 
	inst::Trickle.Node.DataMsg2 [ 2 , 2 , 1 ] ${ + param::Trickle.Node.z_1027 
	param::Trickle.Node.z_132 param::Trickle.Node.z_2 param::Trickle.Node.z_32 
	param::Trickle.Node.z_422 param::Trickle.Node.z_447 param::Trickle.Node.z_762 
	param::Trickle.Node.z_792 param::Trickle.Node.z_882 } } @ (z_1003 + z_1098 + 
	z_53 + z_903)) }
																													/*FLAGS{ COVERAGE-ELEMENT }*/
																													INFO{
																														<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#18->run::pid_20:Trickle.Observer.o#16->prot::Trickle.Observer.o#16" as trace="tpid#18->run::pid_20:Trickle.Observer.o#16->prot::Trickle.Observer.o#16">
																													}
																													PC: (((z_1027 + z_792 + z_882) == t_568) && ((z_150 + z_90) == 4) && ((z_422 + z_447 
	+ z_762 + z_792 + z_882) == t_68) && (z_240 == t_96) && (z_595 == t_434) && 
	(z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_326 < 4) && (t_39 
	< 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && 
	(t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && 
	(t_653 < 4) && (t_96 < 4) && (z_1084 < t_42) && (z_1098 < t_653) && (z_116 < 
	t_10) && (z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) 
	&& (z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) 
	&& (0 <= (t_241 + -2)) && (0 <= (t_326 + -2)) && (0 <= (t_39 + -2)) && (0 <= 
	(t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && 
	(0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 
	+ -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)) && 
	(0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90)
	 <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + 
	z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + 
	z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= 
	(z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + 
	z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_132 + 
	z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1098 + z_3 + 
	z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) 
	<= (z_1084 + z_4 + z_64)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + 
	z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_150 + z_90) > t_5) && (z_0 > 0) 
	&& (z_1 > 0) && (z_1003 > 0) && (z_11 > 0) && (z_116 > 0) && (z_132 > 0) && 
	(z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 
	0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && 
	(z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_64 > 0) && (z_651 > 0) && (z_762 > 
	0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																													DATA{
																														:pid_2:uncoveredExit = 0;
																														:pid_82:my_buff[1].seq = 2;
																														:pid_82:my_buff[1].fragment = FRAGMENT_1;
																														:pid_82:my_buff[1].offset = 1;
																														:pid_82:firmware[1] = FRAGMENT_1;
																														:pid_82:myseq_buff[1] = 1;
																														:pid_82:node_time = (z_1003 + z_1098 + z_53 + z_903);
																														:pid_82:z = z_1098;
																														:pid_82:localTime = (z_1003 + z_1098 + z_3 + z_53 + z_903);
																														:pid_82:undef_DM2 = false;
																														:pid_82:localPC = ((t_241 < 4) && (t_39 < 4) && (t_653 < 4) && (z_1098 < t_653) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_653 + -2)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1098 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																														:pid_82:timeEmit = (z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																														:pid_83:cl = (z_1003 + z_1098);
																														:pid_89:cl = (z_1003 + z_1098 + z_53 + z_903);
																														:pid_94:c = 1;
																														:pid_94:consistent = true;
																														:pid_94:cl = z_1098;
																														:pid_94:d.seq = 2;
																														:pid_94:d.fragment = FRAGMENT_1;
																														:pid_94:d.offset = 1;
																													}
																													BUFFER{
																														:pid_82:bufferNode:<FIFO>#0{ }
																													}
																												}
																											}
																											EC:<Id:2391;Ev:221;H:27;W:2174>{ SC: ( pid_19:o#15 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_80:dp2 ) , ( pid_87:cp2 , pid_90:dp0 , pid_96:dp1 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
								EXE: { |;| (:pid_82 , run) (:pid_83 , run) (:pid_86 
	, run) (:pid_86 , cp_sendCM) (:pid_2 , run) }
																					
								TRACE: { |;| (:pid_82 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1083 }) (:pid_86 , ${ output 
	inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + param::Trickle.Node.z_1003 
	param::Trickle.Node.z_1083 param::Trickle.Node.z_3 param::Trickle.Node.z_53 
	param::Trickle.Node.z_903 } } @ (z_1003 + z_1083 + z_53 + z_903)) }
																												PC: (((z_1003 + z_1083) == t_241) && ((z_1027 + z_792 + z_882) == t_568) && ((z_150 
	+ z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (z_240 == 
	t_96) && (z_595 == t_434) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_241 
	< 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && 
	(t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 
	< 4) && (t_653 < 4) && (t_96 < 4) && (z_116 < t_10) && (z_132 < t_23) && (z_346 
	< t_220) && (z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && (z_903 < 
	t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 
	<= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) 
	&& (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= 
	(t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)
	) && (0 <= (t_653 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + 
	z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 
	+ z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 
	+ z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + 
	z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) 
	&& ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 
	+ z_903)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && 
	(z_11 > 0) && (z_116 > 0) && (z_132 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 
	0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && 
	(z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0)
	 && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && 
	(z_903 > 0))
																												DATA{
																													:pid_2:uncoveredExit = 1;
																													:pid_82:node_time = (z_1003 + z_1083 + z_53 + z_903);
																													:pid_82:z = z_1083;
																													:pid_82:localTime = (z_1003 + z_1083 + z_3 + z_53 + z_903);
																													:pid_82:localPC = (((z_1003 + z_1083) == t_241) && (t_241 < 4) && (t_39 < 4) && (t_653 < 4) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_653 + -2)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																													:pid_83:cl = (z_1003 + z_1083);
																													:pid_89:cl = (z_1003 + z_1083 + z_53 + z_903);
																													:pid_94:cl = z_1083;
																												}
																												BUFFER{
																													:pid_48:bufferNode:<FIFO>#0{
																														:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																														:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																														:pid_82:ControlMsg([ 0 , 0 ] , (z_1003 + z_1083 + z_3 + z_53 + z_903));
																													}
																												}
																												EC:<Id:2457;Ev:0;H:28;W:2236>{ SC: ( pid_20:o#16 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_80:dp2 ) , ( pid_87:cp2 , pid_90:dp0 , pid_96:dp1 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
									EXE: { |;| (:pid_82 , run) (:pid_94 , run) 
	(:pid_96 , run) (:pid_96 , dp1_receiveDM_consistent) (:pid_2 , run) (:pid_19 , 
	run) (:pid_19 , n4_in_DM2) }
																					
									TRACE: { |;| (:pid_82 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1103 }) (:pid_96 , ${ input 
	inst::Trickle.Node.DataMsg2 [ 2 , 2 , 1 ] ${ + param::Trickle.Node.z_1027 
	param::Trickle.Node.z_132 param::Trickle.Node.z_2 param::Trickle.Node.z_32 
	param::Trickle.Node.z_422 param::Trickle.Node.z_447 param::Trickle.Node.z_762 
	param::Trickle.Node.z_792 param::Trickle.Node.z_882 } } @ (z_1003 + z_1083 + 
	z_1103 + z_53 + z_903)) }
																													/*FLAGS{ COVERAGE-ELEMENT }*/
																													INFO{
																														<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#18->run::pid_20:Trickle.Observer.o#16->prot::Trickle.Observer.o#16" as trace="tpid#18->run::pid_20:Trickle.Observer.o#16->prot::Trickle.Observer.o#16">
																													}
																													PC: (((z_1003 + z_1083) == t_241) && ((z_1027 + z_792 + z_882) == t_568) && ((z_150 
	+ z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (z_240 == 
	t_96) && (z_595 == t_434) && (z_90 == t_5) && ((z_1083 + z_1103) < t_653) && 
	(t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) 
	&& (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && 
	(t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_653 < 4) && (t_96 < 4) && (z_116 
	< t_10) && (z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && (z_696 < 
	t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 
	+ -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 
	<= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) 
	&& (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= 
	(t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_96 + -2))
	 && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + 
	z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + 
	z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + 
	z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + 
	z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 
	+ z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1103 + z_3 + z_53 + z_903)) && 
	((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + 
	z_903)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && 
	(z_1083 > 0) && (z_11 > 0) && (z_116 > 0) && (z_132 > 0) && (z_150 > 0) && 
	(z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0)
	 && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 
	> 0) && (z_535 > 0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) 
	&& (z_90 > 0) && (z_903 > 0))
																													DATA{
																														:pid_2:uncoveredExit = 0;
																														:pid_82:my_buff[1].seq = 2;
																														:pid_82:my_buff[1].fragment = FRAGMENT_1;
																														:pid_82:my_buff[1].offset = 1;
																														:pid_82:firmware[1] = FRAGMENT_1;
																														:pid_82:myseq_buff[1] = 1;
																														:pid_82:node_time = (z_1003 + z_1083 + z_1103 + z_53 + z_903);
																														:pid_82:z = z_1103;
																														:pid_82:localTime = (z_1003 + z_1083 + z_1103 + z_3 + z_53 + z_903);
																														:pid_82:undef_DM2 = false;
																														:pid_82:localPC = (((z_1003 + z_1083) == t_241) && ((z_1083 + z_1103) < t_653) && (t_241 < 4) && (t_39 < 4) && (t_653 < 4) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_653 + -2)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1103 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_1083 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																														:pid_82:timeEmit = (z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																														:pid_83:cl = (z_1003 + z_1083 + z_1103);
																														:pid_89:cl = (z_1003 + z_1083 + z_1103 + z_53 + z_903);
																														:pid_94:c = 1;
																														:pid_94:consistent = true;
																														:pid_94:cl = (z_1083 + z_1103);
																														:pid_94:d.seq = 2;
																														:pid_94:d.fragment = FRAGMENT_1;
																														:pid_94:d.offset = 1;
																													}
																													BUFFER{
																														:pid_82:bufferNode:<FIFO>#0{ }
																													}
																												}
																											}
																											EC:<Id:2392;Ev:222;H:27;W:2175>{ SC: ( pid_19:o#15 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
								EXE: { |;| (:pid_82 , run) (:pid_89 , run) (:pid_90 
	, run) (:pid_90 , dp_init) (:pid_2 , run) }
																					
								TRACE: { |;| (:pid_82 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1083 }) (:pid_90 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_704 }) }
																												PC: (((z_1027 + z_792 + z_882) == t_568) && ((z_150 + z_90) == 4) && ((z_422 + z_447 
	+ z_762 + z_792 + z_882) == t_68) && (z_240 == t_96) && (z_595 == t_434) && 
	(z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_42 
	< 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && 
	(t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_653 < 4) && 
	(t_704 < 4) && (t_96 < 4) && (z_116 < t_10) && (z_132 < t_23) && (z_346 < t_220) 
	&& (z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 
	<= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)
	) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= 
	(t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) 
	&& (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= 
	(t_653 + -2)) && (0 <= (t_704 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + 
	z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + 
	z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + 
	z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 
	+ z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 
	+ z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) 
	&& ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 
	+ z_2 + z_32)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) 
	<= (z_3 + z_53 + z_903)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && 
	(z_1003 > 0) && (z_11 > 0) && (z_116 > 0) && (z_132 > 0) && (z_150 > 0) && 
	(z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0)
	 && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 
	> 0) && (z_535 > 0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) 
	&& (z_90 > 0) && (z_903 > 0))
																												DATA{
																													:pid_2:uncoveredExit = 1;
																													:pid_82:node_time = (z_1003 + z_1083 + z_53 + z_903);
																													:pid_82:z = z_1083;
																													:pid_82:localTime = (z_1003 + z_1083 + z_3 + z_53 + z_903);
																													:pid_82:localPC = ((t_241 < 4) && (t_39 < 4) && (t_653 < 4) && (t_704 < 4) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_704 + -2)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																													:pid_83:cl = (z_1003 + z_1083);
																													:pid_89:e = 0;
																													:pid_89:tau = 4;
																													:pid_89:tau_l = 4;
																													:pid_89:tau_h = 8;
																													:pid_89:k = 2;
																													:pid_89:c = 0;
																													:pid_89:t = t_704;
																													:pid_89:cl = 0;
																													:pid_94:cl = z_1083;
																												}
																												EC:<Id:2473;Ev:0;H:28;W:2251>{ SC: ( pid_20:o#16 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
									EXE: { |;| (:pid_82 , run) (:pid_94 , run) 
	(:pid_96 , run) (:pid_96 , dp1_receiveDM_consistent) (:pid_2 , run) (:pid_19 , 
	run) (:pid_19 , n4_in_DM2) }
																					
									TRACE: { |;| (:pid_82 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1108 }) (:pid_96 , ${ input 
	inst::Trickle.Node.DataMsg2 [ 2 , 2 , 1 ] ${ + param::Trickle.Node.z_1027 
	param::Trickle.Node.z_132 param::Trickle.Node.z_2 param::Trickle.Node.z_32 
	param::Trickle.Node.z_422 param::Trickle.Node.z_447 param::Trickle.Node.z_762 
	param::Trickle.Node.z_792 param::Trickle.Node.z_882 } } @ (z_1003 + z_1083 + 
	z_1108 + z_53 + z_903)) }
																													/*FLAGS{ COVERAGE-ELEMENT }*/
																													INFO{
																														<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#18->run::pid_20:Trickle.Observer.o#16->prot::Trickle.Observer.o#16" as trace="tpid#18->run::pid_20:Trickle.Observer.o#16->prot::Trickle.Observer.o#16">
																													}
																													PC: (((z_1027 + z_792 + z_882) == t_568) && ((z_150 + z_90) == 4) && ((z_422 + z_447 
	+ z_762 + z_792 + z_882) == t_68) && (z_240 == t_96) && (z_595 == t_434) && 
	(z_90 == t_5) && ((z_1083 + z_1108) < t_653) && (t_10 < 4) && (t_23 < 4) && 
	(t_241 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) 
	&& (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && 
	(t_568 < 4) && (t_653 < 4) && (t_704 < 4) && (t_96 < 4) && (z_116 < t_10) && 
	(z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && 
	(z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && 
	(0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + 
	-2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= 
	(t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)
	) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_704 + -2)) && (0 <= 
	(t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= 
	(z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + 
	z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + 
	z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + 
	z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 
	+ z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) 
	&& ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_132 + z_2 + z_32 
	+ z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1108 + z_3 + 
	z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) 
	<= (z_3 + z_53 + z_903)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && 
	(z_1003 > 0) && (z_1083 > 0) && (z_11 > 0) && (z_116 > 0) && (z_132 > 0) && 
	(z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 
	0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && 
	(z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 
	0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																													DATA{
																														:pid_2:uncoveredExit = 0;
																														:pid_82:my_buff[1].seq = 2;
																														:pid_82:my_buff[1].fragment = FRAGMENT_1;
																														:pid_82:my_buff[1].offset = 1;
																														:pid_82:firmware[1] = FRAGMENT_1;
																														:pid_82:myseq_buff[1] = 1;
																														:pid_82:node_time = (z_1003 + z_1083 + z_1108 + z_53 + z_903);
																														:pid_82:z = z_1108;
																														:pid_82:localTime = (z_1003 + z_1083 + z_1108 + z_3 + z_53 + z_903);
																														:pid_82:undef_DM2 = false;
																														:pid_82:localPC = (((z_1083 + z_1108) < t_653) && (t_241 < 4) && (t_39 < 4) && (t_653 < 4) && (t_704 < 4) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_704 + -2)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1108 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_1083 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																														:pid_82:timeEmit = (z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																														:pid_83:cl = (z_1003 + z_1083 + z_1108);
																														:pid_89:cl = z_1108;
																														:pid_94:c = 1;
																														:pid_94:consistent = true;
																														:pid_94:cl = (z_1083 + z_1108);
																														:pid_94:d.seq = 2;
																														:pid_94:d.fragment = FRAGMENT_1;
																														:pid_94:d.offset = 1;
																													}
																													BUFFER{
																														:pid_82:bufferNode:<FIFO>#0{ }
																													}
																												}
																											}
																											EC:<Id:2393;Ev:223;H:27;W:2176>{ SC: ( pid_20:o#16 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_80:dp2 ) , ( pid_86:cp1 , pid_90:dp0 , pid_96:dp1 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
								EXE: { |;| (:pid_82 , run) (:pid_94 , run) (:pid_96 
	, run) (:pid_96 , dp1_receiveDM_consistent) (:pid_2 , run) (:pid_19 , run) 
	(:pid_19 , n4_in_DM2) }
																					
								TRACE: { |;| (:pid_82 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1083 }) (:pid_96 , ${ input 
	inst::Trickle.Node.DataMsg2 [ 2 , 2 , 1 ] ${ + param::Trickle.Node.z_1027 
	param::Trickle.Node.z_132 param::Trickle.Node.z_2 param::Trickle.Node.z_32 
	param::Trickle.Node.z_422 param::Trickle.Node.z_447 param::Trickle.Node.z_762 
	param::Trickle.Node.z_792 param::Trickle.Node.z_882 } } @ (z_1003 + z_1083 + 
	z_53 + z_903)) }
																												/*FLAGS{ COVERAGE-ELEMENT }*/
																												INFO{
																													<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#18->run::pid_20:Trickle.Observer.o#16->prot::Trickle.Observer.o#16" as trace="tpid#18->run::pid_20:Trickle.Observer.o#16->prot::Trickle.Observer.o#16">
																												}
																												PC: (((z_1027 + z_792 + z_882) == t_568) && ((z_150 + z_90) == 4) && ((z_422 + z_447 
	+ z_762 + z_792 + z_882) == t_68) && (z_240 == t_96) && (z_595 == t_434) && 
	(z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_42 
	< 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && 
	(t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_653 < 4) && (t_96 
	< 4) && (z_1083 < t_653) && (z_116 < t_10) && (z_132 < t_23) && (z_346 < t_220) 
	&& (z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 
	<= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)
	) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= 
	(t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) 
	&& (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= 
	(t_653 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + 
	z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= 
	(z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && 
	((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= 
	(z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 
	+ z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_150 + z_90) > t_5) && 
	(z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && (z_11 > 0) && (z_116 > 0) && (z_132 > 
	0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && 
	(z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 
	0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_651 > 0) && (z_762 > 0) && 
	(z_792 > 0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																												DATA{
																													:pid_2:uncoveredExit = 0;
																													:pid_82:my_buff[1].seq = 2;
																													:pid_82:my_buff[1].fragment = FRAGMENT_1;
																													:pid_82:my_buff[1].offset = 1;
																													:pid_82:firmware[1] = FRAGMENT_1;
																													:pid_82:myseq_buff[1] = 1;
																													:pid_82:node_time = (z_1003 + z_1083 + z_53 + z_903);
																													:pid_82:z = z_1083;
																													:pid_82:localTime = (z_1003 + z_1083 + z_3 + z_53 + z_903);
																													:pid_82:undef_DM2 = false;
																													:pid_82:localPC = ((t_241 < 4) && (t_39 < 4) && (t_653 < 4) && (z_1083 < t_653) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_653 + -2)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																													:pid_82:timeEmit = (z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																													:pid_83:cl = (z_1003 + z_1083);
																													:pid_89:cl = (z_1003 + z_1083 + z_53 + z_903);
																													:pid_94:c = 1;
																													:pid_94:consistent = true;
																													:pid_94:cl = z_1083;
																													:pid_94:d.seq = 2;
																													:pid_94:d.fragment = FRAGMENT_1;
																													:pid_94:d.offset = 1;
																												}
																												BUFFER{
																													:pid_82:bufferNode:<FIFO>#0{ }
																												}
																												EC:<Id:2491;Ev:250;H:28;W:2268>{ SC: ( pid_21:o#17 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_90:dp0 , pid_96:dp1 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
									EXE: { |;| (:pid_65 , run) (:pid_72 , run) 
	(:pid_74 , run) (:pid_74 , dp_sendDM) (:pid_2 , run) (:pid_20 , run) (:pid_20 , 
	n3_out_DM1) }
																					
									TRACE: { |;| (:pid_65 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1112 }) (:pid_74 , ${ output 
	inst::Trickle.Node.DataMsg1 [ 1 , 1 , 0 ] ${ + param::Trickle.Node.z_1027 
	param::Trickle.Node.z_1112 param::Trickle.Node.z_132 param::Trickle.Node.z_2 
	param::Trickle.Node.z_32 param::Trickle.Node.z_422 param::Trickle.Node.z_447 
	param::Trickle.Node.z_762 param::Trickle.Node.z_792 param::Trickle.Node.z_882 } }
	 @ (z_1027 + z_1112 + z_132 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882)) }
																													/*FLAGS{ COVERAGE-ELEMENT }*/
																													INFO{
																														<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#19->run::pid_21:Trickle.Observer.o#17->prot::Trickle.Observer.o#17" as trace="tpid#19->run::pid_21:Trickle.Observer.o#17->prot::Trickle.Observer.o#17">
																													}
																													PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + 
	z_792 + z_882) == t_68) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) 
	&& (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 
	4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && 
	(t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_653 < 4) && (t_96 < 4) && 
	(z_1083 < t_653) && (z_116 < t_10) && (z_132 < t_23) && (z_346 < t_220) && 
	(z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= 
	(t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) 
	&& (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 
	+ -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 
	<= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + 
	-2)) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + 
	z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 
	+ z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) 
	<= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 
	+ z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 
	+ z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + 
	z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 
	+ z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + 
	z_882) <= (z_3 + z_53 + z_903)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 
	0) && (z_1003 > 0) && (z_1027 > 0) && (z_11 > 0) && (z_116 > 0) && (z_132 > 0) 
	&& (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 
	> 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && 
	(z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 
	0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																													DATA{
																														:pid_2:uncoveredExit = 0;
																														:pid_2:dataMessage.seq = 1;
																														:pid_2:dataMessage.fragment = FRAGMENT_0;
																														:pid_2:dataMessage.offset = 0;
																														:pid_65:node_time = (z_1027 + z_1112 + z_132 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																														:pid_65:z = z_1112;
																														:pid_65:localTime = (z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																														:pid_65:localPC = (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + z_792 + z_882) == t_568) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (t_23 < 4) && (t_68 < 4) && (t_338 < 4) && (t_568 < 4) && (z_132 < t_23) && (z_447 < t_338) && (z_792 < t_568) && (0 <= (t_23 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_568 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && (z_1027 > 0) && (z_132 > 0) && (z_2 > 0) && (z_32 > 0) && (z_422 > 0) && (z_447 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0));
																														:pid_66:cl = (z_1027 + z_1112 + z_422 + z_447 + z_762 + z_792 + z_882);
																														:pid_72:cl = (z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882);
																														:pid_77:cl = (z_1027 + z_1112 + z_792 + z_882);
																													}
																													BUFFER{
																														:pid_31:bufferNode:<FIFO>#0{
																															:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																															:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																															:pid_65:DataMsg1([ 1 , 1 , 0 ] , (z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																														}
																														:pid_48:bufferNode:<FIFO>#0{
																															:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																															:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																															:pid_65:DataMsg1([ 1 , 1 , 0 ] , (z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																														}
																														:pid_82:bufferNode:<FIFO>#0{
																															:pid_65:DataMsg1([ 1 , 1 , 0 ] , (z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																														}
																														:pid_99:bufferNode:<FIFO>#0{
																															:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																															:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																															:pid_65:DataMsg1([ 1 , 1 , 0 ] , (z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																														}
																													}
																													EC:<Id:2909;Ev:254;H:29;W:2659>{ SC: ( pid_21:o#17 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
										EXE: { |;| (:pid_82 , run) (:pid_89 , run) 
	(:pid_90 , run) (:pid_90 , dp_init) (:pid_2 , run) }
																					
										TRACE: { |;| (:pid_82 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1248 }) (:pid_90 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_823 }) }
																														PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + 
	z_792 + z_882) == t_68) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) 
	&& (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 
	4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && 
	(t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_96 
	< 4) && (z_1083 < t_653) && (z_116 < t_10) && (z_132 < t_23) && (z_346 < t_220) 
	&& (z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 
	<= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)
	) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= 
	(t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) 
	&& (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= 
	(t_653 + -2)) && (0 <= (t_823 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + 
	z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + 
	z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + 
	z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 
	+ z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 
	+ z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) 
	&& ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 
	+ z_2 + z_32)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 
	+ z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_150 + 
	z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && (z_1027 > 0) && 
	(z_1083 > 0) && (z_11 > 0) && (z_116 > 0) && (z_132 > 0) && (z_150 > 0) && 
	(z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0)
	 && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 
	> 0) && (z_535 > 0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) 
	&& (z_90 > 0) && (z_903 > 0))
																														DATA{
																															:pid_2:uncoveredExit = 1;
																															:pid_82:node_time = (z_1003 + z_1083 + z_1248 + z_53 + z_903);
																															:pid_82:z = z_1248;
																															:pid_82:localTime = (z_1003 + z_1083 + z_1248 + z_3 + z_53 + z_903);
																															:pid_82:localPC = ((t_241 < 4) && (t_39 < 4) && (t_653 < 4) && (t_823 < 4) && (z_1083 < t_653) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_1083 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																															:pid_83:cl = (z_1003 + z_1083 + z_1248);
																															:pid_89:e = 0;
																															:pid_89:tau = 4;
																															:pid_89:tau_l = 4;
																															:pid_89:tau_h = 8;
																															:pid_89:k = 2;
																															:pid_89:c = 0;
																															:pid_89:t = t_823;
																															:pid_89:cl = 0;
																															:pid_94:cl = (z_1083 + z_1248);
																														}
																														EC:<Id:2970;Ev:266;H:30;W:2716>{ SC: ( pid_22:o#18 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
											EXE: { |;| (:pid_82 , run) (:pid_89 , 
	run) (:pid_91 , run) (:pid_91 , dp1_receiveDM_consistent) (:pid_2 , run) 
	(:pid_21 , run) (:pid_21 , n4_in_DM1) }
																					
											TRACE: { |;| (:pid_82 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1268 }) (:pid_91 , ${ input 
	inst::Trickle.Node.DataMsg1 [ 1 , 1 , 0 ] ${ + param::Trickle.Node.z_1027 
	param::Trickle.Node.z_1112 param::Trickle.Node.z_132 param::Trickle.Node.z_2 
	param::Trickle.Node.z_32 param::Trickle.Node.z_422 param::Trickle.Node.z_447 
	param::Trickle.Node.z_762 param::Trickle.Node.z_792 param::Trickle.Node.z_882 } }
	 @ (z_1003 + z_1083 + z_1248 + z_1268 + z_53 + z_903)) }
																															/*FLAGS{ COVERAGE-ELEMENT }*/
																															INFO{
																																<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#20->run::pid_22:Trickle.Observer.o#18->prot::Trickle.Observer.o#18" as trace="tpid#20->run::pid_22:Trickle.Observer.o#18->prot::Trickle.Observer.o#18">
																															}
																															PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + 
	z_792 + z_882) == t_68) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) 
	&& (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 
	4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && 
	(t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_96 
	< 4) && (z_1083 < t_653) && (z_116 < t_10) && (z_1268 < t_823) && (z_132 < t_23) 
	&& (z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && 
	(z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2))
	 && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 
	+ -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 
	<= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + 
	-2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && (0 <= (t_96 + -2)) && 
	((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + 
	z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + 
	z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + 
	z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + 
	z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 
	+ z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + 
	z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 
	+ z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_150 + 
	z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && (z_1027 > 0) && 
	(z_1083 > 0) && (z_11 > 0) && (z_116 > 0) && (z_1248 > 0) && (z_132 > 0) && 
	(z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 
	0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && 
	(z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 
	0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																															DATA{
																																:pid_2:uncoveredExit = 0;
																																:pid_82:my_buff[0].seq = 1;
																																:pid_82:my_buff[0].fragment = FRAGMENT_0;
																																:pid_82:my_buff[0].offset = 0;
																																:pid_82:firmware[0] = FRAGMENT_0;
																																:pid_82:myseq_buff[0] = 1;
																																:pid_82:node_time = (z_1003 + z_1083 + z_1248 + z_1268 + z_53 + z_903);
																																:pid_82:z = z_1268;
																																:pid_82:localTime = (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903);
																																:pid_82:undef_DM1 = false;
																																:pid_82:localPC = ((t_241 < 4) && (t_39 < 4) && (t_653 < 4) && (t_823 < 4) && (z_1083 < t_653) && (z_1268 < t_823) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_1083 > 0) && (z_1248 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																																:pid_82:timeEmit = (z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																																:pid_83:cl = (z_1003 + z_1083 + z_1248 + z_1268);
																																:pid_89:c = 1;
																																:pid_89:consistent = true;
																																:pid_89:cl = z_1268;
																																:pid_89:d.seq = 1;
																																:pid_89:d.fragment = FRAGMENT_0;
																																:pid_89:d.offset = 0;
																																:pid_94:cl = (z_1083 + z_1248 + z_1268);
																															}
																															BUFFER{
																																:pid_82:bufferNode:<FIFO>#0{ }
																															}
																															EC:<Id:3149;Ev:267;H:31;W:2716>{ SC: ( pid_23:o#19 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
												EXE: { |;| (:pid_99 , run) (:pid_100 
	, run) (:pid_103 , run) (:pid_103 , cp_sendCM) (:pid_2 , run) (:pid_22 , run) 
	(:pid_22 , n5_out_CM) }
																					
												TRACE: { |;| (:pid_99 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1329 }) (:pid_103 , ${ output 
	inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + param::Trickle.Node.z_1329 
	param::Trickle.Node.z_4 param::Trickle.Node.z_64 } } @ (z_1329 + z_64)) }
																																/*FLAGS{ COVERAGE-ELEMENT }*/
																																INFO{
																																	<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#21->run::pid_23:Trickle.Observer.o#19->prot::Trickle.Observer.o#19" as trace="tpid#21->run::pid_23:Trickle.Observer.o#19->prot::Trickle.Observer.o#19">
																																}
																																PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + 
	z_792 + z_882) == t_68) && (z_1329 == t_42) && (z_240 == t_96) && (z_595 == 
	t_434) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) 
	&& (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 
	4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_653 < 4) && 
	(t_823 < 4) && (t_96 < 4) && (z_1083 < t_653) && (z_116 < t_10) && (z_1268 < 
	t_823) && (z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513)
	 && (z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2))
	 && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= 
	(t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && 
	(0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= 
	(t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)
	) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + 
	z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 
	+ z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + 
	z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= 
	(z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + 
	z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + 
	z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 
	+ z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903))
	 && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 
	+ z_903)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && 
	(z_1027 > 0) && (z_1083 > 0) && (z_11 > 0) && (z_116 > 0) && (z_1248 > 0) && 
	(z_132 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 
	0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && 
	(z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_64 > 0) && (z_651 > 
	0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																																DATA{
																																	:pid_2:uncoveredExit = 0;
																																	:pid_2:seqBuff[0] = 0;
																																	:pid_2:seqBuff[1] = 0;
																																	:pid_99:node_time = (z_1329 + z_64);
																																	:pid_99:z = z_1329;
																																	:pid_99:localTime = (z_1329 + z_4 + z_64);
																																	:pid_99:localPC = ((z_1329 == t_42) && (t_42 < 4) && (0 <= (t_42 + -2)) && (z_4 > 0) && (z_64 > 0));
																																	:pid_100:cl = z_1329;
																																	:pid_106:cl = (z_1329 + z_64);
																																	:pid_111:cl = (z_1329 + z_64);
																																}
																																BUFFER{
																																	:pid_82:bufferNode:<FIFO>#0{
																																		:pid_99:ControlMsg([ 0 , 0 ] , (z_1329 + z_4 + z_64));
																																	}
																																}
																																EC:<Id:3167;Ev:282;H:32;W:2900>{ SC: ( pid_24:o#20 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
													EXE: { |;| (:pid_82 , run) 
	(:pid_83 , run) (:pid_86 , run) (:pid_86 , cp1_receiveCM_inconsistent) (:pid_2 , 
	run) (:pid_23 , run) (:pid_23 , n4_in_CM) }
																					
													TRACE: { |;| (:pid_82 , ${ 
	newfresh inst::Trickle.Node.z param::Trickle.Node.z_1333 }) (:pid_86 , ${ input 
	inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + param::Trickle.Node.z_1329 
	param::Trickle.Node.z_4 param::Trickle.Node.z_64 } } @ (z_1003 + z_1083 + z_1248 
	+ z_1268 + z_1333 + z_53 + z_903)) (:pid_86 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_415 }) }
																																	/*FLAGS{ COVERAGE-ELEMENT }*/
																																	INFO{
																																		<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#22->run::pid_24:Trickle.Observer.o#20->prot::Trickle.Observer.o#20" as trace="tpid#22->run::pid_24:Trickle.Observer.o#20->prot::Trickle.Observer.o#20">
																																	}
																																	PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + 
	z_792 + z_882) == t_68) && (z_1329 == t_42) && (z_240 == t_96) && (z_595 == 
	t_434) && (z_90 == t_5) && ((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241)
	 && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && 
	(t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) 
	&& (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_653 < 4) && 
	(t_823 < 4) && (t_96 < 4) && (z_1083 < t_653) && (z_116 < t_10) && (z_1268 < 
	t_823) && (z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513)
	 && (z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2))
	 && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= 
	(t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && 
	(0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 
	+ -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)) && 
	(0 <= (t_823 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 
	+ z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + 
	z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= 
	(z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && 
	((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) 
	<= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 
	+ z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 
	+ z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882)
	 <= (z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 
	+ z_1268 + z_1333 + z_3 + z_53 + z_903)) && ((z_150 + z_90) > t_5) && (z_0 > 0) 
	&& (z_1 > 0) && (z_1003 > 0) && (z_1027 > 0) && (z_1083 > 0) && (z_11 > 0) && 
	(z_116 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_132 > 0) && (z_150 > 0) && 
	(z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0)
	 && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 
	> 0) && (z_535 > 0) && (z_64 > 0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) 
	&& (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																																	DATA{
																																		:pid_2:uncoveredExit = 0;
																																		:pid_82:node_time = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_53 + z_903);
																																		:pid_82:z = z_1333;
																																		:pid_82:localTime = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903);
																																		:pid_82:seq_buff[0] = 0;
																																		:pid_82:seq_buff[1] = 0;
																																		:pid_82:localPC = (((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241) && (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_653 < 4) && (t_823 < 4) && (z_1083 < t_653) && (z_1268 < t_823) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_1083 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																																		:pid_82:timeEmit = (z_1329 + z_4 + z_64);
																																		:pid_83:i = 2;
																																		:pid_83:t = t_415;
																																		:pid_83:cl = 0;
																																		:pid_89:cl = (z_1268 + z_1333);
																																		:pid_94:cl = (z_1083 + z_1248 + z_1268 + z_1333);
																																	}
																																	BUFFER{
																																		:pid_82:bufferNode:<FIFO>#0{ }
																																	}
																																	EC:<Id:3392;Ev:283;H:33;W:2900>{ SC: ( pid_24:o#20 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
														EXE: { |;| (:pid_99 , run) 
	(:pid_100 , run) (:pid_104 , run) (:pid_104 , cp_resetTau) (:pid_2 , run) }
																					
														TRACE: { |;| (:pid_99 , ${ 
	newfresh inst::Trickle.Node.z param::Trickle.Node.z_1409 }) (:pid_104 , ${ 
	newfresh inst::Trickle.Node.ControlProcess.t 
	param::Trickle.Node.ControlProcess.t_446 }) }
																																		PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_1329 + z_1409) == 4) && ((z_150 + z_90) == 4) && 
	((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (z_1329 == t_42) && (z_240 
	== t_96) && (z_595 == t_434) && (z_90 == t_5) && ((z_1003 + z_1083 + z_1248 + 
	z_1268 + z_1333) < t_241) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 
	4) && (t_415 < 4) && (t_42 < 4) && (t_446 < 8) && (t_5 < 4) && (t_65 < 4) && 
	(t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 
	< 4) && (t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_96 < 4) && (z_1083 < 
	t_653) && (z_116 < t_10) && (z_1268 < t_823) && (z_132 < t_23) && (z_346 < t_220)
	 && (z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && 
	(0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + 
	-2)) && (0 <= (t_415 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_446 + -4)) && (0 
	<= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) 
	&& (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= 
	(t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)
	) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + 
	z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 
	+ z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + 
	z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= 
	(z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + 
	z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + 
	z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 
	+ z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903))
	 && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 
	+ z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + 
	z_1333 + z_3 + z_53 + z_903)) && ((z_1329 + z_1409) > t_42) && ((z_150 + z_90) > 
	t_5) && (z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && (z_1027 > 0) && (z_1083 > 0) 
	&& (z_11 > 0) && (z_116 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_132 > 0) && 
	(z_1329 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 
	0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && 
	(z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_64 > 0) && (z_651 > 
	0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																																		DATA{
																																			:pid_2:uncoveredExit = 1;
																																			:pid_99:node_time = (z_1329 + z_1409 + z_64);
																																			:pid_99:z = z_1409;
																																			:pid_99:localTime = (z_1329 + z_1409 + z_4 + z_64);
																																			:pid_99:localPC = (((z_1329 + z_1409) == 4) && (z_1329 == t_42) && (t_42 < 4) && (t_446 < 8) && (0 <= (t_42 + -2)) && (0 <= (t_446 + -4)) && ((z_1329 + z_1409) > t_42) && (z_1329 > 0) && (z_4 > 0) && (z_64 > 0));
																																			:pid_100:e = 1;
																																			:pid_100:tau = 8;
																																			:pid_100:c = 0;
																																			:pid_100:t = t_446;
																																			:pid_100:cl = 0;
																																			:pid_106:cl = (z_1329 + z_1409 + z_64);
																																			:pid_111:cl = (z_1329 + z_1409 + z_64);
																																		}
																																		EC:<Id:3407;Ev:298;H:34;W:2900>{ SC: ( pid_25:o#21 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
															EXE: { |;| (:pid_99 , 
	run) (:pid_100 , run) (:pid_103 , run) (:pid_103 , cp_sendCM) (:pid_2 , run) 
	(:pid_24 , run) (:pid_24 , n5_out_CM) }
																					
															TRACE: { |;| (:pid_99 , 
	${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1414 }) (:pid_103 , ${ 
	output inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + param::Trickle.Node.z_1329 
	param::Trickle.Node.z_1409 param::Trickle.Node.z_1414 param::Trickle.Node.z_4 
	param::Trickle.Node.z_64 } } @ (z_1329 + z_1409 + z_1414 + z_64)) }
																																			/*FLAGS{ COVERAGE-ELEMENT }*/
																																			INFO{
																																				<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#23->run::pid_25:Trickle.Observer.o#21->prot::Trickle.Observer.o#21" as trace="tpid#23->run::pid_25:Trickle.Observer.o#21->prot::Trickle.Observer.o#21">
																																			}
																																			PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_1329 + z_1409) == 4) && ((z_150 + z_90) == 4) && 
	((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (z_1329 == t_42) && (z_1414 
	== t_446) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && ((z_1003 + 
	z_1083 + z_1248 + z_1268 + z_1333) < t_241) && (t_10 < 4) && (t_23 < 4) && 
	(t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_42 < 4) && (t_446 < 8) && (t_5 < 
	4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && 
	(t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_96 
	< 4) && (z_1083 < t_653) && (z_116 < t_10) && (z_1268 < t_823) && (z_132 < t_23) 
	&& (z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && 
	(z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2))
	 && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_42 + -2)) && (0 <= 
	(t_446 + -4)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) 
	&& (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= 
	(t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)
	) && (0 <= (t_823 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + 
	z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 
	+ z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 
	+ z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + 
	z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) 
	&& ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + 
	z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 
	+ z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + 
	z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + 
	z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + 
	z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && ((z_1329 + z_1409) > 
	t_42) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && 
	(z_1027 > 0) && (z_1083 > 0) && (z_11 > 0) && (z_116 > 0) && (z_1248 > 0) && 
	(z_1268 > 0) && (z_132 > 0) && (z_1329 > 0) && (z_1409 > 0) && (z_150 > 0) && 
	(z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0)
	 && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 
	> 0) && (z_535 > 0) && (z_64 > 0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) 
	&& (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																																			DATA{
																																				:pid_2:uncoveredExit = 0;
																																				:pid_99:node_time = (z_1329 + z_1409 + z_1414 + z_64);
																																				:pid_99:z = z_1414;
																																				:pid_99:localTime = (z_1329 + z_1409 + z_1414 + z_4 + z_64);
																																				:pid_99:localPC = (((z_1329 + z_1409) == 4) && (z_1329 == t_42) && (z_1414 == t_446) && (t_42 < 4) && (t_446 < 8) && (0 <= (t_42 + -2)) && (0 <= (t_446 + -4)) && ((z_1329 + z_1409) > t_42) && (z_1329 > 0) && (z_1409 > 0) && (z_4 > 0) && (z_64 > 0));
																																				:pid_100:cl = z_1414;
																																				:pid_106:cl = (z_1329 + z_1409 + z_1414 + z_64);
																																				:pid_111:cl = (z_1329 + z_1409 + z_1414 + z_64);
																																			}
																																			BUFFER{
																																				:pid_82:bufferNode:<FIFO>#0{
																																					:pid_99:ControlMsg([ 0 , 0 ] , (z_1329 + z_1409 + z_1414 + z_4 + z_64));
																																				}
																																			}
																																			EC:<Id:3634;Ev:300;H:35;W:2900>{ SC: ( pid_25:o#21 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
																EXE: { |;| (:pid_99 
	, run) (:pid_100 , run) (:pid_104 , run) (:pid_104 , cp_resetTau) (:pid_2 , run) 
	}
																					
																TRACE: { |;| 
	(:pid_99 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1489 }) 
	(:pid_104 , ${ newfresh inst::Trickle.Node.ControlProcess.t 
	param::Trickle.Node.ControlProcess.t_492 }) }
																																				PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_1329 + z_1409) == 4) && ((z_1414 + z_1489) == 8) 
	&& ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && 
	(z_1329 == t_42) && (z_1414 == t_446) && (z_240 == t_96) && (z_595 == t_434) && 
	(z_90 == t_5) && ((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241) && (t_10 
	< 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_42 < 4) && 
	(t_446 < 8) && (t_492 < 8) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8)
	 && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && 
	(t_653 < 4) && (t_823 < 4) && (t_96 < 4) && (z_1083 < t_653) && (z_116 < t_10) 
	&& (z_1268 < t_823) && (z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && 
	(z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 
	<= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + 
	-2)) && (0 <= (t_42 + -2)) && (0 <= (t_446 + -4)) && (0 <= (t_492 + -4)) && (0 
	<= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) 
	&& (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= 
	(t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)
	) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + 
	z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 
	+ z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + 
	z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= 
	(z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + 
	z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + 
	z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 
	+ z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903))
	 && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 
	+ z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + 
	z_1333 + z_3 + z_53 + z_903)) && ((z_1329 + z_1409) > t_42) && ((z_1414 + z_1489)
	 > t_446) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && 
	(z_1027 > 0) && (z_1083 > 0) && (z_11 > 0) && (z_116 > 0) && (z_1248 > 0) && 
	(z_1268 > 0) && (z_132 > 0) && (z_1329 > 0) && (z_1409 > 0) && (z_1414 > 0) && 
	(z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 
	0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && 
	(z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_64 > 0) && (z_651 > 0) && (z_762 > 
	0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																																				DATA{
																																					:pid_2:uncoveredExit = 1;
																																					:pid_99:node_time = (z_1329 + z_1409 + z_1414 + z_1489 + z_64);
																																					:pid_99:z = z_1489;
																																					:pid_99:localTime = (z_1329 + z_1409 + z_1414 + z_1489 + z_4 + z_64);
																																					:pid_99:localPC = (((z_1329 + z_1409) == 4) && ((z_1414 + z_1489) == 8) && (z_1329 == t_42) && (z_1414 == t_446) && (t_42 < 4) && (t_446 < 8) && (t_492 < 8) && (0 <= (t_42 + -2)) && (0 <= (t_446 + -4)) && (0 <= (t_492 + -4)) && ((z_1329 + z_1409) > t_42) && ((z_1414 + z_1489) > t_446) && (z_1329 > 0) && (z_1409 > 0) && (z_1414 > 0) && (z_4 > 0) && (z_64 > 0));
																																					:pid_100:e = 2;
																																					:pid_100:tau = 8;
																																					:pid_100:t = t_492;
																																					:pid_100:cl = 0;
																																					:pid_106:cl = (z_1329 + z_1409 + z_1414 + z_1489 + z_64);
																																					:pid_111:cl = (z_1329 + z_1409 + z_1414 + z_1489 + z_64);
																																				}
																																				EC:<Id:3669;Ev:0;H:36;W:3369>{ SC: ( pid_26:o#22 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
																	EXE: { |;| 
	(:pid_82 , run) (:pid_83 , run) (:pid_86 , run) (:pid_86 , 
	cp1_receiveCM_inconsistent) (:pid_2 , run) (:pid_25 , run) (:pid_25 , n4_in_CM) }
																					
																	TRACE: { |;| 
	(:pid_82 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1498 }) 
	(:pid_86 , ${ input inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + 
	param::Trickle.Node.z_1329 param::Trickle.Node.z_1409 param::Trickle.Node.z_1414 
	param::Trickle.Node.z_4 param::Trickle.Node.z_64 } } @ (z_1003 + z_1083 + z_1248 
	+ z_1268 + z_1333 + z_1498 + z_53 + z_903)) (:pid_86 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_498 }) }
																																					/*FLAGS{ COVERAGE-ELEMENT }*/
																																					INFO{
																																						<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22" as trace="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22">
																																					}
																																					PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_1329 + z_1409) == 4) && ((z_1414 + z_1489) == 8) 
	&& ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && 
	(z_1329 == t_42) && (z_1414 == t_446) && (z_240 == t_96) && (z_595 == t_434) && 
	(z_90 == t_5) && ((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241) && (t_10 
	< 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_42 < 4) && 
	(t_446 < 8) && (t_492 < 8) && (t_498 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 
	4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && 
	(t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_96 < 4) && (z_1083 < t_653) && 
	(z_116 < t_10) && (z_1268 < t_823) && (z_132 < t_23) && (z_1498 < t_415) && 
	(z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && 
	(z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2))
	 && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_42 + -2)) && (0 <= 
	(t_446 + -4)) && (0 <= (t_492 + -4)) && (0 <= (t_498 + -2)) && (0 <= (t_5 + -2)) 
	&& (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= 
	(t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)
	) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && (0 <= 
	(t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= 
	(z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + 
	z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + 
	z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + 
	z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 
	+ z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) 
	&& ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + z_132 + 
	z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 
	+ z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 
	+ z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + 
	z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && 
	((z_1329 + z_1409 + z_1414 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + 
	z_1333 + z_1498 + z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + 
	z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && ((z_1329 + z_1409) > 
	t_42) && ((z_1414 + z_1489) > t_446) && ((z_150 + z_90) > t_5) && (z_0 > 0) && 
	(z_1 > 0) && (z_1003 > 0) && (z_1027 > 0) && (z_1083 > 0) && (z_11 > 0) && 
	(z_116 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_132 > 0) && (z_1329 > 0) && 
	(z_1333 > 0) && (z_1409 > 0) && (z_1414 > 0) && (z_150 > 0) && (z_185 > 0) && 
	(z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0)
	 && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 
	> 0) && (z_64 > 0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) 
	&& (z_90 > 0) && (z_903 > 0))
																																					DATA{
																																						:pid_2:uncoveredExit = 0;
																																						:pid_82:node_time = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1498 + z_53 + z_903);
																																						:pid_82:z = z_1498;
																																						:pid_82:localTime = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1498 + z_3 + z_53 + z_903);
																																						:pid_82:localPC = (((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241) && (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_498 < 4) && (t_653 < 4) && (t_823 < 4) && (z_1083 < t_653) && (z_1268 < t_823) && (z_1498 < t_415) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_498 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + z_1409 + z_1414 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1498 + z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_1083 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_1333 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																																						:pid_82:timeEmit = (z_1329 + z_1409 + z_1414 + z_4 + z_64);
																																						:pid_83:i = 2;
																																						:pid_83:t = t_498;
																																						:pid_89:cl = (z_1268 + z_1333 + z_1498);
																																						:pid_94:cl = (z_1083 + z_1248 + z_1268 + z_1333 + z_1498);
																																					}
																																					BUFFER{
																																						:pid_82:bufferNode:<FIFO>#0{ }
																																					}
																																				}
																																			}
																																			EC:<Id:3635;Ev:301;H:35;W:3337>{ SC: ( pid_25:o#21 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
																EXE: { |;| (:pid_99 
	, run) (:pid_100 , run) (:pid_104 , run) (:pid_104 , cp2_receiveCM_inconsistent) 
	(:pid_2 , run) }
																					
																TRACE: { |;| 
	(:pid_99 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1489 }) 
	(:pid_104 , ${ input inst::Trickle.Node.ControlMsg [ 1 , 1 ] ${ + 
	param::Trickle.Node.z_132 param::Trickle.Node.z_2 param::Trickle.Node.z_32 
	param::Trickle.Node.z_422 param::Trickle.Node.z_447 param::Trickle.Node.z_762 
	param::Trickle.Node.z_792 param::Trickle.Node.z_882 } } @ (z_1329 + z_1409 + 
	z_1414 + z_1489 + z_64)) (:pid_104 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_493 }) }
																																				PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_1329 + z_1409) == 4) && ((z_150 + z_90) == 4) && 
	((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (z_1329 == t_42) && (z_1414 
	== t_446) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && ((z_1003 + 
	z_1083 + z_1248 + z_1268 + z_1333) < t_241) && ((z_1414 + z_1489) < 8) && (t_10 
	< 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_42 < 4) && 
	(t_446 < 8) && (t_493 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8)
	 && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && 
	(t_653 < 4) && (t_823 < 4) && (t_96 < 4) && (z_1083 < t_653) && (z_116 < t_10) 
	&& (z_1268 < t_823) && (z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && 
	(z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 
	<= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + 
	-2)) && (0 <= (t_42 + -2)) && (0 <= (t_446 + -4)) && (0 <= (t_493 + -2)) && (0 
	<= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) 
	&& (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= 
	(t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)
	) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + 
	z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 
	+ z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + 
	z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= 
	(z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + 
	z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + 
	z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 
	+ z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903))
	 && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1329 + 
	z_1409 + z_1414 + z_1489 + z_4 + z_64)) && ((z_132 + z_2 + z_32 + z_422 + z_447 
	+ z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= 
	(z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && ((z_1329 + 
	z_1409) > t_42) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_1003 > 
	0) && (z_1027 > 0) && (z_1083 > 0) && (z_11 > 0) && (z_116 > 0) && (z_1248 > 0) 
	&& (z_1268 > 0) && (z_132 > 0) && (z_1329 > 0) && (z_1409 > 0) && (z_1414 > 0) 
	&& (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 
	> 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && 
	(z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_64 > 0) && (z_651 > 0) && (z_762 > 
	0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																																				DATA{
																																					:pid_2:uncoveredExit = 1;
																																					:pid_99:mydp_run[0] = true;
																																					:pid_99:mydp_run[1] = true;
																																					:pid_99:node_time = (z_1329 + z_1409 + z_1414 + z_1489 + z_64);
																																					:pid_99:z = z_1489;
																																					:pid_99:localTime = (z_1329 + z_1409 + z_1414 + z_1489 + z_4 + z_64);
																																					:pid_99:seq_buff[0] = 1;
																																					:pid_99:seq_buff[1] = 1;
																																					:pid_99:localPC = (((z_1329 + z_1409) == 4) && (z_1329 == t_42) && (z_1414 == t_446) && ((z_1414 + z_1489) < 8) && (t_42 < 4) && (t_446 < 8) && (t_493 < 4) && (0 <= (t_42 + -2)) && (0 <= (t_446 + -4)) && (0 <= (t_493 + -2)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1329 + z_1409 + z_1414 + z_1489 + z_4 + z_64)) && ((z_1329 + z_1409) > t_42) && (z_1329 > 0) && (z_1409 > 0) && (z_1414 > 0) && (z_4 > 0) && (z_64 > 0));
																																					:pid_99:timeEmit = (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																																					:pid_100:e = 0;
																																					:pid_100:tau = 4;
																																					:pid_100:c = 0;
																																					:pid_100:i = 2;
																																					:pid_100:t = t_493;
																																					:pid_100:consistent = false;
																																					:pid_100:cl = 0;
																																					:pid_106:cl = (z_1329 + z_1409 + z_1414 + z_1489 + z_64);
																																					:pid_111:cl = (z_1329 + z_1409 + z_1414 + z_1489 + z_64);
																																				}
																																				BUFFER{
																																					:pid_99:bufferNode:<FIFO>#0{
																																						:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																																						:pid_65:DataMsg1([ 1 , 1 , 0 ] , (z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																																					}
																																				}
																																				EC:<Id:3686;Ev:0;H:36;W:3385>{ SC: ( pid_26:o#22 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
																	EXE: { |;| 
	(:pid_82 , run) (:pid_83 , run) (:pid_86 , run) (:pid_86 , 
	cp1_receiveCM_inconsistent) (:pid_2 , run) (:pid_25 , run) (:pid_25 , n4_in_CM) }
																					
																	TRACE: { |;| 
	(:pid_82 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1503 }) 
	(:pid_86 , ${ input inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + 
	param::Trickle.Node.z_1329 param::Trickle.Node.z_1409 param::Trickle.Node.z_1414 
	param::Trickle.Node.z_4 param::Trickle.Node.z_64 } } @ (z_1003 + z_1083 + z_1248 
	+ z_1268 + z_1333 + z_1503 + z_53 + z_903)) (:pid_86 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_500 }) }
																																					/*FLAGS{ COVERAGE-ELEMENT }*/
																																					INFO{
																																						<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22" as trace="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22">
																																					}
																																					PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_1329 + z_1409) == 4) && ((z_150 + z_90) == 4) && 
	((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (z_1329 == t_42) && (z_1414 
	== t_446) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && ((z_1003 + 
	z_1083 + z_1248 + z_1268 + z_1333) < t_241) && ((z_1414 + z_1489) < 8) && (t_10 
	< 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_42 < 4) && 
	(t_446 < 8) && (t_493 < 4) && (t_5 < 4) && (t_500 < 4) && (t_65 < 4) && (t_68 < 
	4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && 
	(t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_96 < 4) && (z_1083 < t_653) && 
	(z_116 < t_10) && (z_1268 < t_823) && (z_132 < t_23) && (z_1503 < t_415) && 
	(z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && 
	(z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2))
	 && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_42 + -2)) && (0 <= 
	(t_446 + -4)) && (0 <= (t_493 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_500 + -2)) 
	&& (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= 
	(t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)
	) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && (0 <= 
	(t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= 
	(z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + 
	z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + 
	z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + 
	z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 
	+ z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) 
	&& ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + z_132 + 
	z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 
	+ z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 
	+ z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + 
	z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1329 + z_1409 + z_1414 
	+ z_1489 + z_4 + z_64)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 
	+ z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + z_1409 + z_1414 + z_4 + z_64) <= 
	(z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1503 + z_3 + z_53 + z_903)) && 
	((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + 
	z_53 + z_903)) && ((z_1329 + z_1409) > t_42) && ((z_150 + z_90) > t_5) && (z_0 > 
	0) && (z_1 > 0) && (z_1003 > 0) && (z_1027 > 0) && (z_1083 > 0) && (z_11 > 0) && 
	(z_116 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_132 > 0) && (z_1329 > 0) && 
	(z_1333 > 0) && (z_1409 > 0) && (z_1414 > 0) && (z_150 > 0) && (z_185 > 0) && 
	(z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0)
	 && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 
	> 0) && (z_64 > 0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) 
	&& (z_90 > 0) && (z_903 > 0))
																																					DATA{
																																						:pid_2:uncoveredExit = 0;
																																						:pid_82:node_time = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1503 + z_53 + z_903);
																																						:pid_82:z = z_1503;
																																						:pid_82:localTime = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1503 + z_3 + z_53 + z_903);
																																						:pid_82:localPC = (((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241) && (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_500 < 4) && (t_653 < 4) && (t_823 < 4) && (z_1083 < t_653) && (z_1268 < t_823) && (z_1503 < t_415) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_500 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + z_1409 + z_1414 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1503 + z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_1083 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_1333 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																																						:pid_82:timeEmit = (z_1329 + z_1409 + z_1414 + z_4 + z_64);
																																						:pid_83:i = 2;
																																						:pid_83:t = t_500;
																																						:pid_89:cl = (z_1268 + z_1333 + z_1503);
																																						:pid_94:cl = (z_1083 + z_1248 + z_1268 + z_1333 + z_1503);
																																					}
																																					BUFFER{
																																						:pid_82:bufferNode:<FIFO>#0{ }
																																					}
																																				}
																																			}
																																			EC:<Id:3636;Ev:302;H:35;W:3338>{ SC: ( pid_25:o#21 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_87:cp2 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
																EXE: { |;| (:pid_82 
	, run) (:pid_83 , run) (:pid_86 , run) (:pid_86 , cp_sendCM) (:pid_2 , run) }
																					
																TRACE: { |;| 
	(:pid_82 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1488 }) 
	(:pid_86 , ${ output inst::Trickle.Node.ControlMsg [ 1 , 1 ] ${ + 
	param::Trickle.Node.z_1003 param::Trickle.Node.z_1083 param::Trickle.Node.z_1248 
	param::Trickle.Node.z_1268 param::Trickle.Node.z_1333 param::Trickle.Node.z_1488 
	param::Trickle.Node.z_3 param::Trickle.Node.z_53 param::Trickle.Node.z_903 } } @ 
	(z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1488 + z_53 + z_903)) }
																																				PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_1329 + z_1409) == 4) && ((z_150 + z_90) == 4) && 
	((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (z_1329 == t_42) && (z_1414 
	== t_446) && (z_1488 == t_415) && (z_240 == t_96) && (z_595 == t_434) && (z_90 
	== t_5) && ((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241) && (t_10 < 4) 
	&& (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_42 < 4) && 
	(t_446 < 8) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4)
	 && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_653 < 4) && 
	(t_823 < 4) && (t_96 < 4) && (z_1083 < t_653) && (z_116 < t_10) && (z_1268 < 
	t_823) && (z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513)
	 && (z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2))
	 && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= 
	(t_42 + -2)) && (0 <= (t_446 + -4)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) 
	&& (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= 
	(t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)
	) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + 
	z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + 
	z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + 
	z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 
	+ z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) 
	<= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + 
	z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + 
	z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 
	+ z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + 
	z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903))
	 && ((z_1329 + z_1409) > t_42) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 
	0) && (z_1003 > 0) && (z_1027 > 0) && (z_1083 > 0) && (z_11 > 0) && (z_116 > 0) 
	&& (z_1248 > 0) && (z_1268 > 0) && (z_132 > 0) && (z_1329 > 0) && (z_1333 > 0) 
	&& (z_1409 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && 
	(z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0)
	 && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_64 > 0) && 
	(z_651 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && (z_903 
	> 0))
																																				DATA{
																																					:pid_2:uncoveredExit = 1;
																																					:pid_82:node_time = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1488 + z_53 + z_903);
																																					:pid_82:z = z_1488;
																																					:pid_82:localTime = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1488 + z_3 + z_53 + z_903);
																																					:pid_82:localPC = ((z_1488 == t_415) && ((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241) && (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_653 < 4) && (t_823 < 4) && (z_1083 < t_653) && (z_1268 < t_823) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_1083 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_1333 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																																					:pid_83:cl = z_1488;
																																					:pid_89:cl = (z_1268 + z_1333 + z_1488);
																																					:pid_94:cl = (z_1083 + z_1248 + z_1268 + z_1333 + z_1488);
																																				}
																																				BUFFER{
																																					:pid_48:bufferNode:<FIFO>#0{
																																						:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																																						:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																																						:pid_65:DataMsg1([ 1 , 1 , 0 ] , (z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																																						:pid_82:ControlMsg([ 1 , 1 ] , (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1488 + z_3 + z_53 + z_903));
																																					}
																																				}
																																				EC:<Id:3702;Ev:0;H:36;W:3400>{ SC: ( pid_26:o#22 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
																	EXE: { |;| 
	(:pid_82 , run) (:pid_83 , run) (:pid_87 , run) (:pid_87 , 
	cp2_receiveCM_inconsistent) (:pid_2 , run) (:pid_25 , run) (:pid_25 , n4_in_CM) }
																					
																	TRACE: { |;| 
	(:pid_82 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1508 }) 
	(:pid_87 , ${ input inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + 
	param::Trickle.Node.z_1329 param::Trickle.Node.z_1409 param::Trickle.Node.z_1414 
	param::Trickle.Node.z_4 param::Trickle.Node.z_64 } } @ (z_1003 + z_1083 + z_1248 
	+ z_1268 + z_1333 + z_1488 + z_1508 + z_53 + z_903)) (:pid_87 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_503 }) }
																																					/*FLAGS{ COVERAGE-ELEMENT }*/
																																					INFO{
																																						<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22" as trace="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22">
																																					}
																																					PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_1329 + z_1409) == 4) && ((z_150 + z_90) == 4) && 
	((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (z_1329 == t_42) && (z_1414 
	== t_446) && (z_1488 == t_415) && (z_240 == t_96) && (z_595 == t_434) && (z_90 
	== t_5) && ((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241) && ((z_1488 + 
	z_1508) < 4) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_415 
	< 4) && (t_42 < 4) && (t_446 < 8) && (t_5 < 4) && (t_503 < 4) && (t_65 < 4) && 
	(t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 
	< 4) && (t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_96 < 4) && (z_1083 < 
	t_653) && (z_116 < t_10) && (z_1268 < t_823) && (z_132 < t_23) && (z_346 < t_220)
	 && (z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && 
	(0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + 
	-2)) && (0 <= (t_415 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_446 + -4)) && (0 
	<= (t_5 + -2)) && (0 <= (t_503 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2))
	 && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= 
	(t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)
	) && (0 <= (t_823 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + 
	z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 
	+ z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 
	+ z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + 
	z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) 
	&& ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + 
	z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 
	+ z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + 
	z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + 
	z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + z_1409 + z_1414 + z_4 + 
	z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1488 + z_1508 + z_3 + 
	z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + 
	z_1333 + z_3 + z_53 + z_903)) && ((z_1329 + z_1409) > t_42) && ((z_150 + z_90) > 
	t_5) && (z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && (z_1027 > 0) && (z_1083 > 0) 
	&& (z_11 > 0) && (z_116 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_132 > 0) && 
	(z_1329 > 0) && (z_1333 > 0) && (z_1409 > 0) && (z_1488 > 0) && (z_150 > 0) && 
	(z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0)
	 && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 
	> 0) && (z_535 > 0) && (z_64 > 0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) 
	&& (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																																					DATA{
																																						:pid_2:uncoveredExit = 0;
																																						:pid_82:node_time = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1488 + z_1508 + z_53 + z_903);
																																						:pid_82:z = z_1508;
																																						:pid_82:localTime = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1488 + z_1508 + z_3 + z_53 + z_903);
																																						:pid_82:localPC = ((z_1488 == t_415) && ((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241) && ((z_1488 + z_1508) < 4) && (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_503 < 4) && (t_653 < 4) && (t_823 < 4) && (z_1083 < t_653) && (z_1268 < t_823) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_503 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + z_1409 + z_1414 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1488 + z_1508 + z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_1083 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_1333 > 0) && (z_1488 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																																						:pid_82:timeEmit = (z_1329 + z_1409 + z_1414 + z_4 + z_64);
																																						:pid_83:e = 0;
																																						:pid_83:c = 0;
																																						:pid_83:i = 2;
																																						:pid_83:t = t_503;
																																						:pid_83:cl = 0;
																																						:pid_89:cl = (z_1268 + z_1333 + z_1488 + z_1508);
																																						:pid_94:cl = (z_1083 + z_1248 + z_1268 + z_1333 + z_1488 + z_1508);
																																					}
																																					BUFFER{
																																						:pid_82:bufferNode:<FIFO>#0{ }
																																					}
																																				}
																																			}
																																			EC:<Id:3637;Ev:303;H:35;W:3339>{ SC: ( pid_26:o#22 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
																EXE: { |;| (:pid_82 
	, run) (:pid_83 , run) (:pid_86 , run) (:pid_86 , cp1_receiveCM_inconsistent) 
	(:pid_2 , run) (:pid_25 , run) (:pid_25 , n4_in_CM) }
																					
																TRACE: { |;| 
	(:pid_82 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1488 }) 
	(:pid_86 , ${ input inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + 
	param::Trickle.Node.z_1329 param::Trickle.Node.z_1409 param::Trickle.Node.z_1414 
	param::Trickle.Node.z_4 param::Trickle.Node.z_64 } } @ (z_1003 + z_1083 + z_1248 
	+ z_1268 + z_1333 + z_1488 + z_53 + z_903)) (:pid_86 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_491 }) }
																																				/*FLAGS{ COVERAGE-ELEMENT }*/
																																				INFO{
																																					<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22" as trace="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22">
																																				}
																																				PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_1329 + z_1409) == 4) && ((z_150 + z_90) == 4) && 
	((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (z_1329 == t_42) && (z_1414 
	== t_446) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && ((z_1003 + 
	z_1083 + z_1248 + z_1268 + z_1333) < t_241) && (t_10 < 4) && (t_23 < 4) && 
	(t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_42 < 4) && (t_446 < 8) && (t_491 
	< 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && 
	(t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_653 < 4) && 
	(t_823 < 4) && (t_96 < 4) && (z_1083 < t_653) && (z_116 < t_10) && (z_1268 < 
	t_823) && (z_132 < t_23) && (z_1488 < t_415) && (z_346 < t_220) && (z_447 < 
	t_338) && (z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + 
	-2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= 
	(t_415 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_446 + -4)) && (0 <= (t_491 + -2))
	 && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 
	+ -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && 
	(0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= 
	(t_823 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + 
	z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= 
	(z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && 
	((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) 
	<= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 
	+ z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 
	+ z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882)
	 <= (z_3 + z_53 + z_903)) && ((z_1329 + z_1409 + z_1414 + z_4 + z_64) <= (z_1003 
	+ z_1083 + z_1248 + z_1268 + z_1333 + z_1488 + z_3 + z_53 + z_903)) && ((z_1329 
	+ z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + 
	z_903)) && ((z_1329 + z_1409) > t_42) && ((z_150 + z_90) > t_5) && (z_0 > 0) && 
	(z_1 > 0) && (z_1003 > 0) && (z_1027 > 0) && (z_1083 > 0) && (z_11 > 0) && 
	(z_116 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_132 > 0) && (z_1329 > 0) && 
	(z_1333 > 0) && (z_1409 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && 
	(z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0)
	 && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && 
	(z_64 > 0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 
	> 0) && (z_903 > 0))
																																				DATA{
																																					:pid_2:uncoveredExit = 0;
																																					:pid_82:node_time = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1488 + z_53 + z_903);
																																					:pid_82:z = z_1488;
																																					:pid_82:localTime = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1488 + z_3 + z_53 + z_903);
																																					:pid_82:localPC = (((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241) && (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_491 < 4) && (t_653 < 4) && (t_823 < 4) && (z_1083 < t_653) && (z_1268 < t_823) && (z_1488 < t_415) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_491 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + z_1409 + z_1414 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1488 + z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_1083 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_1333 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																																					:pid_82:timeEmit = (z_1329 + z_1409 + z_1414 + z_4 + z_64);
																																					:pid_83:i = 2;
																																					:pid_83:t = t_491;
																																					:pid_89:cl = (z_1268 + z_1333 + z_1488);
																																					:pid_94:cl = (z_1083 + z_1248 + z_1268 + z_1333 + z_1488);
																																				}
																																				BUFFER{
																																					:pid_82:bufferNode:<FIFO>#0{ }
																																				}
																																				EC:<Id:3717;Ev:333;H:36;W:3414>{ SC: ( pid_26:o#22 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_87:cp2 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
																	EXE: { |;| 
	(:pid_82 , run) (:pid_83 , run) (:pid_86 , run) (:pid_86 , cp_sendCM) (:pid_2 , 
	run) }
																					
																	TRACE: { |;| 
	(:pid_82 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1513 }) 
	(:pid_86 , ${ output inst::Trickle.Node.ControlMsg [ 1 , 1 ] ${ + 
	param::Trickle.Node.z_1003 param::Trickle.Node.z_1083 param::Trickle.Node.z_1248 
	param::Trickle.Node.z_1268 param::Trickle.Node.z_1333 param::Trickle.Node.z_1488 
	param::Trickle.Node.z_1513 param::Trickle.Node.z_3 param::Trickle.Node.z_53 
	param::Trickle.Node.z_903 } } @ (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + 
	z_1488 + z_1513 + z_53 + z_903)) }
																																					PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_1329 + z_1409) == 4) && ((z_150 + z_90) == 4) && 
	((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (z_1329 == t_42) && (z_1414 
	== t_446) && (z_1513 == t_491) && (z_240 == t_96) && (z_595 == t_434) && (z_90 
	== t_5) && ((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241) && (t_10 < 4) 
	&& (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_42 < 4) && 
	(t_446 < 8) && (t_491 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8)
	 && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && 
	(t_653 < 4) && (t_823 < 4) && (t_96 < 4) && (z_1083 < t_653) && (z_116 < t_10) 
	&& (z_1268 < t_823) && (z_132 < t_23) && (z_1488 < t_415) && (z_346 < t_220) && 
	(z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= 
	(t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) 
	&& (0 <= (t_415 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_446 + -4)) && (0 <= 
	(t_491 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) 
	&& (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= 
	(t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)
	) && (0 <= (t_823 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + 
	z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 
	+ z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 
	+ z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + 
	z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) 
	&& ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + 
	z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 
	+ z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + 
	z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + 
	z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + z_1409 + z_1414 + z_4 + 
	z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1488 + z_3 + z_53 + 
	z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 
	+ z_3 + z_53 + z_903)) && ((z_1329 + z_1409) > t_42) && ((z_150 + z_90) > t_5) 
	&& (z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && (z_1027 > 0) && (z_1083 > 0) && 
	(z_11 > 0) && (z_116 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_132 > 0) && 
	(z_1329 > 0) && (z_1333 > 0) && (z_1409 > 0) && (z_1488 > 0) && (z_150 > 0) && 
	(z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0)
	 && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 
	> 0) && (z_535 > 0) && (z_64 > 0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) 
	&& (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																																					DATA{
																																						:pid_2:uncoveredExit = 1;
																																						:pid_82:node_time = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1488 + z_1513 + z_53 + z_903);
																																						:pid_82:z = z_1513;
																																						:pid_82:localTime = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1488 + z_1513 + z_3 + z_53 + z_903);
																																						:pid_82:localPC = ((z_1513 == t_491) && ((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241) && (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_491 < 4) && (t_653 < 4) && (t_823 < 4) && (z_1083 < t_653) && (z_1268 < t_823) && (z_1488 < t_415) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_491 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + z_1409 + z_1414 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1488 + z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_1083 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_1333 > 0) && (z_1488 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																																						:pid_83:cl = z_1513;
																																						:pid_89:cl = (z_1268 + z_1333 + z_1488 + z_1513);
																																						:pid_94:cl = (z_1083 + z_1248 + z_1268 + z_1333 + z_1488 + z_1513);
																																					}
																																					BUFFER{
																																						:pid_48:bufferNode:<FIFO>#0{
																																							:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																																							:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																																							:pid_65:DataMsg1([ 1 , 1 , 0 ] , (z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																																							:pid_82:ControlMsg([ 1 , 1 ] , (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1488 + z_1513 + z_3 + z_53 + z_903));
																																						}
																																					}
																																					EC:<Id:4213;Ev:335;H:37;W:3414>{ SC: ( pid_26:o#22 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_87:cp2 , pid_91:dp1 , pid_96:dp1 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
																		EXE: { |;| 
	(:pid_99 , run) (:pid_100 , run) (:pid_104 , run) (:pid_104 , cp_resetTau) 
	(:pid_2 , run) }
																					
																		TRACE: { |;| 
	(:pid_99 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1664 }) 
	(:pid_104 , ${ newfresh inst::Trickle.Node.ControlProcess.t 
	param::Trickle.Node.ControlProcess.t_607 }) }
																																						PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_1329 + z_1409) == 4) && ((z_1414 + z_1664) == 8) 
	&& ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && 
	(z_1329 == t_42) && (z_1414 == t_446) && (z_1513 == t_491) && (z_240 == t_96) && 
	(z_595 == t_434) && (z_90 == t_5) && ((z_1003 + z_1083 + z_1248 + z_1268 + 
	z_1333) < t_241) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && 
	(t_415 < 4) && (t_42 < 4) && (t_446 < 8) && (t_491 < 4) && (t_5 < 4) && (t_607 < 
	8) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && 
	(t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_96 
	< 4) && (z_1083 < t_653) && (z_116 < t_10) && (z_1268 < t_823) && (z_132 < t_23) 
	&& (z_1488 < t_415) && (z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && 
	(z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && 
	(0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_42 
	+ -2)) && (0 <= (t_446 + -4)) && (0 <= (t_491 + -2)) && (0 <= (t_5 + -2)) && (0 
	<= (t_607 + -4)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)
	) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= 
	(t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)
	) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + 
	z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 
	+ z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + 
	z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= 
	(z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + 
	z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + 
	z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 
	+ z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903))
	 && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 
	+ z_903)) && ((z_1329 + z_1409 + z_1414 + z_4 + z_64) <= (z_1003 + z_1083 + 
	z_1248 + z_1268 + z_1333 + z_1488 + z_3 + z_53 + z_903)) && ((z_1329 + z_4 + 
	z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && 
	((z_1329 + z_1409) > t_42) && ((z_1414 + z_1664) > t_446) && ((z_150 + z_90) > 
	t_5) && (z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && (z_1027 > 0) && (z_1083 > 0) 
	&& (z_11 > 0) && (z_116 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_132 > 0) && 
	(z_1329 > 0) && (z_1333 > 0) && (z_1409 > 0) && (z_1414 > 0) && (z_1488 > 0) && 
	(z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 
	0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && 
	(z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_64 > 0) && (z_651 > 0) && (z_762 > 
	0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																																						DATA{
																																							:pid_2:uncoveredExit = 2;
																																							:pid_99:node_time = (z_1329 + z_1409 + z_1414 + z_1664 + z_64);
																																							:pid_99:z = z_1664;
																																							:pid_99:localTime = (z_1329 + z_1409 + z_1414 + z_1664 + z_4 + z_64);
																																							:pid_99:localPC = (((z_1329 + z_1409) == 4) && ((z_1414 + z_1664) == 8) && (z_1329 == t_42) && (z_1414 == t_446) && (t_42 < 4) && (t_446 < 8) && (t_607 < 8) && (0 <= (t_42 + -2)) && (0 <= (t_446 + -4)) && (0 <= (t_607 + -4)) && ((z_1329 + z_1409) > t_42) && ((z_1414 + z_1664) > t_446) && (z_1329 > 0) && (z_1409 > 0) && (z_1414 > 0) && (z_4 > 0) && (z_64 > 0));
																																							:pid_100:e = 2;
																																							:pid_100:tau = 8;
																																							:pid_100:t = t_607;
																																							:pid_100:cl = 0;
																																							:pid_106:cl = (z_1329 + z_1409 + z_1414 + z_1664 + z_64);
																																							:pid_111:cl = (z_1329 + z_1409 + z_1414 + z_1664 + z_64);
																																						}
																																						EC:<Id:4244;Ev:366;H:38;W:3414>{ SC: ( pid_27:o#23 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_87:cp2 , pid_91:dp1 , pid_96:dp1 ) , ( pid_105:cp3 , pid_107:dp0 , pid_112:dp0 ) )
																					
																			EXE: { 
	|;| (:pid_99 , run) (:pid_100 , run) (:pid_103 , run) (:pid_103 , cp_CTRL_EXPIR) 
	(:pid_2 , run) (:pid_26 , run) (:pid_26 , n5_out_Log) }
																					
																			TRACE: { 
	|;| (:pid_99 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1674 }) 
	(:pid_103 , ${ output#env inst::Trickle.Node.Log 1 ${ + 
	param::Trickle.Node.z_1329 param::Trickle.Node.z_1409 param::Trickle.Node.z_1414 
	param::Trickle.Node.z_1664 param::Trickle.Node.z_1674 param::Trickle.Node.z_4 
	param::Trickle.Node.z_64 } } @ (z_1329 + z_1409 + z_1414 + z_1664 + z_1674 + 
	z_64)) }
																																							/*FLAGS{ COVERAGE-ELEMENT }*/
																																							INFO{
																																								<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#25->run::pid_27:Trickle.Observer.o#23->prot::Trickle.Observer.o#23" as trace="tpid#25->run::pid_27:Trickle.Observer.o#23->prot::Trickle.Observer.o#23">
																																							}
																																							PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_1329 + z_1409) == 4) && ((z_1414 + z_1664) == 8) 
	&& ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && 
	(z_1329 == t_42) && (z_1414 == t_446) && (z_1513 == t_491) && (z_240 == t_96) && 
	(z_595 == t_434) && (z_90 == t_5) && ((z_1003 + z_1083 + z_1248 + z_1268 + 
	z_1333) < t_241) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && 
	(t_415 < 4) && (t_42 < 4) && (t_446 < 8) && (t_491 < 4) && (t_5 < 4) && (t_607 < 
	8) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && 
	(t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_96 
	< 4) && (z_1083 < t_653) && (z_116 < t_10) && (z_1268 < t_823) && (z_132 < t_23) 
	&& (z_1488 < t_415) && (z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && 
	(z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && 
	(0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_42 
	+ -2)) && (0 <= (t_446 + -4)) && (0 <= (t_491 + -2)) && (0 <= (t_5 + -2)) && (0 
	<= (t_607 + -4)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)
	) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= 
	(t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)
	) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + 
	z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 
	+ z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + 
	z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= 
	(z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + 
	z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + 
	z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 
	+ z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903))
	 && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 
	+ z_903)) && ((z_1329 + z_1409 + z_1414 + z_4 + z_64) <= (z_1003 + z_1083 + 
	z_1248 + z_1268 + z_1333 + z_1488 + z_3 + z_53 + z_903)) && ((z_1329 + z_4 + 
	z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && 
	((z_1329 + z_1409) > t_42) && ((z_1414 + z_1664) > t_446) && ((z_150 + z_90) > 
	t_5) && (z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && (z_1027 > 0) && (z_1083 > 0) 
	&& (z_11 > 0) && (z_116 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_132 > 0) && 
	(z_1329 > 0) && (z_1333 > 0) && (z_1409 > 0) && (z_1414 > 0) && (z_1488 > 0) && 
	(z_150 > 0) && (z_1664 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 
	0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && 
	(z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_64 > 0) && (z_651 > 
	0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																																							DATA{
																																								:pid_2:uncoveredExit = 0;
																																								:pid_2:mess = TERMIN_CM;
																																								:pid_99:node_time = (z_1329 + z_1409 + z_1414 + z_1664 + z_1674 + z_64);
																																								:pid_99:z = z_1674;
																																								:pid_99:localTime = (z_1329 + z_1409 + z_1414 + z_1664 + z_1674 + z_4 + z_64);
																																								:pid_99:localPC = (((z_1329 + z_1409) == 4) && ((z_1414 + z_1664) == 8) && (z_1329 == t_42) && (z_1414 == t_446) && (t_42 < 4) && (t_446 < 8) && (t_607 < 8) && (0 <= (t_42 + -2)) && (0 <= (t_446 + -4)) && (0 <= (t_607 + -4)) && ((z_1329 + z_1409) > t_42) && ((z_1414 + z_1664) > t_446) && (z_1329 > 0) && (z_1409 > 0) && (z_1414 > 0) && (z_1664 > 0) && (z_4 > 0) && (z_64 > 0));
																																								:pid_100:e = 2;
																																								:pid_100:cl = z_1674;
																																								:pid_106:cl = (z_1329 + z_1409 + z_1414 + z_1664 + z_1674 + z_64);
																																								:pid_111:cl = (z_1329 + z_1409 + z_1414 + z_1664 + z_1674 + z_64);
																																							}
																																						}
																																					}
																																				}
																																			}
																																			EC:<Id:3638;Ev:304;H:35;W:3340>{ SC: ( pid_25:o#21 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_92:dp2 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
																EXE: { |;| (:pid_82 
	, run) (:pid_89 , run) (:pid_91 , run) (:pid_91 , dp_sendDM) (:pid_2 , run) }
																					
																TRACE: { |;| 
	(:pid_82 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1488 }) 
	(:pid_91 , ${ output inst::Trickle.Node.DataMsg1 [ 1 , 1 , 0 ] ${ + 
	param::Trickle.Node.z_1003 param::Trickle.Node.z_1083 param::Trickle.Node.z_1248 
	param::Trickle.Node.z_1268 param::Trickle.Node.z_1333 param::Trickle.Node.z_1488 
	param::Trickle.Node.z_3 param::Trickle.Node.z_53 param::Trickle.Node.z_903 } } @ 
	(z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1488 + z_53 + z_903)) }
																																				PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_1268 + z_1333 + z_1488) == t_823) && ((z_1329 + 
	z_1409) == 4) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + 
	z_882) == t_68) && (z_1329 == t_42) && (z_1414 == t_446) && (z_240 == t_96) && 
	(z_595 == t_434) && (z_90 == t_5) && ((z_1003 + z_1083 + z_1248 + z_1268 + 
	z_1333) < t_241) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && 
	(t_415 < 4) && (t_42 < 4) && (t_446 < 8) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4)
	 && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && 
	(t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_96 < 4) && (z_1083 < t_653) && 
	(z_116 < t_10) && (z_1268 < t_823) && (z_132 < t_23) && (z_346 < t_220) && 
	(z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= 
	(t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) 
	&& (0 <= (t_415 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_446 + -4)) && (0 <= 
	(t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && 
	(0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= 
	(t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)
	) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + 
	z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 
	+ z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + 
	z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= 
	(z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + 
	z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + 
	z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 
	+ z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903))
	 && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 
	+ z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + 
	z_1333 + z_3 + z_53 + z_903)) && ((z_1329 + z_1409) > t_42) && ((z_150 + z_90) > 
	t_5) && (z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && (z_1027 > 0) && (z_1083 > 0) 
	&& (z_11 > 0) && (z_116 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_132 > 0) && 
	(z_1329 > 0) && (z_1333 > 0) && (z_1409 > 0) && (z_150 > 0) && (z_185 > 0) && 
	(z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0)
	 && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 
	> 0) && (z_64 > 0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) 
	&& (z_90 > 0) && (z_903 > 0))
																																				DATA{
																																					:pid_2:uncoveredExit = 1;
																																					:pid_82:node_time = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1488 + z_53 + z_903);
																																					:pid_82:z = z_1488;
																																					:pid_82:localTime = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1488 + z_3 + z_53 + z_903);
																																					:pid_82:localPC = (((z_1268 + z_1333 + z_1488) == t_823) && ((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241) && (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_653 < 4) && (t_823 < 4) && (z_1083 < t_653) && (z_1268 < t_823) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_1083 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_1333 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																																					:pid_83:cl = z_1488;
																																					:pid_89:cl = (z_1268 + z_1333 + z_1488);
																																					:pid_94:cl = (z_1083 + z_1248 + z_1268 + z_1333 + z_1488);
																																				}
																																				BUFFER{
																																					:pid_48:bufferNode:<FIFO>#0{
																																						:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																																						:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																																						:pid_65:DataMsg1([ 1 , 1 , 0 ] , (z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																																						:pid_82:DataMsg1([ 1 , 1 , 0 ] , (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1488 + z_3 + z_53 + z_903));
																																					}
																																				}
																																				EC:<Id:3733;Ev:0;H:36;W:3429>{ SC: ( pid_26:o#22 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_92:dp2 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
																	EXE: { |;| 
	(:pid_82 , run) (:pid_83 , run) (:pid_86 , run) (:pid_86 , 
	cp1_receiveCM_inconsistent) (:pid_2 , run) (:pid_25 , run) (:pid_25 , n4_in_CM) }
																					
																	TRACE: { |;| 
	(:pid_82 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1518 }) 
	(:pid_86 , ${ input inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + 
	param::Trickle.Node.z_1329 param::Trickle.Node.z_1409 param::Trickle.Node.z_1414 
	param::Trickle.Node.z_4 param::Trickle.Node.z_64 } } @ (z_1003 + z_1083 + z_1248 
	+ z_1268 + z_1333 + z_1488 + z_1518 + z_53 + z_903)) (:pid_86 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_510 }) }
																																					/*FLAGS{ COVERAGE-ELEMENT }*/
																																					INFO{
																																						<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22" as trace="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22">
																																					}
																																					PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_1268 + z_1333 + z_1488) == t_823) && ((z_1329 + 
	z_1409) == 4) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + 
	z_882) == t_68) && (z_1329 == t_42) && (z_1414 == t_446) && (z_240 == t_96) && 
	(z_595 == t_434) && (z_90 == t_5) && ((z_1003 + z_1083 + z_1248 + z_1268 + 
	z_1333) < t_241) && ((z_1488 + z_1518) < t_415) && (t_10 < 4) && (t_23 < 4) && 
	(t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_42 < 4) && (t_446 < 8) && (t_5 < 
	4) && (t_510 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && 
	(t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_653 < 4) && 
	(t_823 < 4) && (t_96 < 4) && (z_1083 < t_653) && (z_116 < t_10) && (z_1268 < 
	t_823) && (z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513)
	 && (z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2))
	 && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= 
	(t_42 + -2)) && (0 <= (t_446 + -4)) && (0 <= (t_5 + -2)) && (0 <= (t_510 + -2)) 
	&& (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= 
	(t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)
	) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && (0 <= 
	(t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= 
	(z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + 
	z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + 
	z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + 
	z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 
	+ z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) 
	&& ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + z_132 + 
	z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 
	+ z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 
	+ z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + 
	z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && 
	((z_1329 + z_1409 + z_1414 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + 
	z_1333 + z_1488 + z_1518 + z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= 
	(z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && ((z_1329 + 
	z_1409) > t_42) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_1003 > 
	0) && (z_1027 > 0) && (z_1083 > 0) && (z_11 > 0) && (z_116 > 0) && (z_1248 > 0) 
	&& (z_1268 > 0) && (z_132 > 0) && (z_1329 > 0) && (z_1333 > 0) && (z_1409 > 0) 
	&& (z_1488 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && 
	(z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0)
	 && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_64 > 0) && 
	(z_651 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && (z_903 
	> 0))
																																					DATA{
																																						:pid_2:uncoveredExit = 0;
																																						:pid_82:node_time = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1488 + z_1518 + z_53 + z_903);
																																						:pid_82:z = z_1518;
																																						:pid_82:localTime = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1488 + z_1518 + z_3 + z_53 + z_903);
																																						:pid_82:localPC = (((z_1268 + z_1333 + z_1488) == t_823) && ((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241) && ((z_1488 + z_1518) < t_415) && (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_510 < 4) && (t_653 < 4) && (t_823 < 4) && (z_1083 < t_653) && (z_1268 < t_823) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_510 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + z_1409 + z_1414 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1488 + z_1518 + z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_1083 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_1333 > 0) && (z_1488 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																																						:pid_82:timeEmit = (z_1329 + z_1409 + z_1414 + z_4 + z_64);
																																						:pid_83:i = 2;
																																						:pid_83:t = t_510;
																																						:pid_83:cl = 0;
																																						:pid_89:cl = (z_1268 + z_1333 + z_1488 + z_1518);
																																						:pid_94:cl = (z_1083 + z_1248 + z_1268 + z_1333 + z_1488 + z_1518);
																																					}
																																					BUFFER{
																																						:pid_82:bufferNode:<FIFO>#0{ }
																																					}
																																				}
																																			}
																																			EC:<Id:3639;Ev:305;H:35;W:3341>{ SC: ( pid_25:o#21 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_97:dp2 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
																EXE: { |;| (:pid_82 
	, run) (:pid_94 , run) (:pid_96 , run) (:pid_96 , dp_sendDM) (:pid_2 , run) }
																					
																TRACE: { |;| 
	(:pid_82 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1488 }) 
	(:pid_96 , ${ output inst::Trickle.Node.DataMsg2 [ 2 , 2 , 1 ] ${ + 
	param::Trickle.Node.z_1003 param::Trickle.Node.z_1083 param::Trickle.Node.z_1248 
	param::Trickle.Node.z_1268 param::Trickle.Node.z_1333 param::Trickle.Node.z_1488 
	param::Trickle.Node.z_3 param::Trickle.Node.z_53 param::Trickle.Node.z_903 } } @ 
	(z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1488 + z_53 + z_903)) }
																																				PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_1083 + z_1248 + z_1268 + z_1333 + z_1488) == 
	t_653) && ((z_1329 + z_1409) == 4) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + 
	z_762 + z_792 + z_882) == t_68) && (z_1329 == t_42) && (z_1414 == t_446) && 
	(z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && ((z_1003 + z_1083 + 
	z_1248 + z_1268 + z_1333) < t_241) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && 
	(t_39 < 4) && (t_415 < 4) && (t_42 < 4) && (t_446 < 8) && (t_5 < 4) && (t_65 < 4)
	 && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && 
	(t_513 < 4) && (t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_96 < 4) && 
	(z_1083 < t_653) && (z_116 < t_10) && (z_1268 < t_823) && (z_132 < t_23) && 
	(z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && 
	(z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2))
	 && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_42 + -2)) && (0 <= 
	(t_446 + -4)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) 
	&& (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= 
	(t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)
	) && (0 <= (t_823 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + 
	z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 
	+ z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 
	+ z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + 
	z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) 
	&& ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + 
	z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 
	+ z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + 
	z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + 
	z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + 
	z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && ((z_1329 + z_1409) > 
	t_42) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && 
	(z_1027 > 0) && (z_1083 > 0) && (z_11 > 0) && (z_116 > 0) && (z_1248 > 0) && 
	(z_1268 > 0) && (z_132 > 0) && (z_1329 > 0) && (z_1333 > 0) && (z_1409 > 0) && 
	(z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 
	0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && 
	(z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_64 > 0) && (z_651 > 0) && (z_762 > 
	0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																																				DATA{
																																					:pid_2:uncoveredExit = 1;
																																					:pid_82:node_time = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1488 + z_53 + z_903);
																																					:pid_82:z = z_1488;
																																					:pid_82:localTime = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1488 + z_3 + z_53 + z_903);
																																					:pid_82:localPC = (((z_1083 + z_1248 + z_1268 + z_1333 + z_1488) == t_653) && ((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241) && (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_653 < 4) && (t_823 < 4) && (z_1083 < t_653) && (z_1268 < t_823) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_1083 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_1333 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																																					:pid_83:cl = z_1488;
																																					:pid_89:cl = (z_1268 + z_1333 + z_1488);
																																					:pid_94:cl = (z_1083 + z_1248 + z_1268 + z_1333 + z_1488);
																																				}
																																				BUFFER{
																																					:pid_48:bufferNode:<FIFO>#0{
																																						:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																																						:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																																						:pid_65:DataMsg1([ 1 , 1 , 0 ] , (z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																																						:pid_82:DataMsg2([ 2 , 2 , 1 ] , (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1488 + z_3 + z_53 + z_903));
																																					}
																																				}
																																				EC:<Id:3749;Ev:0;H:36;W:3444>{ SC: ( pid_26:o#22 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_97:dp2 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
																	EXE: { |;| 
	(:pid_82 , run) (:pid_83 , run) (:pid_86 , run) (:pid_86 , 
	cp1_receiveCM_inconsistent) (:pid_2 , run) (:pid_25 , run) (:pid_25 , n4_in_CM) }
																					
																	TRACE: { |;| 
	(:pid_82 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1523 }) 
	(:pid_86 , ${ input inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + 
	param::Trickle.Node.z_1329 param::Trickle.Node.z_1409 param::Trickle.Node.z_1414 
	param::Trickle.Node.z_4 param::Trickle.Node.z_64 } } @ (z_1003 + z_1083 + z_1248 
	+ z_1268 + z_1333 + z_1488 + z_1523 + z_53 + z_903)) (:pid_86 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_514 }) }
																																					/*FLAGS{ COVERAGE-ELEMENT }*/
																																					INFO{
																																						<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22" as trace="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22">
																																					}
																																					PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_1083 + z_1248 + z_1268 + z_1333 + z_1488) == 
	t_653) && ((z_1329 + z_1409) == 4) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + 
	z_762 + z_792 + z_882) == t_68) && (z_1329 == t_42) && (z_1414 == t_446) && 
	(z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && ((z_1003 + z_1083 + 
	z_1248 + z_1268 + z_1333) < t_241) && ((z_1488 + z_1523) < t_415) && (t_10 < 4) 
	&& (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_42 < 4) && 
	(t_446 < 8) && (t_5 < 4) && (t_514 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8)
	 && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && 
	(t_653 < 4) && (t_823 < 4) && (t_96 < 4) && (z_1083 < t_653) && (z_116 < t_10) 
	&& (z_1268 < t_823) && (z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && 
	(z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 
	<= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + 
	-2)) && (0 <= (t_42 + -2)) && (0 <= (t_446 + -4)) && (0 <= (t_5 + -2)) && (0 <= 
	(t_514 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) 
	&& (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= 
	(t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)
	) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + 
	z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 
	+ z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + 
	z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= 
	(z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + 
	z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + 
	z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 
	+ z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903))
	 && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 
	+ z_903)) && ((z_1329 + z_1409 + z_1414 + z_4 + z_64) <= (z_1003 + z_1083 + 
	z_1248 + z_1268 + z_1333 + z_1488 + z_1523 + z_3 + z_53 + z_903)) && ((z_1329 + 
	z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903))
	 && ((z_1329 + z_1409) > t_42) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 
	0) && (z_1003 > 0) && (z_1027 > 0) && (z_1083 > 0) && (z_11 > 0) && (z_116 > 0) 
	&& (z_1248 > 0) && (z_1268 > 0) && (z_132 > 0) && (z_1329 > 0) && (z_1333 > 0) 
	&& (z_1409 > 0) && (z_1488 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && 
	(z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0)
	 && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && 
	(z_64 > 0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 
	> 0) && (z_903 > 0))
																																					DATA{
																																						:pid_2:uncoveredExit = 0;
																																						:pid_82:node_time = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1488 + z_1523 + z_53 + z_903);
																																						:pid_82:z = z_1523;
																																						:pid_82:localTime = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1488 + z_1523 + z_3 + z_53 + z_903);
																																						:pid_82:localPC = (((z_1083 + z_1248 + z_1268 + z_1333 + z_1488) == t_653) && ((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241) && ((z_1488 + z_1523) < t_415) && (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_514 < 4) && (t_653 < 4) && (t_823 < 4) && (z_1083 < t_653) && (z_1268 < t_823) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_514 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + z_1409 + z_1414 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1488 + z_1523 + z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_1083 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_1333 > 0) && (z_1488 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																																						:pid_82:timeEmit = (z_1329 + z_1409 + z_1414 + z_4 + z_64);
																																						:pid_83:i = 2;
																																						:pid_83:t = t_514;
																																						:pid_83:cl = 0;
																																						:pid_89:cl = (z_1268 + z_1333 + z_1488 + z_1523);
																																						:pid_94:cl = (z_1083 + z_1248 + z_1268 + z_1333 + z_1488 + z_1523);
																																					}
																																					BUFFER{
																																						:pid_82:bufferNode:<FIFO>#0{ }
																																					}
																																				}
																																			}
																																			EC:<Id:3640;Ev:306;H:35;W:3342>{ SC: ( pid_25:o#21 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_69:cp1 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
																EXE: { |;| (:pid_65 
	, run) (:pid_66 , run) (:pid_70 , run) (:pid_70 , cp_resetTau) (:pid_2 , run) }
																					
																TRACE: { |;| 
	(:pid_65 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1487 }) 
	(:pid_70 , ${ newfresh inst::Trickle.Node.ControlProcess.t 
	param::Trickle.Node.ControlProcess.t_490 }) }
																																				PC: (((z_1027 + z_1112 + z_1487 + z_422 + z_447 + z_762 + z_792 + z_882) == 4) && 
	((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + z_792 
	+ z_882) == t_568) && ((z_1329 + z_1409) == 4) && ((z_150 + z_90) == 4) && 
	((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (z_1329 == t_42) && (z_1414 
	== t_446) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && ((z_1003 + 
	z_1083 + z_1248 + z_1268 + z_1333) < t_241) && (t_10 < 4) && (t_23 < 4) && 
	(t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_42 < 4) && (t_446 < 8) && (t_490 
	< 8) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && 
	(t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_653 < 4) && 
	(t_823 < 4) && (t_96 < 4) && (z_1083 < t_653) && (z_116 < t_10) && (z_1268 < 
	t_823) && (z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513)
	 && (z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2))
	 && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= 
	(t_42 + -2)) && (0 <= (t_446 + -4)) && (0 <= (t_490 + -4)) && (0 <= (t_5 + -2)) 
	&& (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= 
	(t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)
	) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && (0 <= 
	(t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= 
	(z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + 
	z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + 
	z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + 
	z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 
	+ z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) 
	&& ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + z_132 + 
	z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 
	+ z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 
	+ z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + 
	z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && 
	((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + 
	z_53 + z_903)) && ((z_1027 + z_1112 + z_1487 + z_422 + z_447 + z_762 + z_792 + 
	z_882) > t_68) && ((z_1329 + z_1409) > t_42) && ((z_150 + z_90) > t_5) && (z_0 > 
	0) && (z_1 > 0) && (z_1003 > 0) && (z_1027 > 0) && (z_1083 > 0) && (z_11 > 0) && 
	(z_1112 > 0) && (z_116 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_132 > 0) && 
	(z_1329 > 0) && (z_1409 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && 
	(z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0)
	 && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && 
	(z_64 > 0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 
	> 0) && (z_903 > 0))
																																				DATA{
																																					:pid_2:uncoveredExit = 1;
																																					:pid_65:node_time = (z_1027 + z_1112 + z_132 + z_1487 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																																					:pid_65:z = z_1487;
																																					:pid_65:localTime = (z_1027 + z_1112 + z_132 + z_1487 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																																					:pid_65:localPC = (((z_1027 + z_1112 + z_1487 + z_422 + z_447 + z_762 + z_792 + z_882) == 4) && ((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + z_792 + z_882) == t_568) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (t_23 < 4) && (t_490 < 8) && (t_68 < 4) && (t_338 < 4) && (t_568 < 4) && (z_132 < t_23) && (z_447 < t_338) && (z_792 < t_568) && (0 <= (t_23 + -2)) && (0 <= (t_490 + -4)) && (0 <= (t_68 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_568 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + z_1487 + z_422 + z_447 + z_762 + z_792 + z_882) > t_68) && (z_1027 > 0) && (z_1112 > 0) && (z_132 > 0) && (z_2 > 0) && (z_32 > 0) && (z_422 > 0) && (z_447 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0));
																																					:pid_66:e = 1;
																																					:pid_66:tau = 8;
																																					:pid_66:c = 0;
																																					:pid_66:t = t_490;
																																					:pid_66:cl = 0;
																																					:pid_72:cl = (z_1027 + z_1112 + z_1487 + z_447 + z_762 + z_792 + z_882);
																																					:pid_77:cl = (z_1027 + z_1112 + z_1487 + z_792 + z_882);
																																				}
																																				EC:<Id:3765;Ev:0;H:36;W:3459>{ SC: ( pid_26:o#22 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_69:cp1 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
																	EXE: { |;| 
	(:pid_82 , run) (:pid_83 , run) (:pid_86 , run) (:pid_86 , 
	cp1_receiveCM_inconsistent) (:pid_2 , run) (:pid_25 , run) (:pid_25 , n4_in_CM) }
																					
																	TRACE: { |;| 
	(:pid_82 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1528 }) 
	(:pid_86 , ${ input inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + 
	param::Trickle.Node.z_1329 param::Trickle.Node.z_1409 param::Trickle.Node.z_1414 
	param::Trickle.Node.z_4 param::Trickle.Node.z_64 } } @ (z_1003 + z_1083 + z_1248 
	+ z_1268 + z_1333 + z_1528 + z_53 + z_903)) (:pid_86 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_517 }) }
																																					/*FLAGS{ COVERAGE-ELEMENT }*/
																																					INFO{
																																						<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22" as trace="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22">
																																					}
																																					PC: (((z_1027 + z_1112 + z_1487 + z_422 + z_447 + z_762 + z_792 + z_882) == 4) && 
	((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + z_792 
	+ z_882) == t_568) && ((z_1329 + z_1409) == 4) && ((z_150 + z_90) == 4) && 
	((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (z_1329 == t_42) && (z_1414 
	== t_446) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && ((z_1003 + 
	z_1083 + z_1248 + z_1268 + z_1333) < t_241) && (t_10 < 4) && (t_23 < 4) && 
	(t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_42 < 4) && (t_446 < 8) && (t_490 
	< 8) && (t_5 < 4) && (t_517 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && 
	(t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && 
	(t_653 < 4) && (t_823 < 4) && (t_96 < 4) && (z_1083 < t_653) && (z_116 < t_10) 
	&& (z_1268 < t_823) && (z_132 < t_23) && (z_1528 < t_415) && (z_346 < t_220) && 
	(z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= 
	(t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) 
	&& (0 <= (t_415 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_446 + -4)) && (0 <= 
	(t_490 + -4)) && (0 <= (t_5 + -2)) && (0 <= (t_517 + -2)) && (0 <= (t_65 + -2)) 
	&& (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= 
	(t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)
	) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + 
	z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + 
	z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + 
	z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 
	+ z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) 
	<= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + 
	z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + 
	z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 
	+ z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + 
	z_1409 + z_1414 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + 
	z_1528 + z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + 
	z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && ((z_1027 + z_1112 + z_1487 + 
	z_422 + z_447 + z_762 + z_792 + z_882) > t_68) && ((z_1329 + z_1409) > t_42) && 
	((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && (z_1027 > 0) 
	&& (z_1083 > 0) && (z_11 > 0) && (z_1112 > 0) && (z_116 > 0) && (z_1248 > 0) && 
	(z_1268 > 0) && (z_132 > 0) && (z_1329 > 0) && (z_1333 > 0) && (z_1409 > 0) && 
	(z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 
	0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && 
	(z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_64 > 0) && (z_651 > 0) && (z_762 > 
	0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																																					DATA{
																																						:pid_2:uncoveredExit = 0;
																																						:pid_82:node_time = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1528 + z_53 + z_903);
																																						:pid_82:z = z_1528;
																																						:pid_82:localTime = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1528 + z_3 + z_53 + z_903);
																																						:pid_82:localPC = (((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241) && (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_517 < 4) && (t_653 < 4) && (t_823 < 4) && (z_1083 < t_653) && (z_1268 < t_823) && (z_1528 < t_415) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_517 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + z_1409 + z_1414 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1528 + z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_1083 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_1333 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																																						:pid_82:timeEmit = (z_1329 + z_1409 + z_1414 + z_4 + z_64);
																																						:pid_83:i = 2;
																																						:pid_83:t = t_517;
																																						:pid_89:cl = (z_1268 + z_1333 + z_1528);
																																						:pid_94:cl = (z_1083 + z_1248 + z_1268 + z_1333 + z_1528);
																																					}
																																					BUFFER{
																																						:pid_82:bufferNode:<FIFO>#0{ }
																																					}
																																				}
																																			}
																																			EC:<Id:3641;Ev:307;H:35;W:3343>{ SC: ( pid_25:o#21 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
																EXE: { |;| (:pid_65 
	, run) (:pid_72 , run) (:pid_75 , run) (:pid_75 , dp_resetTau) (:pid_2 , run) }
																					
																TRACE: { |;| 
	(:pid_65 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1487 }) 
	(:pid_75 , ${ newfresh inst::Trickle.Node.DataProcess.t 
	param::Trickle.Node.DataProcess.t_985 }) }
																																				PC: (((z_1027 + z_1112 + z_1487 + z_447 + z_762 + z_792 + z_882) == 4) && ((z_1027 + 
	z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + z_792 + z_882) 
	== t_568) && ((z_1329 + z_1409) == 4) && ((z_150 + z_90) == 4) && ((z_422 + 
	z_447 + z_762 + z_792 + z_882) == t_68) && (z_1329 == t_42) && (z_1414 == t_446) 
	&& (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && ((z_1003 + z_1083 + 
	z_1248 + z_1268 + z_1333) < t_241) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && 
	(t_39 < 4) && (t_415 < 4) && (t_42 < 4) && (t_446 < 8) && (t_5 < 4) && (t_65 < 4)
	 && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && 
	(t_513 < 4) && (t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_96 < 4) && (t_985 
	< 8) && (z_1083 < t_653) && (z_116 < t_10) && (z_1268 < t_823) && (z_132 < t_23) 
	&& (z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && 
	(z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2))
	 && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_42 + -2)) && (0 <= 
	(t_446 + -4)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) 
	&& (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= 
	(t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)
	) && (0 <= (t_823 + -2)) && (0 <= (t_96 + -2)) && (0 <= (t_985 + -4)) && ((z_0 + 
	z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + 
	z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + 
	z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 
	+ z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) 
	<= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + 
	z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + 
	z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 
	+ z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + 
	z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903))
	 && ((z_1027 + z_1112 + z_1487 + z_447 + z_762 + z_792 + z_882) > t_338) && 
	((z_1329 + z_1409) > t_42) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) 
	&& (z_1003 > 0) && (z_1027 > 0) && (z_1083 > 0) && (z_11 > 0) && (z_1112 > 0) && 
	(z_116 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_132 > 0) && (z_1329 > 0) && 
	(z_1409 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 
	0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && 
	(z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_64 > 0) && (z_651 > 
	0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																																				DATA{
																																					:pid_2:uncoveredExit = 1;
																																					:pid_65:node_time = (z_1027 + z_1112 + z_132 + z_1487 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																																					:pid_65:z = z_1487;
																																					:pid_65:localTime = (z_1027 + z_1112 + z_132 + z_1487 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																																					:pid_65:localPC = (((z_1027 + z_1112 + z_1487 + z_447 + z_762 + z_792 + z_882) == 4) && ((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + z_792 + z_882) == t_568) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (t_23 < 4) && (t_68 < 4) && (t_338 < 4) && (t_568 < 4) && (t_985 < 8) && (z_132 < t_23) && (z_447 < t_338) && (z_792 < t_568) && (0 <= (t_23 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_985 + -4)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + z_1487 + z_447 + z_762 + z_792 + z_882) > t_338) && (z_1027 > 0) && (z_1112 > 0) && (z_132 > 0) && (z_2 > 0) && (z_32 > 0) && (z_422 > 0) && (z_447 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0));
																																					:pid_66:cl = (z_1027 + z_1112 + z_1487 + z_422 + z_447 + z_762 + z_792 + z_882);
																																					:pid_72:e = 1;
																																					:pid_72:tau = 8;
																																					:pid_72:c = 0;
																																					:pid_72:t = t_985;
																																					:pid_72:cl = 0;
																																					:pid_77:cl = (z_1027 + z_1112 + z_1487 + z_792 + z_882);
																																				}
																																				EC:<Id:3781;Ev:0;H:36;W:3474>{ SC: ( pid_26:o#22 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
																	EXE: { |;| 
	(:pid_82 , run) (:pid_83 , run) (:pid_86 , run) (:pid_86 , 
	cp1_receiveCM_inconsistent) (:pid_2 , run) (:pid_25 , run) (:pid_25 , n4_in_CM) }
																					
																	TRACE: { |;| 
	(:pid_82 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1533 }) 
	(:pid_86 , ${ input inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + 
	param::Trickle.Node.z_1329 param::Trickle.Node.z_1409 param::Trickle.Node.z_1414 
	param::Trickle.Node.z_4 param::Trickle.Node.z_64 } } @ (z_1003 + z_1083 + z_1248 
	+ z_1268 + z_1333 + z_1533 + z_53 + z_903)) (:pid_86 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_520 }) }
																																					/*FLAGS{ COVERAGE-ELEMENT }*/
																																					INFO{
																																						<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22" as trace="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22">
																																					}
																																					PC: (((z_1027 + z_1112 + z_1487 + z_447 + z_762 + z_792 + z_882) == 4) && ((z_1027 + 
	z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + z_792 + z_882) 
	== t_568) && ((z_1329 + z_1409) == 4) && ((z_150 + z_90) == 4) && ((z_422 + 
	z_447 + z_762 + z_792 + z_882) == t_68) && (z_1329 == t_42) && (z_1414 == t_446) 
	&& (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && ((z_1003 + z_1083 + 
	z_1248 + z_1268 + z_1333) < t_241) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && 
	(t_39 < 4) && (t_415 < 4) && (t_42 < 4) && (t_446 < 8) && (t_5 < 4) && (t_520 < 
	4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && 
	(t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_96 
	< 4) && (t_985 < 8) && (z_1083 < t_653) && (z_116 < t_10) && (z_1268 < t_823) && 
	(z_132 < t_23) && (z_1533 < t_415) && (z_346 < t_220) && (z_447 < t_338) && 
	(z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 
	<= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + 
	-2)) && (0 <= (t_42 + -2)) && (0 <= (t_446 + -4)) && (0 <= (t_5 + -2)) && (0 <= 
	(t_520 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) 
	&& (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= 
	(t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)
	) && (0 <= (t_96 + -2)) && (0 <= (t_985 + -4)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + 
	z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 
	+ z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 
	+ z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + 
	z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) 
	&& ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + 
	z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 
	+ z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + 
	z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + 
	z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + z_1409 + z_1414 + z_4 + 
	z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1533 + z_3 + z_53 + 
	z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 
	+ z_3 + z_53 + z_903)) && ((z_1027 + z_1112 + z_1487 + z_447 + z_762 + z_792 + 
	z_882) > t_338) && ((z_1329 + z_1409) > t_42) && ((z_150 + z_90) > t_5) && (z_0 
	> 0) && (z_1 > 0) && (z_1003 > 0) && (z_1027 > 0) && (z_1083 > 0) && (z_11 > 0) 
	&& (z_1112 > 0) && (z_116 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_132 > 0) && 
	(z_1329 > 0) && (z_1333 > 0) && (z_1409 > 0) && (z_150 > 0) && (z_185 > 0) && 
	(z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0)
	 && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 
	> 0) && (z_64 > 0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) 
	&& (z_90 > 0) && (z_903 > 0))
																																					DATA{
																																						:pid_2:uncoveredExit = 0;
																																						:pid_82:node_time = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1533 + z_53 + z_903);
																																						:pid_82:z = z_1533;
																																						:pid_82:localTime = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1533 + z_3 + z_53 + z_903);
																																						:pid_82:localPC = (((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241) && (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_520 < 4) && (t_653 < 4) && (t_823 < 4) && (z_1083 < t_653) && (z_1268 < t_823) && (z_1533 < t_415) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_520 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + z_1409 + z_1414 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1533 + z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_1083 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_1333 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																																						:pid_82:timeEmit = (z_1329 + z_1409 + z_1414 + z_4 + z_64);
																																						:pid_83:i = 2;
																																						:pid_83:t = t_520;
																																						:pid_89:cl = (z_1268 + z_1333 + z_1533);
																																						:pid_94:cl = (z_1083 + z_1248 + z_1268 + z_1333 + z_1533);
																																					}
																																					BUFFER{
																																						:pid_82:bufferNode:<FIFO>#0{ }
																																					}
																																				}
																																			}
																																			EC:<Id:3642;Ev:308;H:35;W:3344>{ SC: ( pid_25:o#21 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_79:dp1 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
																EXE: { |;| (:pid_65 
	, run) (:pid_77 , run) (:pid_80 , run) (:pid_80 , dp_resetTau) (:pid_2 , run) }
																					
																TRACE: { |;| 
	(:pid_65 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1487 }) 
	(:pid_80 , ${ newfresh inst::Trickle.Node.DataProcess.t 
	param::Trickle.Node.DataProcess.t_986 }) }
																																				PC: (((z_1027 + z_1112 + z_1487 + z_792 + z_882) == 4) && ((z_1027 + z_1112 + z_447 
	+ z_762 + z_792 + z_882) == t_338) && ((z_1027 + z_792 + z_882) == t_568) && 
	((z_1329 + z_1409) == 4) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + 
	z_792 + z_882) == t_68) && (z_1329 == t_42) && (z_1414 == t_446) && (z_240 == 
	t_96) && (z_595 == t_434) && (z_90 == t_5) && ((z_1003 + z_1083 + z_1248 + 
	z_1268 + z_1333) < t_241) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 
	4) && (t_415 < 4) && (t_42 < 4) && (t_446 < 8) && (t_5 < 4) && (t_65 < 4) && 
	(t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 
	< 4) && (t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_96 < 4) && (t_986 < 8) 
	&& (z_1083 < t_653) && (z_116 < t_10) && (z_1268 < t_823) && (z_132 < t_23) && 
	(z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && 
	(z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2))
	 && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_42 + -2)) && (0 <= 
	(t_446 + -4)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) 
	&& (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= 
	(t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)
	) && (0 <= (t_823 + -2)) && (0 <= (t_96 + -2)) && (0 <= (t_986 + -4)) && ((z_0 + 
	z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + 
	z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + 
	z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 
	+ z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) 
	<= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + 
	z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + 
	z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 
	+ z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + 
	z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903))
	 && ((z_1027 + z_1112 + z_1487 + z_792 + z_882) > t_568) && ((z_1329 + z_1409) > 
	t_42) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && 
	(z_1027 > 0) && (z_1083 > 0) && (z_11 > 0) && (z_1112 > 0) && (z_116 > 0) && 
	(z_1248 > 0) && (z_1268 > 0) && (z_132 > 0) && (z_1329 > 0) && (z_1409 > 0) && 
	(z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 
	0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && 
	(z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_64 > 0) && (z_651 > 0) && (z_762 > 
	0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																																				DATA{
																																					:pid_2:uncoveredExit = 1;
																																					:pid_65:node_time = (z_1027 + z_1112 + z_132 + z_1487 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																																					:pid_65:z = z_1487;
																																					:pid_65:localTime = (z_1027 + z_1112 + z_132 + z_1487 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																																					:pid_65:localPC = (((z_1027 + z_1112 + z_1487 + z_792 + z_882) == 4) && ((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + z_792 + z_882) == t_568) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (t_23 < 4) && (t_68 < 4) && (t_338 < 4) && (t_568 < 4) && (t_986 < 8) && (z_132 < t_23) && (z_447 < t_338) && (z_792 < t_568) && (0 <= (t_23 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_986 + -4)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + z_1487 + z_792 + z_882) > t_568) && (z_1027 > 0) && (z_1112 > 0) && (z_132 > 0) && (z_2 > 0) && (z_32 > 0) && (z_422 > 0) && (z_447 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0));
																																					:pid_66:cl = (z_1027 + z_1112 + z_1487 + z_422 + z_447 + z_762 + z_792 + z_882);
																																					:pid_72:cl = (z_1027 + z_1112 + z_1487 + z_447 + z_762 + z_792 + z_882);
																																					:pid_77:e = 1;
																																					:pid_77:tau = 8;
																																					:pid_77:c = 0;
																																					:pid_77:t = t_986;
																																					:pid_77:cl = 0;
																																				}
																																				EC:<Id:3796;Ev:0;H:36;W:3488>{ SC: ( pid_26:o#22 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_79:dp1 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
																	EXE: { |;| 
	(:pid_82 , run) (:pid_83 , run) (:pid_86 , run) (:pid_86 , 
	cp1_receiveCM_inconsistent) (:pid_2 , run) (:pid_25 , run) (:pid_25 , n4_in_CM) }
																					
																	TRACE: { |;| 
	(:pid_82 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1538 }) 
	(:pid_86 , ${ input inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + 
	param::Trickle.Node.z_1329 param::Trickle.Node.z_1409 param::Trickle.Node.z_1414 
	param::Trickle.Node.z_4 param::Trickle.Node.z_64 } } @ (z_1003 + z_1083 + z_1248 
	+ z_1268 + z_1333 + z_1538 + z_53 + z_903)) (:pid_86 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_523 }) }
																																					/*FLAGS{ COVERAGE-ELEMENT }*/
																																					INFO{
																																						<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22" as trace="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22">
																																					}
																																					PC: (((z_1027 + z_1112 + z_1487 + z_792 + z_882) == 4) && ((z_1027 + z_1112 + z_447 
	+ z_762 + z_792 + z_882) == t_338) && ((z_1027 + z_792 + z_882) == t_568) && 
	((z_1329 + z_1409) == 4) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + 
	z_792 + z_882) == t_68) && (z_1329 == t_42) && (z_1414 == t_446) && (z_240 == 
	t_96) && (z_595 == t_434) && (z_90 == t_5) && ((z_1003 + z_1083 + z_1248 + 
	z_1268 + z_1333) < t_241) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 
	4) && (t_415 < 4) && (t_42 < 4) && (t_446 < 8) && (t_5 < 4) && (t_523 < 4) && 
	(t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 
	4) && (t_513 < 4) && (t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_96 < 4) && 
	(t_986 < 8) && (z_1083 < t_653) && (z_116 < t_10) && (z_1268 < t_823) && (z_132 
	< t_23) && (z_1538 < t_415) && (z_346 < t_220) && (z_447 < t_338) && (z_696 < 
	t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 
	+ -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 
	<= (t_42 + -2)) && (0 <= (t_446 + -4)) && (0 <= (t_5 + -2)) && (0 <= (t_523 + -2)
	) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= 
	(t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)
	) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && (0 <= 
	(t_96 + -2)) && (0 <= (t_986 + -4)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + 
	z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= 
	(z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && 
	((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) 
	<= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 
	+ z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 
	+ z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882)
	 <= (z_3 + z_53 + z_903)) && ((z_1329 + z_1409 + z_1414 + z_4 + z_64) <= (z_1003 
	+ z_1083 + z_1248 + z_1268 + z_1333 + z_1538 + z_3 + z_53 + z_903)) && ((z_1329 
	+ z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + 
	z_903)) && ((z_1027 + z_1112 + z_1487 + z_792 + z_882) > t_568) && ((z_1329 + 
	z_1409) > t_42) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_1003 > 
	0) && (z_1027 > 0) && (z_1083 > 0) && (z_11 > 0) && (z_1112 > 0) && (z_116 > 0) 
	&& (z_1248 > 0) && (z_1268 > 0) && (z_132 > 0) && (z_1329 > 0) && (z_1333 > 0) 
	&& (z_1409 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && 
	(z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0)
	 && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_64 > 0) && 
	(z_651 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && (z_903 
	> 0))
																																					DATA{
																																						:pid_2:uncoveredExit = 0;
																																						:pid_82:node_time = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1538 + z_53 + z_903);
																																						:pid_82:z = z_1538;
																																						:pid_82:localTime = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1538 + z_3 + z_53 + z_903);
																																						:pid_82:localPC = (((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241) && (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_523 < 4) && (t_653 < 4) && (t_823 < 4) && (z_1083 < t_653) && (z_1268 < t_823) && (z_1538 < t_415) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_523 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + z_1409 + z_1414 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1538 + z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_1083 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_1333 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																																						:pid_82:timeEmit = (z_1329 + z_1409 + z_1414 + z_4 + z_64);
																																						:pid_83:i = 2;
																																						:pid_83:t = t_523;
																																						:pid_89:cl = (z_1268 + z_1333 + z_1538);
																																						:pid_94:cl = (z_1083 + z_1248 + z_1268 + z_1333 + z_1538);
																																					}
																																					BUFFER{
																																						:pid_82:bufferNode:<FIFO>#0{ }
																																					}
																																				}
																																			}
																																			EC:<Id:3643;Ev:309;H:35;W:3345>{ SC: ( pid_25:o#21 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_53:cp2 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
																EXE: { |;| (:pid_48 
	, run) (:pid_49 , run) (:pid_52 , run) (:pid_52 , cp_sendCM) (:pid_2 , run) }
																					
																TRACE: { |;| 
	(:pid_48 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1486 }) 
	(:pid_52 , ${ output inst::Trickle.Node.ControlMsg [ 1 , 1 ] ${ + 
	param::Trickle.Node.z_1 param::Trickle.Node.z_11 param::Trickle.Node.z_116 
	param::Trickle.Node.z_1486 param::Trickle.Node.z_306 param::Trickle.Node.z_346 
	param::Trickle.Node.z_651 param::Trickle.Node.z_696 } } @ (z_11 + z_116 + z_1486 
	+ z_306 + z_346 + z_651 + z_696)) }
																																				PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_1329 + z_1409) == 4) && ((z_1486 + z_306 + z_346 
	+ z_651 + z_696) == t_65) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + 
	z_792 + z_882) == t_68) && (z_1329 == t_42) && (z_1414 == t_446) && (z_240 == 
	t_96) && (z_595 == t_434) && (z_90 == t_5) && ((z_1003 + z_1083 + z_1248 + 
	z_1268 + z_1333) < t_241) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 
	4) && (t_415 < 4) && (t_42 < 4) && (t_446 < 8) && (t_5 < 4) && (t_65 < 4) && 
	(t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 
	< 4) && (t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_96 < 4) && (z_1083 < 
	t_653) && (z_116 < t_10) && (z_1268 < t_823) && (z_132 < t_23) && (z_346 < t_220)
	 && (z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && 
	(0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + 
	-2)) && (0 <= (t_415 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_446 + -4)) && (0 
	<= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) 
	&& (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= 
	(t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)
	) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + 
	z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 
	+ z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + 
	z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= 
	(z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + 
	z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + 
	z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 
	+ z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903))
	 && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 
	+ z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + 
	z_1333 + z_3 + z_53 + z_903)) && ((z_1329 + z_1409) > t_42) && ((z_150 + z_90) > 
	t_5) && (z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && (z_1027 > 0) && (z_1083 > 0) 
	&& (z_11 > 0) && (z_116 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_132 > 0) && 
	(z_1329 > 0) && (z_1409 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && 
	(z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0)
	 && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && 
	(z_64 > 0) && (z_651 > 0) && (z_696 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 
	> 0) && (z_90 > 0) && (z_903 > 0))
																																				DATA{
																																					:pid_2:uncoveredExit = 1;
																																					:pid_48:node_time = (z_11 + z_116 + z_1486 + z_306 + z_346 + z_651 + z_696);
																																					:pid_48:z = z_1486;
																																					:pid_48:localTime = (z_1 + z_11 + z_116 + z_1486 + z_306 + z_346 + z_651 + z_696);
																																					:pid_48:localPC = (((z_1486 + z_306 + z_346 + z_651 + z_696) == t_65) && (t_10 < 4) && (t_65 < 4) && (t_220 < 4) && (t_513 < 4) && (z_116 < t_10) && (z_346 < t_220) && (z_696 < t_513) && (0 <= (t_10 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_220 + -2)) && (0 <= (t_513 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_306 > 0) && (z_346 > 0) && (z_651 > 0) && (z_696 > 0));
																																					:pid_49:cl = (z_1486 + z_306 + z_346 + z_651 + z_696);
																																					:pid_55:cl = (z_1486 + z_346 + z_651 + z_696);
																																					:pid_60:cl = (z_1486 + z_696);
																																				}
																																				BUFFER{
																																					:pid_65:bufferNode:<FIFO>#0{
																																						:pid_48:ControlMsg([ 1 , 1 ] , (z_1 + z_11 + z_116 + z_1486 + z_306 + z_346 + z_651 + z_696));
																																					}
																																				}
																																				EC:<Id:3810;Ev:0;H:36;W:3501>{ SC: ( pid_26:o#22 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_53:cp2 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
																	EXE: { |;| 
	(:pid_82 , run) (:pid_83 , run) (:pid_86 , run) (:pid_86 , 
	cp1_receiveCM_inconsistent) (:pid_2 , run) (:pid_25 , run) (:pid_25 , n4_in_CM) }
																					
																	TRACE: { |;| 
	(:pid_82 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1543 }) 
	(:pid_86 , ${ input inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + 
	param::Trickle.Node.z_1329 param::Trickle.Node.z_1409 param::Trickle.Node.z_1414 
	param::Trickle.Node.z_4 param::Trickle.Node.z_64 } } @ (z_1003 + z_1083 + z_1248 
	+ z_1268 + z_1333 + z_1543 + z_53 + z_903)) (:pid_86 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_528 }) }
																																					/*FLAGS{ COVERAGE-ELEMENT }*/
																																					INFO{
																																						<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22" as trace="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22">
																																					}
																																					PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_1329 + z_1409) == 4) && ((z_1486 + z_306 + z_346 
	+ z_651 + z_696) == t_65) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + 
	z_792 + z_882) == t_68) && (z_1329 == t_42) && (z_1414 == t_446) && (z_240 == 
	t_96) && (z_595 == t_434) && (z_90 == t_5) && ((z_1003 + z_1083 + z_1248 + 
	z_1268 + z_1333) < t_241) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 
	4) && (t_415 < 4) && (t_42 < 4) && (t_446 < 8) && (t_5 < 4) && (t_528 < 4) && 
	(t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 
	4) && (t_513 < 4) && (t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_96 < 4) && 
	(z_1083 < t_653) && (z_116 < t_10) && (z_1268 < t_823) && (z_132 < t_23) && 
	(z_1543 < t_415) && (z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && 
	(z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && 
	(0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_42 
	+ -2)) && (0 <= (t_446 + -4)) && (0 <= (t_5 + -2)) && (0 <= (t_528 + -2)) && (0 
	<= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)
	) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= 
	(t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && (0 <= (t_96 + -2))
	 && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + 
	z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + 
	z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + 
	z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + 
	z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 
	+ z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + 
	z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 
	+ z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + 
	z_1409 + z_1414 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + 
	z_1543 + z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + 
	z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && ((z_1329 + z_1409) > t_42) && 
	((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && (z_1027 > 0) 
	&& (z_1083 > 0) && (z_11 > 0) && (z_116 > 0) && (z_1248 > 0) && (z_1268 > 0) && 
	(z_132 > 0) && (z_1329 > 0) && (z_1333 > 0) && (z_1409 > 0) && (z_150 > 0) && 
	(z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0)
	 && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 
	> 0) && (z_535 > 0) && (z_64 > 0) && (z_651 > 0) && (z_696 > 0) && (z_762 > 0) 
	&& (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																																					DATA{
																																						:pid_2:uncoveredExit = 0;
																																						:pid_82:node_time = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1543 + z_53 + z_903);
																																						:pid_82:z = z_1543;
																																						:pid_82:localTime = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1543 + z_3 + z_53 + z_903);
																																						:pid_82:localPC = (((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241) && (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_528 < 4) && (t_653 < 4) && (t_823 < 4) && (z_1083 < t_653) && (z_1268 < t_823) && (z_1543 < t_415) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_528 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + z_1409 + z_1414 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1543 + z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_1083 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_1333 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																																						:pid_82:timeEmit = (z_1329 + z_1409 + z_1414 + z_4 + z_64);
																																						:pid_83:i = 2;
																																						:pid_83:t = t_528;
																																						:pid_89:cl = (z_1268 + z_1333 + z_1543);
																																						:pid_94:cl = (z_1083 + z_1248 + z_1268 + z_1333 + z_1543);
																																					}
																																					BUFFER{
																																						:pid_82:bufferNode:<FIFO>#0{ }
																																					}
																																				}
																																			}
																																			EC:<Id:3644;Ev:310;H:35;W:3346>{ SC: ( pid_25:o#21 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
																EXE: { |;| (:pid_48 
	, run) (:pid_49 , run) (:pid_52 , run) (:pid_52 , cp1_receiveCM_consistent) 
	(:pid_2 , run) }
																					
																TRACE: { |;| 
	(:pid_48 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1486 }) 
	(:pid_52 , ${ input inst::Trickle.Node.ControlMsg [ 1 , 1 ] ${ + 
	param::Trickle.Node.z_132 param::Trickle.Node.z_2 param::Trickle.Node.z_32 
	param::Trickle.Node.z_422 param::Trickle.Node.z_447 param::Trickle.Node.z_762 
	param::Trickle.Node.z_792 param::Trickle.Node.z_882 } } @ (z_11 + z_116 + z_1486 
	+ z_306 + z_346 + z_651 + z_696)) }
																																				PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_1329 + z_1409) == 4) && ((z_150 + z_90) == 4) && 
	((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (z_1329 == t_42) && (z_1414 
	== t_446) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && ((z_1003 + 
	z_1083 + z_1248 + z_1268 + z_1333) < t_241) && ((z_1486 + z_306 + z_346 + z_651 
	+ z_696) < t_65) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && 
	(t_415 < 4) && (t_42 < 4) && (t_446 < 8) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4)
	 && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && 
	(t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_96 < 4) && (z_1083 < t_653) && 
	(z_116 < t_10) && (z_1268 < t_823) && (z_132 < t_23) && (z_346 < t_220) && 
	(z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= 
	(t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) 
	&& (0 <= (t_415 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_446 + -4)) && (0 <= 
	(t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && 
	(0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= 
	(t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)
	) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + 
	z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 
	+ z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + 
	z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= 
	(z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + 
	z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + 
	z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 
	+ z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903))
	 && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1 + z_11 
	+ z_116 + z_1486 + z_306 + z_346 + z_651 + z_696)) && ((z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + 
	z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903))
	 && ((z_1329 + z_1409) > t_42) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 
	0) && (z_1003 > 0) && (z_1027 > 0) && (z_1083 > 0) && (z_11 > 0) && (z_116 > 0) 
	&& (z_1248 > 0) && (z_1268 > 0) && (z_132 > 0) && (z_1329 > 0) && (z_1409 > 0) 
	&& (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 
	> 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && 
	(z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_64 > 0) && (z_651 > 0) && (z_696 > 
	0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																																				DATA{
																																					:pid_2:uncoveredExit = 1;
																																					:pid_48:node_time = (z_11 + z_116 + z_1486 + z_306 + z_346 + z_651 + z_696);
																																					:pid_48:z = z_1486;
																																					:pid_48:localTime = (z_1 + z_11 + z_116 + z_1486 + z_306 + z_346 + z_651 + z_696);
																																					:pid_48:seq_buff[0] = 1;
																																					:pid_48:seq_buff[1] = 1;
																																					:pid_48:localPC = (((z_1486 + z_306 + z_346 + z_651 + z_696) < t_65) && (t_10 < 4) && (t_65 < 4) && (t_220 < 4) && (t_513 < 4) && (z_116 < t_10) && (z_346 < t_220) && (z_696 < t_513) && (0 <= (t_10 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_220 + -2)) && (0 <= (t_513 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1 + z_11 + z_116 + z_1486 + z_306 + z_346 + z_651 + z_696)) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_306 > 0) && (z_346 > 0) && (z_651 > 0) && (z_696 > 0));
																																					:pid_48:timeEmit = (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																																					:pid_49:c = 1;
																																					:pid_49:i = 2;
																																					:pid_49:consistent = true;
																																					:pid_49:cl = (z_1486 + z_306 + z_346 + z_651 + z_696);
																																					:pid_55:cl = (z_1486 + z_346 + z_651 + z_696);
																																					:pid_60:cl = (z_1486 + z_696);
																																				}
																																				BUFFER{
																																					:pid_48:bufferNode:<FIFO>#0{
																																						:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																																						:pid_65:DataMsg1([ 1 , 1 , 0 ] , (z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																																					}
																																				}
																																				EC:<Id:3827;Ev:0;H:36;W:3517>{ SC: ( pid_26:o#22 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
																	EXE: { |;| 
	(:pid_82 , run) (:pid_83 , run) (:pid_86 , run) (:pid_86 , 
	cp1_receiveCM_inconsistent) (:pid_2 , run) (:pid_25 , run) (:pid_25 , n4_in_CM) }
																					
																	TRACE: { |;| 
	(:pid_82 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1548 }) 
	(:pid_86 , ${ input inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + 
	param::Trickle.Node.z_1329 param::Trickle.Node.z_1409 param::Trickle.Node.z_1414 
	param::Trickle.Node.z_4 param::Trickle.Node.z_64 } } @ (z_1003 + z_1083 + z_1248 
	+ z_1268 + z_1333 + z_1548 + z_53 + z_903)) (:pid_86 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_532 }) }
																																					/*FLAGS{ COVERAGE-ELEMENT }*/
																																					INFO{
																																						<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22" as trace="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22">
																																					}
																																					PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_1329 + z_1409) == 4) && ((z_150 + z_90) == 4) && 
	((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (z_1329 == t_42) && (z_1414 
	== t_446) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && ((z_1003 + 
	z_1083 + z_1248 + z_1268 + z_1333) < t_241) && ((z_1486 + z_306 + z_346 + z_651 
	+ z_696) < t_65) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && 
	(t_415 < 4) && (t_42 < 4) && (t_446 < 8) && (t_5 < 4) && (t_532 < 4) && (t_65 < 
	4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && 
	(t_513 < 4) && (t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_96 < 4) && 
	(z_1083 < t_653) && (z_116 < t_10) && (z_1268 < t_823) && (z_132 < t_23) && 
	(z_1548 < t_415) && (z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && 
	(z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && 
	(0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_42 
	+ -2)) && (0 <= (t_446 + -4)) && (0 <= (t_5 + -2)) && (0 <= (t_532 + -2)) && (0 
	<= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)
	) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= 
	(t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && (0 <= (t_96 + -2))
	 && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + 
	z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + 
	z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + 
	z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + 
	z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 
	+ z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + 
	z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 
	+ z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1 + z_11 + z_116 + z_1486 + z_306 + 
	z_346 + z_651 + z_696)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 
	+ z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + z_1409 + z_1414 + z_4 + z_64) <= 
	(z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1548 + z_3 + z_53 + z_903)) && 
	((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + 
	z_53 + z_903)) && ((z_1329 + z_1409) > t_42) && ((z_150 + z_90) > t_5) && (z_0 > 
	0) && (z_1 > 0) && (z_1003 > 0) && (z_1027 > 0) && (z_1083 > 0) && (z_11 > 0) && 
	(z_116 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_132 > 0) && (z_1329 > 0) && 
	(z_1333 > 0) && (z_1409 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && 
	(z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0)
	 && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && 
	(z_64 > 0) && (z_651 > 0) && (z_696 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 
	> 0) && (z_90 > 0) && (z_903 > 0))
																																					DATA{
																																						:pid_2:uncoveredExit = 0;
																																						:pid_82:node_time = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1548 + z_53 + z_903);
																																						:pid_82:z = z_1548;
																																						:pid_82:localTime = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1548 + z_3 + z_53 + z_903);
																																						:pid_82:localPC = (((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241) && (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_532 < 4) && (t_653 < 4) && (t_823 < 4) && (z_1083 < t_653) && (z_1268 < t_823) && (z_1548 < t_415) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_532 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + z_1409 + z_1414 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1548 + z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_1083 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_1333 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																																						:pid_82:timeEmit = (z_1329 + z_1409 + z_1414 + z_4 + z_64);
																																						:pid_83:i = 2;
																																						:pid_83:t = t_532;
																																						:pid_89:cl = (z_1268 + z_1333 + z_1548);
																																						:pid_94:cl = (z_1083 + z_1248 + z_1268 + z_1333 + z_1548);
																																					}
																																					BUFFER{
																																						:pid_82:bufferNode:<FIFO>#0{ }
																																					}
																																				}
																																			}
																																			EC:<Id:3645;Ev:311;H:35;W:3347>{ SC: ( pid_25:o#21 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_58:dp2 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
																EXE: { |;| (:pid_48 
	, run) (:pid_55 , run) (:pid_57 , run) (:pid_57 , dp_sendDM) (:pid_2 , run) }
																					
																TRACE: { |;| 
	(:pid_48 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1486 }) 
	(:pid_57 , ${ output inst::Trickle.Node.DataMsg1 [ 1 , 1 , 0 ] ${ + 
	param::Trickle.Node.z_1 param::Trickle.Node.z_11 param::Trickle.Node.z_116 
	param::Trickle.Node.z_1486 param::Trickle.Node.z_306 param::Trickle.Node.z_346 
	param::Trickle.Node.z_651 param::Trickle.Node.z_696 } } @ (z_11 + z_116 + z_1486 
	+ z_306 + z_346 + z_651 + z_696)) }
																																				PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_1329 + z_1409) == 4) && ((z_1486 + z_346 + z_651 
	+ z_696) == t_220) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + 
	z_882) == t_68) && (z_1329 == t_42) && (z_1414 == t_446) && (z_240 == t_96) && 
	(z_595 == t_434) && (z_90 == t_5) && ((z_1003 + z_1083 + z_1248 + z_1268 + 
	z_1333) < t_241) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && 
	(t_415 < 4) && (t_42 < 4) && (t_446 < 8) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4)
	 && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && 
	(t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_96 < 4) && (z_1083 < t_653) && 
	(z_116 < t_10) && (z_1268 < t_823) && (z_132 < t_23) && (z_346 < t_220) && 
	(z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= 
	(t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) 
	&& (0 <= (t_415 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_446 + -4)) && (0 <= 
	(t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && 
	(0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= 
	(t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)
	) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + 
	z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 
	+ z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + 
	z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= 
	(z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + 
	z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + 
	z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 
	+ z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903))
	 && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 
	+ z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + 
	z_1333 + z_3 + z_53 + z_903)) && ((z_1329 + z_1409) > t_42) && ((z_150 + z_90) > 
	t_5) && (z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && (z_1027 > 0) && (z_1083 > 0) 
	&& (z_11 > 0) && (z_116 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_132 > 0) && 
	(z_1329 > 0) && (z_1409 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && 
	(z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0)
	 && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && 
	(z_64 > 0) && (z_651 > 0) && (z_696 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 
	> 0) && (z_90 > 0) && (z_903 > 0))
																																				DATA{
																																					:pid_2:uncoveredExit = 1;
																																					:pid_48:node_time = (z_11 + z_116 + z_1486 + z_306 + z_346 + z_651 + z_696);
																																					:pid_48:z = z_1486;
																																					:pid_48:localTime = (z_1 + z_11 + z_116 + z_1486 + z_306 + z_346 + z_651 + z_696);
																																					:pid_48:localPC = (((z_1486 + z_346 + z_651 + z_696) == t_220) && (t_10 < 4) && (t_65 < 4) && (t_220 < 4) && (t_513 < 4) && (z_116 < t_10) && (z_346 < t_220) && (z_696 < t_513) && (0 <= (t_10 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_220 + -2)) && (0 <= (t_513 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_306 > 0) && (z_346 > 0) && (z_651 > 0) && (z_696 > 0));
																																					:pid_49:cl = (z_1486 + z_306 + z_346 + z_651 + z_696);
																																					:pid_55:cl = (z_1486 + z_346 + z_651 + z_696);
																																					:pid_60:cl = (z_1486 + z_696);
																																				}
																																				BUFFER{
																																					:pid_65:bufferNode:<FIFO>#0{
																																						:pid_48:DataMsg1([ 1 , 1 , 0 ] , (z_1 + z_11 + z_116 + z_1486 + z_306 + z_346 + z_651 + z_696));
																																					}
																																				}
																																				EC:<Id:3843;Ev:0;H:36;W:3532>{ SC: ( pid_26:o#22 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_58:dp2 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
																	EXE: { |;| 
	(:pid_82 , run) (:pid_83 , run) (:pid_86 , run) (:pid_86 , 
	cp1_receiveCM_inconsistent) (:pid_2 , run) (:pid_25 , run) (:pid_25 , n4_in_CM) }
																					
																	TRACE: { |;| 
	(:pid_82 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1553 }) 
	(:pid_86 , ${ input inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + 
	param::Trickle.Node.z_1329 param::Trickle.Node.z_1409 param::Trickle.Node.z_1414 
	param::Trickle.Node.z_4 param::Trickle.Node.z_64 } } @ (z_1003 + z_1083 + z_1248 
	+ z_1268 + z_1333 + z_1553 + z_53 + z_903)) (:pid_86 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_536 }) }
																																					/*FLAGS{ COVERAGE-ELEMENT }*/
																																					INFO{
																																						<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22" as trace="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22">
																																					}
																																					PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_1329 + z_1409) == 4) && ((z_1486 + z_346 + z_651 
	+ z_696) == t_220) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + 
	z_882) == t_68) && (z_1329 == t_42) && (z_1414 == t_446) && (z_240 == t_96) && 
	(z_595 == t_434) && (z_90 == t_5) && ((z_1003 + z_1083 + z_1248 + z_1268 + 
	z_1333) < t_241) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && 
	(t_415 < 4) && (t_42 < 4) && (t_446 < 8) && (t_5 < 4) && (t_536 < 4) && (t_65 < 
	4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && 
	(t_513 < 4) && (t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_96 < 4) && 
	(z_1083 < t_653) && (z_116 < t_10) && (z_1268 < t_823) && (z_132 < t_23) && 
	(z_1553 < t_415) && (z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && 
	(z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && 
	(0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_42 
	+ -2)) && (0 <= (t_446 + -4)) && (0 <= (t_5 + -2)) && (0 <= (t_536 + -2)) && (0 
	<= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)
	) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= 
	(t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && (0 <= (t_96 + -2))
	 && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + 
	z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + 
	z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + 
	z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + 
	z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 
	+ z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + 
	z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 
	+ z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + 
	z_1409 + z_1414 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + 
	z_1553 + z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + 
	z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && ((z_1329 + z_1409) > t_42) && 
	((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && (z_1027 > 0) 
	&& (z_1083 > 0) && (z_11 > 0) && (z_116 > 0) && (z_1248 > 0) && (z_1268 > 0) && 
	(z_132 > 0) && (z_1329 > 0) && (z_1333 > 0) && (z_1409 > 0) && (z_150 > 0) && 
	(z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0)
	 && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 
	> 0) && (z_535 > 0) && (z_64 > 0) && (z_651 > 0) && (z_696 > 0) && (z_762 > 0) 
	&& (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																																					DATA{
																																						:pid_2:uncoveredExit = 0;
																																						:pid_82:node_time = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1553 + z_53 + z_903);
																																						:pid_82:z = z_1553;
																																						:pid_82:localTime = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1553 + z_3 + z_53 + z_903);
																																						:pid_82:localPC = (((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241) && (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_536 < 4) && (t_653 < 4) && (t_823 < 4) && (z_1083 < t_653) && (z_1268 < t_823) && (z_1553 < t_415) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_536 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + z_1409 + z_1414 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1553 + z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_1083 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_1333 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																																						:pid_82:timeEmit = (z_1329 + z_1409 + z_1414 + z_4 + z_64);
																																						:pid_83:i = 2;
																																						:pid_83:t = t_536;
																																						:pid_89:cl = (z_1268 + z_1333 + z_1553);
																																						:pid_94:cl = (z_1083 + z_1248 + z_1268 + z_1333 + z_1553);
																																					}
																																					BUFFER{
																																						:pid_82:bufferNode:<FIFO>#0{ }
																																					}
																																				}
																																			}
																																			EC:<Id:3646;Ev:312;H:35;W:3348>{ SC: ( pid_25:o#21 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_63:dp2 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
																EXE: { |;| (:pid_48 
	, run) (:pid_60 , run) (:pid_62 , run) (:pid_62 , dp_sendDM) (:pid_2 , run) }
																					
																TRACE: { |;| 
	(:pid_48 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1486 }) 
	(:pid_62 , ${ output inst::Trickle.Node.DataMsg2 [ 2 , 2 , 1 ] ${ + 
	param::Trickle.Node.z_1 param::Trickle.Node.z_11 param::Trickle.Node.z_116 
	param::Trickle.Node.z_1486 param::Trickle.Node.z_306 param::Trickle.Node.z_346 
	param::Trickle.Node.z_651 param::Trickle.Node.z_696 } } @ (z_11 + z_116 + z_1486 
	+ z_306 + z_346 + z_651 + z_696)) }
																																				PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_1329 + z_1409) == 4) && ((z_1486 + z_696) == 
	t_513) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) == 
	t_68) && (z_1329 == t_42) && (z_1414 == t_446) && (z_240 == t_96) && (z_595 == 
	t_434) && (z_90 == t_5) && ((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241)
	 && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && 
	(t_42 < 4) && (t_446 < 8) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) 
	&& (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && 
	(t_653 < 4) && (t_823 < 4) && (t_96 < 4) && (z_1083 < t_653) && (z_116 < t_10) 
	&& (z_1268 < t_823) && (z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && 
	(z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 
	<= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + 
	-2)) && (0 <= (t_42 + -2)) && (0 <= (t_446 + -4)) && (0 <= (t_5 + -2)) && (0 <= 
	(t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) 
	&& (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= 
	(t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && (0 <= (t_96 + -2))
	 && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + 
	z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + 
	z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + 
	z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + 
	z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 
	+ z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + 
	z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 
	+ z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + 
	z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903))
	 && ((z_1329 + z_1409) > t_42) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 
	0) && (z_1003 > 0) && (z_1027 > 0) && (z_1083 > 0) && (z_11 > 0) && (z_116 > 0) 
	&& (z_1248 > 0) && (z_1268 > 0) && (z_132 > 0) && (z_1329 > 0) && (z_1409 > 0) 
	&& (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 
	> 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && 
	(z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_64 > 0) && (z_651 > 0) && (z_696 > 
	0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																																				DATA{
																																					:pid_2:uncoveredExit = 1;
																																					:pid_48:node_time = (z_11 + z_116 + z_1486 + z_306 + z_346 + z_651 + z_696);
																																					:pid_48:z = z_1486;
																																					:pid_48:localTime = (z_1 + z_11 + z_116 + z_1486 + z_306 + z_346 + z_651 + z_696);
																																					:pid_48:localPC = (((z_1486 + z_696) == t_513) && (t_10 < 4) && (t_65 < 4) && (t_220 < 4) && (t_513 < 4) && (z_116 < t_10) && (z_346 < t_220) && (z_696 < t_513) && (0 <= (t_10 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_220 + -2)) && (0 <= (t_513 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_306 > 0) && (z_346 > 0) && (z_651 > 0) && (z_696 > 0));
																																					:pid_49:cl = (z_1486 + z_306 + z_346 + z_651 + z_696);
																																					:pid_55:cl = (z_1486 + z_346 + z_651 + z_696);
																																					:pid_60:cl = (z_1486 + z_696);
																																				}
																																				BUFFER{
																																					:pid_65:bufferNode:<FIFO>#0{
																																						:pid_48:DataMsg2([ 2 , 2 , 1 ] , (z_1 + z_11 + z_116 + z_1486 + z_306 + z_346 + z_651 + z_696));
																																					}
																																				}
																																				EC:<Id:3860;Ev:0;H:36;W:3548>{ SC: ( pid_26:o#22 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_63:dp2 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
																	EXE: { |;| 
	(:pid_82 , run) (:pid_83 , run) (:pid_86 , run) (:pid_86 , 
	cp1_receiveCM_inconsistent) (:pid_2 , run) (:pid_25 , run) (:pid_25 , n4_in_CM) }
																					
																	TRACE: { |;| 
	(:pid_82 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1558 }) 
	(:pid_86 , ${ input inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + 
	param::Trickle.Node.z_1329 param::Trickle.Node.z_1409 param::Trickle.Node.z_1414 
	param::Trickle.Node.z_4 param::Trickle.Node.z_64 } } @ (z_1003 + z_1083 + z_1248 
	+ z_1268 + z_1333 + z_1558 + z_53 + z_903)) (:pid_86 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_540 }) }
																																					/*FLAGS{ COVERAGE-ELEMENT }*/
																																					INFO{
																																						<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22" as trace="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22">
																																					}
																																					PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_1329 + z_1409) == 4) && ((z_1486 + z_696) == 
	t_513) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) == 
	t_68) && (z_1329 == t_42) && (z_1414 == t_446) && (z_240 == t_96) && (z_595 == 
	t_434) && (z_90 == t_5) && ((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241)
	 && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && 
	(t_42 < 4) && (t_446 < 8) && (t_5 < 4) && (t_540 < 4) && (t_65 < 4) && (t_68 < 4)
	 && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && 
	(t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_96 < 4) && (z_1083 < t_653) && 
	(z_116 < t_10) && (z_1268 < t_823) && (z_132 < t_23) && (z_1558 < t_415) && 
	(z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && 
	(z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2))
	 && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_42 + -2)) && (0 <= 
	(t_446 + -4)) && (0 <= (t_5 + -2)) && (0 <= (t_540 + -2)) && (0 <= (t_65 + -2)) 
	&& (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= 
	(t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)
	) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + 
	z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + 
	z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + 
	z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 
	+ z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) 
	<= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + 
	z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + 
	z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 
	+ z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + 
	z_1409 + z_1414 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + 
	z_1558 + z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + 
	z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && ((z_1329 + z_1409) > t_42) && 
	((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && (z_1027 > 0) 
	&& (z_1083 > 0) && (z_11 > 0) && (z_116 > 0) && (z_1248 > 0) && (z_1268 > 0) && 
	(z_132 > 0) && (z_1329 > 0) && (z_1333 > 0) && (z_1409 > 0) && (z_150 > 0) && 
	(z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0)
	 && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 
	> 0) && (z_535 > 0) && (z_64 > 0) && (z_651 > 0) && (z_696 > 0) && (z_762 > 0) 
	&& (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																																					DATA{
																																						:pid_2:uncoveredExit = 0;
																																						:pid_82:node_time = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1558 + z_53 + z_903);
																																						:pid_82:z = z_1558;
																																						:pid_82:localTime = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1558 + z_3 + z_53 + z_903);
																																						:pid_82:localPC = (((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241) && (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_540 < 4) && (t_653 < 4) && (t_823 < 4) && (z_1083 < t_653) && (z_1268 < t_823) && (z_1558 < t_415) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_540 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + z_1409 + z_1414 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1558 + z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_1083 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_1333 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																																						:pid_82:timeEmit = (z_1329 + z_1409 + z_1414 + z_4 + z_64);
																																						:pid_83:i = 2;
																																						:pid_83:t = t_540;
																																						:pid_89:cl = (z_1268 + z_1333 + z_1558);
																																						:pid_94:cl = (z_1083 + z_1248 + z_1268 + z_1333 + z_1558);
																																					}
																																					BUFFER{
																																						:pid_82:bufferNode:<FIFO>#0{ }
																																					}
																																				}
																																			}
																																			EC:<Id:3647;Ev:313;H:35;W:3349>{ SC: ( pid_25:o#21 , ( pid_36:cp2 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
																EXE: { |;| (:pid_31 
	, run) (:pid_32 , run) (:pid_35 , run) (:pid_35 , cp_sendCM) (:pid_2 , run) }
																					
																TRACE: { |;| 
	(:pid_31 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1485 }) 
	(:pid_35 , ${ output inst::Trickle.Node.ControlMsg [ 1 , 1 ] ${ + 
	param::Trickle.Node.z_0 param::Trickle.Node.z_1485 param::Trickle.Node.z_150 
	param::Trickle.Node.z_185 param::Trickle.Node.z_240 param::Trickle.Node.z_5 
	param::Trickle.Node.z_535 param::Trickle.Node.z_595 param::Trickle.Node.z_90 } } 
	@ (z_1485 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90)) }
																																				PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_1329 + z_1409) == 4) && ((z_1485 + z_185 + z_240 
	+ z_535 + z_595) == t_79) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + 
	z_792 + z_882) == t_68) && (z_1329 == t_42) && (z_1414 == t_446) && (z_240 == 
	t_96) && (z_595 == t_434) && (z_90 == t_5) && ((z_1003 + z_1083 + z_1248 + 
	z_1268 + z_1333) < t_241) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 
	4) && (t_415 < 4) && (t_42 < 4) && (t_446 < 8) && (t_5 < 4) && (t_65 < 4) && 
	(t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 
	< 4) && (t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_96 < 4) && (z_1083 < 
	t_653) && (z_116 < t_10) && (z_1268 < t_823) && (z_132 < t_23) && (z_346 < t_220)
	 && (z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && 
	(0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + 
	-2)) && (0 <= (t_415 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_446 + -4)) && (0 
	<= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) 
	&& (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= 
	(t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)
	) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + 
	z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 
	+ z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + 
	z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= 
	(z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + 
	z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + 
	z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 
	+ z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903))
	 && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 
	+ z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + 
	z_1333 + z_3 + z_53 + z_903)) && ((z_1329 + z_1409) > t_42) && ((z_150 + z_90) > 
	t_5) && (z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && (z_1027 > 0) && (z_1083 > 0) 
	&& (z_11 > 0) && (z_116 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_132 > 0) && 
	(z_1329 > 0) && (z_1409 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && 
	(z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0)
	 && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && 
	(z_595 > 0) && (z_64 > 0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 
	> 0) && (z_90 > 0) && (z_903 > 0))
																																				DATA{
																																					:pid_2:uncoveredExit = 1;
																																					:pid_31:node_time = (z_1485 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90);
																																					:pid_31:z = z_1485;
																																					:pid_31:localTime = (z_0 + z_1485 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90);
																																					:pid_31:localPC = (((z_1485 + z_185 + z_240 + z_535 + z_595) == t_79) && ((z_150 + z_90) == 4) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && (t_5 < 4) && (t_79 < 8) && (t_434 < 4) && (t_96 < 4) && (0 <= (t_5 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_434 + -2)) && (0 <= (t_96 + -2)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_150 > 0) && (z_185 > 0) && (z_240 > 0) && (z_5 > 0) && (z_535 > 0) && (z_595 > 0) && (z_90 > 0));
																																					:pid_32:cl = (z_1485 + z_185 + z_240 + z_535 + z_595);
																																					:pid_38:cl = (z_1485 + z_240 + z_535 + z_595);
																																					:pid_43:cl = (z_1485 + z_595);
																																				}
																																				BUFFER{
																																					:pid_48:bufferNode:<FIFO>#0{
																																						:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																																						:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																																						:pid_65:DataMsg1([ 1 , 1 , 0 ] , (z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																																						:pid_31:ControlMsg([ 1 , 1 ] , (z_0 + z_1485 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90));
																																					}
																																					:pid_65:bufferNode:<FIFO>#0{
																																						:pid_31:ControlMsg([ 1 , 1 ] , (z_0 + z_1485 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90));
																																					}
																																				}
																																				EC:<Id:3877;Ev:0;H:36;W:3564>{ SC: ( pid_26:o#22 , ( pid_36:cp2 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
																	EXE: { |;| 
	(:pid_82 , run) (:pid_83 , run) (:pid_86 , run) (:pid_86 , 
	cp1_receiveCM_inconsistent) (:pid_2 , run) (:pid_25 , run) (:pid_25 , n4_in_CM) }
																					
																	TRACE: { |;| 
	(:pid_82 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1563 }) 
	(:pid_86 , ${ input inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + 
	param::Trickle.Node.z_1329 param::Trickle.Node.z_1409 param::Trickle.Node.z_1414 
	param::Trickle.Node.z_4 param::Trickle.Node.z_64 } } @ (z_1003 + z_1083 + z_1248 
	+ z_1268 + z_1333 + z_1563 + z_53 + z_903)) (:pid_86 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_545 }) }
																																					/*FLAGS{ COVERAGE-ELEMENT }*/
																																					INFO{
																																						<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22" as trace="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22">
																																					}
																																					PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_1329 + z_1409) == 4) && ((z_1485 + z_185 + z_240 
	+ z_535 + z_595) == t_79) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + 
	z_792 + z_882) == t_68) && (z_1329 == t_42) && (z_1414 == t_446) && (z_240 == 
	t_96) && (z_595 == t_434) && (z_90 == t_5) && ((z_1003 + z_1083 + z_1248 + 
	z_1268 + z_1333) < t_241) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 
	4) && (t_415 < 4) && (t_42 < 4) && (t_446 < 8) && (t_5 < 4) && (t_545 < 4) && 
	(t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 
	4) && (t_513 < 4) && (t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_96 < 4) && 
	(z_1083 < t_653) && (z_116 < t_10) && (z_1268 < t_823) && (z_132 < t_23) && 
	(z_1563 < t_415) && (z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && 
	(z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && 
	(0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_42 
	+ -2)) && (0 <= (t_446 + -4)) && (0 <= (t_5 + -2)) && (0 <= (t_545 + -2)) && (0 
	<= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)
	) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= 
	(t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && (0 <= (t_96 + -2))
	 && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + 
	z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + 
	z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + 
	z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + 
	z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 
	+ z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + 
	z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 
	+ z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + 
	z_1409 + z_1414 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + 
	z_1563 + z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + 
	z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && ((z_1329 + z_1409) > t_42) && 
	((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && (z_1027 > 0) 
	&& (z_1083 > 0) && (z_11 > 0) && (z_116 > 0) && (z_1248 > 0) && (z_1268 > 0) && 
	(z_132 > 0) && (z_1329 > 0) && (z_1333 > 0) && (z_1409 > 0) && (z_150 > 0) && 
	(z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0)
	 && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 
	> 0) && (z_535 > 0) && (z_595 > 0) && (z_64 > 0) && (z_651 > 0) && (z_762 > 0) 
	&& (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																																					DATA{
																																						:pid_2:uncoveredExit = 0;
																																						:pid_82:node_time = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1563 + z_53 + z_903);
																																						:pid_82:z = z_1563;
																																						:pid_82:localTime = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1563 + z_3 + z_53 + z_903);
																																						:pid_82:localPC = (((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241) && (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_545 < 4) && (t_653 < 4) && (t_823 < 4) && (z_1083 < t_653) && (z_1268 < t_823) && (z_1563 < t_415) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_545 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + z_1409 + z_1414 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1563 + z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_1083 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_1333 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																																						:pid_82:timeEmit = (z_1329 + z_1409 + z_1414 + z_4 + z_64);
																																						:pid_83:i = 2;
																																						:pid_83:t = t_545;
																																						:pid_89:cl = (z_1268 + z_1333 + z_1563);
																																						:pid_94:cl = (z_1083 + z_1248 + z_1268 + z_1333 + z_1563);
																																					}
																																					BUFFER{
																																						:pid_82:bufferNode:<FIFO>#0{ }
																																					}
																																				}
																																			}
																																			EC:<Id:3648;Ev:314;H:35;W:3350>{ SC: ( pid_25:o#21 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
																EXE: { |;| (:pid_31 
	, run) (:pid_32 , run) (:pid_35 , run) (:pid_35 , cp1_receiveCM_consistent) 
	(:pid_2 , run) }
																					
																TRACE: { |;| 
	(:pid_31 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1485 }) 
	(:pid_35 , ${ input inst::Trickle.Node.ControlMsg [ 1 , 1 ] ${ + 
	param::Trickle.Node.z_132 param::Trickle.Node.z_2 param::Trickle.Node.z_32 
	param::Trickle.Node.z_422 param::Trickle.Node.z_447 param::Trickle.Node.z_762 
	param::Trickle.Node.z_792 param::Trickle.Node.z_882 } } @ (z_1485 + z_150 + 
	z_185 + z_240 + z_5 + z_535 + z_595 + z_90)) }
																																				PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_1329 + z_1409) == 4) && ((z_150 + z_90) == 4) && 
	((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (z_1329 == t_42) && (z_1414 
	== t_446) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && ((z_1003 + 
	z_1083 + z_1248 + z_1268 + z_1333) < t_241) && ((z_1485 + z_185 + z_240 + z_535 
	+ z_595) < t_79) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && 
	(t_415 < 4) && (t_42 < 4) && (t_446 < 8) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4)
	 && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && 
	(t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_96 < 4) && (z_1083 < t_653) && 
	(z_116 < t_10) && (z_1268 < t_823) && (z_132 < t_23) && (z_346 < t_220) && 
	(z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= 
	(t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) 
	&& (0 <= (t_415 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_446 + -4)) && (0 <= 
	(t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && 
	(0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= 
	(t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)
	) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + 
	z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 
	+ z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + 
	z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= 
	(z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + 
	z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + 
	z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 
	+ z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903))
	 && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_0 + 
	z_1485 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90)) && ((z_132 + z_2 + 
	z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && 
	((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + 
	z_53 + z_903)) && ((z_1329 + z_1409) > t_42) && ((z_150 + z_90) > t_5) && (z_0 > 
	0) && (z_1 > 0) && (z_1003 > 0) && (z_1027 > 0) && (z_1083 > 0) && (z_11 > 0) && 
	(z_116 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_132 > 0) && (z_1329 > 0) && 
	(z_1409 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 
	0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && 
	(z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_595 > 0) && (z_64 > 
	0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && 
	(z_903 > 0))
																																				DATA{
																																					:pid_2:uncoveredExit = 1;
																																					:pid_31:node_time = (z_1485 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90);
																																					:pid_31:z = z_1485;
																																					:pid_31:localTime = (z_0 + z_1485 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90);
																																					:pid_31:seq_buff[0] = 1;
																																					:pid_31:seq_buff[1] = 1;
																																					:pid_31:localPC = (((z_150 + z_90) == 4) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && ((z_1485 + z_185 + z_240 + z_535 + z_595) < t_79) && (t_5 < 4) && (t_79 < 8) && (t_434 < 4) && (t_96 < 4) && (0 <= (t_5 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_434 + -2)) && (0 <= (t_96 + -2)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_0 + z_1485 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_150 > 0) && (z_185 > 0) && (z_240 > 0) && (z_5 > 0) && (z_535 > 0) && (z_595 > 0) && (z_90 > 0));
																																					:pid_31:timeEmit = (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																																					:pid_32:c = 1;
																																					:pid_32:i = 2;
																																					:pid_32:consistent = true;
																																					:pid_32:cl = (z_1485 + z_185 + z_240 + z_535 + z_595);
																																					:pid_38:cl = (z_1485 + z_240 + z_535 + z_595);
																																					:pid_43:cl = (z_1485 + z_595);
																																				}
																																				BUFFER{
																																					:pid_31:bufferNode:<FIFO>#0{
																																						:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																																						:pid_65:DataMsg1([ 1 , 1 , 0 ] , (z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																																					}
																																				}
																																				EC:<Id:3894;Ev:0;H:36;W:3580>{ SC: ( pid_26:o#22 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
																	EXE: { |;| 
	(:pid_82 , run) (:pid_83 , run) (:pid_86 , run) (:pid_86 , 
	cp1_receiveCM_inconsistent) (:pid_2 , run) (:pid_25 , run) (:pid_25 , n4_in_CM) }
																					
																	TRACE: { |;| 
	(:pid_82 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1568 }) 
	(:pid_86 , ${ input inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + 
	param::Trickle.Node.z_1329 param::Trickle.Node.z_1409 param::Trickle.Node.z_1414 
	param::Trickle.Node.z_4 param::Trickle.Node.z_64 } } @ (z_1003 + z_1083 + z_1248 
	+ z_1268 + z_1333 + z_1568 + z_53 + z_903)) (:pid_86 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_549 }) }
																																					/*FLAGS{ COVERAGE-ELEMENT }*/
																																					INFO{
																																						<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22" as trace="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22">
																																					}
																																					PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_1329 + z_1409) == 4) && ((z_150 + z_90) == 4) && 
	((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (z_1329 == t_42) && (z_1414 
	== t_446) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && ((z_1003 + 
	z_1083 + z_1248 + z_1268 + z_1333) < t_241) && ((z_1485 + z_185 + z_240 + z_535 
	+ z_595) < t_79) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && 
	(t_415 < 4) && (t_42 < 4) && (t_446 < 8) && (t_5 < 4) && (t_549 < 4) && (t_65 < 
	4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && 
	(t_513 < 4) && (t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_96 < 4) && 
	(z_1083 < t_653) && (z_116 < t_10) && (z_1268 < t_823) && (z_132 < t_23) && 
	(z_1568 < t_415) && (z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && 
	(z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && 
	(0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_42 
	+ -2)) && (0 <= (t_446 + -4)) && (0 <= (t_5 + -2)) && (0 <= (t_549 + -2)) && (0 
	<= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)
	) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= 
	(t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && (0 <= (t_96 + -2))
	 && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + 
	z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + 
	z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + 
	z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + 
	z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 
	+ z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + 
	z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 
	+ z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_0 + z_1485 + z_150 + z_185 + z_240 
	+ z_5 + z_535 + z_595 + z_90)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + 
	z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + z_1409 + z_1414 + z_4 + 
	z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1568 + z_3 + z_53 + 
	z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 
	+ z_3 + z_53 + z_903)) && ((z_1329 + z_1409) > t_42) && ((z_150 + z_90) > t_5) 
	&& (z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && (z_1027 > 0) && (z_1083 > 0) && 
	(z_11 > 0) && (z_116 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_132 > 0) && 
	(z_1329 > 0) && (z_1333 > 0) && (z_1409 > 0) && (z_150 > 0) && (z_185 > 0) && 
	(z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0)
	 && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 
	> 0) && (z_595 > 0) && (z_64 > 0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) 
	&& (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																																					DATA{
																																						:pid_2:uncoveredExit = 0;
																																						:pid_82:node_time = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1568 + z_53 + z_903);
																																						:pid_82:z = z_1568;
																																						:pid_82:localTime = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1568 + z_3 + z_53 + z_903);
																																						:pid_82:localPC = (((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241) && (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_549 < 4) && (t_653 < 4) && (t_823 < 4) && (z_1083 < t_653) && (z_1268 < t_823) && (z_1568 < t_415) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_549 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + z_1409 + z_1414 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1568 + z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_1083 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_1333 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																																						:pid_82:timeEmit = (z_1329 + z_1409 + z_1414 + z_4 + z_64);
																																						:pid_83:i = 2;
																																						:pid_83:t = t_549;
																																						:pid_89:cl = (z_1268 + z_1333 + z_1568);
																																						:pid_94:cl = (z_1083 + z_1248 + z_1268 + z_1333 + z_1568);
																																					}
																																					BUFFER{
																																						:pid_82:bufferNode:<FIFO>#0{ }
																																					}
																																				}
																																			}
																																			EC:<Id:3649;Ev:315;H:35;W:3351>{ SC: ( pid_25:o#21 , ( pid_35:cp1 , pid_41:dp2 , pid_45:dp1 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
																EXE: { |;| (:pid_31 
	, run) (:pid_43 , run) (:pid_46 , run) (:pid_46 , dp_resetTau) (:pid_2 , run) }
																					
																TRACE: { |;| 
	(:pid_31 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1485 }) 
	(:pid_46 , ${ newfresh inst::Trickle.Node.DataProcess.t 
	param::Trickle.Node.DataProcess.t_984 }) }
																																				PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_1329 + z_1409) == 4) && ((z_1485 + z_595) == 4) 
	&& ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && 
	(z_1329 == t_42) && (z_1414 == t_446) && (z_240 == t_96) && (z_595 == t_434) && 
	(z_90 == t_5) && ((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241) && (t_10 
	< 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_42 < 4) && 
	(t_446 < 8) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4)
	 && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_653 < 4) && 
	(t_823 < 4) && (t_96 < 4) && (t_984 < 8) && (z_1083 < t_653) && (z_116 < t_10) 
	&& (z_1268 < t_823) && (z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && 
	(z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 
	<= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + 
	-2)) && (0 <= (t_42 + -2)) && (0 <= (t_446 + -4)) && (0 <= (t_5 + -2)) && (0 <= 
	(t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) 
	&& (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= 
	(t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && (0 <= (t_96 + -2))
	 && (0 <= (t_984 + -4)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + 
	z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 
	+ z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + 
	z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= 
	(z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + 
	z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + 
	z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 
	+ z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903))
	 && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 
	+ z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + 
	z_1333 + z_3 + z_53 + z_903)) && ((z_1329 + z_1409) > t_42) && ((z_1485 + z_595) 
	> t_434) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && 
	(z_1027 > 0) && (z_1083 > 0) && (z_11 > 0) && (z_116 > 0) && (z_1248 > 0) && 
	(z_1268 > 0) && (z_132 > 0) && (z_1329 > 0) && (z_1409 > 0) && (z_150 > 0) && 
	(z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0)
	 && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 
	> 0) && (z_535 > 0) && (z_595 > 0) && (z_64 > 0) && (z_651 > 0) && (z_762 > 0) 
	&& (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																																				DATA{
																																					:pid_2:uncoveredExit = 1;
																																					:pid_31:node_time = (z_1485 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90);
																																					:pid_31:z = z_1485;
																																					:pid_31:localTime = (z_0 + z_1485 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90);
																																					:pid_31:localPC = (((z_1485 + z_595) == 4) && ((z_150 + z_90) == 4) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && (t_5 < 4) && (t_79 < 8) && (t_434 < 4) && (t_96 < 4) && (t_984 < 8) && (0 <= (t_5 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_434 + -2)) && (0 <= (t_96 + -2)) && (0 <= (t_984 + -4)) && ((z_1485 + z_595) > t_434) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_150 > 0) && (z_185 > 0) && (z_240 > 0) && (z_5 > 0) && (z_535 > 0) && (z_595 > 0) && (z_90 > 0));
																																					:pid_32:cl = (z_1485 + z_185 + z_240 + z_535 + z_595);
																																					:pid_38:cl = (z_1485 + z_240 + z_535 + z_595);
																																					:pid_43:e = 1;
																																					:pid_43:tau = 8;
																																					:pid_43:c = 0;
																																					:pid_43:t = t_984;
																																					:pid_43:cl = 0;
																																				}
																																				EC:<Id:3910;Ev:0;H:36;W:3595>{ SC: ( pid_26:o#22 , ( pid_35:cp1 , pid_41:dp2 , pid_45:dp1 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
																	EXE: { |;| 
	(:pid_82 , run) (:pid_83 , run) (:pid_86 , run) (:pid_86 , 
	cp1_receiveCM_inconsistent) (:pid_2 , run) (:pid_25 , run) (:pid_25 , n4_in_CM) }
																					
																	TRACE: { |;| 
	(:pid_82 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1573 }) 
	(:pid_86 , ${ input inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + 
	param::Trickle.Node.z_1329 param::Trickle.Node.z_1409 param::Trickle.Node.z_1414 
	param::Trickle.Node.z_4 param::Trickle.Node.z_64 } } @ (z_1003 + z_1083 + z_1248 
	+ z_1268 + z_1333 + z_1573 + z_53 + z_903)) (:pid_86 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_553 }) }
																																					/*FLAGS{ COVERAGE-ELEMENT }*/
																																					INFO{
																																						<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22" as trace="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22">
																																					}
																																					PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_1329 + z_1409) == 4) && ((z_1485 + z_595) == 4) 
	&& ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && 
	(z_1329 == t_42) && (z_1414 == t_446) && (z_240 == t_96) && (z_595 == t_434) && 
	(z_90 == t_5) && ((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241) && (t_10 
	< 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_42 < 4) && 
	(t_446 < 8) && (t_5 < 4) && (t_553 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8)
	 && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && 
	(t_653 < 4) && (t_823 < 4) && (t_96 < 4) && (t_984 < 8) && (z_1083 < t_653) && 
	(z_116 < t_10) && (z_1268 < t_823) && (z_132 < t_23) && (z_1573 < t_415) && 
	(z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && 
	(z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2))
	 && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_42 + -2)) && (0 <= 
	(t_446 + -4)) && (0 <= (t_5 + -2)) && (0 <= (t_553 + -2)) && (0 <= (t_65 + -2)) 
	&& (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= 
	(t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)
	) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && (0 <= (t_96 + -2)) && (0 <= 
	(t_984 + -4)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= 
	(z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + 
	z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + 
	z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + 
	z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 
	+ z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) 
	&& ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + z_132 + 
	z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 
	+ z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 
	+ z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + 
	z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && 
	((z_1329 + z_1409 + z_1414 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + 
	z_1333 + z_1573 + z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + 
	z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && ((z_1329 + z_1409) > 
	t_42) && ((z_1485 + z_595) > t_434) && ((z_150 + z_90) > t_5) && (z_0 > 0) && 
	(z_1 > 0) && (z_1003 > 0) && (z_1027 > 0) && (z_1083 > 0) && (z_11 > 0) && 
	(z_116 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_132 > 0) && (z_1329 > 0) && 
	(z_1333 > 0) && (z_1409 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && 
	(z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0)
	 && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && 
	(z_595 > 0) && (z_64 > 0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 
	> 0) && (z_90 > 0) && (z_903 > 0))
																																					DATA{
																																						:pid_2:uncoveredExit = 0;
																																						:pid_82:node_time = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1573 + z_53 + z_903);
																																						:pid_82:z = z_1573;
																																						:pid_82:localTime = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1573 + z_3 + z_53 + z_903);
																																						:pid_82:localPC = (((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241) && (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_553 < 4) && (t_653 < 4) && (t_823 < 4) && (z_1083 < t_653) && (z_1268 < t_823) && (z_1573 < t_415) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_553 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + z_1409 + z_1414 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1573 + z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_1083 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_1333 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																																						:pid_82:timeEmit = (z_1329 + z_1409 + z_1414 + z_4 + z_64);
																																						:pid_83:i = 2;
																																						:pid_83:t = t_553;
																																						:pid_89:cl = (z_1268 + z_1333 + z_1573);
																																						:pid_94:cl = (z_1083 + z_1248 + z_1268 + z_1333 + z_1573);
																																					}
																																					BUFFER{
																																						:pid_82:bufferNode:<FIFO>#0{ }
																																					}
																																				}
																																			}
																																		}
																																	}
																																	EC:<Id:3393;Ev:284;H:33;W:3111>{ SC: ( pid_24:o#20 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
														EXE: { |;| (:pid_99 , run) 
	(:pid_100 , run) (:pid_104 , run) (:pid_104 , cp2_receiveCM_inconsistent) 
	(:pid_2 , run) }
																					
														TRACE: { |;| (:pid_99 , ${ 
	newfresh inst::Trickle.Node.z param::Trickle.Node.z_1409 }) (:pid_104 , ${ input 
	inst::Trickle.Node.ControlMsg [ 1 , 1 ] ${ + param::Trickle.Node.z_132 
	param::Trickle.Node.z_2 param::Trickle.Node.z_32 param::Trickle.Node.z_422 
	param::Trickle.Node.z_447 param::Trickle.Node.z_762 param::Trickle.Node.z_792 
	param::Trickle.Node.z_882 } } @ (z_1329 + z_1409 + z_64)) (:pid_104 , ${ 
	newfresh inst::Trickle.Node.ControlProcess.t 
	param::Trickle.Node.ControlProcess.t_447 }) }
																																		PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + 
	z_792 + z_882) == t_68) && (z_1329 == t_42) && (z_240 == t_96) && (z_595 == 
	t_434) && (z_90 == t_5) && ((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241)
	 && ((z_1329 + z_1409) < 4) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 
	< 4) && (t_415 < 4) && (t_42 < 4) && (t_447 < 4) && (t_5 < 4) && (t_65 < 4) && 
	(t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 
	< 4) && (t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_96 < 4) && (z_1083 < 
	t_653) && (z_116 < t_10) && (z_1268 < t_823) && (z_132 < t_23) && (z_346 < t_220)
	 && (z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && 
	(0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + 
	-2)) && (0 <= (t_415 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_447 + -2)) && (0 
	<= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) 
	&& (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= 
	(t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)
	) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + 
	z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 
	+ z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + 
	z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= 
	(z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + 
	z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + 
	z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 
	+ z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903))
	 && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1329 + 
	z_1409 + z_4 + z_64)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + 
	z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + 
	z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && ((z_150 + z_90) > t_5) && 
	(z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && (z_1027 > 0) && (z_1083 > 0) && (z_11 
	> 0) && (z_116 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_132 > 0) && (z_1329 > 
	0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && 
	(z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 
	0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_64 > 0) && (z_651 > 0) && 
	(z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																																		DATA{
																																			:pid_2:uncoveredExit = 1;
																																			:pid_99:mydp_run[0] = true;
																																			:pid_99:mydp_run[1] = true;
																																			:pid_99:node_time = (z_1329 + z_1409 + z_64);
																																			:pid_99:z = z_1409;
																																			:pid_99:localTime = (z_1329 + z_1409 + z_4 + z_64);
																																			:pid_99:seq_buff[0] = 1;
																																			:pid_99:seq_buff[1] = 1;
																																			:pid_99:localPC = ((z_1329 == t_42) && ((z_1329 + z_1409) < 4) && (t_42 < 4) && (t_447 < 4) && (0 <= (t_42 + -2)) && (0 <= (t_447 + -2)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1329 + z_1409 + z_4 + z_64)) && (z_1329 > 0) && (z_4 > 0) && (z_64 > 0));
																																			:pid_99:timeEmit = (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																																			:pid_100:e = 0;
																																			:pid_100:c = 0;
																																			:pid_100:i = 2;
																																			:pid_100:t = t_447;
																																			:pid_100:consistent = false;
																																			:pid_100:cl = 0;
																																			:pid_106:cl = (z_1329 + z_1409 + z_64);
																																			:pid_111:cl = (z_1329 + z_1409 + z_64);
																																		}
																																		BUFFER{
																																			:pid_99:bufferNode:<FIFO>#0{
																																				:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																																				:pid_65:DataMsg1([ 1 , 1 , 0 ] , (z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																																			}
																																		}
																																		EC:<Id:3422;Ev:299;H:34;W:3111>{ SC: ( pid_25:o#21 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
															EXE: { |;| (:pid_99 , 
	run) (:pid_100 , run) (:pid_103 , run) (:pid_103 , cp_sendCM) (:pid_2 , run) 
	(:pid_24 , run) (:pid_24 , n5_out_CM) }
																					
															TRACE: { |;| (:pid_99 , 
	${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1419 }) (:pid_103 , ${ 
	output inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + param::Trickle.Node.z_1329 
	param::Trickle.Node.z_1409 param::Trickle.Node.z_1419 param::Trickle.Node.z_4 
	param::Trickle.Node.z_64 } } @ (z_1329 + z_1409 + z_1419 + z_64)) }
																																			/*FLAGS{ COVERAGE-ELEMENT }*/
																																			INFO{
																																				<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#23->run::pid_25:Trickle.Observer.o#21->prot::Trickle.Observer.o#21" as trace="tpid#23->run::pid_25:Trickle.Observer.o#21->prot::Trickle.Observer.o#21">
																																			}
																																			PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + 
	z_792 + z_882) == t_68) && (z_1329 == t_42) && (z_1419 == t_447) && (z_240 == 
	t_96) && (z_595 == t_434) && (z_90 == t_5) && ((z_1003 + z_1083 + z_1248 + 
	z_1268 + z_1333) < t_241) && ((z_1329 + z_1409) < 4) && (t_10 < 4) && (t_23 < 4) 
	&& (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_42 < 4) && (t_447 < 4) && (t_5 
	< 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && 
	(t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_96 
	< 4) && (z_1083 < t_653) && (z_116 < t_10) && (z_1268 < t_823) && (z_132 < t_23) 
	&& (z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && 
	(z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2))
	 && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_42 + -2)) && (0 <= 
	(t_447 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) 
	&& (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= 
	(t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)
	) && (0 <= (t_823 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + 
	z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 
	+ z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 
	+ z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + 
	z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) 
	&& ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + 
	z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 
	+ z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + 
	z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + 
	z_792 + z_882) <= (z_1329 + z_1409 + z_4 + z_64)) && ((z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + 
	z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903))
	 && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && (z_1027 
	> 0) && (z_1083 > 0) && (z_11 > 0) && (z_116 > 0) && (z_1248 > 0) && (z_1268 > 0)
	 && (z_132 > 0) && (z_1329 > 0) && (z_1409 > 0) && (z_150 > 0) && (z_185 > 0) && 
	(z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0)
	 && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 
	> 0) && (z_64 > 0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) 
	&& (z_90 > 0) && (z_903 > 0))
																																			DATA{
																																				:pid_2:uncoveredExit = 0;
																																				:pid_99:node_time = (z_1329 + z_1409 + z_1419 + z_64);
																																				:pid_99:z = z_1419;
																																				:pid_99:localTime = (z_1329 + z_1409 + z_1419 + z_4 + z_64);
																																				:pid_99:localPC = ((z_1329 == t_42) && (z_1419 == t_447) && ((z_1329 + z_1409) < 4) && (t_42 < 4) && (t_447 < 4) && (0 <= (t_42 + -2)) && (0 <= (t_447 + -2)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1329 + z_1409 + z_4 + z_64)) && (z_1329 > 0) && (z_1409 > 0) && (z_4 > 0) && (z_64 > 0));
																																				:pid_100:cl = z_1419;
																																				:pid_106:cl = (z_1329 + z_1409 + z_1419 + z_64);
																																				:pid_111:cl = (z_1329 + z_1409 + z_1419 + z_64);
																																			}
																																			BUFFER{
																																				:pid_82:bufferNode:<FIFO>#0{
																																					:pid_99:ControlMsg([ 0 , 0 ] , (z_1329 + z_1409 + z_1419 + z_4 + z_64));
																																				}
																																			}
																																			EC:<Id:3650;Ev:316;H:35;W:3111>{ SC: ( pid_25:o#21 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
																EXE: { |;| (:pid_99 
	, run) (:pid_100 , run) (:pid_104 , run) (:pid_104 , cp_resetTau) (:pid_2 , run) 
	}
																					
																TRACE: { |;| 
	(:pid_99 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1494 }) 
	(:pid_104 , ${ newfresh inst::Trickle.Node.ControlProcess.t 
	param::Trickle.Node.ControlProcess.t_496 }) }
																																				PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_1419 + z_1494) == 4) && ((z_150 + z_90) == 4) && 
	((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (z_1329 == t_42) && (z_1419 
	== t_447) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && ((z_1003 + 
	z_1083 + z_1248 + z_1268 + z_1333) < t_241) && ((z_1329 + z_1409) < 4) && (t_10 
	< 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_42 < 4) && 
	(t_447 < 4) && (t_496 < 8) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8)
	 && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && 
	(t_653 < 4) && (t_823 < 4) && (t_96 < 4) && (z_1083 < t_653) && (z_116 < t_10) 
	&& (z_1268 < t_823) && (z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && 
	(z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 
	<= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + 
	-2)) && (0 <= (t_42 + -2)) && (0 <= (t_447 + -2)) && (0 <= (t_496 + -4)) && (0 
	<= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) 
	&& (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= 
	(t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)
	) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + 
	z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 
	+ z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + 
	z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= 
	(z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + 
	z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + 
	z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 
	+ z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903))
	 && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1329 + 
	z_1409 + z_4 + z_64)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + 
	z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + 
	z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && ((z_1419 + z_1494) > t_447) 
	&& ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && (z_1027 > 
	0) && (z_1083 > 0) && (z_11 > 0) && (z_116 > 0) && (z_1248 > 0) && (z_1268 > 0) 
	&& (z_132 > 0) && (z_1329 > 0) && (z_1409 > 0) && (z_1419 > 0) && (z_150 > 0) && 
	(z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0)
	 && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 
	> 0) && (z_535 > 0) && (z_64 > 0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) 
	&& (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																																				DATA{
																																					:pid_2:uncoveredExit = 1;
																																					:pid_99:node_time = (z_1329 + z_1409 + z_1419 + z_1494 + z_64);
																																					:pid_99:z = z_1494;
																																					:pid_99:localTime = (z_1329 + z_1409 + z_1419 + z_1494 + z_4 + z_64);
																																					:pid_99:localPC = (((z_1419 + z_1494) == 4) && (z_1329 == t_42) && (z_1419 == t_447) && ((z_1329 + z_1409) < 4) && (t_42 < 4) && (t_447 < 4) && (t_496 < 8) && (0 <= (t_42 + -2)) && (0 <= (t_447 + -2)) && (0 <= (t_496 + -4)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1329 + z_1409 + z_4 + z_64)) && ((z_1419 + z_1494) > t_447) && (z_1329 > 0) && (z_1409 > 0) && (z_1419 > 0) && (z_4 > 0) && (z_64 > 0));
																																					:pid_100:e = 1;
																																					:pid_100:tau = 8;
																																					:pid_100:c = 0;
																																					:pid_100:t = t_496;
																																					:pid_100:cl = 0;
																																					:pid_106:cl = (z_1329 + z_1409 + z_1419 + z_1494 + z_64);
																																					:pid_111:cl = (z_1329 + z_1409 + z_1419 + z_1494 + z_64);
																																				}
																																				EC:<Id:3927;Ev:0;H:36;W:3611>{ SC: ( pid_26:o#22 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
																	EXE: { |;| 
	(:pid_82 , run) (:pid_83 , run) (:pid_86 , run) (:pid_86 , 
	cp1_receiveCM_inconsistent) (:pid_2 , run) (:pid_25 , run) (:pid_25 , n4_in_CM) }
																					
																	TRACE: { |;| 
	(:pid_82 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1578 }) 
	(:pid_86 , ${ input inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + 
	param::Trickle.Node.z_1329 param::Trickle.Node.z_1409 param::Trickle.Node.z_1419 
	param::Trickle.Node.z_4 param::Trickle.Node.z_64 } } @ (z_1003 + z_1083 + z_1248 
	+ z_1268 + z_1333 + z_1578 + z_53 + z_903)) (:pid_86 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_557 }) }
																																					/*FLAGS{ COVERAGE-ELEMENT }*/
																																					INFO{
																																						<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22" as trace="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22">
																																					}
																																					PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_1419 + z_1494) == 4) && ((z_150 + z_90) == 4) && 
	((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (z_1329 == t_42) && (z_1419 
	== t_447) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && ((z_1003 + 
	z_1083 + z_1248 + z_1268 + z_1333) < t_241) && ((z_1329 + z_1409) < 4) && (t_10 
	< 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_42 < 4) && 
	(t_447 < 4) && (t_496 < 8) && (t_5 < 4) && (t_557 < 4) && (t_65 < 4) && (t_68 < 
	4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && 
	(t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_96 < 4) && (z_1083 < t_653) && 
	(z_116 < t_10) && (z_1268 < t_823) && (z_132 < t_23) && (z_1578 < t_415) && 
	(z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && 
	(z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2))
	 && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_42 + -2)) && (0 <= 
	(t_447 + -2)) && (0 <= (t_496 + -4)) && (0 <= (t_5 + -2)) && (0 <= (t_557 + -2)) 
	&& (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= 
	(t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)
	) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && (0 <= 
	(t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= 
	(z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + 
	z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + 
	z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + 
	z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 
	+ z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) 
	&& ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + z_132 + 
	z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 
	+ z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 
	+ z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + 
	z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1329 + z_1409 + z_4 + 
	z_64)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 
	+ z_53 + z_903)) && ((z_1329 + z_1409 + z_1419 + z_4 + z_64) <= (z_1003 + z_1083 
	+ z_1248 + z_1268 + z_1333 + z_1578 + z_3 + z_53 + z_903)) && ((z_1329 + z_4 + 
	z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && 
	((z_1419 + z_1494) > t_447) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) 
	&& (z_1003 > 0) && (z_1027 > 0) && (z_1083 > 0) && (z_11 > 0) && (z_116 > 0) && 
	(z_1248 > 0) && (z_1268 > 0) && (z_132 > 0) && (z_1329 > 0) && (z_1333 > 0) && 
	(z_1409 > 0) && (z_1419 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && 
	(z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0)
	 && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && 
	(z_64 > 0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 
	> 0) && (z_903 > 0))
																																					DATA{
																																						:pid_2:uncoveredExit = 0;
																																						:pid_82:node_time = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1578 + z_53 + z_903);
																																						:pid_82:z = z_1578;
																																						:pid_82:localTime = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1578 + z_3 + z_53 + z_903);
																																						:pid_82:localPC = (((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241) && (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_557 < 4) && (t_653 < 4) && (t_823 < 4) && (z_1083 < t_653) && (z_1268 < t_823) && (z_1578 < t_415) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_557 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + z_1409 + z_1419 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1578 + z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_1083 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_1333 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																																						:pid_82:timeEmit = (z_1329 + z_1409 + z_1419 + z_4 + z_64);
																																						:pid_83:i = 2;
																																						:pid_83:t = t_557;
																																						:pid_89:cl = (z_1268 + z_1333 + z_1578);
																																						:pid_94:cl = (z_1083 + z_1248 + z_1268 + z_1333 + z_1578);
																																					}
																																					BUFFER{
																																						:pid_82:bufferNode:<FIFO>#0{ }
																																					}
																																				}
																																			}
																																			EC:<Id:3651;Ev:317;H:35;W:3352>{ SC: ( pid_25:o#21 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_108:dp1 , pid_112:dp0 ) )
																					
																EXE: { |;| (:pid_99 
	, run) (:pid_106 , run) (:pid_107 , run) (:pid_107 , dp_init) (:pid_2 , run) }
																					
																TRACE: { |;| 
	(:pid_99 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1494 }) 
	(:pid_107 , ${ newfresh inst::Trickle.Node.DataProcess.t 
	param::Trickle.Node.DataProcess.t_990 }) }
																																				PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + 
	z_792 + z_882) == t_68) && (z_1329 == t_42) && (z_1419 == t_447) && (z_240 == 
	t_96) && (z_595 == t_434) && (z_90 == t_5) && ((z_1003 + z_1083 + z_1248 + 
	z_1268 + z_1333) < t_241) && ((z_1329 + z_1409) < 4) && (t_10 < 4) && (t_23 < 4) 
	&& (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_42 < 4) && (t_447 < 4) && (t_5 
	< 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && 
	(t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_96 
	< 4) && (t_990 < 4) && (z_1083 < t_653) && (z_116 < t_10) && (z_1268 < t_823) && 
	(z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && 
	(z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && 
	(0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_42 
	+ -2)) && (0 <= (t_447 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 
	<= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + 
	-2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 
	<= (t_653 + -2)) && (0 <= (t_823 + -2)) && (0 <= (t_96 + -2)) && (0 <= (t_990 + 
	-2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + 
	z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + 
	z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + 
	z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + 
	z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 
	+ z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 
	+ z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + 
	z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + 
	z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + 
	z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1329 + z_1409 + z_4 + z_64)) 
	&& ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 
	+ z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + 
	z_1333 + z_3 + z_53 + z_903)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0)
	 && (z_1003 > 0) && (z_1027 > 0) && (z_1083 > 0) && (z_11 > 0) && (z_116 > 0) && 
	(z_1248 > 0) && (z_1268 > 0) && (z_132 > 0) && (z_1329 > 0) && (z_1409 > 0) && 
	(z_1419 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 
	0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && 
	(z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_64 > 0) && (z_651 > 
	0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																																				DATA{
																																					:pid_2:uncoveredExit = 1;
																																					:pid_99:node_time = (z_1329 + z_1409 + z_1419 + z_1494 + z_64);
																																					:pid_99:z = z_1494;
																																					:pid_99:localTime = (z_1329 + z_1409 + z_1419 + z_1494 + z_4 + z_64);
																																					:pid_99:localPC = ((z_1329 == t_42) && (z_1419 == t_447) && ((z_1329 + z_1409) < 4) && (t_42 < 4) && (t_447 < 4) && (t_990 < 4) && (0 <= (t_42 + -2)) && (0 <= (t_447 + -2)) && (0 <= (t_990 + -2)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1329 + z_1409 + z_4 + z_64)) && (z_1329 > 0) && (z_1409 > 0) && (z_1419 > 0) && (z_4 > 0) && (z_64 > 0));
																																					:pid_100:cl = (z_1419 + z_1494);
																																					:pid_106:e = 0;
																																					:pid_106:tau = 4;
																																					:pid_106:tau_l = 4;
																																					:pid_106:tau_h = 8;
																																					:pid_106:k = 2;
																																					:pid_106:c = 0;
																																					:pid_106:t = t_990;
																																					:pid_106:cl = 0;
																																					:pid_111:cl = (z_1329 + z_1409 + z_1419 + z_1494 + z_64);
																																				}
																																				EC:<Id:3944;Ev:0;H:36;W:3627>{ SC: ( pid_26:o#22 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_108:dp1 , pid_112:dp0 ) )
																					
																	EXE: { |;| 
	(:pid_82 , run) (:pid_83 , run) (:pid_86 , run) (:pid_86 , 
	cp1_receiveCM_inconsistent) (:pid_2 , run) (:pid_25 , run) (:pid_25 , n4_in_CM) }
																					
																	TRACE: { |;| 
	(:pid_82 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1583 }) 
	(:pid_86 , ${ input inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + 
	param::Trickle.Node.z_1329 param::Trickle.Node.z_1409 param::Trickle.Node.z_1419 
	param::Trickle.Node.z_4 param::Trickle.Node.z_64 } } @ (z_1003 + z_1083 + z_1248 
	+ z_1268 + z_1333 + z_1583 + z_53 + z_903)) (:pid_86 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_559 }) }
																																					/*FLAGS{ COVERAGE-ELEMENT }*/
																																					INFO{
																																						<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22" as trace="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22">
																																					}
																																					PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + 
	z_792 + z_882) == t_68) && (z_1329 == t_42) && (z_1419 == t_447) && (z_240 == 
	t_96) && (z_595 == t_434) && (z_90 == t_5) && ((z_1003 + z_1083 + z_1248 + 
	z_1268 + z_1333) < t_241) && ((z_1329 + z_1409) < 4) && (t_10 < 4) && (t_23 < 4) 
	&& (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_42 < 4) && (t_447 < 4) && (t_5 
	< 4) && (t_559 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && 
	(t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_653 < 4) && 
	(t_823 < 4) && (t_96 < 4) && (t_990 < 4) && (z_1083 < t_653) && (z_116 < t_10) 
	&& (z_1268 < t_823) && (z_132 < t_23) && (z_1583 < t_415) && (z_346 < t_220) && 
	(z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= 
	(t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) 
	&& (0 <= (t_415 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_447 + -2)) && (0 <= 
	(t_5 + -2)) && (0 <= (t_559 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) 
	&& (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= 
	(t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)
	) && (0 <= (t_823 + -2)) && (0 <= (t_96 + -2)) && (0 <= (t_990 + -2)) && ((z_0 + 
	z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + 
	z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + 
	z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 
	+ z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) 
	<= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + 
	z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + 
	z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 
	+ z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1329 + z_1409 + z_4 + z_64)) && 
	((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + 
	z_903)) && ((z_1329 + z_1409 + z_1419 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 
	+ z_1268 + z_1333 + z_1583 + z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= 
	(z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && ((z_150 + 
	z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && (z_1027 > 0) && 
	(z_1083 > 0) && (z_11 > 0) && (z_116 > 0) && (z_1248 > 0) && (z_1268 > 0) && 
	(z_132 > 0) && (z_1329 > 0) && (z_1333 > 0) && (z_1409 > 0) && (z_1419 > 0) && 
	(z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 
	0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && 
	(z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_64 > 0) && (z_651 > 0) && (z_762 > 
	0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																																					DATA{
																																						:pid_2:uncoveredExit = 0;
																																						:pid_82:node_time = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1583 + z_53 + z_903);
																																						:pid_82:z = z_1583;
																																						:pid_82:localTime = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1583 + z_3 + z_53 + z_903);
																																						:pid_82:localPC = (((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241) && (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_559 < 4) && (t_653 < 4) && (t_823 < 4) && (z_1083 < t_653) && (z_1268 < t_823) && (z_1583 < t_415) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_559 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + z_1409 + z_1419 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1583 + z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_1083 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_1333 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																																						:pid_82:timeEmit = (z_1329 + z_1409 + z_1419 + z_4 + z_64);
																																						:pid_83:i = 2;
																																						:pid_83:t = t_559;
																																						:pid_89:cl = (z_1268 + z_1333 + z_1583);
																																						:pid_94:cl = (z_1083 + z_1248 + z_1268 + z_1333 + z_1583);
																																					}
																																					BUFFER{
																																						:pid_82:bufferNode:<FIFO>#0{ }
																																					}
																																				}
																																			}
																																			EC:<Id:3652;Ev:318;H:35;W:3353>{ SC: ( pid_25:o#21 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_113:dp1 ) )
																					
																EXE: { |;| (:pid_99 
	, run) (:pid_111 , run) (:pid_112 , run) (:pid_112 , dp_init) (:pid_2 , run) }
																					
																TRACE: { |;| 
	(:pid_99 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1494 }) 
	(:pid_112 , ${ newfresh inst::Trickle.Node.DataProcess.t 
	param::Trickle.Node.DataProcess.t_991 }) }
																																				PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + 
	z_792 + z_882) == t_68) && (z_1329 == t_42) && (z_1419 == t_447) && (z_240 == 
	t_96) && (z_595 == t_434) && (z_90 == t_5) && ((z_1003 + z_1083 + z_1248 + 
	z_1268 + z_1333) < t_241) && ((z_1329 + z_1409) < 4) && (t_10 < 4) && (t_23 < 4) 
	&& (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_42 < 4) && (t_447 < 4) && (t_5 
	< 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && 
	(t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_96 
	< 4) && (t_991 < 4) && (z_1083 < t_653) && (z_116 < t_10) && (z_1268 < t_823) && 
	(z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && 
	(z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && 
	(0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_42 
	+ -2)) && (0 <= (t_447 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 
	<= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + 
	-2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 
	<= (t_653 + -2)) && (0 <= (t_823 + -2)) && (0 <= (t_96 + -2)) && (0 <= (t_991 + 
	-2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + 
	z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + 
	z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + 
	z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + 
	z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 
	+ z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 
	+ z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + 
	z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + 
	z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + 
	z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1329 + z_1409 + z_4 + z_64)) 
	&& ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 
	+ z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + 
	z_1333 + z_3 + z_53 + z_903)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0)
	 && (z_1003 > 0) && (z_1027 > 0) && (z_1083 > 0) && (z_11 > 0) && (z_116 > 0) && 
	(z_1248 > 0) && (z_1268 > 0) && (z_132 > 0) && (z_1329 > 0) && (z_1409 > 0) && 
	(z_1419 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 
	0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && 
	(z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_64 > 0) && (z_651 > 
	0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																																				DATA{
																																					:pid_2:uncoveredExit = 1;
																																					:pid_99:node_time = (z_1329 + z_1409 + z_1419 + z_1494 + z_64);
																																					:pid_99:z = z_1494;
																																					:pid_99:localTime = (z_1329 + z_1409 + z_1419 + z_1494 + z_4 + z_64);
																																					:pid_99:localPC = ((z_1329 == t_42) && (z_1419 == t_447) && ((z_1329 + z_1409) < 4) && (t_42 < 4) && (t_447 < 4) && (t_991 < 4) && (0 <= (t_42 + -2)) && (0 <= (t_447 + -2)) && (0 <= (t_991 + -2)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1329 + z_1409 + z_4 + z_64)) && (z_1329 > 0) && (z_1409 > 0) && (z_1419 > 0) && (z_4 > 0) && (z_64 > 0));
																																					:pid_100:cl = (z_1419 + z_1494);
																																					:pid_106:cl = (z_1329 + z_1409 + z_1419 + z_1494 + z_64);
																																					:pid_111:e = 0;
																																					:pid_111:tau = 4;
																																					:pid_111:tau_l = 4;
																																					:pid_111:tau_h = 8;
																																					:pid_111:k = 2;
																																					:pid_111:c = 0;
																																					:pid_111:t = t_991;
																																					:pid_111:cl = 0;
																																				}
																																				EC:<Id:3962;Ev:0;H:36;W:3644>{ SC: ( pid_26:o#22 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_113:dp1 ) )
																					
																	EXE: { |;| 
	(:pid_82 , run) (:pid_83 , run) (:pid_86 , run) (:pid_86 , 
	cp1_receiveCM_inconsistent) (:pid_2 , run) (:pid_25 , run) (:pid_25 , n4_in_CM) }
																					
																	TRACE: { |;| 
	(:pid_82 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1588 }) 
	(:pid_86 , ${ input inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + 
	param::Trickle.Node.z_1329 param::Trickle.Node.z_1409 param::Trickle.Node.z_1419 
	param::Trickle.Node.z_4 param::Trickle.Node.z_64 } } @ (z_1003 + z_1083 + z_1248 
	+ z_1268 + z_1333 + z_1588 + z_53 + z_903)) (:pid_86 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_562 }) }
																																					/*FLAGS{ COVERAGE-ELEMENT }*/
																																					INFO{
																																						<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22" as trace="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22">
																																					}
																																					PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + 
	z_792 + z_882) == t_68) && (z_1329 == t_42) && (z_1419 == t_447) && (z_240 == 
	t_96) && (z_595 == t_434) && (z_90 == t_5) && ((z_1003 + z_1083 + z_1248 + 
	z_1268 + z_1333) < t_241) && ((z_1329 + z_1409) < 4) && (t_10 < 4) && (t_23 < 4) 
	&& (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_42 < 4) && (t_447 < 4) && (t_5 
	< 4) && (t_562 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && 
	(t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_653 < 4) && 
	(t_823 < 4) && (t_96 < 4) && (t_991 < 4) && (z_1083 < t_653) && (z_116 < t_10) 
	&& (z_1268 < t_823) && (z_132 < t_23) && (z_1588 < t_415) && (z_346 < t_220) && 
	(z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= 
	(t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) 
	&& (0 <= (t_415 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_447 + -2)) && (0 <= 
	(t_5 + -2)) && (0 <= (t_562 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) 
	&& (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= 
	(t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)
	) && (0 <= (t_823 + -2)) && (0 <= (t_96 + -2)) && (0 <= (t_991 + -2)) && ((z_0 + 
	z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + 
	z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + 
	z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 
	+ z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) 
	<= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + 
	z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + 
	z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 
	+ z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1329 + z_1409 + z_4 + z_64)) && 
	((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + 
	z_903)) && ((z_1329 + z_1409 + z_1419 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 
	+ z_1268 + z_1333 + z_1588 + z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= 
	(z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && ((z_150 + 
	z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && (z_1027 > 0) && 
	(z_1083 > 0) && (z_11 > 0) && (z_116 > 0) && (z_1248 > 0) && (z_1268 > 0) && 
	(z_132 > 0) && (z_1329 > 0) && (z_1333 > 0) && (z_1409 > 0) && (z_1419 > 0) && 
	(z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 
	0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && 
	(z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_64 > 0) && (z_651 > 0) && (z_762 > 
	0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																																					DATA{
																																						:pid_2:uncoveredExit = 0;
																																						:pid_82:node_time = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1588 + z_53 + z_903);
																																						:pid_82:z = z_1588;
																																						:pid_82:localTime = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1588 + z_3 + z_53 + z_903);
																																						:pid_82:localPC = (((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241) && (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_562 < 4) && (t_653 < 4) && (t_823 < 4) && (z_1083 < t_653) && (z_1268 < t_823) && (z_1588 < t_415) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_562 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + z_1409 + z_1419 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1588 + z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_1083 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_1333 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																																						:pid_82:timeEmit = (z_1329 + z_1409 + z_1419 + z_4 + z_64);
																																						:pid_83:i = 2;
																																						:pid_83:t = t_562;
																																						:pid_89:cl = (z_1268 + z_1333 + z_1588);
																																						:pid_94:cl = (z_1083 + z_1248 + z_1268 + z_1333 + z_1588);
																																					}
																																					BUFFER{
																																						:pid_82:bufferNode:<FIFO>#0{ }
																																					}
																																				}
																																			}
																																			EC:<Id:3653;Ev:319;H:35;W:3354>{ SC: ( pid_25:o#21 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_87:cp2 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
																EXE: { |;| (:pid_82 
	, run) (:pid_83 , run) (:pid_86 , run) (:pid_86 , cp_sendCM) (:pid_2 , run) }
																					
																TRACE: { |;| 
	(:pid_82 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1493 }) 
	(:pid_86 , ${ output inst::Trickle.Node.ControlMsg [ 1 , 1 ] ${ + 
	param::Trickle.Node.z_1003 param::Trickle.Node.z_1083 param::Trickle.Node.z_1248 
	param::Trickle.Node.z_1268 param::Trickle.Node.z_1333 param::Trickle.Node.z_1493 
	param::Trickle.Node.z_3 param::Trickle.Node.z_53 param::Trickle.Node.z_903 } } @ 
	(z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1493 + z_53 + z_903)) }
																																				PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + 
	z_792 + z_882) == t_68) && (z_1329 == t_42) && (z_1419 == t_447) && (z_1493 == 
	t_415) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && ((z_1003 + 
	z_1083 + z_1248 + z_1268 + z_1333) < t_241) && ((z_1329 + z_1409) < 4) && (t_10 
	< 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_42 < 4) && 
	(t_447 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4)
	 && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_653 < 4) && 
	(t_823 < 4) && (t_96 < 4) && (z_1083 < t_653) && (z_116 < t_10) && (z_1268 < 
	t_823) && (z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513)
	 && (z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2))
	 && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= 
	(t_42 + -2)) && (0 <= (t_447 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) 
	&& (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= 
	(t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)
	) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + 
	z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + 
	z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + 
	z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 
	+ z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) 
	<= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + 
	z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + 
	z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 
	+ z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1329 + z_1409 + z_4 + z_64)) && 
	((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + 
	z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 
	+ z_3 + z_53 + z_903)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && 
	(z_1003 > 0) && (z_1027 > 0) && (z_1083 > 0) && (z_11 > 0) && (z_116 > 0) && 
	(z_1248 > 0) && (z_1268 > 0) && (z_132 > 0) && (z_1329 > 0) && (z_1333 > 0) && 
	(z_1409 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 
	0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && 
	(z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_64 > 0) && (z_651 > 
	0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																																				DATA{
																																					:pid_2:uncoveredExit = 1;
																																					:pid_82:node_time = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1493 + z_53 + z_903);
																																					:pid_82:z = z_1493;
																																					:pid_82:localTime = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1493 + z_3 + z_53 + z_903);
																																					:pid_82:localPC = ((z_1493 == t_415) && ((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241) && (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_653 < 4) && (t_823 < 4) && (z_1083 < t_653) && (z_1268 < t_823) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_1083 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_1333 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																																					:pid_83:cl = z_1493;
																																					:pid_89:cl = (z_1268 + z_1333 + z_1493);
																																					:pid_94:cl = (z_1083 + z_1248 + z_1268 + z_1333 + z_1493);
																																				}
																																				BUFFER{
																																					:pid_48:bufferNode:<FIFO>#0{
																																						:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																																						:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																																						:pid_65:DataMsg1([ 1 , 1 , 0 ] , (z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																																						:pid_82:ControlMsg([ 1 , 1 ] , (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1493 + z_3 + z_53 + z_903));
																																					}
																																				}
																																				EC:<Id:3979;Ev:0;H:36;W:3660>{ SC: ( pid_26:o#22 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
																	EXE: { |;| 
	(:pid_82 , run) (:pid_83 , run) (:pid_87 , run) (:pid_87 , 
	cp2_receiveCM_inconsistent) (:pid_2 , run) (:pid_25 , run) (:pid_25 , n4_in_CM) }
																					
																	TRACE: { |;| 
	(:pid_82 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1593 }) 
	(:pid_87 , ${ input inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + 
	param::Trickle.Node.z_1329 param::Trickle.Node.z_1409 param::Trickle.Node.z_1419 
	param::Trickle.Node.z_4 param::Trickle.Node.z_64 } } @ (z_1003 + z_1083 + z_1248 
	+ z_1268 + z_1333 + z_1493 + z_1593 + z_53 + z_903)) (:pid_87 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_566 }) }
																																					/*FLAGS{ COVERAGE-ELEMENT }*/
																																					INFO{
																																						<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22" as trace="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22">
																																					}
																																					PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + 
	z_792 + z_882) == t_68) && (z_1329 == t_42) && (z_1419 == t_447) && (z_1493 == 
	t_415) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && ((z_1003 + 
	z_1083 + z_1248 + z_1268 + z_1333) < t_241) && ((z_1329 + z_1409) < 4) && 
	((z_1493 + z_1593) < 4) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) 
	&& (t_415 < 4) && (t_42 < 4) && (t_447 < 4) && (t_5 < 4) && (t_566 < 4) && (t_65 
	< 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && 
	(t_513 < 4) && (t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_96 < 4) && 
	(z_1083 < t_653) && (z_116 < t_10) && (z_1268 < t_823) && (z_132 < t_23) && 
	(z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && 
	(z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2))
	 && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_42 + -2)) && (0 <= 
	(t_447 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_566 + -2)) && (0 <= (t_65 + -2)) 
	&& (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= 
	(t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)
	) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + 
	z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + 
	z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + 
	z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 
	+ z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) 
	<= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + 
	z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + 
	z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 
	+ z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1329 + z_1409 + z_4 + z_64)) && 
	((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + 
	z_903)) && ((z_1329 + z_1409 + z_1419 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 
	+ z_1268 + z_1333 + z_1493 + z_1593 + z_3 + z_53 + z_903)) && ((z_1329 + z_4 + 
	z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && 
	((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && (z_1027 > 0) 
	&& (z_1083 > 0) && (z_11 > 0) && (z_116 > 0) && (z_1248 > 0) && (z_1268 > 0) && 
	(z_132 > 0) && (z_1329 > 0) && (z_1333 > 0) && (z_1409 > 0) && (z_1493 > 0) && 
	(z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 
	0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && 
	(z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_64 > 0) && (z_651 > 0) && (z_762 > 
	0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																																					DATA{
																																						:pid_2:uncoveredExit = 0;
																																						:pid_82:node_time = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1493 + z_1593 + z_53 + z_903);
																																						:pid_82:z = z_1593;
																																						:pid_82:localTime = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1493 + z_1593 + z_3 + z_53 + z_903);
																																						:pid_82:localPC = ((z_1493 == t_415) && ((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241) && ((z_1493 + z_1593) < 4) && (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_566 < 4) && (t_653 < 4) && (t_823 < 4) && (z_1083 < t_653) && (z_1268 < t_823) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_566 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + z_1409 + z_1419 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1493 + z_1593 + z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_1083 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_1333 > 0) && (z_1493 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																																						:pid_82:timeEmit = (z_1329 + z_1409 + z_1419 + z_4 + z_64);
																																						:pid_83:e = 0;
																																						:pid_83:c = 0;
																																						:pid_83:i = 2;
																																						:pid_83:t = t_566;
																																						:pid_83:cl = 0;
																																						:pid_89:cl = (z_1268 + z_1333 + z_1493 + z_1593);
																																						:pid_94:cl = (z_1083 + z_1248 + z_1268 + z_1333 + z_1493 + z_1593);
																																					}
																																					BUFFER{
																																						:pid_82:bufferNode:<FIFO>#0{ }
																																					}
																																				}
																																			}
																																			EC:<Id:3654;Ev:320;H:35;W:3355>{ SC: ( pid_26:o#22 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
																EXE: { |;| (:pid_82 
	, run) (:pid_83 , run) (:pid_86 , run) (:pid_86 , cp1_receiveCM_inconsistent) 
	(:pid_2 , run) (:pid_25 , run) (:pid_25 , n4_in_CM) }
																					
																TRACE: { |;| 
	(:pid_82 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1493 }) 
	(:pid_86 , ${ input inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + 
	param::Trickle.Node.z_1329 param::Trickle.Node.z_1409 param::Trickle.Node.z_1419 
	param::Trickle.Node.z_4 param::Trickle.Node.z_64 } } @ (z_1003 + z_1083 + z_1248 
	+ z_1268 + z_1333 + z_1493 + z_53 + z_903)) (:pid_86 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_495 }) }
																																				/*FLAGS{ COVERAGE-ELEMENT }*/
																																				INFO{
																																					<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22" as trace="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22">
																																				}
																																				PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + 
	z_792 + z_882) == t_68) && (z_1329 == t_42) && (z_1419 == t_447) && (z_240 == 
	t_96) && (z_595 == t_434) && (z_90 == t_5) && ((z_1003 + z_1083 + z_1248 + 
	z_1268 + z_1333) < t_241) && ((z_1329 + z_1409) < 4) && (t_10 < 4) && (t_23 < 4) 
	&& (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_42 < 4) && (t_447 < 4) && 
	(t_495 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4)
	 && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_653 < 4) && 
	(t_823 < 4) && (t_96 < 4) && (z_1083 < t_653) && (z_116 < t_10) && (z_1268 < 
	t_823) && (z_132 < t_23) && (z_1493 < t_415) && (z_346 < t_220) && (z_447 < 
	t_338) && (z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + 
	-2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= 
	(t_415 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_447 + -2)) && (0 <= (t_495 + -2))
	 && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 
	+ -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && 
	(0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= 
	(t_823 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + 
	z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= 
	(z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && 
	((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) 
	<= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 
	+ z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 
	+ z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882)
	 <= (z_1329 + z_1409 + z_4 + z_64)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + 
	z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + z_1409 + z_1419 + 
	z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1493 + z_3 + z_53 
	+ z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + 
	z_1333 + z_3 + z_53 + z_903)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0)
	 && (z_1003 > 0) && (z_1027 > 0) && (z_1083 > 0) && (z_11 > 0) && (z_116 > 0) && 
	(z_1248 > 0) && (z_1268 > 0) && (z_132 > 0) && (z_1329 > 0) && (z_1333 > 0) && 
	(z_1409 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 
	0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && 
	(z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_64 > 0) && (z_651 > 
	0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																																				DATA{
																																					:pid_2:uncoveredExit = 0;
																																					:pid_82:node_time = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1493 + z_53 + z_903);
																																					:pid_82:z = z_1493;
																																					:pid_82:localTime = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1493 + z_3 + z_53 + z_903);
																																					:pid_82:localPC = (((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241) && (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_495 < 4) && (t_653 < 4) && (t_823 < 4) && (z_1083 < t_653) && (z_1268 < t_823) && (z_1493 < t_415) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_495 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + z_1409 + z_1419 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1493 + z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_1083 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_1333 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																																					:pid_82:timeEmit = (z_1329 + z_1409 + z_1419 + z_4 + z_64);
																																					:pid_83:i = 2;
																																					:pid_83:t = t_495;
																																					:pid_89:cl = (z_1268 + z_1333 + z_1493);
																																					:pid_94:cl = (z_1083 + z_1248 + z_1268 + z_1333 + z_1493);
																																				}
																																				BUFFER{
																																					:pid_82:bufferNode:<FIFO>#0{ }
																																				}
																																			}
																																			EC:<Id:3655;Ev:321;H:35;W:3356>{ SC: ( pid_25:o#21 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_92:dp2 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
																EXE: { |;| (:pid_82 
	, run) (:pid_89 , run) (:pid_91 , run) (:pid_91 , dp_sendDM) (:pid_2 , run) }
																					
																TRACE: { |;| 
	(:pid_82 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1493 }) 
	(:pid_91 , ${ output inst::Trickle.Node.DataMsg1 [ 1 , 1 , 0 ] ${ + 
	param::Trickle.Node.z_1003 param::Trickle.Node.z_1083 param::Trickle.Node.z_1248 
	param::Trickle.Node.z_1268 param::Trickle.Node.z_1333 param::Trickle.Node.z_1493 
	param::Trickle.Node.z_3 param::Trickle.Node.z_53 param::Trickle.Node.z_903 } } @ 
	(z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1493 + z_53 + z_903)) }
																																				PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_1268 + z_1333 + z_1493) == t_823) && ((z_150 + 
	z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (z_1329 == 
	t_42) && (z_1419 == t_447) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == 
	t_5) && ((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241) && ((z_1329 + 
	z_1409) < 4) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_415 
	< 4) && (t_42 < 4) && (t_447 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && 
	(t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 
	< 4) && (t_653 < 4) && (t_823 < 4) && (t_96 < 4) && (z_1083 < t_653) && (z_116 < 
	t_10) && (z_1268 < t_823) && (z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338)
	 && (z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) 
	&& (0 <= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= 
	(t_415 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_447 + -2)) && (0 <= (t_5 + -2)) 
	&& (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= 
	(t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)
	) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && (0 <= 
	(t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= 
	(z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + 
	z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + 
	z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + 
	z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 
	+ z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) 
	&& ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + z_132 + 
	z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 
	+ z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 
	+ z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + 
	z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1329 + z_1409 + z_4 + 
	z_64)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 
	+ z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 
	+ z_1333 + z_3 + z_53 + z_903)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 
	0) && (z_1003 > 0) && (z_1027 > 0) && (z_1083 > 0) && (z_11 > 0) && (z_116 > 0) 
	&& (z_1248 > 0) && (z_1268 > 0) && (z_132 > 0) && (z_1329 > 0) && (z_1333 > 0) 
	&& (z_1409 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && 
	(z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0)
	 && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_64 > 0) && 
	(z_651 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && (z_903 
	> 0))
																																				DATA{
																																					:pid_2:uncoveredExit = 1;
																																					:pid_82:node_time = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1493 + z_53 + z_903);
																																					:pid_82:z = z_1493;
																																					:pid_82:localTime = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1493 + z_3 + z_53 + z_903);
																																					:pid_82:localPC = (((z_1268 + z_1333 + z_1493) == t_823) && ((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241) && (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_653 < 4) && (t_823 < 4) && (z_1083 < t_653) && (z_1268 < t_823) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_1083 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_1333 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																																					:pid_83:cl = z_1493;
																																					:pid_89:cl = (z_1268 + z_1333 + z_1493);
																																					:pid_94:cl = (z_1083 + z_1248 + z_1268 + z_1333 + z_1493);
																																				}
																																				BUFFER{
																																					:pid_48:bufferNode:<FIFO>#0{
																																						:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																																						:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																																						:pid_65:DataMsg1([ 1 , 1 , 0 ] , (z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																																						:pid_82:DataMsg1([ 1 , 1 , 0 ] , (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1493 + z_3 + z_53 + z_903));
																																					}
																																				}
																																				EC:<Id:4012;Ev:0;H:36;W:3691>{ SC: ( pid_26:o#22 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_92:dp2 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
																	EXE: { |;| 
	(:pid_82 , run) (:pid_83 , run) (:pid_86 , run) (:pid_86 , 
	cp1_receiveCM_inconsistent) (:pid_2 , run) (:pid_25 , run) (:pid_25 , n4_in_CM) }
																					
																	TRACE: { |;| 
	(:pid_82 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1603 }) 
	(:pid_86 , ${ input inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + 
	param::Trickle.Node.z_1329 param::Trickle.Node.z_1409 param::Trickle.Node.z_1419 
	param::Trickle.Node.z_4 param::Trickle.Node.z_64 } } @ (z_1003 + z_1083 + z_1248 
	+ z_1268 + z_1333 + z_1493 + z_1603 + z_53 + z_903)) (:pid_86 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_571 }) }
																																					/*FLAGS{ COVERAGE-ELEMENT }*/
																																					INFO{
																																						<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22" as trace="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22">
																																					}
																																					PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_1268 + z_1333 + z_1493) == t_823) && ((z_150 + 
	z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (z_1329 == 
	t_42) && (z_1419 == t_447) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == 
	t_5) && ((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241) && ((z_1329 + 
	z_1409) < 4) && ((z_1493 + z_1603) < t_415) && (t_10 < 4) && (t_23 < 4) && 
	(t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_42 < 4) && (t_447 < 4) && (t_5 < 
	4) && (t_571 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && 
	(t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_653 < 4) && 
	(t_823 < 4) && (t_96 < 4) && (z_1083 < t_653) && (z_116 < t_10) && (z_1268 < 
	t_823) && (z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513)
	 && (z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2))
	 && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= 
	(t_42 + -2)) && (0 <= (t_447 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_571 + -2)) 
	&& (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= 
	(t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)
	) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && (0 <= 
	(t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= 
	(z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + 
	z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + 
	z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + 
	z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 
	+ z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) 
	&& ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + z_132 + 
	z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 
	+ z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 
	+ z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + 
	z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1329 + z_1409 + z_4 + 
	z_64)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 
	+ z_53 + z_903)) && ((z_1329 + z_1409 + z_1419 + z_4 + z_64) <= (z_1003 + z_1083 
	+ z_1248 + z_1268 + z_1333 + z_1493 + z_1603 + z_3 + z_53 + z_903)) && ((z_1329 
	+ z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + 
	z_903)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && 
	(z_1027 > 0) && (z_1083 > 0) && (z_11 > 0) && (z_116 > 0) && (z_1248 > 0) && 
	(z_1268 > 0) && (z_132 > 0) && (z_1329 > 0) && (z_1333 > 0) && (z_1409 > 0) && 
	(z_1493 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 
	0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && 
	(z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_64 > 0) && (z_651 > 
	0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																																					DATA{
																																						:pid_2:uncoveredExit = 0;
																																						:pid_82:node_time = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1493 + z_1603 + z_53 + z_903);
																																						:pid_82:z = z_1603;
																																						:pid_82:localTime = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1493 + z_1603 + z_3 + z_53 + z_903);
																																						:pid_82:localPC = (((z_1268 + z_1333 + z_1493) == t_823) && ((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241) && ((z_1493 + z_1603) < t_415) && (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_571 < 4) && (t_653 < 4) && (t_823 < 4) && (z_1083 < t_653) && (z_1268 < t_823) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_571 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + z_1409 + z_1419 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1493 + z_1603 + z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_1083 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_1333 > 0) && (z_1493 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																																						:pid_82:timeEmit = (z_1329 + z_1409 + z_1419 + z_4 + z_64);
																																						:pid_83:i = 2;
																																						:pid_83:t = t_571;
																																						:pid_83:cl = 0;
																																						:pid_89:cl = (z_1268 + z_1333 + z_1493 + z_1603);
																																						:pid_94:cl = (z_1083 + z_1248 + z_1268 + z_1333 + z_1493 + z_1603);
																																					}
																																					BUFFER{
																																						:pid_82:bufferNode:<FIFO>#0{ }
																																					}
																																				}
																																			}
																																			EC:<Id:3656;Ev:322;H:35;W:3357>{ SC: ( pid_25:o#21 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_97:dp2 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
																EXE: { |;| (:pid_82 
	, run) (:pid_94 , run) (:pid_96 , run) (:pid_96 , dp_sendDM) (:pid_2 , run) }
																					
																TRACE: { |;| 
	(:pid_82 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1493 }) 
	(:pid_96 , ${ output inst::Trickle.Node.DataMsg2 [ 2 , 2 , 1 ] ${ + 
	param::Trickle.Node.z_1003 param::Trickle.Node.z_1083 param::Trickle.Node.z_1248 
	param::Trickle.Node.z_1268 param::Trickle.Node.z_1333 param::Trickle.Node.z_1493 
	param::Trickle.Node.z_3 param::Trickle.Node.z_53 param::Trickle.Node.z_903 } } @ 
	(z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1493 + z_53 + z_903)) }
																																				PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_1083 + z_1248 + z_1268 + z_1333 + z_1493) == 
	t_653) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) == 
	t_68) && (z_1329 == t_42) && (z_1419 == t_447) && (z_240 == t_96) && (z_595 == 
	t_434) && (z_90 == t_5) && ((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241)
	 && ((z_1329 + z_1409) < 4) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 
	< 4) && (t_415 < 4) && (t_42 < 4) && (t_447 < 4) && (t_5 < 4) && (t_65 < 4) && 
	(t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 
	< 4) && (t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_96 < 4) && (z_1083 < 
	t_653) && (z_116 < t_10) && (z_1268 < t_823) && (z_132 < t_23) && (z_346 < t_220)
	 && (z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && 
	(0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + 
	-2)) && (0 <= (t_415 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_447 + -2)) && (0 
	<= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) 
	&& (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= 
	(t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)
	) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + 
	z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 
	+ z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + 
	z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= 
	(z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + 
	z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + 
	z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 
	+ z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903))
	 && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1329 + 
	z_1409 + z_4 + z_64)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + 
	z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + 
	z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && ((z_150 + z_90) > t_5) && 
	(z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && (z_1027 > 0) && (z_1083 > 0) && (z_11 
	> 0) && (z_116 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_132 > 0) && (z_1329 > 
	0) && (z_1333 > 0) && (z_1409 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && 
	(z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0)
	 && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && 
	(z_64 > 0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 
	> 0) && (z_903 > 0))
																																				DATA{
																																					:pid_2:uncoveredExit = 1;
																																					:pid_82:node_time = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1493 + z_53 + z_903);
																																					:pid_82:z = z_1493;
																																					:pid_82:localTime = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1493 + z_3 + z_53 + z_903);
																																					:pid_82:localPC = (((z_1083 + z_1248 + z_1268 + z_1333 + z_1493) == t_653) && ((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241) && (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_653 < 4) && (t_823 < 4) && (z_1083 < t_653) && (z_1268 < t_823) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_1083 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_1333 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																																					:pid_83:cl = z_1493;
																																					:pid_89:cl = (z_1268 + z_1333 + z_1493);
																																					:pid_94:cl = (z_1083 + z_1248 + z_1268 + z_1333 + z_1493);
																																				}
																																				BUFFER{
																																					:pid_48:bufferNode:<FIFO>#0{
																																						:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																																						:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																																						:pid_65:DataMsg1([ 1 , 1 , 0 ] , (z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																																						:pid_82:DataMsg2([ 2 , 2 , 1 ] , (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1493 + z_3 + z_53 + z_903));
																																					}
																																				}
																																				EC:<Id:4029;Ev:0;H:36;W:3707>{ SC: ( pid_26:o#22 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_97:dp2 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
																	EXE: { |;| 
	(:pid_82 , run) (:pid_83 , run) (:pid_86 , run) (:pid_86 , 
	cp1_receiveCM_inconsistent) (:pid_2 , run) (:pid_25 , run) (:pid_25 , n4_in_CM) }
																					
																	TRACE: { |;| 
	(:pid_82 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1608 }) 
	(:pid_86 , ${ input inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + 
	param::Trickle.Node.z_1329 param::Trickle.Node.z_1409 param::Trickle.Node.z_1419 
	param::Trickle.Node.z_4 param::Trickle.Node.z_64 } } @ (z_1003 + z_1083 + z_1248 
	+ z_1268 + z_1333 + z_1493 + z_1608 + z_53 + z_903)) (:pid_86 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_574 }) }
																																					/*FLAGS{ COVERAGE-ELEMENT }*/
																																					INFO{
																																						<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22" as trace="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22">
																																					}
																																					PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_1083 + z_1248 + z_1268 + z_1333 + z_1493) == 
	t_653) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) == 
	t_68) && (z_1329 == t_42) && (z_1419 == t_447) && (z_240 == t_96) && (z_595 == 
	t_434) && (z_90 == t_5) && ((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241)
	 && ((z_1329 + z_1409) < 4) && ((z_1493 + z_1608) < t_415) && (t_10 < 4) && 
	(t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_42 < 4) && (t_447 < 
	4) && (t_5 < 4) && (t_574 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && 
	(t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && 
	(t_653 < 4) && (t_823 < 4) && (t_96 < 4) && (z_1083 < t_653) && (z_116 < t_10) 
	&& (z_1268 < t_823) && (z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && 
	(z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 
	<= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + 
	-2)) && (0 <= (t_42 + -2)) && (0 <= (t_447 + -2)) && (0 <= (t_5 + -2)) && (0 <= 
	(t_574 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) 
	&& (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= 
	(t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)
	) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + 
	z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 
	+ z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + 
	z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= 
	(z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + 
	z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + 
	z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 
	+ z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903))
	 && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1329 + 
	z_1409 + z_4 + z_64)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + 
	z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + z_1409 + z_1419 + z_4 + z_64) <= 
	(z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1493 + z_1608 + z_3 + z_53 + 
	z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 
	+ z_3 + z_53 + z_903)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && 
	(z_1003 > 0) && (z_1027 > 0) && (z_1083 > 0) && (z_11 > 0) && (z_116 > 0) && 
	(z_1248 > 0) && (z_1268 > 0) && (z_132 > 0) && (z_1329 > 0) && (z_1333 > 0) && 
	(z_1409 > 0) && (z_1493 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && 
	(z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0)
	 && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && 
	(z_64 > 0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 
	> 0) && (z_903 > 0))
																																					DATA{
																																						:pid_2:uncoveredExit = 0;
																																						:pid_82:node_time = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1493 + z_1608 + z_53 + z_903);
																																						:pid_82:z = z_1608;
																																						:pid_82:localTime = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1493 + z_1608 + z_3 + z_53 + z_903);
																																						:pid_82:localPC = (((z_1083 + z_1248 + z_1268 + z_1333 + z_1493) == t_653) && ((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241) && ((z_1493 + z_1608) < t_415) && (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_574 < 4) && (t_653 < 4) && (t_823 < 4) && (z_1083 < t_653) && (z_1268 < t_823) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_574 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + z_1409 + z_1419 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1493 + z_1608 + z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_1083 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_1333 > 0) && (z_1493 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																																						:pid_82:timeEmit = (z_1329 + z_1409 + z_1419 + z_4 + z_64);
																																						:pid_83:i = 2;
																																						:pid_83:t = t_574;
																																						:pid_83:cl = 0;
																																						:pid_89:cl = (z_1268 + z_1333 + z_1493 + z_1608);
																																						:pid_94:cl = (z_1083 + z_1248 + z_1268 + z_1333 + z_1493 + z_1608);
																																					}
																																					BUFFER{
																																						:pid_82:bufferNode:<FIFO>#0{ }
																																					}
																																				}
																																			}
																																			EC:<Id:3657;Ev:323;H:35;W:3358>{ SC: ( pid_25:o#21 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_69:cp1 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
																EXE: { |;| (:pid_65 
	, run) (:pid_66 , run) (:pid_70 , run) (:pid_70 , cp_resetTau) (:pid_2 , run) }
																					
																TRACE: { |;| 
	(:pid_65 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1492 }) 
	(:pid_70 , ${ newfresh inst::Trickle.Node.ControlProcess.t 
	param::Trickle.Node.ControlProcess.t_494 }) }
																																				PC: (((z_1027 + z_1112 + z_1492 + z_422 + z_447 + z_762 + z_792 + z_882) == 4) && 
	((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + z_792 
	+ z_882) == t_568) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + 
	z_882) == t_68) && (z_1329 == t_42) && (z_1419 == t_447) && (z_240 == t_96) && 
	(z_595 == t_434) && (z_90 == t_5) && ((z_1003 + z_1083 + z_1248 + z_1268 + 
	z_1333) < t_241) && ((z_1329 + z_1409) < 4) && (t_10 < 4) && (t_23 < 4) && 
	(t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_42 < 4) && (t_447 < 4) && (t_494 
	< 8) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && 
	(t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_653 < 4) && 
	(t_823 < 4) && (t_96 < 4) && (z_1083 < t_653) && (z_116 < t_10) && (z_1268 < 
	t_823) && (z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513)
	 && (z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2))
	 && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= 
	(t_42 + -2)) && (0 <= (t_447 + -2)) && (0 <= (t_494 + -4)) && (0 <= (t_5 + -2)) 
	&& (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= 
	(t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)
	) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && (0 <= 
	(t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= 
	(z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + 
	z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + 
	z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + 
	z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 
	+ z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) 
	&& ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + z_132 + 
	z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 
	+ z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 
	+ z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + 
	z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1329 + z_1409 + z_4 + 
	z_64)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 
	+ z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 
	+ z_1333 + z_3 + z_53 + z_903)) && ((z_1027 + z_1112 + z_1492 + z_422 + z_447 + 
	z_762 + z_792 + z_882) > t_68) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 
	0) && (z_1003 > 0) && (z_1027 > 0) && (z_1083 > 0) && (z_11 > 0) && (z_1112 > 0) 
	&& (z_116 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_132 > 0) && (z_1329 > 0) && 
	(z_1409 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 
	0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && 
	(z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_64 > 0) && (z_651 > 
	0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																																				DATA{
																																					:pid_2:uncoveredExit = 1;
																																					:pid_65:node_time = (z_1027 + z_1112 + z_132 + z_1492 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																																					:pid_65:z = z_1492;
																																					:pid_65:localTime = (z_1027 + z_1112 + z_132 + z_1492 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																																					:pid_65:localPC = (((z_1027 + z_1112 + z_1492 + z_422 + z_447 + z_762 + z_792 + z_882) == 4) && ((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + z_792 + z_882) == t_568) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (t_23 < 4) && (t_494 < 8) && (t_68 < 4) && (t_338 < 4) && (t_568 < 4) && (z_132 < t_23) && (z_447 < t_338) && (z_792 < t_568) && (0 <= (t_23 + -2)) && (0 <= (t_494 + -4)) && (0 <= (t_68 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_568 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + z_1492 + z_422 + z_447 + z_762 + z_792 + z_882) > t_68) && (z_1027 > 0) && (z_1112 > 0) && (z_132 > 0) && (z_2 > 0) && (z_32 > 0) && (z_422 > 0) && (z_447 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0));
																																					:pid_66:e = 1;
																																					:pid_66:tau = 8;
																																					:pid_66:c = 0;
																																					:pid_66:t = t_494;
																																					:pid_66:cl = 0;
																																					:pid_72:cl = (z_1027 + z_1112 + z_1492 + z_447 + z_762 + z_792 + z_882);
																																					:pid_77:cl = (z_1027 + z_1112 + z_1492 + z_792 + z_882);
																																				}
																																				EC:<Id:4046;Ev:0;H:36;W:3723>{ SC: ( pid_26:o#22 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_69:cp1 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
																	EXE: { |;| 
	(:pid_82 , run) (:pid_83 , run) (:pid_86 , run) (:pid_86 , 
	cp1_receiveCM_inconsistent) (:pid_2 , run) (:pid_25 , run) (:pid_25 , n4_in_CM) }
																					
																	TRACE: { |;| 
	(:pid_82 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1613 }) 
	(:pid_86 , ${ input inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + 
	param::Trickle.Node.z_1329 param::Trickle.Node.z_1409 param::Trickle.Node.z_1419 
	param::Trickle.Node.z_4 param::Trickle.Node.z_64 } } @ (z_1003 + z_1083 + z_1248 
	+ z_1268 + z_1333 + z_1613 + z_53 + z_903)) (:pid_86 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_576 }) }
																																					/*FLAGS{ COVERAGE-ELEMENT }*/
																																					INFO{
																																						<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22" as trace="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22">
																																					}
																																					PC: (((z_1027 + z_1112 + z_1492 + z_422 + z_447 + z_762 + z_792 + z_882) == 4) && 
	((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + z_792 
	+ z_882) == t_568) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + 
	z_882) == t_68) && (z_1329 == t_42) && (z_1419 == t_447) && (z_240 == t_96) && 
	(z_595 == t_434) && (z_90 == t_5) && ((z_1003 + z_1083 + z_1248 + z_1268 + 
	z_1333) < t_241) && ((z_1329 + z_1409) < 4) && (t_10 < 4) && (t_23 < 4) && 
	(t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_42 < 4) && (t_447 < 4) && (t_494 
	< 8) && (t_5 < 4) && (t_576 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && 
	(t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && 
	(t_653 < 4) && (t_823 < 4) && (t_96 < 4) && (z_1083 < t_653) && (z_116 < t_10) 
	&& (z_1268 < t_823) && (z_132 < t_23) && (z_1613 < t_415) && (z_346 < t_220) && 
	(z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= 
	(t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) 
	&& (0 <= (t_415 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_447 + -2)) && (0 <= 
	(t_494 + -4)) && (0 <= (t_5 + -2)) && (0 <= (t_576 + -2)) && (0 <= (t_65 + -2)) 
	&& (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= 
	(t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)
	) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + 
	z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + 
	z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + 
	z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 
	+ z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) 
	<= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + 
	z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + 
	z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 
	+ z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1329 + z_1409 + z_4 + z_64)) && 
	((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + 
	z_903)) && ((z_1329 + z_1409 + z_1419 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 
	+ z_1268 + z_1333 + z_1613 + z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= 
	(z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && ((z_1027 + 
	z_1112 + z_1492 + z_422 + z_447 + z_762 + z_792 + z_882) > t_68) && ((z_150 + 
	z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && (z_1027 > 0) && 
	(z_1083 > 0) && (z_11 > 0) && (z_1112 > 0) && (z_116 > 0) && (z_1248 > 0) && 
	(z_1268 > 0) && (z_132 > 0) && (z_1329 > 0) && (z_1333 > 0) && (z_1409 > 0) && 
	(z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 
	0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && 
	(z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_64 > 0) && (z_651 > 0) && (z_762 > 
	0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																																					DATA{
																																						:pid_2:uncoveredExit = 0;
																																						:pid_82:node_time = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1613 + z_53 + z_903);
																																						:pid_82:z = z_1613;
																																						:pid_82:localTime = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1613 + z_3 + z_53 + z_903);
																																						:pid_82:localPC = (((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241) && (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_576 < 4) && (t_653 < 4) && (t_823 < 4) && (z_1083 < t_653) && (z_1268 < t_823) && (z_1613 < t_415) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_576 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + z_1409 + z_1419 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1613 + z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_1083 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_1333 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																																						:pid_82:timeEmit = (z_1329 + z_1409 + z_1419 + z_4 + z_64);
																																						:pid_83:i = 2;
																																						:pid_83:t = t_576;
																																						:pid_89:cl = (z_1268 + z_1333 + z_1613);
																																						:pid_94:cl = (z_1083 + z_1248 + z_1268 + z_1333 + z_1613);
																																					}
																																					BUFFER{
																																						:pid_82:bufferNode:<FIFO>#0{ }
																																					}
																																				}
																																			}
																																			EC:<Id:3658;Ev:324;H:35;W:3359>{ SC: ( pid_25:o#21 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
																EXE: { |;| (:pid_65 
	, run) (:pid_72 , run) (:pid_75 , run) (:pid_75 , dp_resetTau) (:pid_2 , run) }
																					
																TRACE: { |;| 
	(:pid_65 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1492 }) 
	(:pid_75 , ${ newfresh inst::Trickle.Node.DataProcess.t 
	param::Trickle.Node.DataProcess.t_988 }) }
																																				PC: (((z_1027 + z_1112 + z_1492 + z_447 + z_762 + z_792 + z_882) == 4) && ((z_1027 + 
	z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + z_792 + z_882) 
	== t_568) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) 
	== t_68) && (z_1329 == t_42) && (z_1419 == t_447) && (z_240 == t_96) && (z_595 
	== t_434) && (z_90 == t_5) && ((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < 
	t_241) && ((z_1329 + z_1409) < 4) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && 
	(t_39 < 4) && (t_415 < 4) && (t_42 < 4) && (t_447 < 4) && (t_5 < 4) && (t_65 < 4)
	 && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && 
	(t_513 < 4) && (t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_96 < 4) && (t_988 
	< 8) && (z_1083 < t_653) && (z_116 < t_10) && (z_1268 < t_823) && (z_132 < t_23) 
	&& (z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && 
	(z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2))
	 && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_42 + -2)) && (0 <= 
	(t_447 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) 
	&& (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= 
	(t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)
	) && (0 <= (t_823 + -2)) && (0 <= (t_96 + -2)) && (0 <= (t_988 + -4)) && ((z_0 + 
	z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + 
	z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + 
	z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 
	+ z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) 
	<= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + 
	z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + 
	z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 
	+ z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1329 + z_1409 + z_4 + z_64)) && 
	((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + 
	z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 
	+ z_3 + z_53 + z_903)) && ((z_1027 + z_1112 + z_1492 + z_447 + z_762 + z_792 + 
	z_882) > t_338) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_1003 > 
	0) && (z_1027 > 0) && (z_1083 > 0) && (z_11 > 0) && (z_1112 > 0) && (z_116 > 0) 
	&& (z_1248 > 0) && (z_1268 > 0) && (z_132 > 0) && (z_1329 > 0) && (z_1409 > 0) 
	&& (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 
	> 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && 
	(z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_64 > 0) && (z_651 > 0) && (z_762 > 
	0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																																				DATA{
																																					:pid_2:uncoveredExit = 1;
																																					:pid_65:node_time = (z_1027 + z_1112 + z_132 + z_1492 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																																					:pid_65:z = z_1492;
																																					:pid_65:localTime = (z_1027 + z_1112 + z_132 + z_1492 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																																					:pid_65:localPC = (((z_1027 + z_1112 + z_1492 + z_447 + z_762 + z_792 + z_882) == 4) && ((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + z_792 + z_882) == t_568) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (t_23 < 4) && (t_68 < 4) && (t_338 < 4) && (t_568 < 4) && (t_988 < 8) && (z_132 < t_23) && (z_447 < t_338) && (z_792 < t_568) && (0 <= (t_23 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_988 + -4)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + z_1492 + z_447 + z_762 + z_792 + z_882) > t_338) && (z_1027 > 0) && (z_1112 > 0) && (z_132 > 0) && (z_2 > 0) && (z_32 > 0) && (z_422 > 0) && (z_447 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0));
																																					:pid_66:cl = (z_1027 + z_1112 + z_1492 + z_422 + z_447 + z_762 + z_792 + z_882);
																																					:pid_72:e = 1;
																																					:pid_72:tau = 8;
																																					:pid_72:c = 0;
																																					:pid_72:t = t_988;
																																					:pid_72:cl = 0;
																																					:pid_77:cl = (z_1027 + z_1112 + z_1492 + z_792 + z_882);
																																				}
																																				EC:<Id:4063;Ev:0;H:36;W:3739>{ SC: ( pid_26:o#22 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
																	EXE: { |;| 
	(:pid_82 , run) (:pid_83 , run) (:pid_86 , run) (:pid_86 , 
	cp1_receiveCM_inconsistent) (:pid_2 , run) (:pid_25 , run) (:pid_25 , n4_in_CM) }
																					
																	TRACE: { |;| 
	(:pid_82 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1618 }) 
	(:pid_86 , ${ input inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + 
	param::Trickle.Node.z_1329 param::Trickle.Node.z_1409 param::Trickle.Node.z_1419 
	param::Trickle.Node.z_4 param::Trickle.Node.z_64 } } @ (z_1003 + z_1083 + z_1248 
	+ z_1268 + z_1333 + z_1618 + z_53 + z_903)) (:pid_86 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_578 }) }
																																					/*FLAGS{ COVERAGE-ELEMENT }*/
																																					INFO{
																																						<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22" as trace="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22">
																																					}
																																					PC: (((z_1027 + z_1112 + z_1492 + z_447 + z_762 + z_792 + z_882) == 4) && ((z_1027 + 
	z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + z_792 + z_882) 
	== t_568) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) 
	== t_68) && (z_1329 == t_42) && (z_1419 == t_447) && (z_240 == t_96) && (z_595 
	== t_434) && (z_90 == t_5) && ((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < 
	t_241) && ((z_1329 + z_1409) < 4) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && 
	(t_39 < 4) && (t_415 < 4) && (t_42 < 4) && (t_447 < 4) && (t_5 < 4) && (t_578 < 
	4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && 
	(t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_96 
	< 4) && (t_988 < 8) && (z_1083 < t_653) && (z_116 < t_10) && (z_1268 < t_823) && 
	(z_132 < t_23) && (z_1618 < t_415) && (z_346 < t_220) && (z_447 < t_338) && 
	(z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 
	<= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + 
	-2)) && (0 <= (t_42 + -2)) && (0 <= (t_447 + -2)) && (0 <= (t_5 + -2)) && (0 <= 
	(t_578 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) 
	&& (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= 
	(t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)
	) && (0 <= (t_96 + -2)) && (0 <= (t_988 + -4)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + 
	z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 
	+ z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 
	+ z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + 
	z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) 
	&& ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + 
	z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 
	+ z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + 
	z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + 
	z_792 + z_882) <= (z_1329 + z_1409 + z_4 + z_64)) && ((z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + 
	z_1409 + z_1419 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + 
	z_1618 + z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + 
	z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && ((z_1027 + z_1112 + z_1492 + 
	z_447 + z_762 + z_792 + z_882) > t_338) && ((z_150 + z_90) > t_5) && (z_0 > 0) 
	&& (z_1 > 0) && (z_1003 > 0) && (z_1027 > 0) && (z_1083 > 0) && (z_11 > 0) && 
	(z_1112 > 0) && (z_116 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_132 > 0) && 
	(z_1329 > 0) && (z_1333 > 0) && (z_1409 > 0) && (z_150 > 0) && (z_185 > 0) && 
	(z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0)
	 && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 
	> 0) && (z_64 > 0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) 
	&& (z_90 > 0) && (z_903 > 0))
																																					DATA{
																																						:pid_2:uncoveredExit = 0;
																																						:pid_82:node_time = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1618 + z_53 + z_903);
																																						:pid_82:z = z_1618;
																																						:pid_82:localTime = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1618 + z_3 + z_53 + z_903);
																																						:pid_82:localPC = (((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241) && (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_578 < 4) && (t_653 < 4) && (t_823 < 4) && (z_1083 < t_653) && (z_1268 < t_823) && (z_1618 < t_415) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_578 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + z_1409 + z_1419 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1618 + z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_1083 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_1333 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																																						:pid_82:timeEmit = (z_1329 + z_1409 + z_1419 + z_4 + z_64);
																																						:pid_83:i = 2;
																																						:pid_83:t = t_578;
																																						:pid_89:cl = (z_1268 + z_1333 + z_1618);
																																						:pid_94:cl = (z_1083 + z_1248 + z_1268 + z_1333 + z_1618);
																																					}
																																					BUFFER{
																																						:pid_82:bufferNode:<FIFO>#0{ }
																																					}
																																				}
																																			}
																																			EC:<Id:3659;Ev:325;H:35;W:3360>{ SC: ( pid_25:o#21 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_79:dp1 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
																EXE: { |;| (:pid_65 
	, run) (:pid_77 , run) (:pid_80 , run) (:pid_80 , dp_resetTau) (:pid_2 , run) }
																					
																TRACE: { |;| 
	(:pid_65 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1492 }) 
	(:pid_80 , ${ newfresh inst::Trickle.Node.DataProcess.t 
	param::Trickle.Node.DataProcess.t_989 }) }
																																				PC: (((z_1027 + z_1112 + z_1492 + z_792 + z_882) == 4) && ((z_1027 + z_1112 + z_447 
	+ z_762 + z_792 + z_882) == t_338) && ((z_1027 + z_792 + z_882) == t_568) && 
	((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && 
	(z_1329 == t_42) && (z_1419 == t_447) && (z_240 == t_96) && (z_595 == t_434) && 
	(z_90 == t_5) && ((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241) && 
	((z_1329 + z_1409) < 4) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) 
	&& (t_415 < 4) && (t_42 < 4) && (t_447 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 
	< 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) 
	&& (t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_96 < 4) && (t_989 < 8) && 
	(z_1083 < t_653) && (z_116 < t_10) && (z_1268 < t_823) && (z_132 < t_23) && 
	(z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && 
	(z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2))
	 && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_42 + -2)) && (0 <= 
	(t_447 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) 
	&& (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= 
	(t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)
	) && (0 <= (t_823 + -2)) && (0 <= (t_96 + -2)) && (0 <= (t_989 + -4)) && ((z_0 + 
	z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + 
	z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + 
	z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 
	+ z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) 
	<= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + 
	z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + 
	z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 
	+ z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1329 + z_1409 + z_4 + z_64)) && 
	((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + 
	z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 
	+ z_3 + z_53 + z_903)) && ((z_1027 + z_1112 + z_1492 + z_792 + z_882) > t_568) 
	&& ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && (z_1027 > 
	0) && (z_1083 > 0) && (z_11 > 0) && (z_1112 > 0) && (z_116 > 0) && (z_1248 > 0) 
	&& (z_1268 > 0) && (z_132 > 0) && (z_1329 > 0) && (z_1409 > 0) && (z_150 > 0) && 
	(z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0)
	 && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 
	> 0) && (z_535 > 0) && (z_64 > 0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) 
	&& (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																																				DATA{
																																					:pid_2:uncoveredExit = 1;
																																					:pid_65:node_time = (z_1027 + z_1112 + z_132 + z_1492 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																																					:pid_65:z = z_1492;
																																					:pid_65:localTime = (z_1027 + z_1112 + z_132 + z_1492 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																																					:pid_65:localPC = (((z_1027 + z_1112 + z_1492 + z_792 + z_882) == 4) && ((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + z_792 + z_882) == t_568) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (t_23 < 4) && (t_68 < 4) && (t_338 < 4) && (t_568 < 4) && (t_989 < 8) && (z_132 < t_23) && (z_447 < t_338) && (z_792 < t_568) && (0 <= (t_23 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_989 + -4)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + z_1492 + z_792 + z_882) > t_568) && (z_1027 > 0) && (z_1112 > 0) && (z_132 > 0) && (z_2 > 0) && (z_32 > 0) && (z_422 > 0) && (z_447 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0));
																																					:pid_66:cl = (z_1027 + z_1112 + z_1492 + z_422 + z_447 + z_762 + z_792 + z_882);
																																					:pid_72:cl = (z_1027 + z_1112 + z_1492 + z_447 + z_762 + z_792 + z_882);
																																					:pid_77:e = 1;
																																					:pid_77:tau = 8;
																																					:pid_77:c = 0;
																																					:pid_77:t = t_989;
																																					:pid_77:cl = 0;
																																				}
																																				EC:<Id:4079;Ev:0;H:36;W:3754>{ SC: ( pid_26:o#22 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_79:dp1 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
																	EXE: { |;| 
	(:pid_82 , run) (:pid_83 , run) (:pid_86 , run) (:pid_86 , 
	cp1_receiveCM_inconsistent) (:pid_2 , run) (:pid_25 , run) (:pid_25 , n4_in_CM) }
																					
																	TRACE: { |;| 
	(:pid_82 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1623 }) 
	(:pid_86 , ${ input inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + 
	param::Trickle.Node.z_1329 param::Trickle.Node.z_1409 param::Trickle.Node.z_1419 
	param::Trickle.Node.z_4 param::Trickle.Node.z_64 } } @ (z_1003 + z_1083 + z_1248 
	+ z_1268 + z_1333 + z_1623 + z_53 + z_903)) (:pid_86 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_580 }) }
																																					/*FLAGS{ COVERAGE-ELEMENT }*/
																																					INFO{
																																						<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22" as trace="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22">
																																					}
																																					PC: (((z_1027 + z_1112 + z_1492 + z_792 + z_882) == 4) && ((z_1027 + z_1112 + z_447 
	+ z_762 + z_792 + z_882) == t_338) && ((z_1027 + z_792 + z_882) == t_568) && 
	((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && 
	(z_1329 == t_42) && (z_1419 == t_447) && (z_240 == t_96) && (z_595 == t_434) && 
	(z_90 == t_5) && ((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241) && 
	((z_1329 + z_1409) < 4) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) 
	&& (t_415 < 4) && (t_42 < 4) && (t_447 < 4) && (t_5 < 4) && (t_580 < 4) && (t_65 
	< 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && 
	(t_513 < 4) && (t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_96 < 4) && (t_989 
	< 8) && (z_1083 < t_653) && (z_116 < t_10) && (z_1268 < t_823) && (z_132 < t_23) 
	&& (z_1623 < t_415) && (z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && 
	(z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && 
	(0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_42 
	+ -2)) && (0 <= (t_447 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_580 + -2)) && (0 
	<= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)
	) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= 
	(t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && (0 <= (t_96 + -2))
	 && (0 <= (t_989 + -4)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + 
	z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 
	+ z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + 
	z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= 
	(z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + 
	z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + 
	z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 
	+ z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903))
	 && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1329 + 
	z_1409 + z_4 + z_64)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + 
	z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + z_1409 + z_1419 + z_4 + z_64) <= 
	(z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1623 + z_3 + z_53 + z_903)) && 
	((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + 
	z_53 + z_903)) && ((z_1027 + z_1112 + z_1492 + z_792 + z_882) > t_568) && 
	((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && (z_1027 > 0) 
	&& (z_1083 > 0) && (z_11 > 0) && (z_1112 > 0) && (z_116 > 0) && (z_1248 > 0) && 
	(z_1268 > 0) && (z_132 > 0) && (z_1329 > 0) && (z_1333 > 0) && (z_1409 > 0) && 
	(z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 
	0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && 
	(z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_64 > 0) && (z_651 > 0) && (z_762 > 
	0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																																					DATA{
																																						:pid_2:uncoveredExit = 0;
																																						:pid_82:node_time = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1623 + z_53 + z_903);
																																						:pid_82:z = z_1623;
																																						:pid_82:localTime = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1623 + z_3 + z_53 + z_903);
																																						:pid_82:localPC = (((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241) && (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_580 < 4) && (t_653 < 4) && (t_823 < 4) && (z_1083 < t_653) && (z_1268 < t_823) && (z_1623 < t_415) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_580 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + z_1409 + z_1419 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1623 + z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_1083 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_1333 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																																						:pid_82:timeEmit = (z_1329 + z_1409 + z_1419 + z_4 + z_64);
																																						:pid_83:i = 2;
																																						:pid_83:t = t_580;
																																						:pid_89:cl = (z_1268 + z_1333 + z_1623);
																																						:pid_94:cl = (z_1083 + z_1248 + z_1268 + z_1333 + z_1623);
																																					}
																																					BUFFER{
																																						:pid_82:bufferNode:<FIFO>#0{ }
																																					}
																																				}
																																			}
																																			EC:<Id:3660;Ev:326;H:35;W:3361>{ SC: ( pid_25:o#21 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_53:cp2 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
																EXE: { |;| (:pid_48 
	, run) (:pid_49 , run) (:pid_52 , run) (:pid_52 , cp_sendCM) (:pid_2 , run) }
																					
																TRACE: { |;| 
	(:pid_48 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1491 }) 
	(:pid_52 , ${ output inst::Trickle.Node.ControlMsg [ 1 , 1 ] ${ + 
	param::Trickle.Node.z_1 param::Trickle.Node.z_11 param::Trickle.Node.z_116 
	param::Trickle.Node.z_1491 param::Trickle.Node.z_306 param::Trickle.Node.z_346 
	param::Trickle.Node.z_651 param::Trickle.Node.z_696 } } @ (z_11 + z_116 + z_1491 
	+ z_306 + z_346 + z_651 + z_696)) }
																																				PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_1491 + z_306 + z_346 + z_651 + z_696) == t_65) 
	&& ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && 
	(z_1329 == t_42) && (z_1419 == t_447) && (z_240 == t_96) && (z_595 == t_434) && 
	(z_90 == t_5) && ((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241) && 
	((z_1329 + z_1409) < 4) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) 
	&& (t_415 < 4) && (t_42 < 4) && (t_447 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 
	< 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) 
	&& (t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_96 < 4) && (z_1083 < t_653) 
	&& (z_116 < t_10) && (z_1268 < t_823) && (z_132 < t_23) && (z_346 < t_220) && 
	(z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= 
	(t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) 
	&& (0 <= (t_415 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_447 + -2)) && (0 <= 
	(t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && 
	(0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= 
	(t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)
	) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + 
	z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 
	+ z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + 
	z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= 
	(z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + 
	z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + 
	z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 
	+ z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903))
	 && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1329 + 
	z_1409 + z_4 + z_64)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + 
	z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + 
	z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && ((z_150 + z_90) > t_5) && 
	(z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && (z_1027 > 0) && (z_1083 > 0) && (z_11 
	> 0) && (z_116 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_132 > 0) && (z_1329 > 
	0) && (z_1409 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && 
	(z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0)
	 && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_64 > 0) && 
	(z_651 > 0) && (z_696 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 
	> 0) && (z_903 > 0))
																																				DATA{
																																					:pid_2:uncoveredExit = 1;
																																					:pid_48:node_time = (z_11 + z_116 + z_1491 + z_306 + z_346 + z_651 + z_696);
																																					:pid_48:z = z_1491;
																																					:pid_48:localTime = (z_1 + z_11 + z_116 + z_1491 + z_306 + z_346 + z_651 + z_696);
																																					:pid_48:localPC = (((z_1491 + z_306 + z_346 + z_651 + z_696) == t_65) && (t_10 < 4) && (t_65 < 4) && (t_220 < 4) && (t_513 < 4) && (z_116 < t_10) && (z_346 < t_220) && (z_696 < t_513) && (0 <= (t_10 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_220 + -2)) && (0 <= (t_513 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_306 > 0) && (z_346 > 0) && (z_651 > 0) && (z_696 > 0));
																																					:pid_49:cl = (z_1491 + z_306 + z_346 + z_651 + z_696);
																																					:pid_55:cl = (z_1491 + z_346 + z_651 + z_696);
																																					:pid_60:cl = (z_1491 + z_696);
																																				}
																																				BUFFER{
																																					:pid_65:bufferNode:<FIFO>#0{
																																						:pid_48:ControlMsg([ 1 , 1 ] , (z_1 + z_11 + z_116 + z_1491 + z_306 + z_346 + z_651 + z_696));
																																					}
																																				}
																																				EC:<Id:4094;Ev:0;H:36;W:3768>{ SC: ( pid_26:o#22 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_53:cp2 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
																	EXE: { |;| 
	(:pid_82 , run) (:pid_83 , run) (:pid_86 , run) (:pid_86 , 
	cp1_receiveCM_inconsistent) (:pid_2 , run) (:pid_25 , run) (:pid_25 , n4_in_CM) }
																					
																	TRACE: { |;| 
	(:pid_82 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1628 }) 
	(:pid_86 , ${ input inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + 
	param::Trickle.Node.z_1329 param::Trickle.Node.z_1409 param::Trickle.Node.z_1419 
	param::Trickle.Node.z_4 param::Trickle.Node.z_64 } } @ (z_1003 + z_1083 + z_1248 
	+ z_1268 + z_1333 + z_1628 + z_53 + z_903)) (:pid_86 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_584 }) }
																																					/*FLAGS{ COVERAGE-ELEMENT }*/
																																					INFO{
																																						<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22" as trace="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22">
																																					}
																																					PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_1491 + z_306 + z_346 + z_651 + z_696) == t_65) 
	&& ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && 
	(z_1329 == t_42) && (z_1419 == t_447) && (z_240 == t_96) && (z_595 == t_434) && 
	(z_90 == t_5) && ((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241) && 
	((z_1329 + z_1409) < 4) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) 
	&& (t_415 < 4) && (t_42 < 4) && (t_447 < 4) && (t_5 < 4) && (t_584 < 4) && (t_65 
	< 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && 
	(t_513 < 4) && (t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_96 < 4) && 
	(z_1083 < t_653) && (z_116 < t_10) && (z_1268 < t_823) && (z_132 < t_23) && 
	(z_1628 < t_415) && (z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && 
	(z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && 
	(0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_42 
	+ -2)) && (0 <= (t_447 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_584 + -2)) && (0 
	<= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)
	) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= 
	(t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && (0 <= (t_96 + -2))
	 && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + 
	z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + 
	z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + 
	z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + 
	z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 
	+ z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + 
	z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 
	+ z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1329 + z_1409 + z_4 + z_64)) && 
	((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + 
	z_903)) && ((z_1329 + z_1409 + z_1419 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 
	+ z_1268 + z_1333 + z_1628 + z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= 
	(z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && ((z_150 + 
	z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && (z_1027 > 0) && 
	(z_1083 > 0) && (z_11 > 0) && (z_116 > 0) && (z_1248 > 0) && (z_1268 > 0) && 
	(z_132 > 0) && (z_1329 > 0) && (z_1333 > 0) && (z_1409 > 0) && (z_150 > 0) && 
	(z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0)
	 && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 
	> 0) && (z_535 > 0) && (z_64 > 0) && (z_651 > 0) && (z_696 > 0) && (z_762 > 0) 
	&& (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																																					DATA{
																																						:pid_2:uncoveredExit = 0;
																																						:pid_82:node_time = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1628 + z_53 + z_903);
																																						:pid_82:z = z_1628;
																																						:pid_82:localTime = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1628 + z_3 + z_53 + z_903);
																																						:pid_82:localPC = (((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241) && (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_584 < 4) && (t_653 < 4) && (t_823 < 4) && (z_1083 < t_653) && (z_1268 < t_823) && (z_1628 < t_415) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_584 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + z_1409 + z_1419 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1628 + z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_1083 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_1333 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																																						:pid_82:timeEmit = (z_1329 + z_1409 + z_1419 + z_4 + z_64);
																																						:pid_83:i = 2;
																																						:pid_83:t = t_584;
																																						:pid_89:cl = (z_1268 + z_1333 + z_1628);
																																						:pid_94:cl = (z_1083 + z_1248 + z_1268 + z_1333 + z_1628);
																																					}
																																					BUFFER{
																																						:pid_82:bufferNode:<FIFO>#0{ }
																																					}
																																				}
																																			}
																																			EC:<Id:3661;Ev:327;H:35;W:3362>{ SC: ( pid_25:o#21 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
																EXE: { |;| (:pid_48 
	, run) (:pid_49 , run) (:pid_52 , run) (:pid_52 , cp1_receiveCM_consistent) 
	(:pid_2 , run) }
																					
																TRACE: { |;| 
	(:pid_48 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1491 }) 
	(:pid_52 , ${ input inst::Trickle.Node.ControlMsg [ 1 , 1 ] ${ + 
	param::Trickle.Node.z_132 param::Trickle.Node.z_2 param::Trickle.Node.z_32 
	param::Trickle.Node.z_422 param::Trickle.Node.z_447 param::Trickle.Node.z_762 
	param::Trickle.Node.z_792 param::Trickle.Node.z_882 } } @ (z_11 + z_116 + z_1491 
	+ z_306 + z_346 + z_651 + z_696)) }
																																				PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + 
	z_792 + z_882) == t_68) && (z_1329 == t_42) && (z_1419 == t_447) && (z_240 == 
	t_96) && (z_595 == t_434) && (z_90 == t_5) && ((z_1003 + z_1083 + z_1248 + 
	z_1268 + z_1333) < t_241) && ((z_1329 + z_1409) < 4) && ((z_1491 + z_306 + z_346 
	+ z_651 + z_696) < t_65) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4)
	 && (t_415 < 4) && (t_42 < 4) && (t_447 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 
	< 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) 
	&& (t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_96 < 4) && (z_1083 < t_653) 
	&& (z_116 < t_10) && (z_1268 < t_823) && (z_132 < t_23) && (z_346 < t_220) && 
	(z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= 
	(t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) 
	&& (0 <= (t_415 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_447 + -2)) && (0 <= 
	(t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && 
	(0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= 
	(t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)
	) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + 
	z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 
	+ z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + 
	z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= 
	(z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + 
	z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + 
	z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 
	+ z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903))
	 && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1 + z_11 
	+ z_116 + z_1491 + z_306 + z_346 + z_651 + z_696)) && ((z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1329 + z_1409 + z_4 + z_64)) && 
	((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + 
	z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 
	+ z_3 + z_53 + z_903)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && 
	(z_1003 > 0) && (z_1027 > 0) && (z_1083 > 0) && (z_11 > 0) && (z_116 > 0) && 
	(z_1248 > 0) && (z_1268 > 0) && (z_132 > 0) && (z_1329 > 0) && (z_1409 > 0) && 
	(z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 
	0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && 
	(z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_64 > 0) && (z_651 > 0) && (z_696 > 
	0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																																				DATA{
																																					:pid_2:uncoveredExit = 1;
																																					:pid_48:node_time = (z_11 + z_116 + z_1491 + z_306 + z_346 + z_651 + z_696);
																																					:pid_48:z = z_1491;
																																					:pid_48:localTime = (z_1 + z_11 + z_116 + z_1491 + z_306 + z_346 + z_651 + z_696);
																																					:pid_48:seq_buff[0] = 1;
																																					:pid_48:seq_buff[1] = 1;
																																					:pid_48:localPC = (((z_1491 + z_306 + z_346 + z_651 + z_696) < t_65) && (t_10 < 4) && (t_65 < 4) && (t_220 < 4) && (t_513 < 4) && (z_116 < t_10) && (z_346 < t_220) && (z_696 < t_513) && (0 <= (t_10 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_220 + -2)) && (0 <= (t_513 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1 + z_11 + z_116 + z_1491 + z_306 + z_346 + z_651 + z_696)) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_306 > 0) && (z_346 > 0) && (z_651 > 0) && (z_696 > 0));
																																					:pid_48:timeEmit = (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																																					:pid_49:c = 1;
																																					:pid_49:i = 2;
																																					:pid_49:consistent = true;
																																					:pid_49:cl = (z_1491 + z_306 + z_346 + z_651 + z_696);
																																					:pid_55:cl = (z_1491 + z_346 + z_651 + z_696);
																																					:pid_60:cl = (z_1491 + z_696);
																																				}
																																				BUFFER{
																																					:pid_48:bufferNode:<FIFO>#0{
																																						:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																																						:pid_65:DataMsg1([ 1 , 1 , 0 ] , (z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																																					}
																																				}
																																				EC:<Id:4112;Ev:0;H:36;W:3785>{ SC: ( pid_26:o#22 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
																	EXE: { |;| 
	(:pid_82 , run) (:pid_83 , run) (:pid_86 , run) (:pid_86 , 
	cp1_receiveCM_inconsistent) (:pid_2 , run) (:pid_25 , run) (:pid_25 , n4_in_CM) }
																					
																	TRACE: { |;| 
	(:pid_82 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1633 }) 
	(:pid_86 , ${ input inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + 
	param::Trickle.Node.z_1329 param::Trickle.Node.z_1409 param::Trickle.Node.z_1419 
	param::Trickle.Node.z_4 param::Trickle.Node.z_64 } } @ (z_1003 + z_1083 + z_1248 
	+ z_1268 + z_1333 + z_1633 + z_53 + z_903)) (:pid_86 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_587 }) }
																																					/*FLAGS{ COVERAGE-ELEMENT }*/
																																					INFO{
																																						<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22" as trace="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22">
																																					}
																																					PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + 
	z_792 + z_882) == t_68) && (z_1329 == t_42) && (z_1419 == t_447) && (z_240 == 
	t_96) && (z_595 == t_434) && (z_90 == t_5) && ((z_1003 + z_1083 + z_1248 + 
	z_1268 + z_1333) < t_241) && ((z_1329 + z_1409) < 4) && ((z_1491 + z_306 + z_346 
	+ z_651 + z_696) < t_65) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4)
	 && (t_415 < 4) && (t_42 < 4) && (t_447 < 4) && (t_5 < 4) && (t_587 < 4) && 
	(t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 
	4) && (t_513 < 4) && (t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_96 < 4) && 
	(z_1083 < t_653) && (z_116 < t_10) && (z_1268 < t_823) && (z_132 < t_23) && 
	(z_1633 < t_415) && (z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && 
	(z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && 
	(0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_42 
	+ -2)) && (0 <= (t_447 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_587 + -2)) && (0 
	<= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)
	) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= 
	(t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && (0 <= (t_96 + -2))
	 && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + 
	z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + 
	z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + 
	z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + 
	z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 
	+ z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + 
	z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 
	+ z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1 + z_11 + z_116 + z_1491 + z_306 + 
	z_346 + z_651 + z_696)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 
	+ z_882) <= (z_1329 + z_1409 + z_4 + z_64)) && ((z_132 + z_2 + z_32 + z_422 + 
	z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + z_1409 + 
	z_1419 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1633 + 
	z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + 
	z_1268 + z_1333 + z_3 + z_53 + z_903)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && 
	(z_1 > 0) && (z_1003 > 0) && (z_1027 > 0) && (z_1083 > 0) && (z_11 > 0) && 
	(z_116 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_132 > 0) && (z_1329 > 0) && 
	(z_1333 > 0) && (z_1409 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && 
	(z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0)
	 && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && 
	(z_64 > 0) && (z_651 > 0) && (z_696 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 
	> 0) && (z_90 > 0) && (z_903 > 0))
																																					DATA{
																																						:pid_2:uncoveredExit = 0;
																																						:pid_82:node_time = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1633 + z_53 + z_903);
																																						:pid_82:z = z_1633;
																																						:pid_82:localTime = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1633 + z_3 + z_53 + z_903);
																																						:pid_82:localPC = (((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241) && (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_587 < 4) && (t_653 < 4) && (t_823 < 4) && (z_1083 < t_653) && (z_1268 < t_823) && (z_1633 < t_415) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_587 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + z_1409 + z_1419 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1633 + z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_1083 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_1333 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																																						:pid_82:timeEmit = (z_1329 + z_1409 + z_1419 + z_4 + z_64);
																																						:pid_83:i = 2;
																																						:pid_83:t = t_587;
																																						:pid_89:cl = (z_1268 + z_1333 + z_1633);
																																						:pid_94:cl = (z_1083 + z_1248 + z_1268 + z_1333 + z_1633);
																																					}
																																					BUFFER{
																																						:pid_82:bufferNode:<FIFO>#0{ }
																																					}
																																				}
																																			}
																																			EC:<Id:3662;Ev:328;H:35;W:3363>{ SC: ( pid_25:o#21 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_58:dp2 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
																EXE: { |;| (:pid_48 
	, run) (:pid_55 , run) (:pid_57 , run) (:pid_57 , dp_sendDM) (:pid_2 , run) }
																					
																TRACE: { |;| 
	(:pid_48 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1491 }) 
	(:pid_57 , ${ output inst::Trickle.Node.DataMsg1 [ 1 , 1 , 0 ] ${ + 
	param::Trickle.Node.z_1 param::Trickle.Node.z_11 param::Trickle.Node.z_116 
	param::Trickle.Node.z_1491 param::Trickle.Node.z_306 param::Trickle.Node.z_346 
	param::Trickle.Node.z_651 param::Trickle.Node.z_696 } } @ (z_11 + z_116 + z_1491 
	+ z_306 + z_346 + z_651 + z_696)) }
																																				PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_1491 + z_346 + z_651 + z_696) == t_220) && 
	((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && 
	(z_1329 == t_42) && (z_1419 == t_447) && (z_240 == t_96) && (z_595 == t_434) && 
	(z_90 == t_5) && ((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241) && 
	((z_1329 + z_1409) < 4) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) 
	&& (t_415 < 4) && (t_42 < 4) && (t_447 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 
	< 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) 
	&& (t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_96 < 4) && (z_1083 < t_653) 
	&& (z_116 < t_10) && (z_1268 < t_823) && (z_132 < t_23) && (z_346 < t_220) && 
	(z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= 
	(t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) 
	&& (0 <= (t_415 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_447 + -2)) && (0 <= 
	(t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && 
	(0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= 
	(t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)
	) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + 
	z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 
	+ z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + 
	z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= 
	(z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + 
	z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + 
	z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 
	+ z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903))
	 && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1329 + 
	z_1409 + z_4 + z_64)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + 
	z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + 
	z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && ((z_150 + z_90) > t_5) && 
	(z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && (z_1027 > 0) && (z_1083 > 0) && (z_11 
	> 0) && (z_116 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_132 > 0) && (z_1329 > 
	0) && (z_1409 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && 
	(z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0)
	 && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_64 > 0) && 
	(z_651 > 0) && (z_696 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 
	> 0) && (z_903 > 0))
																																				DATA{
																																					:pid_2:uncoveredExit = 1;
																																					:pid_48:node_time = (z_11 + z_116 + z_1491 + z_306 + z_346 + z_651 + z_696);
																																					:pid_48:z = z_1491;
																																					:pid_48:localTime = (z_1 + z_11 + z_116 + z_1491 + z_306 + z_346 + z_651 + z_696);
																																					:pid_48:localPC = (((z_1491 + z_346 + z_651 + z_696) == t_220) && (t_10 < 4) && (t_65 < 4) && (t_220 < 4) && (t_513 < 4) && (z_116 < t_10) && (z_346 < t_220) && (z_696 < t_513) && (0 <= (t_10 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_220 + -2)) && (0 <= (t_513 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_306 > 0) && (z_346 > 0) && (z_651 > 0) && (z_696 > 0));
																																					:pid_49:cl = (z_1491 + z_306 + z_346 + z_651 + z_696);
																																					:pid_55:cl = (z_1491 + z_346 + z_651 + z_696);
																																					:pid_60:cl = (z_1491 + z_696);
																																				}
																																				BUFFER{
																																					:pid_65:bufferNode:<FIFO>#0{
																																						:pid_48:DataMsg1([ 1 , 1 , 0 ] , (z_1 + z_11 + z_116 + z_1491 + z_306 + z_346 + z_651 + z_696));
																																					}
																																				}
																																				EC:<Id:4129;Ev:0;H:36;W:3801>{ SC: ( pid_26:o#22 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_58:dp2 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
																	EXE: { |;| 
	(:pid_82 , run) (:pid_83 , run) (:pid_86 , run) (:pid_86 , 
	cp1_receiveCM_inconsistent) (:pid_2 , run) (:pid_25 , run) (:pid_25 , n4_in_CM) }
																					
																	TRACE: { |;| 
	(:pid_82 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1638 }) 
	(:pid_86 , ${ input inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + 
	param::Trickle.Node.z_1329 param::Trickle.Node.z_1409 param::Trickle.Node.z_1419 
	param::Trickle.Node.z_4 param::Trickle.Node.z_64 } } @ (z_1003 + z_1083 + z_1248 
	+ z_1268 + z_1333 + z_1638 + z_53 + z_903)) (:pid_86 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_590 }) }
																																					/*FLAGS{ COVERAGE-ELEMENT }*/
																																					INFO{
																																						<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22" as trace="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22">
																																					}
																																					PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_1491 + z_346 + z_651 + z_696) == t_220) && 
	((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && 
	(z_1329 == t_42) && (z_1419 == t_447) && (z_240 == t_96) && (z_595 == t_434) && 
	(z_90 == t_5) && ((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241) && 
	((z_1329 + z_1409) < 4) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) 
	&& (t_415 < 4) && (t_42 < 4) && (t_447 < 4) && (t_5 < 4) && (t_590 < 4) && (t_65 
	< 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && 
	(t_513 < 4) && (t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_96 < 4) && 
	(z_1083 < t_653) && (z_116 < t_10) && (z_1268 < t_823) && (z_132 < t_23) && 
	(z_1638 < t_415) && (z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && 
	(z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && 
	(0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_42 
	+ -2)) && (0 <= (t_447 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_590 + -2)) && (0 
	<= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)
	) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= 
	(t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && (0 <= (t_96 + -2))
	 && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + 
	z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + 
	z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + 
	z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + 
	z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 
	+ z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + 
	z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 
	+ z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1329 + z_1409 + z_4 + z_64)) && 
	((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + 
	z_903)) && ((z_1329 + z_1409 + z_1419 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 
	+ z_1268 + z_1333 + z_1638 + z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= 
	(z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && ((z_150 + 
	z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && (z_1027 > 0) && 
	(z_1083 > 0) && (z_11 > 0) && (z_116 > 0) && (z_1248 > 0) && (z_1268 > 0) && 
	(z_132 > 0) && (z_1329 > 0) && (z_1333 > 0) && (z_1409 > 0) && (z_150 > 0) && 
	(z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0)
	 && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 
	> 0) && (z_535 > 0) && (z_64 > 0) && (z_651 > 0) && (z_696 > 0) && (z_762 > 0) 
	&& (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																																					DATA{
																																						:pid_2:uncoveredExit = 0;
																																						:pid_82:node_time = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1638 + z_53 + z_903);
																																						:pid_82:z = z_1638;
																																						:pid_82:localTime = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1638 + z_3 + z_53 + z_903);
																																						:pid_82:localPC = (((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241) && (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_590 < 4) && (t_653 < 4) && (t_823 < 4) && (z_1083 < t_653) && (z_1268 < t_823) && (z_1638 < t_415) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_590 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + z_1409 + z_1419 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1638 + z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_1083 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_1333 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																																						:pid_82:timeEmit = (z_1329 + z_1409 + z_1419 + z_4 + z_64);
																																						:pid_83:i = 2;
																																						:pid_83:t = t_590;
																																						:pid_89:cl = (z_1268 + z_1333 + z_1638);
																																						:pid_94:cl = (z_1083 + z_1248 + z_1268 + z_1333 + z_1638);
																																					}
																																					BUFFER{
																																						:pid_82:bufferNode:<FIFO>#0{ }
																																					}
																																				}
																																			}
																																			EC:<Id:3663;Ev:329;H:35;W:3364>{ SC: ( pid_25:o#21 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_63:dp2 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
																EXE: { |;| (:pid_48 
	, run) (:pid_60 , run) (:pid_62 , run) (:pid_62 , dp_sendDM) (:pid_2 , run) }
																					
																TRACE: { |;| 
	(:pid_48 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1491 }) 
	(:pid_62 , ${ output inst::Trickle.Node.DataMsg2 [ 2 , 2 , 1 ] ${ + 
	param::Trickle.Node.z_1 param::Trickle.Node.z_11 param::Trickle.Node.z_116 
	param::Trickle.Node.z_1491 param::Trickle.Node.z_306 param::Trickle.Node.z_346 
	param::Trickle.Node.z_651 param::Trickle.Node.z_696 } } @ (z_11 + z_116 + z_1491 
	+ z_306 + z_346 + z_651 + z_696)) }
																																				PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_1491 + z_696) == t_513) && ((z_150 + z_90) == 4) 
	&& ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (z_1329 == t_42) && 
	(z_1419 == t_447) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && 
	((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241) && ((z_1329 + z_1409) < 4)
	 && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && 
	(t_42 < 4) && (t_447 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) 
	&& (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && 
	(t_653 < 4) && (t_823 < 4) && (t_96 < 4) && (z_1083 < t_653) && (z_116 < t_10) 
	&& (z_1268 < t_823) && (z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && 
	(z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 
	<= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + 
	-2)) && (0 <= (t_42 + -2)) && (0 <= (t_447 + -2)) && (0 <= (t_5 + -2)) && (0 <= 
	(t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) 
	&& (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= 
	(t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && (0 <= (t_96 + -2))
	 && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + 
	z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + 
	z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + 
	z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + 
	z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 
	+ z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + 
	z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 
	+ z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1329 + z_1409 + z_4 + z_64)) && 
	((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + 
	z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 
	+ z_3 + z_53 + z_903)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && 
	(z_1003 > 0) && (z_1027 > 0) && (z_1083 > 0) && (z_11 > 0) && (z_116 > 0) && 
	(z_1248 > 0) && (z_1268 > 0) && (z_132 > 0) && (z_1329 > 0) && (z_1409 > 0) && 
	(z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 
	0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && 
	(z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_64 > 0) && (z_651 > 0) && (z_696 > 
	0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																																				DATA{
																																					:pid_2:uncoveredExit = 1;
																																					:pid_48:node_time = (z_11 + z_116 + z_1491 + z_306 + z_346 + z_651 + z_696);
																																					:pid_48:z = z_1491;
																																					:pid_48:localTime = (z_1 + z_11 + z_116 + z_1491 + z_306 + z_346 + z_651 + z_696);
																																					:pid_48:localPC = (((z_1491 + z_696) == t_513) && (t_10 < 4) && (t_65 < 4) && (t_220 < 4) && (t_513 < 4) && (z_116 < t_10) && (z_346 < t_220) && (z_696 < t_513) && (0 <= (t_10 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_220 + -2)) && (0 <= (t_513 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_306 > 0) && (z_346 > 0) && (z_651 > 0) && (z_696 > 0));
																																					:pid_49:cl = (z_1491 + z_306 + z_346 + z_651 + z_696);
																																					:pid_55:cl = (z_1491 + z_346 + z_651 + z_696);
																																					:pid_60:cl = (z_1491 + z_696);
																																				}
																																				BUFFER{
																																					:pid_65:bufferNode:<FIFO>#0{
																																						:pid_48:DataMsg2([ 2 , 2 , 1 ] , (z_1 + z_11 + z_116 + z_1491 + z_306 + z_346 + z_651 + z_696));
																																					}
																																				}
																																				EC:<Id:4147;Ev:0;H:36;W:3818>{ SC: ( pid_26:o#22 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_63:dp2 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
																	EXE: { |;| 
	(:pid_82 , run) (:pid_83 , run) (:pid_86 , run) (:pid_86 , 
	cp1_receiveCM_inconsistent) (:pid_2 , run) (:pid_25 , run) (:pid_25 , n4_in_CM) }
																					
																	TRACE: { |;| 
	(:pid_82 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1643 }) 
	(:pid_86 , ${ input inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + 
	param::Trickle.Node.z_1329 param::Trickle.Node.z_1409 param::Trickle.Node.z_1419 
	param::Trickle.Node.z_4 param::Trickle.Node.z_64 } } @ (z_1003 + z_1083 + z_1248 
	+ z_1268 + z_1333 + z_1643 + z_53 + z_903)) (:pid_86 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_593 }) }
																																					/*FLAGS{ COVERAGE-ELEMENT }*/
																																					INFO{
																																						<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22" as trace="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22">
																																					}
																																					PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_1491 + z_696) == t_513) && ((z_150 + z_90) == 4) 
	&& ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (z_1329 == t_42) && 
	(z_1419 == t_447) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && 
	((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241) && ((z_1329 + z_1409) < 4)
	 && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && 
	(t_42 < 4) && (t_447 < 4) && (t_5 < 4) && (t_593 < 4) && (t_65 < 4) && (t_68 < 4)
	 && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && 
	(t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_96 < 4) && (z_1083 < t_653) && 
	(z_116 < t_10) && (z_1268 < t_823) && (z_132 < t_23) && (z_1643 < t_415) && 
	(z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && 
	(z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2))
	 && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_42 + -2)) && (0 <= 
	(t_447 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_593 + -2)) && (0 <= (t_65 + -2)) 
	&& (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= 
	(t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)
	) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + 
	z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + 
	z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + 
	z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 
	+ z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) 
	<= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + 
	z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + 
	z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 
	+ z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1329 + z_1409 + z_4 + z_64)) && 
	((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + 
	z_903)) && ((z_1329 + z_1409 + z_1419 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 
	+ z_1268 + z_1333 + z_1643 + z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= 
	(z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && ((z_150 + 
	z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && (z_1027 > 0) && 
	(z_1083 > 0) && (z_11 > 0) && (z_116 > 0) && (z_1248 > 0) && (z_1268 > 0) && 
	(z_132 > 0) && (z_1329 > 0) && (z_1333 > 0) && (z_1409 > 0) && (z_150 > 0) && 
	(z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0)
	 && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 
	> 0) && (z_535 > 0) && (z_64 > 0) && (z_651 > 0) && (z_696 > 0) && (z_762 > 0) 
	&& (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																																					DATA{
																																						:pid_2:uncoveredExit = 0;
																																						:pid_82:node_time = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1643 + z_53 + z_903);
																																						:pid_82:z = z_1643;
																																						:pid_82:localTime = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1643 + z_3 + z_53 + z_903);
																																						:pid_82:localPC = (((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241) && (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_593 < 4) && (t_653 < 4) && (t_823 < 4) && (z_1083 < t_653) && (z_1268 < t_823) && (z_1643 < t_415) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_593 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + z_1409 + z_1419 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1643 + z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_1083 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_1333 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																																						:pid_82:timeEmit = (z_1329 + z_1409 + z_1419 + z_4 + z_64);
																																						:pid_83:i = 2;
																																						:pid_83:t = t_593;
																																						:pid_89:cl = (z_1268 + z_1333 + z_1643);
																																						:pid_94:cl = (z_1083 + z_1248 + z_1268 + z_1333 + z_1643);
																																					}
																																					BUFFER{
																																						:pid_82:bufferNode:<FIFO>#0{ }
																																					}
																																				}
																																			}
																																			EC:<Id:3664;Ev:330;H:35;W:3365>{ SC: ( pid_25:o#21 , ( pid_36:cp2 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
																EXE: { |;| (:pid_31 
	, run) (:pid_32 , run) (:pid_35 , run) (:pid_35 , cp_sendCM) (:pid_2 , run) }
																					
																TRACE: { |;| 
	(:pid_31 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1490 }) 
	(:pid_35 , ${ output inst::Trickle.Node.ControlMsg [ 1 , 1 ] ${ + 
	param::Trickle.Node.z_0 param::Trickle.Node.z_1490 param::Trickle.Node.z_150 
	param::Trickle.Node.z_185 param::Trickle.Node.z_240 param::Trickle.Node.z_5 
	param::Trickle.Node.z_535 param::Trickle.Node.z_595 param::Trickle.Node.z_90 } } 
	@ (z_1490 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90)) }
																																				PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_1490 + z_185 + z_240 + z_535 + z_595) == t_79) 
	&& ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && 
	(z_1329 == t_42) && (z_1419 == t_447) && (z_240 == t_96) && (z_595 == t_434) && 
	(z_90 == t_5) && ((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241) && 
	((z_1329 + z_1409) < 4) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) 
	&& (t_415 < 4) && (t_42 < 4) && (t_447 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 
	< 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) 
	&& (t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_96 < 4) && (z_1083 < t_653) 
	&& (z_116 < t_10) && (z_1268 < t_823) && (z_132 < t_23) && (z_346 < t_220) && 
	(z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= 
	(t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) 
	&& (0 <= (t_415 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_447 + -2)) && (0 <= 
	(t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && 
	(0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= 
	(t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)
	) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + 
	z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 
	+ z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + 
	z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= 
	(z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + 
	z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + 
	z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 
	+ z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903))
	 && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1329 + 
	z_1409 + z_4 + z_64)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + 
	z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + 
	z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && ((z_150 + z_90) > t_5) && 
	(z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && (z_1027 > 0) && (z_1083 > 0) && (z_11 
	> 0) && (z_116 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_132 > 0) && (z_1329 > 
	0) && (z_1409 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && 
	(z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0)
	 && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_595 > 0) && 
	(z_64 > 0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 
	> 0) && (z_903 > 0))
																																				DATA{
																																					:pid_2:uncoveredExit = 1;
																																					:pid_31:node_time = (z_1490 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90);
																																					:pid_31:z = z_1490;
																																					:pid_31:localTime = (z_0 + z_1490 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90);
																																					:pid_31:localPC = (((z_1490 + z_185 + z_240 + z_535 + z_595) == t_79) && ((z_150 + z_90) == 4) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && (t_5 < 4) && (t_79 < 8) && (t_434 < 4) && (t_96 < 4) && (0 <= (t_5 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_434 + -2)) && (0 <= (t_96 + -2)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_150 > 0) && (z_185 > 0) && (z_240 > 0) && (z_5 > 0) && (z_535 > 0) && (z_595 > 0) && (z_90 > 0));
																																					:pid_32:cl = (z_1490 + z_185 + z_240 + z_535 + z_595);
																																					:pid_38:cl = (z_1490 + z_240 + z_535 + z_595);
																																					:pid_43:cl = (z_1490 + z_595);
																																				}
																																				BUFFER{
																																					:pid_48:bufferNode:<FIFO>#0{
																																						:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																																						:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																																						:pid_65:DataMsg1([ 1 , 1 , 0 ] , (z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																																						:pid_31:ControlMsg([ 1 , 1 ] , (z_0 + z_1490 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90));
																																					}
																																					:pid_65:bufferNode:<FIFO>#0{
																																						:pid_31:ControlMsg([ 1 , 1 ] , (z_0 + z_1490 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90));
																																					}
																																				}
																																				EC:<Id:4165;Ev:0;H:36;W:3835>{ SC: ( pid_26:o#22 , ( pid_36:cp2 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
																	EXE: { |;| 
	(:pid_82 , run) (:pid_83 , run) (:pid_86 , run) (:pid_86 , 
	cp1_receiveCM_inconsistent) (:pid_2 , run) (:pid_25 , run) (:pid_25 , n4_in_CM) }
																					
																	TRACE: { |;| 
	(:pid_82 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1648 }) 
	(:pid_86 , ${ input inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + 
	param::Trickle.Node.z_1329 param::Trickle.Node.z_1409 param::Trickle.Node.z_1419 
	param::Trickle.Node.z_4 param::Trickle.Node.z_64 } } @ (z_1003 + z_1083 + z_1248 
	+ z_1268 + z_1333 + z_1648 + z_53 + z_903)) (:pid_86 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_597 }) }
																																					/*FLAGS{ COVERAGE-ELEMENT }*/
																																					INFO{
																																						<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22" as trace="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22">
																																					}
																																					PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_1490 + z_185 + z_240 + z_535 + z_595) == t_79) 
	&& ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && 
	(z_1329 == t_42) && (z_1419 == t_447) && (z_240 == t_96) && (z_595 == t_434) && 
	(z_90 == t_5) && ((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241) && 
	((z_1329 + z_1409) < 4) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) 
	&& (t_415 < 4) && (t_42 < 4) && (t_447 < 4) && (t_5 < 4) && (t_597 < 4) && (t_65 
	< 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && 
	(t_513 < 4) && (t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_96 < 4) && 
	(z_1083 < t_653) && (z_116 < t_10) && (z_1268 < t_823) && (z_132 < t_23) && 
	(z_1648 < t_415) && (z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && 
	(z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && 
	(0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_42 
	+ -2)) && (0 <= (t_447 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_597 + -2)) && (0 
	<= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)
	) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= 
	(t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && (0 <= (t_96 + -2))
	 && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + 
	z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + 
	z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + 
	z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + 
	z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 
	+ z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + 
	z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 
	+ z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1329 + z_1409 + z_4 + z_64)) && 
	((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + 
	z_903)) && ((z_1329 + z_1409 + z_1419 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 
	+ z_1268 + z_1333 + z_1648 + z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= 
	(z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && ((z_150 + 
	z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && (z_1027 > 0) && 
	(z_1083 > 0) && (z_11 > 0) && (z_116 > 0) && (z_1248 > 0) && (z_1268 > 0) && 
	(z_132 > 0) && (z_1329 > 0) && (z_1333 > 0) && (z_1409 > 0) && (z_150 > 0) && 
	(z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0)
	 && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 
	> 0) && (z_535 > 0) && (z_595 > 0) && (z_64 > 0) && (z_651 > 0) && (z_762 > 0) 
	&& (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																																					DATA{
																																						:pid_2:uncoveredExit = 0;
																																						:pid_82:node_time = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1648 + z_53 + z_903);
																																						:pid_82:z = z_1648;
																																						:pid_82:localTime = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1648 + z_3 + z_53 + z_903);
																																						:pid_82:localPC = (((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241) && (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_597 < 4) && (t_653 < 4) && (t_823 < 4) && (z_1083 < t_653) && (z_1268 < t_823) && (z_1648 < t_415) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_597 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + z_1409 + z_1419 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1648 + z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_1083 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_1333 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																																						:pid_82:timeEmit = (z_1329 + z_1409 + z_1419 + z_4 + z_64);
																																						:pid_83:i = 2;
																																						:pid_83:t = t_597;
																																						:pid_89:cl = (z_1268 + z_1333 + z_1648);
																																						:pid_94:cl = (z_1083 + z_1248 + z_1268 + z_1333 + z_1648);
																																					}
																																					BUFFER{
																																						:pid_82:bufferNode:<FIFO>#0{ }
																																					}
																																				}
																																			}
																																			EC:<Id:3665;Ev:331;H:35;W:3366>{ SC: ( pid_25:o#21 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
																EXE: { |;| (:pid_31 
	, run) (:pid_32 , run) (:pid_35 , run) (:pid_35 , cp1_receiveCM_consistent) 
	(:pid_2 , run) }
																					
																TRACE: { |;| 
	(:pid_31 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1490 }) 
	(:pid_35 , ${ input inst::Trickle.Node.ControlMsg [ 1 , 1 ] ${ + 
	param::Trickle.Node.z_132 param::Trickle.Node.z_2 param::Trickle.Node.z_32 
	param::Trickle.Node.z_422 param::Trickle.Node.z_447 param::Trickle.Node.z_762 
	param::Trickle.Node.z_792 param::Trickle.Node.z_882 } } @ (z_1490 + z_150 + 
	z_185 + z_240 + z_5 + z_535 + z_595 + z_90)) }
																																				PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + 
	z_792 + z_882) == t_68) && (z_1329 == t_42) && (z_1419 == t_447) && (z_240 == 
	t_96) && (z_595 == t_434) && (z_90 == t_5) && ((z_1003 + z_1083 + z_1248 + 
	z_1268 + z_1333) < t_241) && ((z_1329 + z_1409) < 4) && ((z_1490 + z_185 + z_240 
	+ z_535 + z_595) < t_79) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4)
	 && (t_415 < 4) && (t_42 < 4) && (t_447 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 
	< 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) 
	&& (t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_96 < 4) && (z_1083 < t_653) 
	&& (z_116 < t_10) && (z_1268 < t_823) && (z_132 < t_23) && (z_346 < t_220) && 
	(z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= 
	(t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) 
	&& (0 <= (t_415 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_447 + -2)) && (0 <= 
	(t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && 
	(0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= 
	(t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)
	) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + 
	z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 
	+ z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + 
	z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= 
	(z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + 
	z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + 
	z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 
	+ z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903))
	 && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_0 + 
	z_1490 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90)) && ((z_132 + z_2 + 
	z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1329 + z_1409 + z_4 + z_64)) 
	&& ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 
	+ z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + 
	z_1333 + z_3 + z_53 + z_903)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0)
	 && (z_1003 > 0) && (z_1027 > 0) && (z_1083 > 0) && (z_11 > 0) && (z_116 > 0) && 
	(z_1248 > 0) && (z_1268 > 0) && (z_132 > 0) && (z_1329 > 0) && (z_1409 > 0) && 
	(z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 
	0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && 
	(z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_595 > 0) && (z_64 > 0) && (z_651 > 
	0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																																				DATA{
																																					:pid_2:uncoveredExit = 1;
																																					:pid_31:node_time = (z_1490 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90);
																																					:pid_31:z = z_1490;
																																					:pid_31:localTime = (z_0 + z_1490 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90);
																																					:pid_31:seq_buff[0] = 1;
																																					:pid_31:seq_buff[1] = 1;
																																					:pid_31:localPC = (((z_150 + z_90) == 4) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && ((z_1490 + z_185 + z_240 + z_535 + z_595) < t_79) && (t_5 < 4) && (t_79 < 8) && (t_434 < 4) && (t_96 < 4) && (0 <= (t_5 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_434 + -2)) && (0 <= (t_96 + -2)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_0 + z_1490 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_150 > 0) && (z_185 > 0) && (z_240 > 0) && (z_5 > 0) && (z_535 > 0) && (z_595 > 0) && (z_90 > 0));
																																					:pid_31:timeEmit = (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																																					:pid_32:c = 1;
																																					:pid_32:i = 2;
																																					:pid_32:consistent = true;
																																					:pid_32:cl = (z_1490 + z_185 + z_240 + z_535 + z_595);
																																					:pid_38:cl = (z_1490 + z_240 + z_535 + z_595);
																																					:pid_43:cl = (z_1490 + z_595);
																																				}
																																				BUFFER{
																																					:pid_31:bufferNode:<FIFO>#0{
																																						:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																																						:pid_65:DataMsg1([ 1 , 1 , 0 ] , (z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																																					}
																																				}
																																				EC:<Id:4183;Ev:0;H:36;W:3852>{ SC: ( pid_26:o#22 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
																	EXE: { |;| 
	(:pid_82 , run) (:pid_83 , run) (:pid_86 , run) (:pid_86 , 
	cp1_receiveCM_inconsistent) (:pid_2 , run) (:pid_25 , run) (:pid_25 , n4_in_CM) }
																					
																	TRACE: { |;| 
	(:pid_82 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1653 }) 
	(:pid_86 , ${ input inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + 
	param::Trickle.Node.z_1329 param::Trickle.Node.z_1409 param::Trickle.Node.z_1419 
	param::Trickle.Node.z_4 param::Trickle.Node.z_64 } } @ (z_1003 + z_1083 + z_1248 
	+ z_1268 + z_1333 + z_1653 + z_53 + z_903)) (:pid_86 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_600 }) }
																																					/*FLAGS{ COVERAGE-ELEMENT }*/
																																					INFO{
																																						<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22" as trace="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22">
																																					}
																																					PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + 
	z_792 + z_882) == t_68) && (z_1329 == t_42) && (z_1419 == t_447) && (z_240 == 
	t_96) && (z_595 == t_434) && (z_90 == t_5) && ((z_1003 + z_1083 + z_1248 + 
	z_1268 + z_1333) < t_241) && ((z_1329 + z_1409) < 4) && ((z_1490 + z_185 + z_240 
	+ z_535 + z_595) < t_79) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4)
	 && (t_415 < 4) && (t_42 < 4) && (t_447 < 4) && (t_5 < 4) && (t_600 < 4) && 
	(t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 
	4) && (t_513 < 4) && (t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_96 < 4) && 
	(z_1083 < t_653) && (z_116 < t_10) && (z_1268 < t_823) && (z_132 < t_23) && 
	(z_1653 < t_415) && (z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && 
	(z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && 
	(0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_42 
	+ -2)) && (0 <= (t_447 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_600 + -2)) && (0 
	<= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)
	) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= 
	(t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && (0 <= (t_96 + -2))
	 && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + 
	z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + 
	z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + 
	z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + 
	z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 
	+ z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + 
	z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 
	+ z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_0 + z_1490 + z_150 + z_185 + z_240 
	+ z_5 + z_535 + z_595 + z_90)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + 
	z_792 + z_882) <= (z_1329 + z_1409 + z_4 + z_64)) && ((z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + 
	z_1409 + z_1419 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + 
	z_1653 + z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + 
	z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && ((z_150 + z_90) > t_5) && 
	(z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && (z_1027 > 0) && (z_1083 > 0) && (z_11 
	> 0) && (z_116 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_132 > 0) && (z_1329 > 
	0) && (z_1333 > 0) && (z_1409 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && 
	(z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0)
	 && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && 
	(z_595 > 0) && (z_64 > 0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 
	> 0) && (z_90 > 0) && (z_903 > 0))
																																					DATA{
																																						:pid_2:uncoveredExit = 0;
																																						:pid_82:node_time = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1653 + z_53 + z_903);
																																						:pid_82:z = z_1653;
																																						:pid_82:localTime = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1653 + z_3 + z_53 + z_903);
																																						:pid_82:localPC = (((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241) && (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_600 < 4) && (t_653 < 4) && (t_823 < 4) && (z_1083 < t_653) && (z_1268 < t_823) && (z_1653 < t_415) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_600 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + z_1409 + z_1419 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1653 + z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_1083 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_1333 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																																						:pid_82:timeEmit = (z_1329 + z_1409 + z_1419 + z_4 + z_64);
																																						:pid_83:i = 2;
																																						:pid_83:t = t_600;
																																						:pid_89:cl = (z_1268 + z_1333 + z_1653);
																																						:pid_94:cl = (z_1083 + z_1248 + z_1268 + z_1333 + z_1653);
																																					}
																																					BUFFER{
																																						:pid_82:bufferNode:<FIFO>#0{ }
																																					}
																																				}
																																			}
																																			EC:<Id:3666;Ev:332;H:35;W:3367>{ SC: ( pid_25:o#21 , ( pid_35:cp1 , pid_41:dp2 , pid_45:dp1 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
																EXE: { |;| (:pid_31 
	, run) (:pid_43 , run) (:pid_46 , run) (:pid_46 , dp_resetTau) (:pid_2 , run) }
																					
																TRACE: { |;| 
	(:pid_31 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1490 }) 
	(:pid_46 , ${ newfresh inst::Trickle.Node.DataProcess.t 
	param::Trickle.Node.DataProcess.t_987 }) }
																																				PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_1490 + z_595) == 4) && ((z_150 + z_90) == 4) && 
	((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (z_1329 == t_42) && (z_1419 
	== t_447) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && ((z_1003 + 
	z_1083 + z_1248 + z_1268 + z_1333) < t_241) && ((z_1329 + z_1409) < 4) && (t_10 
	< 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_42 < 4) && 
	(t_447 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4)
	 && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_653 < 4) && 
	(t_823 < 4) && (t_96 < 4) && (t_987 < 8) && (z_1083 < t_653) && (z_116 < t_10) 
	&& (z_1268 < t_823) && (z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && 
	(z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 
	<= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + 
	-2)) && (0 <= (t_42 + -2)) && (0 <= (t_447 + -2)) && (0 <= (t_5 + -2)) && (0 <= 
	(t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) 
	&& (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= 
	(t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && (0 <= (t_96 + -2))
	 && (0 <= (t_987 + -4)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + 
	z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 
	+ z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + 
	z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= 
	(z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + 
	z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + 
	z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 
	+ z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903))
	 && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1329 + 
	z_1409 + z_4 + z_64)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + 
	z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + 
	z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && ((z_1490 + z_595) > t_434) && 
	((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && (z_1027 > 0) 
	&& (z_1083 > 0) && (z_11 > 0) && (z_116 > 0) && (z_1248 > 0) && (z_1268 > 0) && 
	(z_132 > 0) && (z_1329 > 0) && (z_1409 > 0) && (z_150 > 0) && (z_185 > 0) && 
	(z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0)
	 && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 
	> 0) && (z_595 > 0) && (z_64 > 0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) 
	&& (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																																				DATA{
																																					:pid_2:uncoveredExit = 1;
																																					:pid_31:node_time = (z_1490 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90);
																																					:pid_31:z = z_1490;
																																					:pid_31:localTime = (z_0 + z_1490 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90);
																																					:pid_31:localPC = (((z_1490 + z_595) == 4) && ((z_150 + z_90) == 4) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && (t_5 < 4) && (t_79 < 8) && (t_434 < 4) && (t_96 < 4) && (t_987 < 8) && (0 <= (t_5 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_434 + -2)) && (0 <= (t_96 + -2)) && (0 <= (t_987 + -4)) && ((z_1490 + z_595) > t_434) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_150 > 0) && (z_185 > 0) && (z_240 > 0) && (z_5 > 0) && (z_535 > 0) && (z_595 > 0) && (z_90 > 0));
																																					:pid_32:cl = (z_1490 + z_185 + z_240 + z_535 + z_595);
																																					:pid_38:cl = (z_1490 + z_240 + z_535 + z_595);
																																					:pid_43:e = 1;
																																					:pid_43:tau = 8;
																																					:pid_43:c = 0;
																																					:pid_43:t = t_987;
																																					:pid_43:cl = 0;
																																				}
																																				EC:<Id:4200;Ev:334;H:36;W:3868>{ SC: ( pid_26:o#22 , ( pid_35:cp1 , pid_41:dp2 , pid_45:dp1 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
																	EXE: { |;| 
	(:pid_82 , run) (:pid_83 , run) (:pid_86 , run) (:pid_86 , 
	cp1_receiveCM_inconsistent) (:pid_2 , run) (:pid_25 , run) (:pid_25 , n4_in_CM) }
																					
																	TRACE: { |;| 
	(:pid_82 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1658 }) 
	(:pid_86 , ${ input inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + 
	param::Trickle.Node.z_1329 param::Trickle.Node.z_1409 param::Trickle.Node.z_1419 
	param::Trickle.Node.z_4 param::Trickle.Node.z_64 } } @ (z_1003 + z_1083 + z_1248 
	+ z_1268 + z_1333 + z_1658 + z_53 + z_903)) (:pid_86 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_603 }) }
																																					/*FLAGS{ COVERAGE-ELEMENT }*/
																																					INFO{
																																						<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22" as trace="tpid#24->run::pid_26:Trickle.Observer.o#22->prot::Trickle.Observer.o#22">
																																					}
																																					PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_1490 + z_595) == 4) && ((z_150 + z_90) == 4) && 
	((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (z_1329 == t_42) && (z_1419 
	== t_447) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && ((z_1003 + 
	z_1083 + z_1248 + z_1268 + z_1333) < t_241) && ((z_1329 + z_1409) < 4) && (t_10 
	< 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_42 < 4) && 
	(t_447 < 4) && (t_5 < 4) && (t_603 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8)
	 && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && 
	(t_653 < 4) && (t_823 < 4) && (t_96 < 4) && (t_987 < 8) && (z_1083 < t_653) && 
	(z_116 < t_10) && (z_1268 < t_823) && (z_132 < t_23) && (z_1658 < t_415) && 
	(z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && 
	(z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2))
	 && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_42 + -2)) && (0 <= 
	(t_447 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_603 + -2)) && (0 <= (t_65 + -2)) 
	&& (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= 
	(t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)
	) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && (0 <= (t_96 + -2)) && (0 <= 
	(t_987 + -4)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= 
	(z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + 
	z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + 
	z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + 
	z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 
	+ z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) 
	&& ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + z_132 + 
	z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 
	+ z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 
	+ z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + 
	z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1329 + z_1409 + z_4 + 
	z_64)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 
	+ z_53 + z_903)) && ((z_1329 + z_1409 + z_1419 + z_4 + z_64) <= (z_1003 + z_1083 
	+ z_1248 + z_1268 + z_1333 + z_1658 + z_3 + z_53 + z_903)) && ((z_1329 + z_4 + 
	z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && 
	((z_1490 + z_595) > t_434) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) 
	&& (z_1003 > 0) && (z_1027 > 0) && (z_1083 > 0) && (z_11 > 0) && (z_116 > 0) && 
	(z_1248 > 0) && (z_1268 > 0) && (z_132 > 0) && (z_1329 > 0) && (z_1333 > 0) && 
	(z_1409 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 
	0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && 
	(z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_595 > 0) && (z_64 > 
	0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && 
	(z_903 > 0))
																																					DATA{
																																						:pid_2:uncoveredExit = 0;
																																						:pid_82:node_time = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1658 + z_53 + z_903);
																																						:pid_82:z = z_1658;
																																						:pid_82:localTime = (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1658 + z_3 + z_53 + z_903);
																																						:pid_82:localPC = (((z_1003 + z_1083 + z_1248 + z_1268 + z_1333) < t_241) && (t_241 < 4) && (t_39 < 4) && (t_415 < 4) && (t_603 < 4) && (t_653 < 4) && (t_823 < 4) && (z_1083 < t_653) && (z_1268 < t_823) && (z_1658 < t_415) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_415 + -2)) && (0 <= (t_603 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1329 + z_1409 + z_1419 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_1658 + z_3 + z_53 + z_903)) && ((z_1329 + z_4 + z_64) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_1333 + z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_1083 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_1333 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																																						:pid_82:timeEmit = (z_1329 + z_1409 + z_1419 + z_4 + z_64);
																																						:pid_83:i = 2;
																																						:pid_83:t = t_603;
																																						:pid_89:cl = (z_1268 + z_1333 + z_1658);
																																						:pid_94:cl = (z_1083 + z_1248 + z_1268 + z_1333 + z_1658);
																																					}
																																					BUFFER{
																																						:pid_82:bufferNode:<FIFO>#0{ }
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																															EC:<Id:3150;Ev:268;H:31;W:2884>{ SC: ( pid_22:o#18 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
												EXE: { |;| (:pid_99 , run) (:pid_100 
	, run) (:pid_103 , run) (:pid_103 , cp1_receiveCM_inconsistent) (:pid_2 , run) }
																					
												TRACE: { |;| (:pid_99 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1329 }) (:pid_103 , ${ input 
	inst::Trickle.Node.ControlMsg [ 1 , 1 ] ${ + param::Trickle.Node.z_132 
	param::Trickle.Node.z_2 param::Trickle.Node.z_32 param::Trickle.Node.z_422 
	param::Trickle.Node.z_447 param::Trickle.Node.z_762 param::Trickle.Node.z_792 
	param::Trickle.Node.z_882 } } @ (z_1329 + z_64)) (:pid_103 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_413 }) }
																																PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + 
	z_792 + z_882) == t_68) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) 
	&& (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_413 < 4) && (t_42 
	< 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && 
	(t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_653 < 4) && 
	(t_823 < 4) && (t_96 < 4) && (z_1083 < t_653) && (z_116 < t_10) && (z_1268 < 
	t_823) && (z_132 < t_23) && (z_1329 < t_42) && (z_346 < t_220) && (z_447 < t_338)
	 && (z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) 
	&& (0 <= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= 
	(t_413 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) 
	&& (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= 
	(t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)
	) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + 
	z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + 
	z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + 
	z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 
	+ z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) 
	<= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + 
	z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + 
	z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 
	+ z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1329 + z_4 + z_64)) && ((z_132 + 
	z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && 
	((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && (z_1027 > 0) 
	&& (z_1083 > 0) && (z_11 > 0) && (z_116 > 0) && (z_1248 > 0) && (z_132 > 0) && 
	(z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 
	0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && 
	(z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_64 > 0) && (z_651 > 0) && (z_762 > 
	0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																																DATA{
																																	:pid_2:uncoveredExit = 1;
																																	:pid_99:mydp_run[0] = true;
																																	:pid_99:mydp_run[1] = true;
																																	:pid_99:node_time = (z_1329 + z_64);
																																	:pid_99:z = z_1329;
																																	:pid_99:localTime = (z_1329 + z_4 + z_64);
																																	:pid_99:seq_buff[0] = 1;
																																	:pid_99:seq_buff[1] = 1;
																																	:pid_99:localPC = ((t_413 < 4) && (t_42 < 4) && (z_1329 < t_42) && (0 <= (t_413 + -2)) && (0 <= (t_42 + -2)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1329 + z_4 + z_64)) && (z_4 > 0) && (z_64 > 0));
																																	:pid_99:timeEmit = (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																																	:pid_100:e = 0;
																																	:pid_100:c = 0;
																																	:pid_100:i = 2;
																																	:pid_100:t = t_413;
																																	:pid_100:consistent = false;
																																	:pid_100:cl = 0;
																																	:pid_106:cl = (z_1329 + z_64);
																																	:pid_111:cl = (z_1329 + z_64);
																																}
																																BUFFER{
																																	:pid_99:bufferNode:<FIFO>#0{
																																		:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																																		:pid_65:DataMsg1([ 1 , 1 , 0 ] , (z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																																	}
																																}
																																EC:<Id:3180;Ev:0;H:32;W:2884>{ SC: ( pid_23:o#19 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
													EXE: { |;| (:pid_99 , run) 
	(:pid_100 , run) (:pid_103 , run) (:pid_103 , cp_sendCM) (:pid_2 , run) (:pid_22 
	, run) (:pid_22 , n5_out_CM) }
																					
													TRACE: { |;| (:pid_99 , ${ 
	newfresh inst::Trickle.Node.z param::Trickle.Node.z_1339 }) (:pid_103 , ${ 
	output inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + param::Trickle.Node.z_1329 
	param::Trickle.Node.z_1339 param::Trickle.Node.z_4 param::Trickle.Node.z_64 } } 
	@ (z_1329 + z_1339 + z_64)) }
																																	/*FLAGS{ COVERAGE-ELEMENT }*/
																																	INFO{
																																		<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#21->run::pid_23:Trickle.Observer.o#19->prot::Trickle.Observer.o#19" as trace="tpid#21->run::pid_23:Trickle.Observer.o#19->prot::Trickle.Observer.o#19">
																																	}
																																	PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + 
	z_792 + z_882) == t_68) && (z_1339 == t_413) && (z_240 == t_96) && (z_595 == 
	t_434) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) 
	&& (t_413 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 
	8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && 
	(t_653 < 4) && (t_823 < 4) && (t_96 < 4) && (z_1083 < t_653) && (z_116 < t_10) 
	&& (z_1268 < t_823) && (z_132 < t_23) && (z_1329 < t_42) && (z_346 < t_220) && 
	(z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= 
	(t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) 
	&& (0 <= (t_413 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 
	+ -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 
	<= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + 
	-2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && (0 <= (t_96 + -2)) && 
	((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + 
	z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + 
	z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + 
	z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + 
	z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 
	+ z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + 
	z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 
	+ z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1329 + z_4 + z_64)) && ((z_132 + 
	z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && 
	((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && (z_1027 > 0) 
	&& (z_1083 > 0) && (z_11 > 0) && (z_116 > 0) && (z_1248 > 0) && (z_132 > 0) && 
	(z_1329 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 
	0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && 
	(z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_64 > 0) && (z_651 > 
	0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																																	DATA{
																																		:pid_2:uncoveredExit = 0;
																																		:pid_2:seqBuff[0] = 0;
																																		:pid_2:seqBuff[1] = 0;
																																		:pid_99:node_time = (z_1329 + z_1339 + z_64);
																																		:pid_99:z = z_1339;
																																		:pid_99:localTime = (z_1329 + z_1339 + z_4 + z_64);
																																		:pid_99:localPC = ((z_1339 == t_413) && (t_413 < 4) && (t_42 < 4) && (z_1329 < t_42) && (0 <= (t_413 + -2)) && (0 <= (t_42 + -2)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1329 + z_4 + z_64)) && (z_1329 > 0) && (z_4 > 0) && (z_64 > 0));
																																		:pid_100:cl = z_1339;
																																		:pid_106:cl = (z_1329 + z_1339 + z_64);
																																		:pid_111:cl = (z_1329 + z_1339 + z_64);
																																	}
																																	BUFFER{
																																		:pid_82:bufferNode:<FIFO>#0{
																																			:pid_99:ControlMsg([ 0 , 0 ] , (z_1329 + z_1339 + z_4 + z_64));
																																		}
																																	}
																																}
																															}
																															EC:<Id:3151;Ev:269;H:31;W:2885>{ SC: ( pid_22:o#18 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_87:cp2 , pid_91:dp1 , pid_96:dp1 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
												EXE: { |;| (:pid_82 , run) (:pid_83 
	, run) (:pid_86 , run) (:pid_86 , cp_sendCM) (:pid_2 , run) }
																					
												TRACE: { |;| (:pid_82 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1328 }) (:pid_86 , ${ output 
	inst::Trickle.Node.ControlMsg [ 1 , 1 ] ${ + param::Trickle.Node.z_1003 
	param::Trickle.Node.z_1083 param::Trickle.Node.z_1248 param::Trickle.Node.z_1268 
	param::Trickle.Node.z_1328 param::Trickle.Node.z_3 param::Trickle.Node.z_53 
	param::Trickle.Node.z_903 } } @ (z_1003 + z_1083 + z_1248 + z_1268 + z_1328 + 
	z_53 + z_903)) }
																																PC: (((z_1003 + z_1083 + z_1248 + z_1268 + z_1328) == t_241) && ((z_1027 + z_1112 + 
	z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + z_792 + z_882) == t_568) 
	&& ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && 
	(z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) 
	&& (t_241 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 
	4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && 
	(t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_96 < 4) && (z_1083 < t_653) && 
	(z_116 < t_10) && (z_1268 < t_823) && (z_132 < t_23) && (z_346 < t_220) && 
	(z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= 
	(t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) 
	&& (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 
	+ -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 
	<= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + 
	-2)) && (0 <= (t_823 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + 
	z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + 
	z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) 
	<= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + 
	z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + 
	z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && 
	((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + 
	z_2 + z_32)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + 
	z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && 
	((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= 
	(z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 
	+ z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_150 + z_90) > t_5) && 
	(z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && (z_1027 > 0) && (z_1083 > 0) && (z_11 
	> 0) && (z_116 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_132 > 0) && (z_150 > 0)
	 && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 
	> 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && 
	(z_53 > 0) && (z_535 > 0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 
	> 0) && (z_90 > 0) && (z_903 > 0))
																																DATA{
																																	:pid_2:uncoveredExit = 1;
																																	:pid_82:node_time = (z_1003 + z_1083 + z_1248 + z_1268 + z_1328 + z_53 + z_903);
																																	:pid_82:z = z_1328;
																																	:pid_82:localTime = (z_1003 + z_1083 + z_1248 + z_1268 + z_1328 + z_3 + z_53 + z_903);
																																	:pid_82:localPC = (((z_1003 + z_1083 + z_1248 + z_1268 + z_1328) == t_241) && (t_241 < 4) && (t_39 < 4) && (t_653 < 4) && (t_823 < 4) && (z_1083 < t_653) && (z_1268 < t_823) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_1083 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																																	:pid_83:cl = (z_1003 + z_1083 + z_1248 + z_1268 + z_1328);
																																	:pid_89:cl = (z_1268 + z_1328);
																																	:pid_94:cl = (z_1083 + z_1248 + z_1268 + z_1328);
																																}
																																BUFFER{
																																	:pid_48:bufferNode:<FIFO>#0{
																																		:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																																		:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																																		:pid_65:DataMsg1([ 1 , 1 , 0 ] , (z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																																		:pid_82:ControlMsg([ 1 , 1 ] , (z_1003 + z_1083 + z_1248 + z_1268 + z_1328 + z_3 + z_53 + z_903));
																																	}
																																}
																																EC:<Id:3196;Ev:0;H:32;W:2885>{ SC: ( pid_23:o#19 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_87:cp2 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
													EXE: { |;| (:pid_99 , run) 
	(:pid_100 , run) (:pid_103 , run) (:pid_103 , cp_sendCM) (:pid_2 , run) (:pid_22 
	, run) (:pid_22 , n5_out_CM) }
																					
													TRACE: { |;| (:pid_99 , ${ 
	newfresh inst::Trickle.Node.z param::Trickle.Node.z_1344 }) (:pid_103 , ${ 
	output inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + param::Trickle.Node.z_1344 
	param::Trickle.Node.z_4 param::Trickle.Node.z_64 } } @ (z_1344 + z_64)) }
																																	/*FLAGS{ COVERAGE-ELEMENT }*/
																																	INFO{
																																		<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#21->run::pid_23:Trickle.Observer.o#19->prot::Trickle.Observer.o#19" as trace="tpid#21->run::pid_23:Trickle.Observer.o#19->prot::Trickle.Observer.o#19">
																																	}
																																	PC: (((z_1003 + z_1083 + z_1248 + z_1268 + z_1328) == t_241) && ((z_1027 + z_1112 + 
	z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + z_792 + z_882) == t_568) 
	&& ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && 
	(z_1344 == t_42) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && 
	(t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) 
	&& (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && 
	(t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_96 
	< 4) && (z_1083 < t_653) && (z_116 < t_10) && (z_1268 < t_823) && (z_132 < t_23) 
	&& (z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && 
	(z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2))
	 && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 
	+ -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 
	<= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + 
	-2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && (0 <= (t_96 + -2)) && 
	((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + 
	z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + 
	z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + 
	z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + 
	z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 
	+ z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + 
	z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 
	+ z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_150 + 
	z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && (z_1027 > 0) && 
	(z_1083 > 0) && (z_11 > 0) && (z_116 > 0) && (z_1248 > 0) && (z_1268 > 0) && 
	(z_132 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 
	0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && 
	(z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_64 > 0) && (z_651 > 
	0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																																	DATA{
																																		:pid_2:uncoveredExit = 0;
																																		:pid_2:seqBuff[0] = 0;
																																		:pid_2:seqBuff[1] = 0;
																																		:pid_99:node_time = (z_1344 + z_64);
																																		:pid_99:z = z_1344;
																																		:pid_99:localTime = (z_1344 + z_4 + z_64);
																																		:pid_99:localPC = ((z_1344 == t_42) && (t_42 < 4) && (0 <= (t_42 + -2)) && (z_4 > 0) && (z_64 > 0));
																																		:pid_100:cl = z_1344;
																																		:pid_106:cl = (z_1344 + z_64);
																																		:pid_111:cl = (z_1344 + z_64);
																																	}
																																	BUFFER{
																																		:pid_82:bufferNode:<FIFO>#0{
																																			:pid_99:ControlMsg([ 0 , 0 ] , (z_1344 + z_4 + z_64));
																																		}
																																	}
																																}
																															}
																															EC:<Id:3152;Ev:270;H:31;W:2886>{ SC: ( pid_22:o#18 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_92:dp2 , pid_96:dp1 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
												EXE: { |;| (:pid_82 , run) (:pid_89 
	, run) (:pid_91 , run) (:pid_91 , dp_sendDM) (:pid_2 , run) }
																					
												TRACE: { |;| (:pid_82 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1328 }) (:pid_91 , ${ output 
	inst::Trickle.Node.DataMsg1 [ 1 , 1 , 0 ] ${ + param::Trickle.Node.z_1003 
	param::Trickle.Node.z_1083 param::Trickle.Node.z_1248 param::Trickle.Node.z_1268 
	param::Trickle.Node.z_1328 param::Trickle.Node.z_3 param::Trickle.Node.z_53 
	param::Trickle.Node.z_903 } } @ (z_1003 + z_1083 + z_1248 + z_1268 + z_1328 + 
	z_53 + z_903)) }
																																PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_1268 + z_1328) == t_823) && ((z_150 + z_90) == 4)
	 && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (z_240 == t_96) && 
	(z_595 == t_434) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && 
	(t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) 
	&& (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && 
	(t_653 < 4) && (t_823 < 4) && (t_96 < 4) && (z_1083 < t_653) && (z_116 < t_10) 
	&& (z_1268 < t_823) && (z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && 
	(z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 
	<= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)
	) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= 
	(t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2))
	 && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= 
	(t_823 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + 
	z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= 
	(z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && 
	((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) 
	<= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 
	+ z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 
	+ z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882)
	 <= (z_3 + z_53 + z_903)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && 
	(z_1003 > 0) && (z_1027 > 0) && (z_1083 > 0) && (z_11 > 0) && (z_116 > 0) && 
	(z_1248 > 0) && (z_1268 > 0) && (z_132 > 0) && (z_150 > 0) && (z_185 > 0) && 
	(z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0)
	 && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 
	> 0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0) 
	&& (z_903 > 0))
																																DATA{
																																	:pid_2:uncoveredExit = 1;
																																	:pid_82:node_time = (z_1003 + z_1083 + z_1248 + z_1268 + z_1328 + z_53 + z_903);
																																	:pid_82:z = z_1328;
																																	:pid_82:localTime = (z_1003 + z_1083 + z_1248 + z_1268 + z_1328 + z_3 + z_53 + z_903);
																																	:pid_82:localPC = (((z_1268 + z_1328) == t_823) && (t_241 < 4) && (t_39 < 4) && (t_653 < 4) && (t_823 < 4) && (z_1083 < t_653) && (z_1268 < t_823) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_1083 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																																	:pid_83:cl = (z_1003 + z_1083 + z_1248 + z_1268 + z_1328);
																																	:pid_89:cl = (z_1268 + z_1328);
																																	:pid_94:cl = (z_1083 + z_1248 + z_1268 + z_1328);
																																}
																																BUFFER{
																																	:pid_48:bufferNode:<FIFO>#0{
																																		:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																																		:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																																		:pid_65:DataMsg1([ 1 , 1 , 0 ] , (z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																																		:pid_82:DataMsg1([ 1 , 1 , 0 ] , (z_1003 + z_1083 + z_1248 + z_1268 + z_1328 + z_3 + z_53 + z_903));
																																	}
																																}
																																EC:<Id:3211;Ev:0;H:32;W:2886>{ SC: ( pid_23:o#19 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_92:dp2 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
													EXE: { |;| (:pid_99 , run) 
	(:pid_100 , run) (:pid_103 , run) (:pid_103 , cp_sendCM) (:pid_2 , run) (:pid_22 
	, run) (:pid_22 , n5_out_CM) }
																					
													TRACE: { |;| (:pid_99 , ${ 
	newfresh inst::Trickle.Node.z param::Trickle.Node.z_1349 }) (:pid_103 , ${ 
	output inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + param::Trickle.Node.z_1349 
	param::Trickle.Node.z_4 param::Trickle.Node.z_64 } } @ (z_1349 + z_64)) }
																																	/*FLAGS{ COVERAGE-ELEMENT }*/
																																	INFO{
																																		<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#21->run::pid_23:Trickle.Observer.o#19->prot::Trickle.Observer.o#19" as trace="tpid#21->run::pid_23:Trickle.Observer.o#19->prot::Trickle.Observer.o#19">
																																	}
																																	PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_1268 + z_1328) == t_823) && ((z_150 + z_90) == 4)
	 && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (z_1349 == t_42) && 
	(z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) 
	&& (t_241 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 
	4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && 
	(t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_96 < 4) && (z_1083 < t_653) && 
	(z_116 < t_10) && (z_1268 < t_823) && (z_132 < t_23) && (z_346 < t_220) && 
	(z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= 
	(t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) 
	&& (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 
	+ -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 
	<= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + 
	-2)) && (0 <= (t_823 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + 
	z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + 
	z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) 
	<= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + 
	z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + 
	z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && 
	((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + 
	z_2 + z_32)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + 
	z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && 
	((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= 
	(z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 
	+ z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_150 + z_90) > t_5) && 
	(z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && (z_1027 > 0) && (z_1083 > 0) && (z_11 
	> 0) && (z_116 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_132 > 0) && (z_150 > 0)
	 && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 
	> 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && 
	(z_53 > 0) && (z_535 > 0) && (z_64 > 0) && (z_651 > 0) && (z_762 > 0) && (z_792 
	> 0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																																	DATA{
																																		:pid_2:uncoveredExit = 0;
																																		:pid_2:seqBuff[0] = 0;
																																		:pid_2:seqBuff[1] = 0;
																																		:pid_99:node_time = (z_1349 + z_64);
																																		:pid_99:z = z_1349;
																																		:pid_99:localTime = (z_1349 + z_4 + z_64);
																																		:pid_99:localPC = ((z_1349 == t_42) && (t_42 < 4) && (0 <= (t_42 + -2)) && (z_4 > 0) && (z_64 > 0));
																																		:pid_100:cl = z_1349;
																																		:pid_106:cl = (z_1349 + z_64);
																																		:pid_111:cl = (z_1349 + z_64);
																																	}
																																	BUFFER{
																																		:pid_82:bufferNode:<FIFO>#0{
																																			:pid_99:ControlMsg([ 0 , 0 ] , (z_1349 + z_4 + z_64));
																																		}
																																	}
																																}
																															}
																															EC:<Id:3153;Ev:271;H:31;W:2887>{ SC: ( pid_22:o#18 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_97:dp2 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
												EXE: { |;| (:pid_82 , run) (:pid_94 
	, run) (:pid_96 , run) (:pid_96 , dp_sendDM) (:pid_2 , run) }
																					
												TRACE: { |;| (:pid_82 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1328 }) (:pid_96 , ${ output 
	inst::Trickle.Node.DataMsg2 [ 2 , 2 , 1 ] ${ + param::Trickle.Node.z_1003 
	param::Trickle.Node.z_1083 param::Trickle.Node.z_1248 param::Trickle.Node.z_1268 
	param::Trickle.Node.z_1328 param::Trickle.Node.z_3 param::Trickle.Node.z_53 
	param::Trickle.Node.z_903 } } @ (z_1003 + z_1083 + z_1248 + z_1268 + z_1328 + 
	z_53 + z_903)) }
																																PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_1083 + z_1248 + z_1268 + z_1328) == t_653) && 
	((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && 
	(z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) 
	&& (t_241 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 
	4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && 
	(t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_96 < 4) && (z_1083 < t_653) && 
	(z_116 < t_10) && (z_1268 < t_823) && (z_132 < t_23) && (z_346 < t_220) && 
	(z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= 
	(t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) 
	&& (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 
	+ -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 
	<= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + 
	-2)) && (0 <= (t_823 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + 
	z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + 
	z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) 
	<= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + 
	z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + 
	z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && 
	((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + 
	z_2 + z_32)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + 
	z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && 
	((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= 
	(z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 
	+ z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_150 + z_90) > t_5) && 
	(z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && (z_1027 > 0) && (z_1083 > 0) && (z_11 
	> 0) && (z_116 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_132 > 0) && (z_150 > 0)
	 && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 
	> 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && 
	(z_53 > 0) && (z_535 > 0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 
	> 0) && (z_90 > 0) && (z_903 > 0))
																																DATA{
																																	:pid_2:uncoveredExit = 1;
																																	:pid_82:node_time = (z_1003 + z_1083 + z_1248 + z_1268 + z_1328 + z_53 + z_903);
																																	:pid_82:z = z_1328;
																																	:pid_82:localTime = (z_1003 + z_1083 + z_1248 + z_1268 + z_1328 + z_3 + z_53 + z_903);
																																	:pid_82:localPC = (((z_1083 + z_1248 + z_1268 + z_1328) == t_653) && (t_241 < 4) && (t_39 < 4) && (t_653 < 4) && (t_823 < 4) && (z_1083 < t_653) && (z_1268 < t_823) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_1083 > 0) && (z_1248 > 0) && (z_1268 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																																	:pid_83:cl = (z_1003 + z_1083 + z_1248 + z_1268 + z_1328);
																																	:pid_89:cl = (z_1268 + z_1328);
																																	:pid_94:cl = (z_1083 + z_1248 + z_1268 + z_1328);
																																}
																																BUFFER{
																																	:pid_48:bufferNode:<FIFO>#0{
																																		:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																																		:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																																		:pid_65:DataMsg1([ 1 , 1 , 0 ] , (z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																																		:pid_82:DataMsg2([ 2 , 2 , 1 ] , (z_1003 + z_1083 + z_1248 + z_1268 + z_1328 + z_3 + z_53 + z_903));
																																	}
																																}
																																EC:<Id:3226;Ev:0;H:32;W:2887>{ SC: ( pid_23:o#19 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_97:dp2 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
													EXE: { |;| (:pid_99 , run) 
	(:pid_100 , run) (:pid_103 , run) (:pid_103 , cp_sendCM) (:pid_2 , run) (:pid_22 
	, run) (:pid_22 , n5_out_CM) }
																					
													TRACE: { |;| (:pid_99 , ${ 
	newfresh inst::Trickle.Node.z param::Trickle.Node.z_1354 }) (:pid_103 , ${ 
	output inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + param::Trickle.Node.z_1354 
	param::Trickle.Node.z_4 param::Trickle.Node.z_64 } } @ (z_1354 + z_64)) }
																																	/*FLAGS{ COVERAGE-ELEMENT }*/
																																	INFO{
																																		<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#21->run::pid_23:Trickle.Observer.o#19->prot::Trickle.Observer.o#19" as trace="tpid#21->run::pid_23:Trickle.Observer.o#19->prot::Trickle.Observer.o#19">
																																	}
																																	PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_1083 + z_1248 + z_1268 + z_1328) == t_653) && 
	((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && 
	(z_1354 == t_42) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && 
	(t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) 
	&& (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && 
	(t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_96 
	< 4) && (z_1083 < t_653) && (z_116 < t_10) && (z_1268 < t_823) && (z_132 < t_23) 
	&& (z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && 
	(z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2))
	 && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 
	+ -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 
	<= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + 
	-2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && (0 <= (t_96 + -2)) && 
	((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + 
	z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + 
	z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + 
	z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + 
	z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 
	+ z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + 
	z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 
	+ z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_150 + 
	z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && (z_1027 > 0) && 
	(z_1083 > 0) && (z_11 > 0) && (z_116 > 0) && (z_1248 > 0) && (z_1268 > 0) && 
	(z_132 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 
	0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && 
	(z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_64 > 0) && (z_651 > 
	0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																																	DATA{
																																		:pid_2:uncoveredExit = 0;
																																		:pid_2:seqBuff[0] = 0;
																																		:pid_2:seqBuff[1] = 0;
																																		:pid_99:node_time = (z_1354 + z_64);
																																		:pid_99:z = z_1354;
																																		:pid_99:localTime = (z_1354 + z_4 + z_64);
																																		:pid_99:localPC = ((z_1354 == t_42) && (t_42 < 4) && (0 <= (t_42 + -2)) && (z_4 > 0) && (z_64 > 0));
																																		:pid_100:cl = z_1354;
																																		:pid_106:cl = (z_1354 + z_64);
																																		:pid_111:cl = (z_1354 + z_64);
																																	}
																																	BUFFER{
																																		:pid_82:bufferNode:<FIFO>#0{
																																			:pid_99:ControlMsg([ 0 , 0 ] , (z_1354 + z_4 + z_64));
																																		}
																																	}
																																}
																															}
																															EC:<Id:3154;Ev:272;H:31;W:2888>{ SC: ( pid_22:o#18 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_69:cp1 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
												EXE: { |;| (:pid_65 , run) (:pid_66 
	, run) (:pid_70 , run) (:pid_70 , cp_resetTau) (:pid_2 , run) }
																					
												TRACE: { |;| (:pid_65 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1327 }) (:pid_70 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_412 }) }
																																PC: (((z_1027 + z_1112 + z_1327 + z_422 + z_447 + z_762 + z_792 + z_882) == 4) && 
	((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + z_792 
	+ z_882) == t_568) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + 
	z_882) == t_68) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && (t_10 
	< 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_412 < 8) && (t_42 < 4) && 
	(t_5 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4)
	 && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_653 < 4) && (t_823 < 4) && 
	(t_96 < 4) && (z_1083 < t_653) && (z_116 < t_10) && (z_1268 < t_823) && (z_132 < 
	t_23) && (z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568)
	 && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + 
	-2)) && (0 <= (t_39 + -2)) && (0 <= (t_412 + -4)) && (0 <= (t_42 + -2)) && (0 <= 
	(t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && 
	(0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= 
	(t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)
	) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + 
	z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 
	+ z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + 
	z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= 
	(z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + 
	z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + 
	z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 
	+ z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903))
	 && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 
	+ z_903)) && ((z_1027 + z_1112 + z_1327 + z_422 + z_447 + z_762 + z_792 + z_882) 
	> t_68) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && 
	(z_1027 > 0) && (z_1083 > 0) && (z_11 > 0) && (z_1112 > 0) && (z_116 > 0) && 
	(z_1248 > 0) && (z_132 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 
	> 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && 
	(z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_651 > 
	0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																																DATA{
																																	:pid_2:uncoveredExit = 1;
																																	:pid_65:node_time = (z_1027 + z_1112 + z_132 + z_1327 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																																	:pid_65:z = z_1327;
																																	:pid_65:localTime = (z_1027 + z_1112 + z_132 + z_1327 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																																	:pid_65:localPC = (((z_1027 + z_1112 + z_1327 + z_422 + z_447 + z_762 + z_792 + z_882) == 4) && ((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + z_792 + z_882) == t_568) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (t_23 < 4) && (t_412 < 8) && (t_68 < 4) && (t_338 < 4) && (t_568 < 4) && (z_132 < t_23) && (z_447 < t_338) && (z_792 < t_568) && (0 <= (t_23 + -2)) && (0 <= (t_412 + -4)) && (0 <= (t_68 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_568 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + z_1327 + z_422 + z_447 + z_762 + z_792 + z_882) > t_68) && (z_1027 > 0) && (z_1112 > 0) && (z_132 > 0) && (z_2 > 0) && (z_32 > 0) && (z_422 > 0) && (z_447 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0));
																																	:pid_66:e = 1;
																																	:pid_66:tau = 8;
																																	:pid_66:c = 0;
																																	:pid_66:t = t_412;
																																	:pid_66:cl = 0;
																																	:pid_72:cl = (z_1027 + z_1112 + z_1327 + z_447 + z_762 + z_792 + z_882);
																																	:pid_77:cl = (z_1027 + z_1112 + z_1327 + z_792 + z_882);
																																}
																																EC:<Id:3241;Ev:0;H:32;W:2888>{ SC: ( pid_23:o#19 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_69:cp1 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
													EXE: { |;| (:pid_99 , run) 
	(:pid_100 , run) (:pid_103 , run) (:pid_103 , cp_sendCM) (:pid_2 , run) (:pid_22 
	, run) (:pid_22 , n5_out_CM) }
																					
													TRACE: { |;| (:pid_99 , ${ 
	newfresh inst::Trickle.Node.z param::Trickle.Node.z_1359 }) (:pid_103 , ${ 
	output inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + param::Trickle.Node.z_1359 
	param::Trickle.Node.z_4 param::Trickle.Node.z_64 } } @ (z_1359 + z_64)) }
																																	/*FLAGS{ COVERAGE-ELEMENT }*/
																																	INFO{
																																		<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#21->run::pid_23:Trickle.Observer.o#19->prot::Trickle.Observer.o#19" as trace="tpid#21->run::pid_23:Trickle.Observer.o#19->prot::Trickle.Observer.o#19">
																																	}
																																	PC: (((z_1027 + z_1112 + z_1327 + z_422 + z_447 + z_762 + z_792 + z_882) == 4) && 
	((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + z_792 
	+ z_882) == t_568) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + 
	z_882) == t_68) && (z_1359 == t_42) && (z_240 == t_96) && (z_595 == t_434) && 
	(z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_412 
	< 8) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && 
	(t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && 
	(t_653 < 4) && (t_823 < 4) && (t_96 < 4) && (z_1083 < t_653) && (z_116 < t_10) 
	&& (z_1268 < t_823) && (z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && 
	(z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 
	<= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_412 + 
	-4)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= 
	(t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) 
	&& (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= 
	(t_653 + -2)) && (0 <= (t_823 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + 
	z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + 
	z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + 
	z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 
	+ z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 
	+ z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) 
	&& ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 
	+ z_2 + z_32)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 
	+ z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && 
	((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= 
	(z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 
	+ z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1027 + z_1112 + z_1327 
	+ z_422 + z_447 + z_762 + z_792 + z_882) > t_68) && ((z_150 + z_90) > t_5) && 
	(z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && (z_1027 > 0) && (z_1083 > 0) && (z_11 
	> 0) && (z_1112 > 0) && (z_116 > 0) && (z_1248 > 0) && (z_132 > 0) && (z_150 > 0)
	 && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 
	> 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && 
	(z_53 > 0) && (z_535 > 0) && (z_64 > 0) && (z_651 > 0) && (z_762 > 0) && (z_792 
	> 0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																																	DATA{
																																		:pid_2:uncoveredExit = 0;
																																		:pid_2:seqBuff[0] = 0;
																																		:pid_2:seqBuff[1] = 0;
																																		:pid_99:node_time = (z_1359 + z_64);
																																		:pid_99:z = z_1359;
																																		:pid_99:localTime = (z_1359 + z_4 + z_64);
																																		:pid_99:localPC = ((z_1359 == t_42) && (t_42 < 4) && (0 <= (t_42 + -2)) && (z_4 > 0) && (z_64 > 0));
																																		:pid_100:cl = z_1359;
																																		:pid_106:cl = (z_1359 + z_64);
																																		:pid_111:cl = (z_1359 + z_64);
																																	}
																																	BUFFER{
																																		:pid_82:bufferNode:<FIFO>#0{
																																			:pid_99:ControlMsg([ 0 , 0 ] , (z_1359 + z_4 + z_64));
																																		}
																																	}
																																}
																															}
																															EC:<Id:3155;Ev:273;H:31;W:2889>{ SC: ( pid_22:o#18 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
												EXE: { |;| (:pid_65 , run) (:pid_72 
	, run) (:pid_75 , run) (:pid_75 , dp_resetTau) (:pid_2 , run) }
																					
												TRACE: { |;| (:pid_65 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1327 }) (:pid_75 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_885 }) }
																																PC: (((z_1027 + z_1112 + z_1327 + z_447 + z_762 + z_792 + z_882) == 4) && ((z_1027 + 
	z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + z_792 + z_882) 
	== t_568) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) 
	== t_68) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && (t_10 < 4) 
	&& (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 
	4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && 
	(t_513 < 4) && (t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_885 < 8) && (t_96 
	< 4) && (z_1083 < t_653) && (z_116 < t_10) && (z_1268 < t_823) && (z_132 < t_23) 
	&& (z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && 
	(z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2))
	 && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 
	+ -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 
	<= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + 
	-2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && (0 <= (t_885 + -4)) && (0 
	<= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) 
	<= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + 
	z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + 
	z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= 
	(z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + 
	z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + 
	z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 
	+ z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903))
	 && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 
	+ z_903)) && ((z_1027 + z_1112 + z_1327 + z_447 + z_762 + z_792 + z_882) > t_338)
	 && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && (z_1027 
	> 0) && (z_1083 > 0) && (z_11 > 0) && (z_1112 > 0) && (z_116 > 0) && (z_1248 > 0)
	 && (z_132 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && 
	(z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0)
	 && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_651 > 0) && 
	(z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																																DATA{
																																	:pid_2:uncoveredExit = 1;
																																	:pid_65:node_time = (z_1027 + z_1112 + z_132 + z_1327 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																																	:pid_65:z = z_1327;
																																	:pid_65:localTime = (z_1027 + z_1112 + z_132 + z_1327 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																																	:pid_65:localPC = (((z_1027 + z_1112 + z_1327 + z_447 + z_762 + z_792 + z_882) == 4) && ((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + z_792 + z_882) == t_568) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (t_23 < 4) && (t_68 < 4) && (t_338 < 4) && (t_568 < 4) && (t_885 < 8) && (z_132 < t_23) && (z_447 < t_338) && (z_792 < t_568) && (0 <= (t_23 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_885 + -4)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + z_1327 + z_447 + z_762 + z_792 + z_882) > t_338) && (z_1027 > 0) && (z_1112 > 0) && (z_132 > 0) && (z_2 > 0) && (z_32 > 0) && (z_422 > 0) && (z_447 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0));
																																	:pid_66:cl = (z_1027 + z_1112 + z_1327 + z_422 + z_447 + z_762 + z_792 + z_882);
																																	:pid_72:e = 1;
																																	:pid_72:tau = 8;
																																	:pid_72:c = 0;
																																	:pid_72:t = t_885;
																																	:pid_72:cl = 0;
																																	:pid_77:cl = (z_1027 + z_1112 + z_1327 + z_792 + z_882);
																																}
																																EC:<Id:3256;Ev:0;H:32;W:2889>{ SC: ( pid_23:o#19 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
													EXE: { |;| (:pid_99 , run) 
	(:pid_100 , run) (:pid_103 , run) (:pid_103 , cp_sendCM) (:pid_2 , run) (:pid_22 
	, run) (:pid_22 , n5_out_CM) }
																					
													TRACE: { |;| (:pid_99 , ${ 
	newfresh inst::Trickle.Node.z param::Trickle.Node.z_1364 }) (:pid_103 , ${ 
	output inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + param::Trickle.Node.z_1364 
	param::Trickle.Node.z_4 param::Trickle.Node.z_64 } } @ (z_1364 + z_64)) }
																																	/*FLAGS{ COVERAGE-ELEMENT }*/
																																	INFO{
																																		<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#21->run::pid_23:Trickle.Observer.o#19->prot::Trickle.Observer.o#19" as trace="tpid#21->run::pid_23:Trickle.Observer.o#19->prot::Trickle.Observer.o#19">
																																	}
																																	PC: (((z_1027 + z_1112 + z_1327 + z_447 + z_762 + z_792 + z_882) == 4) && ((z_1027 + 
	z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + z_792 + z_882) 
	== t_568) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) 
	== t_68) && (z_1364 == t_42) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == 
	t_5) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_42 < 4) && 
	(t_5 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4)
	 && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_653 < 4) && (t_823 < 4) && 
	(t_885 < 8) && (t_96 < 4) && (z_1083 < t_653) && (z_116 < t_10) && (z_1268 < 
	t_823) && (z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513)
	 && (z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2))
	 && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= 
	(t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && 
	(0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= 
	(t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)
	) && (0 <= (t_885 + -4)) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + 
	z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 
	+ z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 
	+ z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + 
	z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) 
	&& ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + 
	z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 
	+ z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + 
	z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + 
	z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1027 + z_1112 + z_1327 + z_447 + 
	z_762 + z_792 + z_882) > t_338) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 
	0) && (z_1003 > 0) && (z_1027 > 0) && (z_1083 > 0) && (z_11 > 0) && (z_1112 > 0) 
	&& (z_116 > 0) && (z_1248 > 0) && (z_132 > 0) && (z_150 > 0) && (z_185 > 0) && 
	(z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0)
	 && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 
	> 0) && (z_64 > 0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) 
	&& (z_90 > 0) && (z_903 > 0))
																																	DATA{
																																		:pid_2:uncoveredExit = 0;
																																		:pid_2:seqBuff[0] = 0;
																																		:pid_2:seqBuff[1] = 0;
																																		:pid_99:node_time = (z_1364 + z_64);
																																		:pid_99:z = z_1364;
																																		:pid_99:localTime = (z_1364 + z_4 + z_64);
																																		:pid_99:localPC = ((z_1364 == t_42) && (t_42 < 4) && (0 <= (t_42 + -2)) && (z_4 > 0) && (z_64 > 0));
																																		:pid_100:cl = z_1364;
																																		:pid_106:cl = (z_1364 + z_64);
																																		:pid_111:cl = (z_1364 + z_64);
																																	}
																																	BUFFER{
																																		:pid_82:bufferNode:<FIFO>#0{
																																			:pid_99:ControlMsg([ 0 , 0 ] , (z_1364 + z_4 + z_64));
																																		}
																																	}
																																}
																															}
																															EC:<Id:3156;Ev:274;H:31;W:2890>{ SC: ( pid_22:o#18 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_79:dp1 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
												EXE: { |;| (:pid_65 , run) (:pid_77 
	, run) (:pid_80 , run) (:pid_80 , dp_resetTau) (:pid_2 , run) }
																					
												TRACE: { |;| (:pid_65 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1327 }) (:pid_80 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_886 }) }
																																PC: (((z_1027 + z_1112 + z_1327 + z_792 + z_882) == 4) && ((z_1027 + z_1112 + z_447 
	+ z_762 + z_792 + z_882) == t_338) && ((z_1027 + z_792 + z_882) == t_568) && 
	((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && 
	(z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) 
	&& (t_241 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 
	4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && 
	(t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_886 < 8) && (t_96 < 4) && 
	(z_1083 < t_653) && (z_116 < t_10) && (z_1268 < t_823) && (z_132 < t_23) && 
	(z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && 
	(z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2))
	 && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 
	+ -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 
	<= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + 
	-2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && (0 <= (t_886 + -4)) && (0 
	<= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) 
	<= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + 
	z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + 
	z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= 
	(z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + 
	z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + 
	z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 
	+ z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903))
	 && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 
	+ z_903)) && ((z_1027 + z_1112 + z_1327 + z_792 + z_882) > t_568) && ((z_150 + 
	z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && (z_1027 > 0) && 
	(z_1083 > 0) && (z_11 > 0) && (z_1112 > 0) && (z_116 > 0) && (z_1248 > 0) && 
	(z_132 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 
	0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && 
	(z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_651 > 0) && (z_762 > 
	0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																																DATA{
																																	:pid_2:uncoveredExit = 1;
																																	:pid_65:node_time = (z_1027 + z_1112 + z_132 + z_1327 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																																	:pid_65:z = z_1327;
																																	:pid_65:localTime = (z_1027 + z_1112 + z_132 + z_1327 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																																	:pid_65:localPC = (((z_1027 + z_1112 + z_1327 + z_792 + z_882) == 4) && ((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + z_792 + z_882) == t_568) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (t_23 < 4) && (t_68 < 4) && (t_338 < 4) && (t_568 < 4) && (t_886 < 8) && (z_132 < t_23) && (z_447 < t_338) && (z_792 < t_568) && (0 <= (t_23 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_886 + -4)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + z_1327 + z_792 + z_882) > t_568) && (z_1027 > 0) && (z_1112 > 0) && (z_132 > 0) && (z_2 > 0) && (z_32 > 0) && (z_422 > 0) && (z_447 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0));
																																	:pid_66:cl = (z_1027 + z_1112 + z_1327 + z_422 + z_447 + z_762 + z_792 + z_882);
																																	:pid_72:cl = (z_1027 + z_1112 + z_1327 + z_447 + z_762 + z_792 + z_882);
																																	:pid_77:e = 1;
																																	:pid_77:tau = 8;
																																	:pid_77:c = 0;
																																	:pid_77:t = t_886;
																																	:pid_77:cl = 0;
																																}
																																EC:<Id:3270;Ev:0;H:32;W:2890>{ SC: ( pid_23:o#19 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_79:dp1 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
													EXE: { |;| (:pid_99 , run) 
	(:pid_100 , run) (:pid_103 , run) (:pid_103 , cp_sendCM) (:pid_2 , run) (:pid_22 
	, run) (:pid_22 , n5_out_CM) }
																					
													TRACE: { |;| (:pid_99 , ${ 
	newfresh inst::Trickle.Node.z param::Trickle.Node.z_1369 }) (:pid_103 , ${ 
	output inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + param::Trickle.Node.z_1369 
	param::Trickle.Node.z_4 param::Trickle.Node.z_64 } } @ (z_1369 + z_64)) }
																																	/*FLAGS{ COVERAGE-ELEMENT }*/
																																	INFO{
																																		<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#21->run::pid_23:Trickle.Observer.o#19->prot::Trickle.Observer.o#19" as trace="tpid#21->run::pid_23:Trickle.Observer.o#19->prot::Trickle.Observer.o#19">
																																	}
																																	PC: (((z_1027 + z_1112 + z_1327 + z_792 + z_882) == 4) && ((z_1027 + z_1112 + z_447 
	+ z_762 + z_792 + z_882) == t_338) && ((z_1027 + z_792 + z_882) == t_568) && 
	((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && 
	(z_1369 == t_42) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && 
	(t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) 
	&& (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && 
	(t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_653 < 4) && (t_823 < 4) && 
	(t_886 < 8) && (t_96 < 4) && (z_1083 < t_653) && (z_116 < t_10) && (z_1268 < 
	t_823) && (z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513)
	 && (z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2))
	 && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= 
	(t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && 
	(0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= 
	(t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)
	) && (0 <= (t_886 + -4)) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + 
	z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 
	+ z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 
	+ z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + 
	z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) 
	&& ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + 
	z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 
	+ z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + 
	z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + 
	z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1027 + z_1112 + z_1327 + z_792 + 
	z_882) > t_568) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_1003 > 
	0) && (z_1027 > 0) && (z_1083 > 0) && (z_11 > 0) && (z_1112 > 0) && (z_116 > 0) 
	&& (z_1248 > 0) && (z_132 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && 
	(z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0)
	 && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && 
	(z_64 > 0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 
	> 0) && (z_903 > 0))
																																	DATA{
																																		:pid_2:uncoveredExit = 0;
																																		:pid_2:seqBuff[0] = 0;
																																		:pid_2:seqBuff[1] = 0;
																																		:pid_99:node_time = (z_1369 + z_64);
																																		:pid_99:z = z_1369;
																																		:pid_99:localTime = (z_1369 + z_4 + z_64);
																																		:pid_99:localPC = ((z_1369 == t_42) && (t_42 < 4) && (0 <= (t_42 + -2)) && (z_4 > 0) && (z_64 > 0));
																																		:pid_100:cl = z_1369;
																																		:pid_106:cl = (z_1369 + z_64);
																																		:pid_111:cl = (z_1369 + z_64);
																																	}
																																	BUFFER{
																																		:pid_82:bufferNode:<FIFO>#0{
																																			:pid_99:ControlMsg([ 0 , 0 ] , (z_1369 + z_4 + z_64));
																																		}
																																	}
																																}
																															}
																															EC:<Id:3157;Ev:275;H:31;W:2891>{ SC: ( pid_22:o#18 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_53:cp2 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
												EXE: { |;| (:pid_48 , run) (:pid_49 
	, run) (:pid_52 , run) (:pid_52 , cp_sendCM) (:pid_2 , run) }
																					
												TRACE: { |;| (:pid_48 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1326 }) (:pid_52 , ${ output 
	inst::Trickle.Node.ControlMsg [ 1 , 1 ] ${ + param::Trickle.Node.z_1 
	param::Trickle.Node.z_11 param::Trickle.Node.z_116 param::Trickle.Node.z_1326 
	param::Trickle.Node.z_306 param::Trickle.Node.z_346 param::Trickle.Node.z_651 
	param::Trickle.Node.z_696 } } @ (z_11 + z_116 + z_1326 + z_306 + z_346 + z_651 + 
	z_696)) }
																																PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_1326 + z_306 + z_346 + z_651 + z_696) == t_65) 
	&& ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && 
	(z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) 
	&& (t_241 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 
	4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && 
	(t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_96 < 4) && (z_1083 < t_653) && 
	(z_116 < t_10) && (z_1268 < t_823) && (z_132 < t_23) && (z_346 < t_220) && 
	(z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= 
	(t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) 
	&& (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 
	+ -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 
	<= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + 
	-2)) && (0 <= (t_823 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + 
	z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + 
	z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) 
	<= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + 
	z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + 
	z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && 
	((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + 
	z_2 + z_32)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + 
	z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && 
	((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= 
	(z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 
	+ z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_150 + z_90) > t_5) && 
	(z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && (z_1027 > 0) && (z_1083 > 0) && (z_11 
	> 0) && (z_116 > 0) && (z_1248 > 0) && (z_132 > 0) && (z_150 > 0) && (z_185 > 0) 
	&& (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 
	> 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && 
	(z_535 > 0) && (z_651 > 0) && (z_696 > 0) && (z_762 > 0) && (z_792 > 0) && 
	(z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																																DATA{
																																	:pid_2:uncoveredExit = 1;
																																	:pid_48:node_time = (z_11 + z_116 + z_1326 + z_306 + z_346 + z_651 + z_696);
																																	:pid_48:z = z_1326;
																																	:pid_48:localTime = (z_1 + z_11 + z_116 + z_1326 + z_306 + z_346 + z_651 + z_696);
																																	:pid_48:localPC = (((z_1326 + z_306 + z_346 + z_651 + z_696) == t_65) && (t_10 < 4) && (t_65 < 4) && (t_220 < 4) && (t_513 < 4) && (z_116 < t_10) && (z_346 < t_220) && (z_696 < t_513) && (0 <= (t_10 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_220 + -2)) && (0 <= (t_513 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_306 > 0) && (z_346 > 0) && (z_651 > 0) && (z_696 > 0));
																																	:pid_49:cl = (z_1326 + z_306 + z_346 + z_651 + z_696);
																																	:pid_55:cl = (z_1326 + z_346 + z_651 + z_696);
																																	:pid_60:cl = (z_1326 + z_696);
																																}
																																BUFFER{
																																	:pid_65:bufferNode:<FIFO>#0{
																																		:pid_48:ControlMsg([ 1 , 1 ] , (z_1 + z_11 + z_116 + z_1326 + z_306 + z_346 + z_651 + z_696));
																																	}
																																}
																																EC:<Id:3283;Ev:0;H:32;W:2891>{ SC: ( pid_23:o#19 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_53:cp2 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
													EXE: { |;| (:pid_99 , run) 
	(:pid_100 , run) (:pid_103 , run) (:pid_103 , cp_sendCM) (:pid_2 , run) (:pid_22 
	, run) (:pid_22 , n5_out_CM) }
																					
													TRACE: { |;| (:pid_99 , ${ 
	newfresh inst::Trickle.Node.z param::Trickle.Node.z_1374 }) (:pid_103 , ${ 
	output inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + param::Trickle.Node.z_1374 
	param::Trickle.Node.z_4 param::Trickle.Node.z_64 } } @ (z_1374 + z_64)) }
																																	/*FLAGS{ COVERAGE-ELEMENT }*/
																																	INFO{
																																		<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#21->run::pid_23:Trickle.Observer.o#19->prot::Trickle.Observer.o#19" as trace="tpid#21->run::pid_23:Trickle.Observer.o#19->prot::Trickle.Observer.o#19">
																																	}
																																	PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_1326 + z_306 + z_346 + z_651 + z_696) == t_65) 
	&& ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && 
	(z_1374 == t_42) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && 
	(t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) 
	&& (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && 
	(t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_96 
	< 4) && (z_1083 < t_653) && (z_116 < t_10) && (z_1268 < t_823) && (z_132 < t_23) 
	&& (z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && 
	(z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2))
	 && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 
	+ -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 
	<= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + 
	-2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && (0 <= (t_96 + -2)) && 
	((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + 
	z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + 
	z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + 
	z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + 
	z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 
	+ z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + 
	z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 
	+ z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_150 + 
	z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && (z_1027 > 0) && 
	(z_1083 > 0) && (z_11 > 0) && (z_116 > 0) && (z_1248 > 0) && (z_132 > 0) && 
	(z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 
	0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && 
	(z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_64 > 0) && (z_651 > 0) && (z_696 > 
	0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																																	DATA{
																																		:pid_2:uncoveredExit = 0;
																																		:pid_2:seqBuff[0] = 0;
																																		:pid_2:seqBuff[1] = 0;
																																		:pid_99:node_time = (z_1374 + z_64);
																																		:pid_99:z = z_1374;
																																		:pid_99:localTime = (z_1374 + z_4 + z_64);
																																		:pid_99:localPC = ((z_1374 == t_42) && (t_42 < 4) && (0 <= (t_42 + -2)) && (z_4 > 0) && (z_64 > 0));
																																		:pid_100:cl = z_1374;
																																		:pid_106:cl = (z_1374 + z_64);
																																		:pid_111:cl = (z_1374 + z_64);
																																	}
																																	BUFFER{
																																		:pid_82:bufferNode:<FIFO>#0{
																																			:pid_99:ControlMsg([ 0 , 0 ] , (z_1374 + z_4 + z_64));
																																		}
																																	}
																																}
																															}
																															EC:<Id:3158;Ev:276;H:31;W:2892>{ SC: ( pid_22:o#18 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
												EXE: { |;| (:pid_48 , run) (:pid_49 
	, run) (:pid_52 , run) (:pid_52 , cp1_receiveCM_consistent) (:pid_2 , run) }
																					
												TRACE: { |;| (:pid_48 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1326 }) (:pid_52 , ${ input 
	inst::Trickle.Node.ControlMsg [ 1 , 1 ] ${ + param::Trickle.Node.z_132 
	param::Trickle.Node.z_2 param::Trickle.Node.z_32 param::Trickle.Node.z_422 
	param::Trickle.Node.z_447 param::Trickle.Node.z_762 param::Trickle.Node.z_792 
	param::Trickle.Node.z_882 } } @ (z_11 + z_116 + z_1326 + z_306 + z_346 + z_651 + 
	z_696)) }
																																PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + 
	z_792 + z_882) == t_68) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) 
	&& ((z_1326 + z_306 + z_346 + z_651 + z_696) < t_65) && (t_10 < 4) && (t_23 < 4) 
	&& (t_241 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 
	4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && 
	(t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_96 < 4) && (z_1083 < t_653) && 
	(z_116 < t_10) && (z_1268 < t_823) && (z_132 < t_23) && (z_346 < t_220) && 
	(z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= 
	(t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) 
	&& (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 
	+ -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 
	<= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + 
	-2)) && (0 <= (t_823 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + 
	z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + 
	z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) 
	<= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + 
	z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + 
	z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && 
	((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + 
	z_2 + z_32)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + 
	z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && 
	((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= 
	(z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 
	+ z_762 + z_792 + z_882) <= (z_1 + z_11 + z_116 + z_1326 + z_306 + z_346 + z_651 
	+ z_696)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= 
	(z_3 + z_53 + z_903)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && 
	(z_1003 > 0) && (z_1027 > 0) && (z_1083 > 0) && (z_11 > 0) && (z_116 > 0) && 
	(z_1248 > 0) && (z_132 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 
	> 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && 
	(z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_651 > 
	0) && (z_696 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && 
	(z_903 > 0))
																																DATA{
																																	:pid_2:uncoveredExit = 1;
																																	:pid_48:node_time = (z_11 + z_116 + z_1326 + z_306 + z_346 + z_651 + z_696);
																																	:pid_48:z = z_1326;
																																	:pid_48:localTime = (z_1 + z_11 + z_116 + z_1326 + z_306 + z_346 + z_651 + z_696);
																																	:pid_48:seq_buff[0] = 1;
																																	:pid_48:seq_buff[1] = 1;
																																	:pid_48:localPC = (((z_1326 + z_306 + z_346 + z_651 + z_696) < t_65) && (t_10 < 4) && (t_65 < 4) && (t_220 < 4) && (t_513 < 4) && (z_116 < t_10) && (z_346 < t_220) && (z_696 < t_513) && (0 <= (t_10 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_220 + -2)) && (0 <= (t_513 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1 + z_11 + z_116 + z_1326 + z_306 + z_346 + z_651 + z_696)) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_306 > 0) && (z_346 > 0) && (z_651 > 0) && (z_696 > 0));
																																	:pid_48:timeEmit = (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																																	:pid_49:c = 1;
																																	:pid_49:i = 2;
																																	:pid_49:consistent = true;
																																	:pid_49:cl = (z_1326 + z_306 + z_346 + z_651 + z_696);
																																	:pid_55:cl = (z_1326 + z_346 + z_651 + z_696);
																																	:pid_60:cl = (z_1326 + z_696);
																																}
																																BUFFER{
																																	:pid_48:bufferNode:<FIFO>#0{
																																		:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																																		:pid_65:DataMsg1([ 1 , 1 , 0 ] , (z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																																	}
																																}
																																EC:<Id:3299;Ev:0;H:32;W:2892>{ SC: ( pid_23:o#19 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
													EXE: { |;| (:pid_99 , run) 
	(:pid_100 , run) (:pid_103 , run) (:pid_103 , cp_sendCM) (:pid_2 , run) (:pid_22 
	, run) (:pid_22 , n5_out_CM) }
																					
													TRACE: { |;| (:pid_99 , ${ 
	newfresh inst::Trickle.Node.z param::Trickle.Node.z_1379 }) (:pid_103 , ${ 
	output inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + param::Trickle.Node.z_1379 
	param::Trickle.Node.z_4 param::Trickle.Node.z_64 } } @ (z_1379 + z_64)) }
																																	/*FLAGS{ COVERAGE-ELEMENT }*/
																																	INFO{
																																		<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#21->run::pid_23:Trickle.Observer.o#19->prot::Trickle.Observer.o#19" as trace="tpid#21->run::pid_23:Trickle.Observer.o#19->prot::Trickle.Observer.o#19">
																																	}
																																	PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + 
	z_792 + z_882) == t_68) && (z_1379 == t_42) && (z_240 == t_96) && (z_595 == 
	t_434) && (z_90 == t_5) && ((z_1326 + z_306 + z_346 + z_651 + z_696) < t_65) && 
	(t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) 
	&& (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && 
	(t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_96 
	< 4) && (z_1083 < t_653) && (z_116 < t_10) && (z_1268 < t_823) && (z_132 < t_23) 
	&& (z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && 
	(z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2))
	 && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 
	+ -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 
	<= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + 
	-2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && (0 <= (t_96 + -2)) && 
	((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + 
	z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + 
	z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + 
	z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + 
	z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 
	+ z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + 
	z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 
	+ z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1 + z_11 + z_116 + z_1326 + z_306 + 
	z_346 + z_651 + z_696)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 
	+ z_882) <= (z_3 + z_53 + z_903)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 
	> 0) && (z_1003 > 0) && (z_1027 > 0) && (z_1083 > 0) && (z_11 > 0) && (z_116 > 0)
	 && (z_1248 > 0) && (z_132 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && 
	(z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0)
	 && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && 
	(z_64 > 0) && (z_651 > 0) && (z_696 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 
	> 0) && (z_90 > 0) && (z_903 > 0))
																																	DATA{
																																		:pid_2:uncoveredExit = 0;
																																		:pid_2:seqBuff[0] = 0;
																																		:pid_2:seqBuff[1] = 0;
																																		:pid_99:node_time = (z_1379 + z_64);
																																		:pid_99:z = z_1379;
																																		:pid_99:localTime = (z_1379 + z_4 + z_64);
																																		:pid_99:localPC = ((z_1379 == t_42) && (t_42 < 4) && (0 <= (t_42 + -2)) && (z_4 > 0) && (z_64 > 0));
																																		:pid_100:cl = z_1379;
																																		:pid_106:cl = (z_1379 + z_64);
																																		:pid_111:cl = (z_1379 + z_64);
																																	}
																																	BUFFER{
																																		:pid_82:bufferNode:<FIFO>#0{
																																			:pid_99:ControlMsg([ 0 , 0 ] , (z_1379 + z_4 + z_64));
																																		}
																																	}
																																}
																															}
																															EC:<Id:3159;Ev:277;H:31;W:2893>{ SC: ( pid_22:o#18 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_58:dp2 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
												EXE: { |;| (:pid_48 , run) (:pid_55 
	, run) (:pid_57 , run) (:pid_57 , dp_sendDM) (:pid_2 , run) }
																					
												TRACE: { |;| (:pid_48 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1326 }) (:pid_57 , ${ output 
	inst::Trickle.Node.DataMsg1 [ 1 , 1 , 0 ] ${ + param::Trickle.Node.z_1 
	param::Trickle.Node.z_11 param::Trickle.Node.z_116 param::Trickle.Node.z_1326 
	param::Trickle.Node.z_306 param::Trickle.Node.z_346 param::Trickle.Node.z_651 
	param::Trickle.Node.z_696 } } @ (z_11 + z_116 + z_1326 + z_306 + z_346 + z_651 + 
	z_696)) }
																																PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_1326 + z_346 + z_651 + z_696) == t_220) && 
	((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && 
	(z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) 
	&& (t_241 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 
	4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && 
	(t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_96 < 4) && (z_1083 < t_653) && 
	(z_116 < t_10) && (z_1268 < t_823) && (z_132 < t_23) && (z_346 < t_220) && 
	(z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= 
	(t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) 
	&& (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 
	+ -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 
	<= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + 
	-2)) && (0 <= (t_823 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + 
	z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + 
	z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) 
	<= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + 
	z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + 
	z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && 
	((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + 
	z_2 + z_32)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + 
	z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && 
	((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= 
	(z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 
	+ z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_150 + z_90) > t_5) && 
	(z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && (z_1027 > 0) && (z_1083 > 0) && (z_11 
	> 0) && (z_116 > 0) && (z_1248 > 0) && (z_132 > 0) && (z_150 > 0) && (z_185 > 0) 
	&& (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 
	> 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && 
	(z_535 > 0) && (z_651 > 0) && (z_696 > 0) && (z_762 > 0) && (z_792 > 0) && 
	(z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																																DATA{
																																	:pid_2:uncoveredExit = 1;
																																	:pid_48:node_time = (z_11 + z_116 + z_1326 + z_306 + z_346 + z_651 + z_696);
																																	:pid_48:z = z_1326;
																																	:pid_48:localTime = (z_1 + z_11 + z_116 + z_1326 + z_306 + z_346 + z_651 + z_696);
																																	:pid_48:localPC = (((z_1326 + z_346 + z_651 + z_696) == t_220) && (t_10 < 4) && (t_65 < 4) && (t_220 < 4) && (t_513 < 4) && (z_116 < t_10) && (z_346 < t_220) && (z_696 < t_513) && (0 <= (t_10 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_220 + -2)) && (0 <= (t_513 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_306 > 0) && (z_346 > 0) && (z_651 > 0) && (z_696 > 0));
																																	:pid_49:cl = (z_1326 + z_306 + z_346 + z_651 + z_696);
																																	:pid_55:cl = (z_1326 + z_346 + z_651 + z_696);
																																	:pid_60:cl = (z_1326 + z_696);
																																}
																																BUFFER{
																																	:pid_65:bufferNode:<FIFO>#0{
																																		:pid_48:DataMsg1([ 1 , 1 , 0 ] , (z_1 + z_11 + z_116 + z_1326 + z_306 + z_346 + z_651 + z_696));
																																	}
																																}
																																EC:<Id:3314;Ev:0;H:32;W:2893>{ SC: ( pid_23:o#19 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_58:dp2 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
													EXE: { |;| (:pid_99 , run) 
	(:pid_100 , run) (:pid_103 , run) (:pid_103 , cp_sendCM) (:pid_2 , run) (:pid_22 
	, run) (:pid_22 , n5_out_CM) }
																					
													TRACE: { |;| (:pid_99 , ${ 
	newfresh inst::Trickle.Node.z param::Trickle.Node.z_1384 }) (:pid_103 , ${ 
	output inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + param::Trickle.Node.z_1384 
	param::Trickle.Node.z_4 param::Trickle.Node.z_64 } } @ (z_1384 + z_64)) }
																																	/*FLAGS{ COVERAGE-ELEMENT }*/
																																	INFO{
																																		<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#21->run::pid_23:Trickle.Observer.o#19->prot::Trickle.Observer.o#19" as trace="tpid#21->run::pid_23:Trickle.Observer.o#19->prot::Trickle.Observer.o#19">
																																	}
																																	PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_1326 + z_346 + z_651 + z_696) == t_220) && 
	((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && 
	(z_1384 == t_42) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && 
	(t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) 
	&& (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && 
	(t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_96 
	< 4) && (z_1083 < t_653) && (z_116 < t_10) && (z_1268 < t_823) && (z_132 < t_23) 
	&& (z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && 
	(z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2))
	 && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 
	+ -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 
	<= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + 
	-2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && (0 <= (t_96 + -2)) && 
	((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + 
	z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + 
	z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + 
	z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + 
	z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 
	+ z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + 
	z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 
	+ z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_150 + 
	z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && (z_1027 > 0) && 
	(z_1083 > 0) && (z_11 > 0) && (z_116 > 0) && (z_1248 > 0) && (z_132 > 0) && 
	(z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 
	0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && 
	(z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_64 > 0) && (z_651 > 0) && (z_696 > 
	0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																																	DATA{
																																		:pid_2:uncoveredExit = 0;
																																		:pid_2:seqBuff[0] = 0;
																																		:pid_2:seqBuff[1] = 0;
																																		:pid_99:node_time = (z_1384 + z_64);
																																		:pid_99:z = z_1384;
																																		:pid_99:localTime = (z_1384 + z_4 + z_64);
																																		:pid_99:localPC = ((z_1384 == t_42) && (t_42 < 4) && (0 <= (t_42 + -2)) && (z_4 > 0) && (z_64 > 0));
																																		:pid_100:cl = z_1384;
																																		:pid_106:cl = (z_1384 + z_64);
																																		:pid_111:cl = (z_1384 + z_64);
																																	}
																																	BUFFER{
																																		:pid_82:bufferNode:<FIFO>#0{
																																			:pid_99:ControlMsg([ 0 , 0 ] , (z_1384 + z_4 + z_64));
																																		}
																																	}
																																}
																															}
																															EC:<Id:3160;Ev:278;H:31;W:2894>{ SC: ( pid_22:o#18 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_63:dp2 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
												EXE: { |;| (:pid_48 , run) (:pid_60 
	, run) (:pid_62 , run) (:pid_62 , dp_sendDM) (:pid_2 , run) }
																					
												TRACE: { |;| (:pid_48 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1326 }) (:pid_62 , ${ output 
	inst::Trickle.Node.DataMsg2 [ 2 , 2 , 1 ] ${ + param::Trickle.Node.z_1 
	param::Trickle.Node.z_11 param::Trickle.Node.z_116 param::Trickle.Node.z_1326 
	param::Trickle.Node.z_306 param::Trickle.Node.z_346 param::Trickle.Node.z_651 
	param::Trickle.Node.z_696 } } @ (z_11 + z_116 + z_1326 + z_306 + z_346 + z_651 + 
	z_696)) }
																																PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_1326 + z_696) == t_513) && ((z_150 + z_90) == 4) 
	&& ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (z_240 == t_96) && 
	(z_595 == t_434) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && 
	(t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) 
	&& (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && 
	(t_653 < 4) && (t_823 < 4) && (t_96 < 4) && (z_1083 < t_653) && (z_116 < t_10) 
	&& (z_1268 < t_823) && (z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && 
	(z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 
	<= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)
	) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= 
	(t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2))
	 && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= 
	(t_823 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + 
	z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= 
	(z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && 
	((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) 
	<= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 
	+ z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 
	+ z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882)
	 <= (z_3 + z_53 + z_903)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && 
	(z_1003 > 0) && (z_1027 > 0) && (z_1083 > 0) && (z_11 > 0) && (z_116 > 0) && 
	(z_1248 > 0) && (z_132 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 
	> 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && 
	(z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_651 > 
	0) && (z_696 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && 
	(z_903 > 0))
																																DATA{
																																	:pid_2:uncoveredExit = 1;
																																	:pid_48:node_time = (z_11 + z_116 + z_1326 + z_306 + z_346 + z_651 + z_696);
																																	:pid_48:z = z_1326;
																																	:pid_48:localTime = (z_1 + z_11 + z_116 + z_1326 + z_306 + z_346 + z_651 + z_696);
																																	:pid_48:localPC = (((z_1326 + z_696) == t_513) && (t_10 < 4) && (t_65 < 4) && (t_220 < 4) && (t_513 < 4) && (z_116 < t_10) && (z_346 < t_220) && (z_696 < t_513) && (0 <= (t_10 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_220 + -2)) && (0 <= (t_513 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_306 > 0) && (z_346 > 0) && (z_651 > 0) && (z_696 > 0));
																																	:pid_49:cl = (z_1326 + z_306 + z_346 + z_651 + z_696);
																																	:pid_55:cl = (z_1326 + z_346 + z_651 + z_696);
																																	:pid_60:cl = (z_1326 + z_696);
																																}
																																BUFFER{
																																	:pid_65:bufferNode:<FIFO>#0{
																																		:pid_48:DataMsg2([ 2 , 2 , 1 ] , (z_1 + z_11 + z_116 + z_1326 + z_306 + z_346 + z_651 + z_696));
																																	}
																																}
																																EC:<Id:3330;Ev:0;H:32;W:2894>{ SC: ( pid_23:o#19 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_63:dp2 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
													EXE: { |;| (:pid_99 , run) 
	(:pid_100 , run) (:pid_103 , run) (:pid_103 , cp_sendCM) (:pid_2 , run) (:pid_22 
	, run) (:pid_22 , n5_out_CM) }
																					
													TRACE: { |;| (:pid_99 , ${ 
	newfresh inst::Trickle.Node.z param::Trickle.Node.z_1389 }) (:pid_103 , ${ 
	output inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + param::Trickle.Node.z_1389 
	param::Trickle.Node.z_4 param::Trickle.Node.z_64 } } @ (z_1389 + z_64)) }
																																	/*FLAGS{ COVERAGE-ELEMENT }*/
																																	INFO{
																																		<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#21->run::pid_23:Trickle.Observer.o#19->prot::Trickle.Observer.o#19" as trace="tpid#21->run::pid_23:Trickle.Observer.o#19->prot::Trickle.Observer.o#19">
																																	}
																																	PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_1326 + z_696) == t_513) && ((z_150 + z_90) == 4) 
	&& ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (z_1389 == t_42) && 
	(z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) 
	&& (t_241 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 
	4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && 
	(t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_96 < 4) && (z_1083 < t_653) && 
	(z_116 < t_10) && (z_1268 < t_823) && (z_132 < t_23) && (z_346 < t_220) && 
	(z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= 
	(t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) 
	&& (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 
	+ -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 
	<= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + 
	-2)) && (0 <= (t_823 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + 
	z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + 
	z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) 
	<= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + 
	z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + 
	z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && 
	((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + 
	z_2 + z_32)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + 
	z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && 
	((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= 
	(z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 
	+ z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_150 + z_90) > t_5) && 
	(z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && (z_1027 > 0) && (z_1083 > 0) && (z_11 
	> 0) && (z_116 > 0) && (z_1248 > 0) && (z_132 > 0) && (z_150 > 0) && (z_185 > 0) 
	&& (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 
	> 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && 
	(z_535 > 0) && (z_64 > 0) && (z_651 > 0) && (z_696 > 0) && (z_762 > 0) && (z_792 
	> 0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																																	DATA{
																																		:pid_2:uncoveredExit = 0;
																																		:pid_2:seqBuff[0] = 0;
																																		:pid_2:seqBuff[1] = 0;
																																		:pid_99:node_time = (z_1389 + z_64);
																																		:pid_99:z = z_1389;
																																		:pid_99:localTime = (z_1389 + z_4 + z_64);
																																		:pid_99:localPC = ((z_1389 == t_42) && (t_42 < 4) && (0 <= (t_42 + -2)) && (z_4 > 0) && (z_64 > 0));
																																		:pid_100:cl = z_1389;
																																		:pid_106:cl = (z_1389 + z_64);
																																		:pid_111:cl = (z_1389 + z_64);
																																	}
																																	BUFFER{
																																		:pid_82:bufferNode:<FIFO>#0{
																																			:pid_99:ControlMsg([ 0 , 0 ] , (z_1389 + z_4 + z_64));
																																		}
																																	}
																																}
																															}
																															EC:<Id:3161;Ev:279;H:31;W:2895>{ SC: ( pid_22:o#18 , ( pid_36:cp2 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
												EXE: { |;| (:pid_31 , run) (:pid_32 
	, run) (:pid_35 , run) (:pid_35 , cp_sendCM) (:pid_2 , run) }
																					
												TRACE: { |;| (:pid_31 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1325 }) (:pid_35 , ${ output 
	inst::Trickle.Node.ControlMsg [ 1 , 1 ] ${ + param::Trickle.Node.z_0 
	param::Trickle.Node.z_1325 param::Trickle.Node.z_150 param::Trickle.Node.z_185 
	param::Trickle.Node.z_240 param::Trickle.Node.z_5 param::Trickle.Node.z_535 
	param::Trickle.Node.z_595 param::Trickle.Node.z_90 } } @ (z_1325 + z_150 + z_185 
	+ z_240 + z_5 + z_535 + z_595 + z_90)) }
																																PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_1325 + z_185 + z_240 + z_535 + z_595) == t_79) 
	&& ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && 
	(z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) 
	&& (t_241 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 
	4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && 
	(t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_96 < 4) && (z_1083 < t_653) && 
	(z_116 < t_10) && (z_1268 < t_823) && (z_132 < t_23) && (z_346 < t_220) && 
	(z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= 
	(t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) 
	&& (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 
	+ -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 
	<= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + 
	-2)) && (0 <= (t_823 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + 
	z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + 
	z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) 
	<= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + 
	z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + 
	z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && 
	((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + 
	z_2 + z_32)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + 
	z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && 
	((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= 
	(z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 
	+ z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_150 + z_90) > t_5) && 
	(z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && (z_1027 > 0) && (z_1083 > 0) && (z_11 
	> 0) && (z_116 > 0) && (z_1248 > 0) && (z_132 > 0) && (z_150 > 0) && (z_185 > 0) 
	&& (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 
	> 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && 
	(z_535 > 0) && (z_595 > 0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) && 
	(z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																																DATA{
																																	:pid_2:uncoveredExit = 1;
																																	:pid_31:node_time = (z_1325 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90);
																																	:pid_31:z = z_1325;
																																	:pid_31:localTime = (z_0 + z_1325 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90);
																																	:pid_31:localPC = (((z_1325 + z_185 + z_240 + z_535 + z_595) == t_79) && ((z_150 + z_90) == 4) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && (t_5 < 4) && (t_79 < 8) && (t_434 < 4) && (t_96 < 4) && (0 <= (t_5 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_434 + -2)) && (0 <= (t_96 + -2)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_150 > 0) && (z_185 > 0) && (z_240 > 0) && (z_5 > 0) && (z_535 > 0) && (z_595 > 0) && (z_90 > 0));
																																	:pid_32:cl = (z_1325 + z_185 + z_240 + z_535 + z_595);
																																	:pid_38:cl = (z_1325 + z_240 + z_535 + z_595);
																																	:pid_43:cl = (z_1325 + z_595);
																																}
																																BUFFER{
																																	:pid_48:bufferNode:<FIFO>#0{
																																		:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																																		:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																																		:pid_65:DataMsg1([ 1 , 1 , 0 ] , (z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																																		:pid_31:ControlMsg([ 1 , 1 ] , (z_0 + z_1325 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90));
																																	}
																																	:pid_65:bufferNode:<FIFO>#0{
																																		:pid_31:ControlMsg([ 1 , 1 ] , (z_0 + z_1325 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90));
																																	}
																																}
																																EC:<Id:3346;Ev:0;H:32;W:2895>{ SC: ( pid_23:o#19 , ( pid_36:cp2 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
													EXE: { |;| (:pid_99 , run) 
	(:pid_100 , run) (:pid_103 , run) (:pid_103 , cp_sendCM) (:pid_2 , run) (:pid_22 
	, run) (:pid_22 , n5_out_CM) }
																					
													TRACE: { |;| (:pid_99 , ${ 
	newfresh inst::Trickle.Node.z param::Trickle.Node.z_1394 }) (:pid_103 , ${ 
	output inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + param::Trickle.Node.z_1394 
	param::Trickle.Node.z_4 param::Trickle.Node.z_64 } } @ (z_1394 + z_64)) }
																																	/*FLAGS{ COVERAGE-ELEMENT }*/
																																	INFO{
																																		<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#21->run::pid_23:Trickle.Observer.o#19->prot::Trickle.Observer.o#19" as trace="tpid#21->run::pid_23:Trickle.Observer.o#19->prot::Trickle.Observer.o#19">
																																	}
																																	PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_1325 + z_185 + z_240 + z_535 + z_595) == t_79) 
	&& ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && 
	(z_1394 == t_42) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && 
	(t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) 
	&& (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && 
	(t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_96 
	< 4) && (z_1083 < t_653) && (z_116 < t_10) && (z_1268 < t_823) && (z_132 < t_23) 
	&& (z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && 
	(z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2))
	 && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 
	+ -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 
	<= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + 
	-2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && (0 <= (t_96 + -2)) && 
	((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + 
	z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + 
	z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + 
	z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + 
	z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 
	+ z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + 
	z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 
	+ z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_150 + 
	z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && (z_1027 > 0) && 
	(z_1083 > 0) && (z_11 > 0) && (z_116 > 0) && (z_1248 > 0) && (z_132 > 0) && 
	(z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 
	0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && 
	(z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_595 > 0) && (z_64 > 0) && (z_651 > 
	0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																																	DATA{
																																		:pid_2:uncoveredExit = 0;
																																		:pid_2:seqBuff[0] = 0;
																																		:pid_2:seqBuff[1] = 0;
																																		:pid_99:node_time = (z_1394 + z_64);
																																		:pid_99:z = z_1394;
																																		:pid_99:localTime = (z_1394 + z_4 + z_64);
																																		:pid_99:localPC = ((z_1394 == t_42) && (t_42 < 4) && (0 <= (t_42 + -2)) && (z_4 > 0) && (z_64 > 0));
																																		:pid_100:cl = z_1394;
																																		:pid_106:cl = (z_1394 + z_64);
																																		:pid_111:cl = (z_1394 + z_64);
																																	}
																																	BUFFER{
																																		:pid_82:bufferNode:<FIFO>#0{
																																			:pid_99:ControlMsg([ 0 , 0 ] , (z_1394 + z_4 + z_64));
																																		}
																																	}
																																}
																															}
																															EC:<Id:3162;Ev:280;H:31;W:2896>{ SC: ( pid_22:o#18 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
												EXE: { |;| (:pid_31 , run) (:pid_32 
	, run) (:pid_35 , run) (:pid_35 , cp1_receiveCM_consistent) (:pid_2 , run) }
																					
												TRACE: { |;| (:pid_31 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1325 }) (:pid_35 , ${ input 
	inst::Trickle.Node.ControlMsg [ 1 , 1 ] ${ + param::Trickle.Node.z_132 
	param::Trickle.Node.z_2 param::Trickle.Node.z_32 param::Trickle.Node.z_422 
	param::Trickle.Node.z_447 param::Trickle.Node.z_762 param::Trickle.Node.z_792 
	param::Trickle.Node.z_882 } } @ (z_1325 + z_150 + z_185 + z_240 + z_5 + z_535 + 
	z_595 + z_90)) }
																																PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + 
	z_792 + z_882) == t_68) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) 
	&& ((z_1325 + z_185 + z_240 + z_535 + z_595) < t_79) && (t_10 < 4) && (t_23 < 4) 
	&& (t_241 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 
	4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && 
	(t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_96 < 4) && (z_1083 < t_653) && 
	(z_116 < t_10) && (z_1268 < t_823) && (z_132 < t_23) && (z_346 < t_220) && 
	(z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= 
	(t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) 
	&& (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 
	+ -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 
	<= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + 
	-2)) && (0 <= (t_823 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + 
	z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + 
	z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) 
	<= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + 
	z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + 
	z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && 
	((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + 
	z_2 + z_32)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + 
	z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + z_53 + z_903)) && 
	((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= 
	(z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 
	+ z_762 + z_792 + z_882) <= (z_0 + z_1325 + z_150 + z_185 + z_240 + z_5 + z_535 
	+ z_595 + z_90)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882)
	 <= (z_3 + z_53 + z_903)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && 
	(z_1003 > 0) && (z_1027 > 0) && (z_1083 > 0) && (z_11 > 0) && (z_116 > 0) && 
	(z_1248 > 0) && (z_132 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 
	> 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && 
	(z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_595 > 
	0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && 
	(z_903 > 0))
																																DATA{
																																	:pid_2:uncoveredExit = 1;
																																	:pid_31:node_time = (z_1325 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90);
																																	:pid_31:z = z_1325;
																																	:pid_31:localTime = (z_0 + z_1325 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90);
																																	:pid_31:seq_buff[0] = 1;
																																	:pid_31:seq_buff[1] = 1;
																																	:pid_31:localPC = (((z_150 + z_90) == 4) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && ((z_1325 + z_185 + z_240 + z_535 + z_595) < t_79) && (t_5 < 4) && (t_79 < 8) && (t_434 < 4) && (t_96 < 4) && (0 <= (t_5 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_434 + -2)) && (0 <= (t_96 + -2)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_0 + z_1325 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_150 > 0) && (z_185 > 0) && (z_240 > 0) && (z_5 > 0) && (z_535 > 0) && (z_595 > 0) && (z_90 > 0));
																																	:pid_31:timeEmit = (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																																	:pid_32:c = 1;
																																	:pid_32:i = 2;
																																	:pid_32:consistent = true;
																																	:pid_32:cl = (z_1325 + z_185 + z_240 + z_535 + z_595);
																																	:pid_38:cl = (z_1325 + z_240 + z_535 + z_595);
																																	:pid_43:cl = (z_1325 + z_595);
																																}
																																BUFFER{
																																	:pid_31:bufferNode:<FIFO>#0{
																																		:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																																		:pid_65:DataMsg1([ 1 , 1 , 0 ] , (z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																																	}
																																}
																																EC:<Id:3362;Ev:0;H:32;W:2896>{ SC: ( pid_23:o#19 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
													EXE: { |;| (:pid_99 , run) 
	(:pid_100 , run) (:pid_103 , run) (:pid_103 , cp_sendCM) (:pid_2 , run) (:pid_22 
	, run) (:pid_22 , n5_out_CM) }
																					
													TRACE: { |;| (:pid_99 , ${ 
	newfresh inst::Trickle.Node.z param::Trickle.Node.z_1399 }) (:pid_103 , ${ 
	output inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + param::Trickle.Node.z_1399 
	param::Trickle.Node.z_4 param::Trickle.Node.z_64 } } @ (z_1399 + z_64)) }
																																	/*FLAGS{ COVERAGE-ELEMENT }*/
																																	INFO{
																																		<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#21->run::pid_23:Trickle.Observer.o#19->prot::Trickle.Observer.o#19" as trace="tpid#21->run::pid_23:Trickle.Observer.o#19->prot::Trickle.Observer.o#19">
																																	}
																																	PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + 
	z_792 + z_882) == t_68) && (z_1399 == t_42) && (z_240 == t_96) && (z_595 == 
	t_434) && (z_90 == t_5) && ((z_1325 + z_185 + z_240 + z_535 + z_595) < t_79) && 
	(t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) 
	&& (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && 
	(t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_96 
	< 4) && (z_1083 < t_653) && (z_116 < t_10) && (z_1268 < t_823) && (z_132 < t_23) 
	&& (z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && 
	(z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2))
	 && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 
	+ -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 
	<= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + 
	-2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && (0 <= (t_96 + -2)) && 
	((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + 
	z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + 
	z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + 
	z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + 
	z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 
	+ z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + 
	z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 
	+ z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_0 + z_1325 + z_150 + z_185 + z_240 
	+ z_5 + z_535 + z_595 + z_90)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + 
	z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_150 + z_90) > t_5) && (z_0 > 0) 
	&& (z_1 > 0) && (z_1003 > 0) && (z_1027 > 0) && (z_1083 > 0) && (z_11 > 0) && 
	(z_116 > 0) && (z_1248 > 0) && (z_132 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 
	> 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && 
	(z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0)
	 && (z_595 > 0) && (z_64 > 0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) && 
	(z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																																	DATA{
																																		:pid_2:uncoveredExit = 0;
																																		:pid_2:seqBuff[0] = 0;
																																		:pid_2:seqBuff[1] = 0;
																																		:pid_99:node_time = (z_1399 + z_64);
																																		:pid_99:z = z_1399;
																																		:pid_99:localTime = (z_1399 + z_4 + z_64);
																																		:pid_99:localPC = ((z_1399 == t_42) && (t_42 < 4) && (0 <= (t_42 + -2)) && (z_4 > 0) && (z_64 > 0));
																																		:pid_100:cl = z_1399;
																																		:pid_106:cl = (z_1399 + z_64);
																																		:pid_111:cl = (z_1399 + z_64);
																																	}
																																	BUFFER{
																																		:pid_82:bufferNode:<FIFO>#0{
																																			:pid_99:ControlMsg([ 0 , 0 ] , (z_1399 + z_4 + z_64));
																																		}
																																	}
																																}
																															}
																															EC:<Id:3163;Ev:281;H:31;W:2897>{ SC: ( pid_22:o#18 , ( pid_35:cp1 , pid_41:dp2 , pid_45:dp1 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
												EXE: { |;| (:pid_31 , run) (:pid_43 
	, run) (:pid_46 , run) (:pid_46 , dp_resetTau) (:pid_2 , run) }
																					
												TRACE: { |;| (:pid_31 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1325 }) (:pid_46 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_884 }) }
																																PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_1325 + z_595) == 4) && ((z_150 + z_90) == 4) && 
	((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (z_240 == t_96) && (z_595 
	== t_434) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 
	4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && 
	(t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && 
	(t_653 < 4) && (t_823 < 4) && (t_884 < 8) && (t_96 < 4) && (z_1083 < t_653) && 
	(z_116 < t_10) && (z_1268 < t_823) && (z_132 < t_23) && (z_346 < t_220) && 
	(z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= 
	(t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) 
	&& (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 
	+ -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 
	<= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + 
	-2)) && (0 <= (t_823 + -2)) && (0 <= (t_884 + -4)) && (0 <= (t_96 + -2)) && 
	((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + 
	z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + 
	z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + 
	z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + 
	z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + z_132 + z_2 + z_32 + z_422 
	+ z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1248 + z_1268 + z_3 + 
	z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 
	+ z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1325 + 
	z_595) > t_434) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_1003 > 
	0) && (z_1027 > 0) && (z_1083 > 0) && (z_11 > 0) && (z_116 > 0) && (z_1248 > 0) 
	&& (z_132 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 
	> 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && 
	(z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_595 > 0) && (z_651 > 
	0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																																DATA{
																																	:pid_2:uncoveredExit = 1;
																																	:pid_31:node_time = (z_1325 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90);
																																	:pid_31:z = z_1325;
																																	:pid_31:localTime = (z_0 + z_1325 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90);
																																	:pid_31:localPC = (((z_1325 + z_595) == 4) && ((z_150 + z_90) == 4) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && (t_5 < 4) && (t_79 < 8) && (t_434 < 4) && (t_884 < 8) && (t_96 < 4) && (0 <= (t_5 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_434 + -2)) && (0 <= (t_884 + -4)) && (0 <= (t_96 + -2)) && ((z_1325 + z_595) > t_434) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_150 > 0) && (z_185 > 0) && (z_240 > 0) && (z_5 > 0) && (z_535 > 0) && (z_595 > 0) && (z_90 > 0));
																																	:pid_32:cl = (z_1325 + z_185 + z_240 + z_535 + z_595);
																																	:pid_38:cl = (z_1325 + z_240 + z_535 + z_595);
																																	:pid_43:e = 1;
																																	:pid_43:tau = 8;
																																	:pid_43:c = 0;
																																	:pid_43:t = t_884;
																																	:pid_43:cl = 0;
																																}
																																EC:<Id:3377;Ev:0;H:32;W:2897>{ SC: ( pid_23:o#19 , ( pid_35:cp1 , pid_41:dp2 , pid_45:dp1 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_91:dp1 , pid_96:dp1 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
													EXE: { |;| (:pid_99 , run) 
	(:pid_100 , run) (:pid_103 , run) (:pid_103 , cp_sendCM) (:pid_2 , run) (:pid_22 
	, run) (:pid_22 , n5_out_CM) }
																					
													TRACE: { |;| (:pid_99 , ${ 
	newfresh inst::Trickle.Node.z param::Trickle.Node.z_1404 }) (:pid_103 , ${ 
	output inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + param::Trickle.Node.z_1404 
	param::Trickle.Node.z_4 param::Trickle.Node.z_64 } } @ (z_1404 + z_64)) }
																																	/*FLAGS{ COVERAGE-ELEMENT }*/
																																	INFO{
																																		<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#21->run::pid_23:Trickle.Observer.o#19->prot::Trickle.Observer.o#19" as trace="tpid#21->run::pid_23:Trickle.Observer.o#19->prot::Trickle.Observer.o#19">
																																	}
																																	PC: (((z_1027 + z_1112 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_1325 + z_595) == 4) && ((z_150 + z_90) == 4) && 
	((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (z_1404 == t_42) && (z_240 
	== t_96) && (z_595 == t_434) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && 
	(t_241 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) 
	&& (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && 
	(t_568 < 4) && (t_653 < 4) && (t_823 < 4) && (t_884 < 8) && (t_96 < 4) && 
	(z_1083 < t_653) && (z_116 < t_10) && (z_1268 < t_823) && (z_132 < t_23) && 
	(z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && 
	(z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2))
	 && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 
	+ -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 
	<= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + 
	-2)) && (0 <= (t_653 + -2)) && (0 <= (t_823 + -2)) && (0 <= (t_884 + -4)) && (0 
	<= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) 
	<= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + 
	z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + 
	z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= 
	(z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + 
	z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1112 + 
	z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 
	+ z_1248 + z_1268 + z_3 + z_53 + z_903)) && ((z_1027 + z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_3 + z_53 + z_903))
	 && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 
	+ z_903)) && ((z_1325 + z_595) > t_434) && ((z_150 + z_90) > t_5) && (z_0 > 0) 
	&& (z_1 > 0) && (z_1003 > 0) && (z_1027 > 0) && (z_1083 > 0) && (z_11 > 0) && 
	(z_116 > 0) && (z_1248 > 0) && (z_132 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 
	> 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && 
	(z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0)
	 && (z_595 > 0) && (z_64 > 0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) && 
	(z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																																	DATA{
																																		:pid_2:uncoveredExit = 0;
																																		:pid_2:seqBuff[0] = 0;
																																		:pid_2:seqBuff[1] = 0;
																																		:pid_99:node_time = (z_1404 + z_64);
																																		:pid_99:z = z_1404;
																																		:pid_99:localTime = (z_1404 + z_4 + z_64);
																																		:pid_99:localPC = ((z_1404 == t_42) && (t_42 < 4) && (0 <= (t_42 + -2)) && (z_4 > 0) && (z_64 > 0));
																																		:pid_100:cl = z_1404;
																																		:pid_106:cl = (z_1404 + z_64);
																																		:pid_111:cl = (z_1404 + z_64);
																																	}
																																	BUFFER{
																																		:pid_82:bufferNode:<FIFO>#0{
																																			:pid_99:ControlMsg([ 0 , 0 ] , (z_1404 + z_4 + z_64));
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																											EC:<Id:2394;Ev:224;H:27;W:2177>{ SC: ( pid_19:o#15 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_80:dp2 ) , ( pid_86:cp1 , pid_90:dp0 , pid_97:dp2 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
								EXE: { |;| (:pid_82 , run) (:pid_94 , run) (:pid_96 
	, run) (:pid_96 , dp1_reach_k) (:pid_2 , run) }
																					
								TRACE: (:pid_82 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_1083 })
																												PC: (((z_1027 + z_792 + z_882) == t_568) && ((z_150 + z_90) == 4) && ((z_422 + z_447 
	+ z_762 + z_792 + z_882) == t_68) && (z_1083 == t_653) && (z_240 == t_96) && 
	(z_595 == t_434) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && 
	(t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) 
	&& (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && 
	(t_653 < 4) && (t_96 < 4) && (z_116 < t_10) && (z_132 < t_23) && (z_346 < t_220) 
	&& (z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 
	<= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)
	) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= 
	(t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) 
	&& (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= 
	(t_653 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + 
	z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= 
	(z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_132 
	+ z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) 
	&& ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && (z_11 > 0)
	 && (z_116 > 0) && (z_132 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && 
	(z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0)
	 && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && 
	(z_651 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && (z_903 
	> 0))
																												DATA{
																													:pid_2:uncoveredExit = 1;
																													:pid_82:node_time = (z_1003 + z_1083 + z_53 + z_903);
																													:pid_82:z = z_1083;
																													:pid_82:localTime = (z_1003 + z_1083 + z_3 + z_53 + z_903);
																													:pid_82:localPC = ((z_1083 == t_653) && (t_241 < 4) && (t_39 < 4) && (t_653 < 4) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_653 + -2)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																													:pid_83:cl = (z_1003 + z_1083);
																													:pid_89:cl = (z_1003 + z_1083 + z_53 + z_903);
																													:pid_94:cl = z_1083;
																												}
																												EC:<Id:2505;Ev:0;H:28;W:2281>{ SC: ( pid_20:o#16 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_80:dp2 ) , ( pid_86:cp1 , pid_90:dp0 , pid_97:dp2 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
									EXE: { |;| (:pid_82 , run) (:pid_94 , run) 
	(:pid_97 , run) (:pid_97 , dp2_receiveDM_consistent) (:pid_2 , run) (:pid_19 , 
	run) (:pid_19 , n4_in_DM2) }
																					
									TRACE: { |;| (:pid_82 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1118 }) (:pid_97 , ${ input 
	inst::Trickle.Node.DataMsg2 [ 2 , 2 , 1 ] ${ + param::Trickle.Node.z_1027 
	param::Trickle.Node.z_132 param::Trickle.Node.z_2 param::Trickle.Node.z_32 
	param::Trickle.Node.z_422 param::Trickle.Node.z_447 param::Trickle.Node.z_762 
	param::Trickle.Node.z_792 param::Trickle.Node.z_882 } } @ (z_1003 + z_1083 + 
	z_1118 + z_53 + z_903)) }
																													/*FLAGS{ COVERAGE-ELEMENT }*/
																													INFO{
																														<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#18->run::pid_20:Trickle.Observer.o#16->prot::Trickle.Observer.o#16" as trace="tpid#18->run::pid_20:Trickle.Observer.o#16->prot::Trickle.Observer.o#16">
																													}
																													PC: (((z_1027 + z_792 + z_882) == t_568) && ((z_150 + z_90) == 4) && ((z_422 + z_447 
	+ z_762 + z_792 + z_882) == t_68) && (z_1083 == t_653) && (z_240 == t_96) && 
	(z_595 == t_434) && (z_90 == t_5) && ((z_1083 + z_1118) < 4) && (t_10 < 4) && 
	(t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) 
	&& (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && 
	(t_513 < 4) && (t_568 < 4) && (t_653 < 4) && (t_96 < 4) && (z_116 < t_10) && 
	(z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && 
	(z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && 
	(0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + 
	-2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= 
	(t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)
	) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + 
	z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + 
	z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + 
	z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 
	+ z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) 
	<= (z_132 + z_2 + z_32)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + 
	z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1118 + z_3 + z_53 + z_903)) && 
	((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + 
	z_903)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && 
	(z_1083 > 0) && (z_11 > 0) && (z_116 > 0) && (z_132 > 0) && (z_150 > 0) && 
	(z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0)
	 && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 
	> 0) && (z_535 > 0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) 
	&& (z_90 > 0) && (z_903 > 0))
																													DATA{
																														:pid_2:uncoveredExit = 0;
																														:pid_82:my_buff[1].seq = 2;
																														:pid_82:my_buff[1].fragment = FRAGMENT_1;
																														:pid_82:my_buff[1].offset = 1;
																														:pid_82:firmware[1] = FRAGMENT_1;
																														:pid_82:myseq_buff[1] = 1;
																														:pid_82:node_time = (z_1003 + z_1083 + z_1118 + z_53 + z_903);
																														:pid_82:z = z_1118;
																														:pid_82:localTime = (z_1003 + z_1083 + z_1118 + z_3 + z_53 + z_903);
																														:pid_82:undef_DM2 = false;
																														:pid_82:localPC = ((z_1083 == t_653) && ((z_1083 + z_1118) < 4) && (t_241 < 4) && (t_39 < 4) && (t_653 < 4) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_653 + -2)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1083 + z_1118 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_1083 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																														:pid_82:timeEmit = (z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																														:pid_83:cl = (z_1003 + z_1083 + z_1118);
																														:pid_89:cl = (z_1003 + z_1083 + z_1118 + z_53 + z_903);
																														:pid_94:c = 1;
																														:pid_94:consistent = true;
																														:pid_94:cl = (z_1083 + z_1118);
																														:pid_94:d.seq = 2;
																														:pid_94:d.fragment = FRAGMENT_1;
																														:pid_94:d.offset = 1;
																													}
																													BUFFER{
																														:pid_82:bufferNode:<FIFO>#0{ }
																													}
																												}
																											}
																											EC:<Id:2395;Ev:225;H:27;W:2178>{ SC: ( pid_19:o#15 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_69:cp1 , pid_74:dp1 , pid_80:dp2 ) , ( pid_86:cp1 , pid_90:dp0 , pid_96:dp1 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
								EXE: { |;| (:pid_65 , run) (:pid_66 , run) (:pid_70 
	, run) (:pid_70 , cp_resetTau) (:pid_2 , run) }
																					
								TRACE: { |;| (:pid_65 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1082 }) (:pid_70 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_325 }) }
																												PC: (((z_1027 + z_1082 + z_422 + z_447 + z_762 + z_792 + z_882) == 4) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + 
	z_792 + z_882) == t_68) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) 
	&& (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_325 < 8) && (t_39 < 4) && (t_42 
	< 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && 
	(t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_653 < 4) && (t_96 
	< 4) && (z_116 < t_10) && (z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) 
	&& (z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && 
	(0 <= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_325 + -4)) && (0 <= (t_39 
	+ -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= 
	(t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) 
	&& (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= 
	(t_653 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + 
	z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= 
	(z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_132 
	+ z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) 
	&& ((z_1027 + z_1082 + z_422 + z_447 + z_762 + z_792 + z_882) > t_68) && ((z_150 
	+ z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_1027 > 0) && (z_11 > 0) && (z_116 
	> 0) && (z_132 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && 
	(z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0)
	 && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_651 > 0) && 
	(z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																												DATA{
																													:pid_2:uncoveredExit = 1;
																													:pid_65:node_time = (z_1027 + z_1082 + z_132 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																													:pid_65:z = z_1082;
																													:pid_65:localTime = (z_1027 + z_1082 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																													:pid_65:localPC = (((z_1027 + z_1082 + z_422 + z_447 + z_762 + z_792 + z_882) == 4) && ((z_1027 + z_792 + z_882) == t_568) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (t_23 < 4) && (t_325 < 8) && (t_68 < 4) && (t_338 < 4) && (t_568 < 4) && (z_132 < t_23) && (z_447 < t_338) && (z_792 < t_568) && (0 <= (t_23 + -2)) && (0 <= (t_325 + -4)) && (0 <= (t_68 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_568 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1082 + z_422 + z_447 + z_762 + z_792 + z_882) > t_68) && (z_1027 > 0) && (z_132 > 0) && (z_2 > 0) && (z_32 > 0) && (z_422 > 0) && (z_447 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0));
																													:pid_66:e = 1;
																													:pid_66:tau = 8;
																													:pid_66:c = 0;
																													:pid_66:t = t_325;
																													:pid_66:cl = 0;
																													:pid_72:cl = (z_1027 + z_1082 + z_447 + z_762 + z_792 + z_882);
																													:pid_77:cl = (z_1027 + z_1082 + z_792 + z_882);
																												}
																												EC:<Id:2520;Ev:0;H:28;W:2295>{ SC: ( pid_20:o#16 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_69:cp1 , pid_74:dp1 , pid_80:dp2 ) , ( pid_86:cp1 , pid_90:dp0 , pid_96:dp1 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
									EXE: { |;| (:pid_82 , run) (:pid_94 , run) 
	(:pid_96 , run) (:pid_96 , dp1_receiveDM_consistent) (:pid_2 , run) (:pid_19 , 
	run) (:pid_19 , n4_in_DM2) }
																					
									TRACE: { |;| (:pid_82 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1123 }) (:pid_96 , ${ input 
	inst::Trickle.Node.DataMsg2 [ 2 , 2 , 1 ] ${ + param::Trickle.Node.z_1027 
	param::Trickle.Node.z_132 param::Trickle.Node.z_2 param::Trickle.Node.z_32 
	param::Trickle.Node.z_422 param::Trickle.Node.z_447 param::Trickle.Node.z_762 
	param::Trickle.Node.z_792 param::Trickle.Node.z_882 } } @ (z_1003 + z_1123 + 
	z_53 + z_903)) }
																													/*FLAGS{ COVERAGE-ELEMENT }*/
																													INFO{
																														<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#18->run::pid_20:Trickle.Observer.o#16->prot::Trickle.Observer.o#16" as trace="tpid#18->run::pid_20:Trickle.Observer.o#16->prot::Trickle.Observer.o#16">
																													}
																													PC: (((z_1027 + z_1082 + z_422 + z_447 + z_762 + z_792 + z_882) == 4) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + 
	z_792 + z_882) == t_68) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) 
	&& (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_325 < 8) && (t_39 < 4) && (t_42 
	< 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && 
	(t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_653 < 4) && (t_96 
	< 4) && (z_1123 < t_653) && (z_116 < t_10) && (z_132 < t_23) && (z_346 < t_220) 
	&& (z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 
	<= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_325 + 
	-4)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= 
	(t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) 
	&& (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= 
	(t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + 
	z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + 
	z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + 
	z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 
	+ z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 
	+ z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) 
	&& ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 
	+ z_2 + z_32)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 
	+ z_882) <= (z_1003 + z_1123 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1027 + 
	z_1082 + z_422 + z_447 + z_762 + z_792 + z_882) > t_68) && ((z_150 + z_90) > t_5)
	 && (z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && (z_1027 > 0) && (z_11 > 0) && 
	(z_116 > 0) && (z_132 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 
	> 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && 
	(z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_651 > 
	0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																													DATA{
																														:pid_2:uncoveredExit = 0;
																														:pid_82:my_buff[1].seq = 2;
																														:pid_82:my_buff[1].fragment = FRAGMENT_1;
																														:pid_82:my_buff[1].offset = 1;
																														:pid_82:firmware[1] = FRAGMENT_1;
																														:pid_82:myseq_buff[1] = 1;
																														:pid_82:node_time = (z_1003 + z_1123 + z_53 + z_903);
																														:pid_82:z = z_1123;
																														:pid_82:localTime = (z_1003 + z_1123 + z_3 + z_53 + z_903);
																														:pid_82:undef_DM2 = false;
																														:pid_82:localPC = ((t_241 < 4) && (t_39 < 4) && (t_653 < 4) && (z_1123 < t_653) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_653 + -2)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1123 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																														:pid_82:timeEmit = (z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																														:pid_83:cl = (z_1003 + z_1123);
																														:pid_89:cl = (z_1003 + z_1123 + z_53 + z_903);
																														:pid_94:c = 1;
																														:pid_94:consistent = true;
																														:pid_94:cl = z_1123;
																														:pid_94:d.seq = 2;
																														:pid_94:d.fragment = FRAGMENT_1;
																														:pid_94:d.offset = 1;
																													}
																													BUFFER{
																														:pid_82:bufferNode:<FIFO>#0{ }
																													}
																												}
																											}
																											EC:<Id:2396;Ev:226;H:27;W:2179>{ SC: ( pid_19:o#15 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_90:dp0 , pid_96:dp1 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
								EXE: { |;| (:pid_65 , run) (:pid_72 , run) (:pid_74 
	, run) (:pid_74 , dp_sendDM) (:pid_2 , run) }
																					
								TRACE: { |;| (:pid_65 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1082 }) (:pid_74 , ${ output 
	inst::Trickle.Node.DataMsg1 [ 1 , 1 , 0 ] ${ + param::Trickle.Node.z_1027 
	param::Trickle.Node.z_1082 param::Trickle.Node.z_132 param::Trickle.Node.z_2 
	param::Trickle.Node.z_32 param::Trickle.Node.z_422 param::Trickle.Node.z_447 
	param::Trickle.Node.z_762 param::Trickle.Node.z_792 param::Trickle.Node.z_882 } }
	 @ (z_1027 + z_1082 + z_132 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882)) }
																												PC: (((z_1027 + z_1082 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + 
	z_792 + z_882) == t_68) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) 
	&& (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 
	4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && 
	(t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_653 < 4) && (t_96 < 4) && (z_116 
	< t_10) && (z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && (z_696 < 
	t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 
	+ -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 
	<= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) 
	&& (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= 
	(t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_96 + -2))
	 && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + 
	z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + 
	z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + 
	z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + 
	z_90) <= (z_132 + z_2 + z_32)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + 
	z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_150 + z_90) > t_5) && (z_0 > 0) 
	&& (z_1 > 0) && (z_1027 > 0) && (z_11 > 0) && (z_116 > 0) && (z_132 > 0) && 
	(z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 
	0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && 
	(z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 
	0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																												DATA{
																													:pid_2:uncoveredExit = 1;
																													:pid_65:node_time = (z_1027 + z_1082 + z_132 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																													:pid_65:z = z_1082;
																													:pid_65:localTime = (z_1027 + z_1082 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																													:pid_65:localPC = (((z_1027 + z_1082 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + z_792 + z_882) == t_568) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (t_23 < 4) && (t_68 < 4) && (t_338 < 4) && (t_568 < 4) && (z_132 < t_23) && (z_447 < t_338) && (z_792 < t_568) && (0 <= (t_23 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_568 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && (z_1027 > 0) && (z_132 > 0) && (z_2 > 0) && (z_32 > 0) && (z_422 > 0) && (z_447 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0));
																													:pid_66:cl = (z_1027 + z_1082 + z_422 + z_447 + z_762 + z_792 + z_882);
																													:pid_72:cl = (z_1027 + z_1082 + z_447 + z_762 + z_792 + z_882);
																													:pid_77:cl = (z_1027 + z_1082 + z_792 + z_882);
																												}
																												BUFFER{
																													:pid_31:bufferNode:<FIFO>#0{
																														:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																														:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																														:pid_65:DataMsg1([ 1 , 1 , 0 ] , (z_1027 + z_1082 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																													}
																													:pid_48:bufferNode:<FIFO>#0{
																														:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																														:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																														:pid_65:DataMsg1([ 1 , 1 , 0 ] , (z_1027 + z_1082 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																													}
																													:pid_82:bufferNode:<FIFO>#0{
																														:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																														:pid_65:DataMsg1([ 1 , 1 , 0 ] , (z_1027 + z_1082 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																													}
																													:pid_99:bufferNode:<FIFO>#0{
																														:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																														:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																														:pid_65:DataMsg1([ 1 , 1 , 0 ] , (z_1027 + z_1082 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																													}
																												}
																												EC:<Id:2536;Ev:0;H:28;W:2310>{ SC: ( pid_20:o#16 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_90:dp0 , pid_96:dp1 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
									EXE: { |;| (:pid_82 , run) (:pid_94 , run) 
	(:pid_96 , run) (:pid_96 , dp1_receiveDM_consistent) (:pid_2 , run) (:pid_19 , 
	run) (:pid_19 , n4_in_DM2) }
																					
									TRACE: { |;| (:pid_82 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1128 }) (:pid_96 , ${ input 
	inst::Trickle.Node.DataMsg2 [ 2 , 2 , 1 ] ${ + param::Trickle.Node.z_1027 
	param::Trickle.Node.z_132 param::Trickle.Node.z_2 param::Trickle.Node.z_32 
	param::Trickle.Node.z_422 param::Trickle.Node.z_447 param::Trickle.Node.z_762 
	param::Trickle.Node.z_792 param::Trickle.Node.z_882 } } @ (z_1003 + z_1128 + 
	z_53 + z_903)) }
																													/*FLAGS{ COVERAGE-ELEMENT }*/
																													INFO{
																														<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#18->run::pid_20:Trickle.Observer.o#16->prot::Trickle.Observer.o#16" as trace="tpid#18->run::pid_20:Trickle.Observer.o#16->prot::Trickle.Observer.o#16">
																													}
																													PC: (((z_1027 + z_1082 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_1027 + 
	z_792 + z_882) == t_568) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + 
	z_792 + z_882) == t_68) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) 
	&& (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 
	4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && 
	(t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_653 < 4) && (t_96 < 4) && 
	(z_1128 < t_653) && (z_116 < t_10) && (z_132 < t_23) && (z_346 < t_220) && 
	(z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= 
	(t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) 
	&& (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 
	+ -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 
	<= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + 
	-2)) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + 
	z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 
	+ z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) 
	<= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 
	+ z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 
	+ z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + 
	z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1128 
	+ z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + 
	z_882) <= (z_3 + z_53 + z_903)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 
	0) && (z_1003 > 0) && (z_1027 > 0) && (z_11 > 0) && (z_116 > 0) && (z_132 > 0) 
	&& (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 
	> 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && 
	(z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 
	0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																													DATA{
																														:pid_2:uncoveredExit = 0;
																														:pid_82:my_buff[1].seq = 2;
																														:pid_82:my_buff[1].fragment = FRAGMENT_1;
																														:pid_82:my_buff[1].offset = 1;
																														:pid_82:firmware[1] = FRAGMENT_1;
																														:pid_82:myseq_buff[1] = 1;
																														:pid_82:node_time = (z_1003 + z_1128 + z_53 + z_903);
																														:pid_82:z = z_1128;
																														:pid_82:localTime = (z_1003 + z_1128 + z_3 + z_53 + z_903);
																														:pid_82:undef_DM2 = false;
																														:pid_82:localPC = ((t_241 < 4) && (t_39 < 4) && (t_653 < 4) && (z_1128 < t_653) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_653 + -2)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1128 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																														:pid_82:timeEmit = (z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																														:pid_83:cl = (z_1003 + z_1128);
																														:pid_89:cl = (z_1003 + z_1128 + z_53 + z_903);
																														:pid_94:c = 1;
																														:pid_94:consistent = true;
																														:pid_94:cl = z_1128;
																														:pid_94:d.seq = 2;
																														:pid_94:d.fragment = FRAGMENT_1;
																														:pid_94:d.offset = 1;
																													}
																													BUFFER{
																														:pid_82:bufferNode:<FIFO>#0{
																															:pid_65:DataMsg1([ 1 , 1 , 0 ] , (z_1027 + z_1082 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																														}
																													}
																												}
																											}
																											EC:<Id:2397;Ev:227;H:27;W:2180>{ SC: ( pid_19:o#15 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_79:dp1 ) , ( pid_86:cp1 , pid_90:dp0 , pid_96:dp1 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
								EXE: { |;| (:pid_65 , run) (:pid_77 , run) (:pid_80 
	, run) (:pid_80 , dp_resetTau) (:pid_2 , run) }
																					
								TRACE: { |;| (:pid_65 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1082 }) (:pid_80 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_703 }) }
																												PC: (((z_1027 + z_1082 + z_792 + z_882) == 4) && ((z_1027 + z_792 + z_882) == t_568) 
	&& ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && 
	(z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) 
	&& (t_241 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 
	4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && 
	(t_568 < 4) && (t_653 < 4) && (t_703 < 8) && (t_96 < 4) && (z_116 < t_10) && 
	(z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && 
	(z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && 
	(0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + 
	-2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= 
	(t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)
	) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_703 + -4)) && (0 <= 
	(t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= 
	(z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + 
	z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + 
	z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + 
	z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 
	+ z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) 
	&& ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_132 + z_2 + z_32 + z_422 
	+ z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1027 + z_1082 + 
	z_792 + z_882) > t_568) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && 
	(z_1027 > 0) && (z_11 > 0) && (z_116 > 0) && (z_132 > 0) && (z_150 > 0) && 
	(z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0)
	 && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 
	> 0) && (z_535 > 0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) 
	&& (z_90 > 0) && (z_903 > 0))
																												DATA{
																													:pid_2:uncoveredExit = 1;
																													:pid_65:node_time = (z_1027 + z_1082 + z_132 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																													:pid_65:z = z_1082;
																													:pid_65:localTime = (z_1027 + z_1082 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																													:pid_65:localPC = (((z_1027 + z_1082 + z_792 + z_882) == 4) && ((z_1027 + z_792 + z_882) == t_568) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (t_23 < 4) && (t_68 < 4) && (t_338 < 4) && (t_568 < 4) && (t_703 < 8) && (z_132 < t_23) && (z_447 < t_338) && (z_792 < t_568) && (0 <= (t_23 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_703 + -4)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_1082 + z_792 + z_882) > t_568) && (z_1027 > 0) && (z_132 > 0) && (z_2 > 0) && (z_32 > 0) && (z_422 > 0) && (z_447 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0));
																													:pid_66:cl = (z_1027 + z_1082 + z_422 + z_447 + z_762 + z_792 + z_882);
																													:pid_72:cl = (z_1027 + z_1082 + z_447 + z_762 + z_792 + z_882);
																													:pid_77:e = 1;
																													:pid_77:tau = 8;
																													:pid_77:c = 0;
																													:pid_77:t = t_703;
																													:pid_77:cl = 0;
																												}
																												EC:<Id:2552;Ev:0;H:28;W:2325>{ SC: ( pid_20:o#16 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_79:dp1 ) , ( pid_86:cp1 , pid_90:dp0 , pid_96:dp1 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
									EXE: { |;| (:pid_82 , run) (:pid_94 , run) 
	(:pid_96 , run) (:pid_96 , dp1_receiveDM_consistent) (:pid_2 , run) (:pid_19 , 
	run) (:pid_19 , n4_in_DM2) }
																					
									TRACE: { |;| (:pid_82 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1133 }) (:pid_96 , ${ input 
	inst::Trickle.Node.DataMsg2 [ 2 , 2 , 1 ] ${ + param::Trickle.Node.z_1027 
	param::Trickle.Node.z_132 param::Trickle.Node.z_2 param::Trickle.Node.z_32 
	param::Trickle.Node.z_422 param::Trickle.Node.z_447 param::Trickle.Node.z_762 
	param::Trickle.Node.z_792 param::Trickle.Node.z_882 } } @ (z_1003 + z_1133 + 
	z_53 + z_903)) }
																													/*FLAGS{ COVERAGE-ELEMENT }*/
																													INFO{
																														<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#18->run::pid_20:Trickle.Observer.o#16->prot::Trickle.Observer.o#16" as trace="tpid#18->run::pid_20:Trickle.Observer.o#16->prot::Trickle.Observer.o#16">
																													}
																													PC: (((z_1027 + z_1082 + z_792 + z_882) == 4) && ((z_1027 + z_792 + z_882) == t_568) 
	&& ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && 
	(z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) 
	&& (t_241 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 
	4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && 
	(t_568 < 4) && (t_653 < 4) && (t_703 < 8) && (t_96 < 4) && (z_1133 < t_653) && 
	(z_116 < t_10) && (z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && (z_696 
	< t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= 
	(t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) 
	&& (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 
	+ -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && 
	(0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= 
	(t_703 + -4)) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + 
	z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= 
	(z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && 
	((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= 
	(z_1003 + z_1133 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 
	+ z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1027 + z_1082 + z_792 + 
	z_882) > t_568) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_1003 > 
	0) && (z_1027 > 0) && (z_11 > 0) && (z_116 > 0) && (z_132 > 0) && (z_150 > 0) && 
	(z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0)
	 && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 
	> 0) && (z_535 > 0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) 
	&& (z_90 > 0) && (z_903 > 0))
																													DATA{
																														:pid_2:uncoveredExit = 0;
																														:pid_82:my_buff[1].seq = 2;
																														:pid_82:my_buff[1].fragment = FRAGMENT_1;
																														:pid_82:my_buff[1].offset = 1;
																														:pid_82:firmware[1] = FRAGMENT_1;
																														:pid_82:myseq_buff[1] = 1;
																														:pid_82:node_time = (z_1003 + z_1133 + z_53 + z_903);
																														:pid_82:z = z_1133;
																														:pid_82:localTime = (z_1003 + z_1133 + z_3 + z_53 + z_903);
																														:pid_82:undef_DM2 = false;
																														:pid_82:localPC = ((t_241 < 4) && (t_39 < 4) && (t_653 < 4) && (z_1133 < t_653) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_653 + -2)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1133 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																														:pid_82:timeEmit = (z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																														:pid_83:cl = (z_1003 + z_1133);
																														:pid_89:cl = (z_1003 + z_1133 + z_53 + z_903);
																														:pid_94:c = 1;
																														:pid_94:consistent = true;
																														:pid_94:cl = z_1133;
																														:pid_94:d.seq = 2;
																														:pid_94:d.fragment = FRAGMENT_1;
																														:pid_94:d.offset = 1;
																													}
																													BUFFER{
																														:pid_82:bufferNode:<FIFO>#0{ }
																													}
																												}
																											}
																											EC:<Id:2398;Ev:228;H:27;W:2181>{ SC: ( pid_19:o#15 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_53:cp2 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_80:dp2 ) , ( pid_86:cp1 , pid_90:dp0 , pid_96:dp1 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
								EXE: { |;| (:pid_48 , run) (:pid_49 , run) (:pid_52 
	, run) (:pid_52 , cp_sendCM) (:pid_2 , run) }
																					
								TRACE: { |;| (:pid_48 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1081 }) (:pid_52 , ${ output 
	inst::Trickle.Node.ControlMsg [ 1 , 1 ] ${ + param::Trickle.Node.z_1 
	param::Trickle.Node.z_1081 param::Trickle.Node.z_11 param::Trickle.Node.z_116 
	param::Trickle.Node.z_306 param::Trickle.Node.z_346 param::Trickle.Node.z_651 
	param::Trickle.Node.z_696 } } @ (z_1081 + z_11 + z_116 + z_306 + z_346 + z_651 + 
	z_696)) }
																												PC: (((z_1027 + z_792 + z_882) == t_568) && ((z_1081 + z_306 + z_346 + z_651 + z_696)
	 == t_65) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) 
	== t_68) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && (t_10 < 4) 
	&& (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 
	4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && 
	(t_513 < 4) && (t_568 < 4) && (t_653 < 4) && (t_96 < 4) && (z_116 < t_10) && 
	(z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && 
	(z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && 
	(0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + 
	-2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= 
	(t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)
	) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + 
	z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + 
	z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + 
	z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 
	+ z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) 
	<= (z_132 + z_2 + z_32)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 
	+ z_882) <= (z_3 + z_53 + z_903)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 
	> 0) && (z_11 > 0) && (z_116 > 0) && (z_132 > 0) && (z_150 > 0) && (z_185 > 0) 
	&& (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 
	> 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && 
	(z_535 > 0) && (z_651 > 0) && (z_696 > 0) && (z_762 > 0) && (z_792 > 0) && 
	(z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																												DATA{
																													:pid_2:uncoveredExit = 1;
																													:pid_48:node_time = (z_1081 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696);
																													:pid_48:z = z_1081;
																													:pid_48:localTime = (z_1 + z_1081 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696);
																													:pid_48:localPC = (((z_1081 + z_306 + z_346 + z_651 + z_696) == t_65) && (t_10 < 4) && (t_65 < 4) && (t_220 < 4) && (t_513 < 4) && (z_116 < t_10) && (z_346 < t_220) && (z_696 < t_513) && (0 <= (t_10 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_220 + -2)) && (0 <= (t_513 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_306 > 0) && (z_346 > 0) && (z_651 > 0) && (z_696 > 0));
																													:pid_49:cl = (z_1081 + z_306 + z_346 + z_651 + z_696);
																													:pid_55:cl = (z_1081 + z_346 + z_651 + z_696);
																													:pid_60:cl = (z_1081 + z_696);
																												}
																												BUFFER{
																													:pid_65:bufferNode:<FIFO>#0{
																														:pid_48:ControlMsg([ 1 , 1 ] , (z_1 + z_1081 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696));
																													}
																												}
																												EC:<Id:2566;Ev:0;H:28;W:2338>{ SC: ( pid_20:o#16 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_53:cp2 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_80:dp2 ) , ( pid_86:cp1 , pid_90:dp0 , pid_96:dp1 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
									EXE: { |;| (:pid_82 , run) (:pid_94 , run) 
	(:pid_96 , run) (:pid_96 , dp1_receiveDM_consistent) (:pid_2 , run) (:pid_19 , 
	run) (:pid_19 , n4_in_DM2) }
																					
									TRACE: { |;| (:pid_82 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1138 }) (:pid_96 , ${ input 
	inst::Trickle.Node.DataMsg2 [ 2 , 2 , 1 ] ${ + param::Trickle.Node.z_1027 
	param::Trickle.Node.z_132 param::Trickle.Node.z_2 param::Trickle.Node.z_32 
	param::Trickle.Node.z_422 param::Trickle.Node.z_447 param::Trickle.Node.z_762 
	param::Trickle.Node.z_792 param::Trickle.Node.z_882 } } @ (z_1003 + z_1138 + 
	z_53 + z_903)) }
																													/*FLAGS{ COVERAGE-ELEMENT }*/
																													INFO{
																														<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#18->run::pid_20:Trickle.Observer.o#16->prot::Trickle.Observer.o#16" as trace="tpid#18->run::pid_20:Trickle.Observer.o#16->prot::Trickle.Observer.o#16">
																													}
																													PC: (((z_1027 + z_792 + z_882) == t_568) && ((z_1081 + z_306 + z_346 + z_651 + z_696)
	 == t_65) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) 
	== t_68) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && (t_10 < 4) 
	&& (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 
	4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && 
	(t_513 < 4) && (t_568 < 4) && (t_653 < 4) && (t_96 < 4) && (z_1138 < t_653) && 
	(z_116 < t_10) && (z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && (z_696 
	< t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= 
	(t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) 
	&& (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 
	+ -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && 
	(0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_96 
	+ -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + 
	z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + 
	z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + 
	z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + 
	z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 
	+ z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 
	+ z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1138 + z_3 + z_53 + z_903)) && 
	((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + 
	z_903)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && 
	(z_11 > 0) && (z_116 > 0) && (z_132 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 
	0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && 
	(z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0)
	 && (z_651 > 0) && (z_696 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && 
	(z_90 > 0) && (z_903 > 0))
																													DATA{
																														:pid_2:uncoveredExit = 0;
																														:pid_82:my_buff[1].seq = 2;
																														:pid_82:my_buff[1].fragment = FRAGMENT_1;
																														:pid_82:my_buff[1].offset = 1;
																														:pid_82:firmware[1] = FRAGMENT_1;
																														:pid_82:myseq_buff[1] = 1;
																														:pid_82:node_time = (z_1003 + z_1138 + z_53 + z_903);
																														:pid_82:z = z_1138;
																														:pid_82:localTime = (z_1003 + z_1138 + z_3 + z_53 + z_903);
																														:pid_82:undef_DM2 = false;
																														:pid_82:localPC = ((t_241 < 4) && (t_39 < 4) && (t_653 < 4) && (z_1138 < t_653) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_653 + -2)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1138 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																														:pid_82:timeEmit = (z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																														:pid_83:cl = (z_1003 + z_1138);
																														:pid_89:cl = (z_1003 + z_1138 + z_53 + z_903);
																														:pid_94:c = 1;
																														:pid_94:consistent = true;
																														:pid_94:cl = z_1138;
																														:pid_94:d.seq = 2;
																														:pid_94:d.fragment = FRAGMENT_1;
																														:pid_94:d.offset = 1;
																													}
																													BUFFER{
																														:pid_82:bufferNode:<FIFO>#0{ }
																													}
																												}
																											}
																											EC:<Id:2399;Ev:229;H:27;W:2182>{ SC: ( pid_19:o#15 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_80:dp2 ) , ( pid_86:cp1 , pid_90:dp0 , pid_96:dp1 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
								EXE: { |;| (:pid_48 , run) (:pid_49 , run) (:pid_52 
	, run) (:pid_52 , cp1_receiveCM_consistent) (:pid_2 , run) }
																					
								TRACE: { |;| (:pid_48 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1081 }) (:pid_52 , ${ input 
	inst::Trickle.Node.ControlMsg [ 1 , 1 ] ${ + param::Trickle.Node.z_132 
	param::Trickle.Node.z_2 param::Trickle.Node.z_32 param::Trickle.Node.z_422 
	param::Trickle.Node.z_447 param::Trickle.Node.z_762 param::Trickle.Node.z_792 
	param::Trickle.Node.z_882 } } @ (z_1081 + z_11 + z_116 + z_306 + z_346 + z_651 + 
	z_696)) }
																												PC: (((z_1027 + z_792 + z_882) == t_568) && ((z_150 + z_90) == 4) && ((z_422 + z_447 
	+ z_762 + z_792 + z_882) == t_68) && (z_240 == t_96) && (z_595 == t_434) && 
	(z_90 == t_5) && ((z_1081 + z_306 + z_346 + z_651 + z_696) < t_65) && (t_10 < 4) 
	&& (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 
	4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && 
	(t_513 < 4) && (t_568 < 4) && (t_653 < 4) && (t_96 < 4) && (z_116 < t_10) && 
	(z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && 
	(z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && 
	(0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + 
	-2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= 
	(t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)
	) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + 
	z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + 
	z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + 
	z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 
	+ z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) 
	<= (z_132 + z_2 + z_32)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 
	+ z_882) <= (z_1 + z_1081 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && 
	((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + 
	z_903)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) && 
	(z_116 > 0) && (z_132 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 
	> 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && 
	(z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_651 > 
	0) && (z_696 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && 
	(z_903 > 0))
																												DATA{
																													:pid_2:uncoveredExit = 1;
																													:pid_48:node_time = (z_1081 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696);
																													:pid_48:z = z_1081;
																													:pid_48:localTime = (z_1 + z_1081 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696);
																													:pid_48:seq_buff[0] = 1;
																													:pid_48:seq_buff[1] = 1;
																													:pid_48:localPC = (((z_1081 + z_306 + z_346 + z_651 + z_696) < t_65) && (t_10 < 4) && (t_65 < 4) && (t_220 < 4) && (t_513 < 4) && (z_116 < t_10) && (z_346 < t_220) && (z_696 < t_513) && (0 <= (t_10 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_220 + -2)) && (0 <= (t_513 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1 + z_1081 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_306 > 0) && (z_346 > 0) && (z_651 > 0) && (z_696 > 0));
																													:pid_48:timeEmit = (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																													:pid_49:c = 1;
																													:pid_49:i = 2;
																													:pid_49:consistent = true;
																													:pid_49:cl = (z_1081 + z_306 + z_346 + z_651 + z_696);
																													:pid_55:cl = (z_1081 + z_346 + z_651 + z_696);
																													:pid_60:cl = (z_1081 + z_696);
																												}
																												BUFFER{
																													:pid_48:bufferNode:<FIFO>#0{
																														:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																													}
																												}
																												EC:<Id:2583;Ev:0;H:28;W:2354>{ SC: ( pid_20:o#16 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_80:dp2 ) , ( pid_86:cp1 , pid_90:dp0 , pid_96:dp1 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
									EXE: { |;| (:pid_82 , run) (:pid_94 , run) 
	(:pid_96 , run) (:pid_96 , dp1_receiveDM_consistent) (:pid_2 , run) (:pid_19 , 
	run) (:pid_19 , n4_in_DM2) }
																					
									TRACE: { |;| (:pid_82 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1143 }) (:pid_96 , ${ input 
	inst::Trickle.Node.DataMsg2 [ 2 , 2 , 1 ] ${ + param::Trickle.Node.z_1027 
	param::Trickle.Node.z_132 param::Trickle.Node.z_2 param::Trickle.Node.z_32 
	param::Trickle.Node.z_422 param::Trickle.Node.z_447 param::Trickle.Node.z_762 
	param::Trickle.Node.z_792 param::Trickle.Node.z_882 } } @ (z_1003 + z_1143 + 
	z_53 + z_903)) }
																													/*FLAGS{ COVERAGE-ELEMENT }*/
																													INFO{
																														<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#18->run::pid_20:Trickle.Observer.o#16->prot::Trickle.Observer.o#16" as trace="tpid#18->run::pid_20:Trickle.Observer.o#16->prot::Trickle.Observer.o#16">
																													}
																													PC: (((z_1027 + z_792 + z_882) == t_568) && ((z_150 + z_90) == 4) && ((z_422 + z_447 
	+ z_762 + z_792 + z_882) == t_68) && (z_240 == t_96) && (z_595 == t_434) && 
	(z_90 == t_5) && ((z_1081 + z_306 + z_346 + z_651 + z_696) < t_65) && (t_10 < 4) 
	&& (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 
	4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && 
	(t_513 < 4) && (t_568 < 4) && (t_653 < 4) && (t_96 < 4) && (z_1143 < t_653) && 
	(z_116 < t_10) && (z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && (z_696 
	< t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= 
	(t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) 
	&& (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 
	+ -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && 
	(0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_96 
	+ -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + 
	z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + 
	z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + 
	z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + 
	z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 
	+ z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 
	+ z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1143 + z_3 + z_53 + z_903)) && 
	((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1 + z_1081 + 
	z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_132 + z_2 + z_32 + z_422 + 
	z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_150 + z_90) > t_5)
	 && (z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && (z_11 > 0) && (z_116 > 0) && 
	(z_132 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 
	0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && 
	(z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_651 > 0) && (z_696 > 
	0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																													DATA{
																														:pid_2:uncoveredExit = 0;
																														:pid_82:my_buff[1].seq = 2;
																														:pid_82:my_buff[1].fragment = FRAGMENT_1;
																														:pid_82:my_buff[1].offset = 1;
																														:pid_82:firmware[1] = FRAGMENT_1;
																														:pid_82:myseq_buff[1] = 1;
																														:pid_82:node_time = (z_1003 + z_1143 + z_53 + z_903);
																														:pid_82:z = z_1143;
																														:pid_82:localTime = (z_1003 + z_1143 + z_3 + z_53 + z_903);
																														:pid_82:undef_DM2 = false;
																														:pid_82:localPC = ((t_241 < 4) && (t_39 < 4) && (t_653 < 4) && (z_1143 < t_653) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_653 + -2)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1143 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																														:pid_82:timeEmit = (z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																														:pid_83:cl = (z_1003 + z_1143);
																														:pid_89:cl = (z_1003 + z_1143 + z_53 + z_903);
																														:pid_94:c = 1;
																														:pid_94:consistent = true;
																														:pid_94:cl = z_1143;
																														:pid_94:d.seq = 2;
																														:pid_94:d.fragment = FRAGMENT_1;
																														:pid_94:d.offset = 1;
																													}
																													BUFFER{
																														:pid_82:bufferNode:<FIFO>#0{ }
																													}
																												}
																											}
																											EC:<Id:2400;Ev:230;H:27;W:2183>{ SC: ( pid_19:o#15 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_58:dp2 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_80:dp2 ) , ( pid_86:cp1 , pid_90:dp0 , pid_96:dp1 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
								EXE: { |;| (:pid_48 , run) (:pid_55 , run) (:pid_57 
	, run) (:pid_57 , dp_sendDM) (:pid_2 , run) }
																					
								TRACE: { |;| (:pid_48 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1081 }) (:pid_57 , ${ output 
	inst::Trickle.Node.DataMsg1 [ 1 , 1 , 0 ] ${ + param::Trickle.Node.z_1 
	param::Trickle.Node.z_1081 param::Trickle.Node.z_11 param::Trickle.Node.z_116 
	param::Trickle.Node.z_306 param::Trickle.Node.z_346 param::Trickle.Node.z_651 
	param::Trickle.Node.z_696 } } @ (z_1081 + z_11 + z_116 + z_306 + z_346 + z_651 + 
	z_696)) }
																												PC: (((z_1027 + z_792 + z_882) == t_568) && ((z_1081 + z_346 + z_651 + z_696) == 
	t_220) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) == 
	t_68) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && (t_10 < 4) && 
	(t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) 
	&& (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && 
	(t_513 < 4) && (t_568 < 4) && (t_653 < 4) && (t_96 < 4) && (z_116 < t_10) && 
	(z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && 
	(z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && 
	(0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + 
	-2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= 
	(t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)
	) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + 
	z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + 
	z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + 
	z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 
	+ z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) 
	<= (z_132 + z_2 + z_32)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 
	+ z_882) <= (z_3 + z_53 + z_903)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 
	> 0) && (z_11 > 0) && (z_116 > 0) && (z_132 > 0) && (z_150 > 0) && (z_185 > 0) 
	&& (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 
	> 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && 
	(z_535 > 0) && (z_651 > 0) && (z_696 > 0) && (z_762 > 0) && (z_792 > 0) && 
	(z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																												DATA{
																													:pid_2:uncoveredExit = 1;
																													:pid_48:node_time = (z_1081 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696);
																													:pid_48:z = z_1081;
																													:pid_48:localTime = (z_1 + z_1081 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696);
																													:pid_48:localPC = (((z_1081 + z_346 + z_651 + z_696) == t_220) && (t_10 < 4) && (t_65 < 4) && (t_220 < 4) && (t_513 < 4) && (z_116 < t_10) && (z_346 < t_220) && (z_696 < t_513) && (0 <= (t_10 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_220 + -2)) && (0 <= (t_513 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_306 > 0) && (z_346 > 0) && (z_651 > 0) && (z_696 > 0));
																													:pid_49:cl = (z_1081 + z_306 + z_346 + z_651 + z_696);
																													:pid_55:cl = (z_1081 + z_346 + z_651 + z_696);
																													:pid_60:cl = (z_1081 + z_696);
																												}
																												BUFFER{
																													:pid_65:bufferNode:<FIFO>#0{
																														:pid_48:DataMsg1([ 1 , 1 , 0 ] , (z_1 + z_1081 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696));
																													}
																												}
																												EC:<Id:2599;Ev:0;H:28;W:2369>{ SC: ( pid_20:o#16 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_58:dp2 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_80:dp2 ) , ( pid_86:cp1 , pid_90:dp0 , pid_96:dp1 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
									EXE: { |;| (:pid_82 , run) (:pid_94 , run) 
	(:pid_96 , run) (:pid_96 , dp1_receiveDM_consistent) (:pid_2 , run) (:pid_19 , 
	run) (:pid_19 , n4_in_DM2) }
																					
									TRACE: { |;| (:pid_82 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1148 }) (:pid_96 , ${ input 
	inst::Trickle.Node.DataMsg2 [ 2 , 2 , 1 ] ${ + param::Trickle.Node.z_1027 
	param::Trickle.Node.z_132 param::Trickle.Node.z_2 param::Trickle.Node.z_32 
	param::Trickle.Node.z_422 param::Trickle.Node.z_447 param::Trickle.Node.z_762 
	param::Trickle.Node.z_792 param::Trickle.Node.z_882 } } @ (z_1003 + z_1148 + 
	z_53 + z_903)) }
																													/*FLAGS{ COVERAGE-ELEMENT }*/
																													INFO{
																														<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#18->run::pid_20:Trickle.Observer.o#16->prot::Trickle.Observer.o#16" as trace="tpid#18->run::pid_20:Trickle.Observer.o#16->prot::Trickle.Observer.o#16">
																													}
																													PC: (((z_1027 + z_792 + z_882) == t_568) && ((z_1081 + z_346 + z_651 + z_696) == 
	t_220) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) == 
	t_68) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && (t_10 < 4) && 
	(t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) 
	&& (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && 
	(t_513 < 4) && (t_568 < 4) && (t_653 < 4) && (t_96 < 4) && (z_1148 < t_653) && 
	(z_116 < t_10) && (z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && (z_696 
	< t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= 
	(t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) 
	&& (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 
	+ -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && 
	(0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_96 
	+ -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + 
	z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + 
	z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + 
	z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + 
	z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 
	+ z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 
	+ z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1148 + z_3 + z_53 + z_903)) && 
	((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + 
	z_903)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && 
	(z_11 > 0) && (z_116 > 0) && (z_132 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 
	0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && 
	(z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0)
	 && (z_651 > 0) && (z_696 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && 
	(z_90 > 0) && (z_903 > 0))
																													DATA{
																														:pid_2:uncoveredExit = 0;
																														:pid_82:my_buff[1].seq = 2;
																														:pid_82:my_buff[1].fragment = FRAGMENT_1;
																														:pid_82:my_buff[1].offset = 1;
																														:pid_82:firmware[1] = FRAGMENT_1;
																														:pid_82:myseq_buff[1] = 1;
																														:pid_82:node_time = (z_1003 + z_1148 + z_53 + z_903);
																														:pid_82:z = z_1148;
																														:pid_82:localTime = (z_1003 + z_1148 + z_3 + z_53 + z_903);
																														:pid_82:undef_DM2 = false;
																														:pid_82:localPC = ((t_241 < 4) && (t_39 < 4) && (t_653 < 4) && (z_1148 < t_653) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_653 + -2)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1148 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																														:pid_82:timeEmit = (z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																														:pid_83:cl = (z_1003 + z_1148);
																														:pid_89:cl = (z_1003 + z_1148 + z_53 + z_903);
																														:pid_94:c = 1;
																														:pid_94:consistent = true;
																														:pid_94:cl = z_1148;
																														:pid_94:d.seq = 2;
																														:pid_94:d.fragment = FRAGMENT_1;
																														:pid_94:d.offset = 1;
																													}
																													BUFFER{
																														:pid_82:bufferNode:<FIFO>#0{ }
																													}
																												}
																											}
																											EC:<Id:2401;Ev:231;H:27;W:2184>{ SC: ( pid_19:o#15 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_63:dp2 ) , ( pid_70:cp2 , pid_74:dp1 , pid_80:dp2 ) , ( pid_86:cp1 , pid_90:dp0 , pid_96:dp1 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
								EXE: { |;| (:pid_48 , run) (:pid_60 , run) (:pid_62 
	, run) (:pid_62 , dp_sendDM) (:pid_2 , run) }
																					
								TRACE: { |;| (:pid_48 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1081 }) (:pid_62 , ${ output 
	inst::Trickle.Node.DataMsg2 [ 2 , 2 , 1 ] ${ + param::Trickle.Node.z_1 
	param::Trickle.Node.z_1081 param::Trickle.Node.z_11 param::Trickle.Node.z_116 
	param::Trickle.Node.z_306 param::Trickle.Node.z_346 param::Trickle.Node.z_651 
	param::Trickle.Node.z_696 } } @ (z_1081 + z_11 + z_116 + z_306 + z_346 + z_651 + 
	z_696)) }
																												PC: (((z_1027 + z_792 + z_882) == t_568) && ((z_1081 + z_696) == t_513) && ((z_150 + 
	z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (z_240 == 
	t_96) && (z_595 == t_434) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_241 
	< 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && 
	(t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 
	< 4) && (t_653 < 4) && (t_96 < 4) && (z_116 < t_10) && (z_132 < t_23) && (z_346 
	< t_220) && (z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && (z_903 < 
	t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 
	<= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) 
	&& (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= 
	(t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)
	) && (0 <= (t_653 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + 
	z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 
	+ z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 
	+ z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + 
	z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) 
	&& ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 
	+ z_903)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) && 
	(z_116 > 0) && (z_132 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 
	> 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && 
	(z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_651 > 
	0) && (z_696 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && 
	(z_903 > 0))
																												DATA{
																													:pid_2:uncoveredExit = 1;
																													:pid_48:node_time = (z_1081 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696);
																													:pid_48:z = z_1081;
																													:pid_48:localTime = (z_1 + z_1081 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696);
																													:pid_48:localPC = (((z_1081 + z_696) == t_513) && (t_10 < 4) && (t_65 < 4) && (t_220 < 4) && (t_513 < 4) && (z_116 < t_10) && (z_346 < t_220) && (z_696 < t_513) && (0 <= (t_10 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_220 + -2)) && (0 <= (t_513 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_306 > 0) && (z_346 > 0) && (z_651 > 0) && (z_696 > 0));
																													:pid_49:cl = (z_1081 + z_306 + z_346 + z_651 + z_696);
																													:pid_55:cl = (z_1081 + z_346 + z_651 + z_696);
																													:pid_60:cl = (z_1081 + z_696);
																												}
																												BUFFER{
																													:pid_65:bufferNode:<FIFO>#0{
																														:pid_48:DataMsg2([ 2 , 2 , 1 ] , (z_1 + z_1081 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696));
																													}
																												}
																												EC:<Id:2616;Ev:0;H:28;W:2385>{ SC: ( pid_20:o#16 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_63:dp2 ) , ( pid_70:cp2 , pid_74:dp1 , pid_80:dp2 ) , ( pid_86:cp1 , pid_90:dp0 , pid_96:dp1 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
									EXE: { |;| (:pid_82 , run) (:pid_94 , run) 
	(:pid_96 , run) (:pid_96 , dp1_receiveDM_consistent) (:pid_2 , run) (:pid_19 , 
	run) (:pid_19 , n4_in_DM2) }
																					
									TRACE: { |;| (:pid_82 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1153 }) (:pid_96 , ${ input 
	inst::Trickle.Node.DataMsg2 [ 2 , 2 , 1 ] ${ + param::Trickle.Node.z_1027 
	param::Trickle.Node.z_132 param::Trickle.Node.z_2 param::Trickle.Node.z_32 
	param::Trickle.Node.z_422 param::Trickle.Node.z_447 param::Trickle.Node.z_762 
	param::Trickle.Node.z_792 param::Trickle.Node.z_882 } } @ (z_1003 + z_1153 + 
	z_53 + z_903)) }
																													/*FLAGS{ COVERAGE-ELEMENT }*/
																													INFO{
																														<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#18->run::pid_20:Trickle.Observer.o#16->prot::Trickle.Observer.o#16" as trace="tpid#18->run::pid_20:Trickle.Observer.o#16->prot::Trickle.Observer.o#16">
																													}
																													PC: (((z_1027 + z_792 + z_882) == t_568) && ((z_1081 + z_696) == t_513) && ((z_150 + 
	z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (z_240 == 
	t_96) && (z_595 == t_434) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_241 
	< 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && 
	(t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 
	< 4) && (t_653 < 4) && (t_96 < 4) && (z_1153 < t_653) && (z_116 < t_10) && 
	(z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && 
	(z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && 
	(0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + 
	-2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= 
	(t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)
	) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + 
	z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + 
	z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + 
	z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 
	+ z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) 
	<= (z_132 + z_2 + z_32)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + 
	z_762 + z_792 + z_882) <= (z_1003 + z_1153 + z_3 + z_53 + z_903)) && ((z_132 + 
	z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && 
	((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && (z_11 > 0) 
	&& (z_116 > 0) && (z_132 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && 
	(z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0)
	 && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && 
	(z_651 > 0) && (z_696 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 
	> 0) && (z_903 > 0))
																													DATA{
																														:pid_2:uncoveredExit = 0;
																														:pid_82:my_buff[1].seq = 2;
																														:pid_82:my_buff[1].fragment = FRAGMENT_1;
																														:pid_82:my_buff[1].offset = 1;
																														:pid_82:firmware[1] = FRAGMENT_1;
																														:pid_82:myseq_buff[1] = 1;
																														:pid_82:node_time = (z_1003 + z_1153 + z_53 + z_903);
																														:pid_82:z = z_1153;
																														:pid_82:localTime = (z_1003 + z_1153 + z_3 + z_53 + z_903);
																														:pid_82:undef_DM2 = false;
																														:pid_82:localPC = ((t_241 < 4) && (t_39 < 4) && (t_653 < 4) && (z_1153 < t_653) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_653 + -2)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1153 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																														:pid_82:timeEmit = (z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																														:pid_83:cl = (z_1003 + z_1153);
																														:pid_89:cl = (z_1003 + z_1153 + z_53 + z_903);
																														:pid_94:c = 1;
																														:pid_94:consistent = true;
																														:pid_94:cl = z_1153;
																														:pid_94:d.seq = 2;
																														:pid_94:d.fragment = FRAGMENT_1;
																														:pid_94:d.offset = 1;
																													}
																													BUFFER{
																														:pid_82:bufferNode:<FIFO>#0{ }
																													}
																												}
																											}
																											EC:<Id:2402;Ev:232;H:27;W:2185>{ SC: ( pid_19:o#15 , ( pid_36:cp2 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_80:dp2 ) , ( pid_86:cp1 , pid_90:dp0 , pid_96:dp1 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
								EXE: { |;| (:pid_31 , run) (:pid_32 , run) (:pid_35 
	, run) (:pid_35 , cp_sendCM) (:pid_2 , run) }
																					
								TRACE: { |;| (:pid_31 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1080 }) (:pid_35 , ${ output 
	inst::Trickle.Node.ControlMsg [ 1 , 1 ] ${ + param::Trickle.Node.z_0 
	param::Trickle.Node.z_1080 param::Trickle.Node.z_150 param::Trickle.Node.z_185 
	param::Trickle.Node.z_240 param::Trickle.Node.z_5 param::Trickle.Node.z_535 
	param::Trickle.Node.z_595 param::Trickle.Node.z_90 } } @ (z_1080 + z_150 + z_185 
	+ z_240 + z_5 + z_535 + z_595 + z_90)) }
																												PC: (((z_1027 + z_792 + z_882) == t_568) && ((z_1080 + z_185 + z_240 + z_535 + z_595)
	 == t_79) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) 
	== t_68) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && (t_10 < 4) 
	&& (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 
	4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && 
	(t_513 < 4) && (t_568 < 4) && (t_653 < 4) && (t_96 < 4) && (z_116 < t_10) && 
	(z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && 
	(z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && 
	(0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + 
	-2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= 
	(t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)
	) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + 
	z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + 
	z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + 
	z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 
	+ z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) 
	<= (z_132 + z_2 + z_32)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 
	+ z_882) <= (z_3 + z_53 + z_903)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 
	> 0) && (z_11 > 0) && (z_116 > 0) && (z_132 > 0) && (z_150 > 0) && (z_185 > 0) 
	&& (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 
	> 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && 
	(z_535 > 0) && (z_595 > 0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) && 
	(z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																												DATA{
																													:pid_2:uncoveredExit = 1;
																													:pid_31:node_time = (z_1080 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90);
																													:pid_31:z = z_1080;
																													:pid_31:localTime = (z_0 + z_1080 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90);
																													:pid_31:localPC = (((z_1080 + z_185 + z_240 + z_535 + z_595) == t_79) && ((z_150 + z_90) == 4) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && (t_5 < 4) && (t_79 < 8) && (t_434 < 4) && (t_96 < 4) && (0 <= (t_5 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_434 + -2)) && (0 <= (t_96 + -2)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_150 > 0) && (z_185 > 0) && (z_240 > 0) && (z_5 > 0) && (z_535 > 0) && (z_595 > 0) && (z_90 > 0));
																													:pid_32:cl = (z_1080 + z_185 + z_240 + z_535 + z_595);
																													:pid_38:cl = (z_1080 + z_240 + z_535 + z_595);
																													:pid_43:cl = (z_1080 + z_595);
																												}
																												BUFFER{
																													:pid_48:bufferNode:<FIFO>#0{
																														:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																														:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																														:pid_31:ControlMsg([ 1 , 1 ] , (z_0 + z_1080 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90));
																													}
																													:pid_65:bufferNode:<FIFO>#0{
																														:pid_31:ControlMsg([ 1 , 1 ] , (z_0 + z_1080 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90));
																													}
																												}
																												EC:<Id:2633;Ev:0;H:28;W:2401>{ SC: ( pid_20:o#16 , ( pid_36:cp2 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_80:dp2 ) , ( pid_86:cp1 , pid_90:dp0 , pid_96:dp1 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
									EXE: { |;| (:pid_82 , run) (:pid_94 , run) 
	(:pid_96 , run) (:pid_96 , dp1_receiveDM_consistent) (:pid_2 , run) (:pid_19 , 
	run) (:pid_19 , n4_in_DM2) }
																					
									TRACE: { |;| (:pid_82 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1158 }) (:pid_96 , ${ input 
	inst::Trickle.Node.DataMsg2 [ 2 , 2 , 1 ] ${ + param::Trickle.Node.z_1027 
	param::Trickle.Node.z_132 param::Trickle.Node.z_2 param::Trickle.Node.z_32 
	param::Trickle.Node.z_422 param::Trickle.Node.z_447 param::Trickle.Node.z_762 
	param::Trickle.Node.z_792 param::Trickle.Node.z_882 } } @ (z_1003 + z_1158 + 
	z_53 + z_903)) }
																													/*FLAGS{ COVERAGE-ELEMENT }*/
																													INFO{
																														<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#18->run::pid_20:Trickle.Observer.o#16->prot::Trickle.Observer.o#16" as trace="tpid#18->run::pid_20:Trickle.Observer.o#16->prot::Trickle.Observer.o#16">
																													}
																													PC: (((z_1027 + z_792 + z_882) == t_568) && ((z_1080 + z_185 + z_240 + z_535 + z_595)
	 == t_79) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) 
	== t_68) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && (t_10 < 4) 
	&& (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 
	4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && 
	(t_513 < 4) && (t_568 < 4) && (t_653 < 4) && (t_96 < 4) && (z_1158 < t_653) && 
	(z_116 < t_10) && (z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && (z_696 
	< t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= 
	(t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) 
	&& (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 
	+ -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && 
	(0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_96 
	+ -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + 
	z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + 
	z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + 
	z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + 
	z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 
	+ z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 
	+ z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1158 + z_3 + z_53 + z_903)) && 
	((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + 
	z_903)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && 
	(z_11 > 0) && (z_116 > 0) && (z_132 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 
	0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && 
	(z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0)
	 && (z_595 > 0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && 
	(z_90 > 0) && (z_903 > 0))
																													DATA{
																														:pid_2:uncoveredExit = 0;
																														:pid_82:my_buff[1].seq = 2;
																														:pid_82:my_buff[1].fragment = FRAGMENT_1;
																														:pid_82:my_buff[1].offset = 1;
																														:pid_82:firmware[1] = FRAGMENT_1;
																														:pid_82:myseq_buff[1] = 1;
																														:pid_82:node_time = (z_1003 + z_1158 + z_53 + z_903);
																														:pid_82:z = z_1158;
																														:pid_82:localTime = (z_1003 + z_1158 + z_3 + z_53 + z_903);
																														:pid_82:undef_DM2 = false;
																														:pid_82:localPC = ((t_241 < 4) && (t_39 < 4) && (t_653 < 4) && (z_1158 < t_653) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_653 + -2)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1158 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																														:pid_82:timeEmit = (z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																														:pid_83:cl = (z_1003 + z_1158);
																														:pid_89:cl = (z_1003 + z_1158 + z_53 + z_903);
																														:pid_94:c = 1;
																														:pid_94:consistent = true;
																														:pid_94:cl = z_1158;
																														:pid_94:d.seq = 2;
																														:pid_94:d.fragment = FRAGMENT_1;
																														:pid_94:d.offset = 1;
																													}
																													BUFFER{
																														:pid_82:bufferNode:<FIFO>#0{ }
																													}
																												}
																											}
																											EC:<Id:2403;Ev:233;H:27;W:2186>{ SC: ( pid_19:o#15 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_80:dp2 ) , ( pid_86:cp1 , pid_90:dp0 , pid_96:dp1 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
								EXE: { |;| (:pid_31 , run) (:pid_32 , run) (:pid_35 
	, run) (:pid_35 , cp1_receiveCM_consistent) (:pid_2 , run) }
																					
								TRACE: { |;| (:pid_31 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1080 }) (:pid_35 , ${ input 
	inst::Trickle.Node.ControlMsg [ 1 , 1 ] ${ + param::Trickle.Node.z_132 
	param::Trickle.Node.z_2 param::Trickle.Node.z_32 param::Trickle.Node.z_422 
	param::Trickle.Node.z_447 param::Trickle.Node.z_762 param::Trickle.Node.z_792 
	param::Trickle.Node.z_882 } } @ (z_1080 + z_150 + z_185 + z_240 + z_5 + z_535 + 
	z_595 + z_90)) }
																												PC: (((z_1027 + z_792 + z_882) == t_568) && ((z_150 + z_90) == 4) && ((z_422 + z_447 
	+ z_762 + z_792 + z_882) == t_68) && (z_240 == t_96) && (z_595 == t_434) && 
	(z_90 == t_5) && ((z_1080 + z_185 + z_240 + z_535 + z_595) < t_79) && (t_10 < 4) 
	&& (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 
	4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && 
	(t_513 < 4) && (t_568 < 4) && (t_653 < 4) && (t_96 < 4) && (z_116 < t_10) && 
	(z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && 
	(z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && 
	(0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + 
	-2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= 
	(t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)
	) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + 
	z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + 
	z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + 
	z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 
	+ z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) 
	<= (z_132 + z_2 + z_32)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 
	+ z_882) <= (z_0 + z_1080 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90)) 
	&& ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 
	+ z_903)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) && 
	(z_116 > 0) && (z_132 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 
	> 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && 
	(z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_595 > 
	0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && 
	(z_903 > 0))
																												DATA{
																													:pid_2:uncoveredExit = 1;
																													:pid_31:node_time = (z_1080 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90);
																													:pid_31:z = z_1080;
																													:pid_31:localTime = (z_0 + z_1080 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90);
																													:pid_31:seq_buff[0] = 1;
																													:pid_31:seq_buff[1] = 1;
																													:pid_31:localPC = (((z_150 + z_90) == 4) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && ((z_1080 + z_185 + z_240 + z_535 + z_595) < t_79) && (t_5 < 4) && (t_79 < 8) && (t_434 < 4) && (t_96 < 4) && (0 <= (t_5 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_434 + -2)) && (0 <= (t_96 + -2)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_0 + z_1080 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_150 > 0) && (z_185 > 0) && (z_240 > 0) && (z_5 > 0) && (z_535 > 0) && (z_595 > 0) && (z_90 > 0));
																													:pid_31:timeEmit = (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																													:pid_32:c = 1;
																													:pid_32:i = 2;
																													:pid_32:consistent = true;
																													:pid_32:cl = (z_1080 + z_185 + z_240 + z_535 + z_595);
																													:pid_38:cl = (z_1080 + z_240 + z_535 + z_595);
																													:pid_43:cl = (z_1080 + z_595);
																												}
																												BUFFER{
																													:pid_31:bufferNode:<FIFO>#0{
																														:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																													}
																												}
																												EC:<Id:2650;Ev:0;H:28;W:2417>{ SC: ( pid_20:o#16 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_80:dp2 ) , ( pid_86:cp1 , pid_90:dp0 , pid_96:dp1 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
									EXE: { |;| (:pid_82 , run) (:pid_94 , run) 
	(:pid_96 , run) (:pid_96 , dp1_receiveDM_consistent) (:pid_2 , run) (:pid_19 , 
	run) (:pid_19 , n4_in_DM2) }
																					
									TRACE: { |;| (:pid_82 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1163 }) (:pid_96 , ${ input 
	inst::Trickle.Node.DataMsg2 [ 2 , 2 , 1 ] ${ + param::Trickle.Node.z_1027 
	param::Trickle.Node.z_132 param::Trickle.Node.z_2 param::Trickle.Node.z_32 
	param::Trickle.Node.z_422 param::Trickle.Node.z_447 param::Trickle.Node.z_762 
	param::Trickle.Node.z_792 param::Trickle.Node.z_882 } } @ (z_1003 + z_1163 + 
	z_53 + z_903)) }
																													/*FLAGS{ COVERAGE-ELEMENT }*/
																													INFO{
																														<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#18->run::pid_20:Trickle.Observer.o#16->prot::Trickle.Observer.o#16" as trace="tpid#18->run::pid_20:Trickle.Observer.o#16->prot::Trickle.Observer.o#16">
																													}
																													PC: (((z_1027 + z_792 + z_882) == t_568) && ((z_150 + z_90) == 4) && ((z_422 + z_447 
	+ z_762 + z_792 + z_882) == t_68) && (z_240 == t_96) && (z_595 == t_434) && 
	(z_90 == t_5) && ((z_1080 + z_185 + z_240 + z_535 + z_595) < t_79) && (t_10 < 4) 
	&& (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 
	4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && 
	(t_513 < 4) && (t_568 < 4) && (t_653 < 4) && (t_96 < 4) && (z_116 < t_10) && 
	(z_1163 < t_653) && (z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && 
	(z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 
	<= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)
	) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= 
	(t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2))
	 && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= 
	(t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= 
	(z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + 
	z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + 
	z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + 
	z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 
	+ z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) 
	&& ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_132 + z_2 + z_32 
	+ z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1163 + z_3 + z_53 + 
	z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_0 
	+ z_1080 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90)) && ((z_132 + z_2 
	+ z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && 
	((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && (z_11 > 0) 
	&& (z_116 > 0) && (z_132 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && 
	(z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0)
	 && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && 
	(z_595 > 0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 
	> 0) && (z_903 > 0))
																													DATA{
																														:pid_2:uncoveredExit = 0;
																														:pid_82:my_buff[1].seq = 2;
																														:pid_82:my_buff[1].fragment = FRAGMENT_1;
																														:pid_82:my_buff[1].offset = 1;
																														:pid_82:firmware[1] = FRAGMENT_1;
																														:pid_82:myseq_buff[1] = 1;
																														:pid_82:node_time = (z_1003 + z_1163 + z_53 + z_903);
																														:pid_82:z = z_1163;
																														:pid_82:localTime = (z_1003 + z_1163 + z_3 + z_53 + z_903);
																														:pid_82:undef_DM2 = false;
																														:pid_82:localPC = ((t_241 < 4) && (t_39 < 4) && (t_653 < 4) && (z_1163 < t_653) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_653 + -2)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1163 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																														:pid_82:timeEmit = (z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																														:pid_83:cl = (z_1003 + z_1163);
																														:pid_89:cl = (z_1003 + z_1163 + z_53 + z_903);
																														:pid_94:c = 1;
																														:pid_94:consistent = true;
																														:pid_94:cl = z_1163;
																														:pid_94:d.seq = 2;
																														:pid_94:d.fragment = FRAGMENT_1;
																														:pid_94:d.offset = 1;
																													}
																													BUFFER{
																														:pid_82:bufferNode:<FIFO>#0{ }
																													}
																												}
																											}
																											EC:<Id:2404;Ev:234;H:27;W:2187>{ SC: ( pid_19:o#15 , ( pid_35:cp1 , pid_41:dp2 , pid_45:dp1 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_80:dp2 ) , ( pid_86:cp1 , pid_90:dp0 , pid_96:dp1 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
								EXE: { |;| (:pid_31 , run) (:pid_43 , run) (:pid_46 
	, run) (:pid_46 , dp_resetTau) (:pid_2 , run) }
																					
								TRACE: { |;| (:pid_31 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1080 }) (:pid_46 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_702 }) }
																												PC: (((z_1027 + z_792 + z_882) == t_568) && ((z_1080 + z_595) == 4) && ((z_150 + 
	z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (z_240 == 
	t_96) && (z_595 == t_434) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_241 
	< 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && 
	(t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 
	< 4) && (t_653 < 4) && (t_702 < 8) && (t_96 < 4) && (z_116 < t_10) && (z_132 < 
	t_23) && (z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568)
	 && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + 
	-2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= 
	(t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) 
	&& (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= 
	(t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_702 + -4)) && (0 <= (t_96 + -2))
	 && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + 
	z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + 
	z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + 
	z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + 
	z_90) <= (z_132 + z_2 + z_32)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + 
	z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1080 + z_595) > t_434) && ((z_150 
	+ z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_132 
	> 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && 
	(z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 
	0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_595 > 0) && (z_651 > 0) && 
	(z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																												DATA{
																													:pid_2:uncoveredExit = 1;
																													:pid_31:node_time = (z_1080 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90);
																													:pid_31:z = z_1080;
																													:pid_31:localTime = (z_0 + z_1080 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90);
																													:pid_31:localPC = (((z_1080 + z_595) == 4) && ((z_150 + z_90) == 4) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && (t_5 < 4) && (t_79 < 8) && (t_434 < 4) && (t_702 < 8) && (t_96 < 4) && (0 <= (t_5 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_434 + -2)) && (0 <= (t_702 + -4)) && (0 <= (t_96 + -2)) && ((z_1080 + z_595) > t_434) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_150 > 0) && (z_185 > 0) && (z_240 > 0) && (z_5 > 0) && (z_535 > 0) && (z_595 > 0) && (z_90 > 0));
																													:pid_32:cl = (z_1080 + z_185 + z_240 + z_535 + z_595);
																													:pid_38:cl = (z_1080 + z_240 + z_535 + z_595);
																													:pid_43:e = 1;
																													:pid_43:tau = 8;
																													:pid_43:c = 0;
																													:pid_43:t = t_702;
																													:pid_43:cl = 0;
																												}
																												EC:<Id:2666;Ev:0;H:28;W:2432>{ SC: ( pid_20:o#16 , ( pid_35:cp1 , pid_41:dp2 , pid_45:dp1 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_80:dp2 ) , ( pid_86:cp1 , pid_90:dp0 , pid_96:dp1 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
									EXE: { |;| (:pid_82 , run) (:pid_94 , run) 
	(:pid_96 , run) (:pid_96 , dp1_receiveDM_consistent) (:pid_2 , run) (:pid_19 , 
	run) (:pid_19 , n4_in_DM2) }
																					
									TRACE: { |;| (:pid_82 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1168 }) (:pid_96 , ${ input 
	inst::Trickle.Node.DataMsg2 [ 2 , 2 , 1 ] ${ + param::Trickle.Node.z_1027 
	param::Trickle.Node.z_132 param::Trickle.Node.z_2 param::Trickle.Node.z_32 
	param::Trickle.Node.z_422 param::Trickle.Node.z_447 param::Trickle.Node.z_762 
	param::Trickle.Node.z_792 param::Trickle.Node.z_882 } } @ (z_1003 + z_1168 + 
	z_53 + z_903)) }
																													/*FLAGS{ COVERAGE-ELEMENT }*/
																													INFO{
																														<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#18->run::pid_20:Trickle.Observer.o#16->prot::Trickle.Observer.o#16" as trace="tpid#18->run::pid_20:Trickle.Observer.o#16->prot::Trickle.Observer.o#16">
																													}
																													PC: (((z_1027 + z_792 + z_882) == t_568) && ((z_1080 + z_595) == 4) && ((z_150 + 
	z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (z_240 == 
	t_96) && (z_595 == t_434) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_241 
	< 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && 
	(t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 
	< 4) && (t_653 < 4) && (t_702 < 8) && (t_96 < 4) && (z_116 < t_10) && (z_1168 < 
	t_653) && (z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513)
	 && (z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2))
	 && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= 
	(t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && 
	(0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= 
	(t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_653 + -2)) && (0 <= (t_702 + -4)
	) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + 
	z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 
	+ z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + 
	z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= 
	(z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + 
	z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_1027 + z_132 + 
	z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1168 + z_3 + 
	z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) 
	<= (z_3 + z_53 + z_903)) && ((z_1080 + z_595) > t_434) && ((z_150 + z_90) > t_5) 
	&& (z_0 > 0) && (z_1 > 0) && (z_1003 > 0) && (z_11 > 0) && (z_116 > 0) && (z_132 
	> 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && 
	(z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 
	0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_595 > 0) && (z_651 > 0) && 
	(z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && (z_903 > 0))
																													DATA{
																														:pid_2:uncoveredExit = 0;
																														:pid_82:my_buff[1].seq = 2;
																														:pid_82:my_buff[1].fragment = FRAGMENT_1;
																														:pid_82:my_buff[1].offset = 1;
																														:pid_82:firmware[1] = FRAGMENT_1;
																														:pid_82:myseq_buff[1] = 1;
																														:pid_82:node_time = (z_1003 + z_1168 + z_53 + z_903);
																														:pid_82:z = z_1168;
																														:pid_82:localTime = (z_1003 + z_1168 + z_3 + z_53 + z_903);
																														:pid_82:undef_DM2 = false;
																														:pid_82:localPC = ((t_241 < 4) && (t_39 < 4) && (t_653 < 4) && (z_1168 < t_653) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_653 + -2)) && ((z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1003 + z_1168 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && (z_1003 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																														:pid_82:timeEmit = (z_1027 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																														:pid_83:cl = (z_1003 + z_1168);
																														:pid_89:cl = (z_1003 + z_1168 + z_53 + z_903);
																														:pid_94:c = 1;
																														:pid_94:consistent = true;
																														:pid_94:cl = z_1168;
																														:pid_94:d.seq = 2;
																														:pid_94:d.fragment = FRAGMENT_1;
																														:pid_94:d.offset = 1;
																													}
																													BUFFER{
																														:pid_82:bufferNode:<FIFO>#0{ }
																													}
																												}
																											}
																										}
																									}
																									EC:<Id:2150;Ev:207;H:25;W:1949>{ SC: ( pid_18:o#14 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_69:cp1 , pid_74:dp1 , pid_79:dp1 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
						EXE: { |;| (:pid_65 , run) (:pid_66 , run) (:pid_70 , run) 
	(:pid_70 , cp_resetTau) (:pid_2 , run) }
																					
						TRACE: { |;| (:pid_65 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_1002 }) (:pid_70 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_291 }) }
																										PC: (((z_1002 + z_422 + z_447 + z_762 + z_792 + z_882) == 4) && ((z_150 + z_90) == 4)
	 && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (z_240 == t_96) && 
	(z_595 == t_434) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && 
	(t_291 < 8) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) 
	&& (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && 
	(t_568 < 4) && (t_96 < 4) && (z_116 < t_10) && (z_132 < t_23) && (z_346 < t_220) 
	&& (z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 
	<= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_291 + 
	-4)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= 
	(t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) 
	&& (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= 
	(t_568 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + 
	z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= 
	(z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_132 
	+ z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) 
	&& ((z_1002 + z_422 + z_447 + z_762 + z_792 + z_882) > t_68) && ((z_150 + z_90) 
	> t_5) && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_132 > 0) && 
	(z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 
	0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && 
	(z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 
	0) && (z_882 > 0) && (z_90 > 0))
																										DATA{
																											:pid_2:uncoveredExit = 3;
																											:pid_65:node_time = (z_1002 + z_132 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																											:pid_65:z = z_1002;
																											:pid_65:localTime = (z_1002 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																											:pid_65:localPC = (((z_1002 + z_422 + z_447 + z_762 + z_792 + z_882) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (t_23 < 4) && (t_291 < 8) && (t_68 < 4) && (t_338 < 4) && (t_568 < 4) && (z_132 < t_23) && (z_447 < t_338) && (z_792 < t_568) && (0 <= (t_23 + -2)) && (0 <= (t_291 + -4)) && (0 <= (t_68 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_568 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_1002 + z_422 + z_447 + z_762 + z_792 + z_882) > t_68) && (z_132 > 0) && (z_2 > 0) && (z_32 > 0) && (z_422 > 0) && (z_447 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0));
																											:pid_66:e = 1;
																											:pid_66:tau = 8;
																											:pid_66:c = 0;
																											:pid_66:t = t_291;
																											:pid_66:cl = 0;
																											:pid_72:cl = (z_1002 + z_447 + z_762 + z_792 + z_882);
																											:pid_77:cl = (z_1002 + z_792 + z_882);
																										}
																										EC:<Id:2244;Ev:218;H:26;W:2037>{ SC: ( pid_19:o#15 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_69:cp1 , pid_74:dp1 , pid_80:dp2 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
							EXE: { |;| (:pid_65 , run) (:pid_77 , run) (:pid_79 , 
	run) (:pid_79 , dp_sendDM) (:pid_2 , run) (:pid_18 , run) (:pid_18 , n3_out_DM2) 
	}
																					
							TRACE: { |;| (:pid_65 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_1032 }) (:pid_79 , ${ output inst::Trickle.Node.DataMsg2 [ 
	2 , 2 , 1 ] ${ + param::Trickle.Node.z_1002 param::Trickle.Node.z_1032 
	param::Trickle.Node.z_132 param::Trickle.Node.z_2 param::Trickle.Node.z_32 
	param::Trickle.Node.z_422 param::Trickle.Node.z_447 param::Trickle.Node.z_762 
	param::Trickle.Node.z_792 param::Trickle.Node.z_882 } } @ (z_1002 + z_1032 + 
	z_132 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882)) }
																											/*FLAGS{ COVERAGE-ELEMENT }*/
																											INFO{
																												<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#17->run::pid_19:Trickle.Observer.o#15->prot::Trickle.Observer.o#15" as trace="tpid#17->run::pid_19:Trickle.Observer.o#15->prot::Trickle.Observer.o#15">
																											}
																											PC: (((z_1002 + z_1032 + z_792 + z_882) == t_568) && ((z_1002 + z_422 + z_447 + 
	z_762 + z_792 + z_882) == 4) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 
	+ z_792 + z_882) == t_68) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5)
	 && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_291 < 8) && (t_39 < 4) && 
	(t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) 
	&& (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_96 < 4) && 
	(z_116 < t_10) && (z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && (z_696 
	< t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= 
	(t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_291 + -4)) && (0 <= (t_39 + -2)) 
	&& (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 
	+ -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 
	<= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_96 + 
	-2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + 
	z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + 
	z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + 
	z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + 
	z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 
	+ z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + 
	z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1002 + z_422 + z_447 + 
	z_762 + z_792 + z_882) > t_68) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 
	0) && (z_1002 > 0) && (z_11 > 0) && (z_116 > 0) && (z_132 > 0) && (z_150 > 0) && 
	(z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0)
	 && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 
	> 0) && (z_535 > 0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) 
	&& (z_90 > 0))
																											DATA{
																												:pid_2:uncoveredExit = 0;
																												:pid_65:node_time = (z_1002 + z_1032 + z_132 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																												:pid_65:z = z_1032;
																												:pid_65:localTime = (z_1002 + z_1032 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																												:pid_65:localPC = (((z_1002 + z_1032 + z_792 + z_882) == t_568) && ((z_1002 + z_422 + z_447 + z_762 + z_792 + z_882) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (t_23 < 4) && (t_291 < 8) && (t_68 < 4) && (t_338 < 4) && (t_568 < 4) && (z_132 < t_23) && (z_447 < t_338) && (z_792 < t_568) && (0 <= (t_23 + -2)) && (0 <= (t_291 + -4)) && (0 <= (t_68 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_568 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_1002 + z_422 + z_447 + z_762 + z_792 + z_882) > t_68) && (z_1002 > 0) && (z_132 > 0) && (z_2 > 0) && (z_32 > 0) && (z_422 > 0) && (z_447 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0));
																												:pid_66:cl = z_1032;
																												:pid_72:cl = (z_1002 + z_1032 + z_447 + z_762 + z_792 + z_882);
																												:pid_77:cl = (z_1002 + z_1032 + z_792 + z_882);
																											}
																											BUFFER{
																												:pid_31:bufferNode:<FIFO>#0{
																													:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																													:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1002 + z_1032 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																												}
																												:pid_48:bufferNode:<FIFO>#0{
																													:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																													:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1002 + z_1032 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																												}
																												:pid_82:bufferNode:<FIFO>#0{
																													:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1002 + z_1032 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																												}
																												:pid_99:bufferNode:<FIFO>#0{
																													:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																													:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1002 + z_1032 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																												}
																											}
																											EC:<Id:2409;Ev:239;H:27;W:2191>{ SC: ( pid_19:o#15 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_69:cp1 , pid_74:dp1 , pid_80:dp2 ) , ( pid_86:cp1 , pid_90:dp0 , pid_96:dp1 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
								EXE: { |;| (:pid_82 , run) (:pid_94 , run) (:pid_95 
	, run) (:pid_95 , dp_init) (:pid_2 , run) }
																					
								TRACE: { |;| (:pid_82 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1088 }) (:pid_95 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_708 }) }
																												PC: (((z_1002 + z_1032 + z_792 + z_882) == t_568) && ((z_1002 + z_422 + z_447 + 
	z_762 + z_792 + z_882) == 4) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 
	+ z_792 + z_882) == t_68) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5)
	 && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_291 < 8) && (t_39 < 4) && 
	(t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) 
	&& (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_708 < 4) && 
	(t_96 < 4) && (z_116 < t_10) && (z_132 < t_23) && (z_346 < t_220) && (z_447 < 
	t_338) && (z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + 
	-2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_291 + -4)) && (0 
	<= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) 
	&& (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= 
	(t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)
	) && (0 <= (t_708 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + 
	z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 
	+ z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 
	+ z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + 
	z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) 
	&& ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 
	+ z_903)) && ((z_1002 + z_422 + z_447 + z_762 + z_792 + z_882) > t_68) && 
	((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_1002 > 0) && (z_11 > 0) 
	&& (z_116 > 0) && (z_132 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && 
	(z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0)
	 && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && 
	(z_651 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && (z_903 
	> 0))
																												DATA{
																													:pid_2:uncoveredExit = 1;
																													:pid_82:node_time = (z_1088 + z_53 + z_903);
																													:pid_82:z = z_1088;
																													:pid_82:localTime = (z_1088 + z_3 + z_53 + z_903);
																													:pid_82:localPC = ((t_241 < 4) && (t_39 < 4) && (t_708 < 4) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_708 + -2)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																													:pid_83:cl = z_1088;
																													:pid_89:cl = (z_1088 + z_53 + z_903);
																													:pid_94:e = 0;
																													:pid_94:tau = 4;
																													:pid_94:tau_l = 4;
																													:pid_94:tau_h = 8;
																													:pid_94:k = 2;
																													:pid_94:c = 0;
																													:pid_94:t = t_708;
																													:pid_94:cl = 0;
																												}
																												EC:<Id:2743;Ev:0;H:28;W:2504>{ SC: ( pid_20:o#16 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_69:cp1 , pid_74:dp1 , pid_80:dp2 ) , ( pid_86:cp1 , pid_90:dp0 , pid_96:dp1 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
									EXE: { |;| (:pid_82 , run) (:pid_94 , run) 
	(:pid_96 , run) (:pid_96 , dp1_receiveDM_consistent) (:pid_2 , run) (:pid_19 , 
	run) (:pid_19 , n4_in_DM2) }
																					
									TRACE: { |;| (:pid_82 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1193 }) (:pid_96 , ${ input 
	inst::Trickle.Node.DataMsg2 [ 2 , 2 , 1 ] ${ + param::Trickle.Node.z_1002 
	param::Trickle.Node.z_1032 param::Trickle.Node.z_132 param::Trickle.Node.z_2 
	param::Trickle.Node.z_32 param::Trickle.Node.z_422 param::Trickle.Node.z_447 
	param::Trickle.Node.z_762 param::Trickle.Node.z_792 param::Trickle.Node.z_882 } }
	 @ (z_1088 + z_1193 + z_53 + z_903)) }
																													/*FLAGS{ COVERAGE-ELEMENT }*/
																													INFO{
																														<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#18->run::pid_20:Trickle.Observer.o#16->prot::Trickle.Observer.o#16" as trace="tpid#18->run::pid_20:Trickle.Observer.o#16->prot::Trickle.Observer.o#16">
																													}
																													PC: (((z_1002 + z_1032 + z_792 + z_882) == t_568) && ((z_1002 + z_422 + z_447 + 
	z_762 + z_792 + z_882) == 4) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 
	+ z_792 + z_882) == t_68) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5)
	 && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_291 < 8) && (t_39 < 4) && 
	(t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) 
	&& (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_708 < 4) && 
	(t_96 < 4) && (z_116 < t_10) && (z_1193 < t_708) && (z_132 < t_23) && (z_346 < 
	t_220) && (z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39)
	 && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= 
	(t_291 + -4)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) 
	&& (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= 
	(t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)
	) && (0 <= (t_568 + -2)) && (0 <= (t_708 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + 
	z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + 
	z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + 
	z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 
	+ z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) 
	<= (z_132 + z_2 + z_32)) && ((z_1002 + z_1032 + z_132 + z_2 + z_32 + z_422 + 
	z_447 + z_762 + z_792 + z_882) <= (z_1088 + z_1193 + z_3 + z_53 + z_903)) && 
	((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + 
	z_903)) && ((z_1002 + z_422 + z_447 + z_762 + z_792 + z_882) > t_68) && ((z_150 
	+ z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_1002 > 0) && (z_1088 > 0) && 
	(z_11 > 0) && (z_116 > 0) && (z_132 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 
	0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && 
	(z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0)
	 && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0) && 
	(z_903 > 0))
																													DATA{
																														:pid_2:uncoveredExit = 0;
																														:pid_82:my_buff[1].seq = 2;
																														:pid_82:my_buff[1].fragment = FRAGMENT_1;
																														:pid_82:my_buff[1].offset = 1;
																														:pid_82:firmware[1] = FRAGMENT_1;
																														:pid_82:myseq_buff[1] = 1;
																														:pid_82:node_time = (z_1088 + z_1193 + z_53 + z_903);
																														:pid_82:z = z_1193;
																														:pid_82:localTime = (z_1088 + z_1193 + z_3 + z_53 + z_903);
																														:pid_82:undef_DM2 = false;
																														:pid_82:localPC = ((t_241 < 4) && (t_39 < 4) && (t_708 < 4) && (z_1193 < t_708) && (z_903 < t_39) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_708 + -2)) && ((z_1002 + z_1032 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1088 + z_1193 + z_3 + z_53 + z_903)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && (z_1088 > 0) && (z_3 > 0) && (z_53 > 0) && (z_903 > 0));
																														:pid_82:timeEmit = (z_1002 + z_1032 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																														:pid_83:cl = (z_1088 + z_1193);
																														:pid_89:cl = (z_1088 + z_1193 + z_53 + z_903);
																														:pid_94:c = 1;
																														:pid_94:consistent = true;
																														:pid_94:cl = z_1193;
																														:pid_94:d.seq = 2;
																														:pid_94:d.fragment = FRAGMENT_1;
																														:pid_94:d.offset = 1;
																													}
																													BUFFER{
																														:pid_82:bufferNode:<FIFO>#0{ }
																													}
																												}
																											}
																										}
																									}
																									EC:<Id:2151;Ev:208;H:25;W:1950>{ SC: ( pid_18:o#14 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_79:dp1 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
						EXE: { |;| (:pid_65 , run) (:pid_72 , run) (:pid_74 , run) 
	(:pid_74 , dp_sendDM) (:pid_2 , run) }
																					
						TRACE: { |;| (:pid_65 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_1002 }) (:pid_74 , ${ output inst::Trickle.Node.DataMsg1 [ 
	1 , 1 , 0 ] ${ + param::Trickle.Node.z_1002 param::Trickle.Node.z_132 
	param::Trickle.Node.z_2 param::Trickle.Node.z_32 param::Trickle.Node.z_422 
	param::Trickle.Node.z_447 param::Trickle.Node.z_762 param::Trickle.Node.z_792 
	param::Trickle.Node.z_882 } } @ (z_1002 + z_132 + z_32 + z_422 + z_447 + z_762 + 
	z_792 + z_882)) }
																										PC: (((z_1002 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_150 + z_90) == 4) && 
	((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (z_240 == t_96) && (z_595 
	== t_434) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 
	4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && 
	(t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_96 
	< 4) && (z_116 < t_10) && (z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) 
	&& (z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && 
	(0 <= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + 
	-2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= 
	(t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2))
	 && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + 
	z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + 
	z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + 
	z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 
	+ z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) 
	<= (z_132 + z_2 + z_32)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 
	+ z_882) <= (z_3 + z_53 + z_903)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 
	> 0) && (z_11 > 0) && (z_116 > 0) && (z_132 > 0) && (z_150 > 0) && (z_185 > 0) 
	&& (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 
	> 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && 
	(z_535 > 0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 
	> 0))
																										DATA{
																											:pid_2:uncoveredExit = 3;
																											:pid_65:node_time = (z_1002 + z_132 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																											:pid_65:z = z_1002;
																											:pid_65:localTime = (z_1002 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																											:pid_65:localPC = (((z_1002 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (t_23 < 4) && (t_68 < 4) && (t_338 < 4) && (t_568 < 4) && (z_132 < t_23) && (z_447 < t_338) && (z_792 < t_568) && (0 <= (t_23 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_568 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && (z_132 > 0) && (z_2 > 0) && (z_32 > 0) && (z_422 > 0) && (z_447 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0));
																											:pid_66:cl = (z_1002 + z_422 + z_447 + z_762 + z_792 + z_882);
																											:pid_72:cl = (z_1002 + z_447 + z_762 + z_792 + z_882);
																											:pid_77:cl = (z_1002 + z_792 + z_882);
																										}
																										BUFFER{
																											:pid_31:bufferNode:<FIFO>#0{
																												:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																												:pid_65:DataMsg1([ 1 , 1 , 0 ] , (z_1002 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																											}
																											:pid_48:bufferNode:<FIFO>#0{
																												:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																												:pid_65:DataMsg1([ 1 , 1 , 0 ] , (z_1002 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																											}
																											:pid_82:bufferNode:<FIFO>#0{
																												:pid_65:DataMsg1([ 1 , 1 , 0 ] , (z_1002 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																											}
																											:pid_99:bufferNode:<FIFO>#0{
																												:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																												:pid_65:DataMsg1([ 1 , 1 , 0 ] , (z_1002 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																											}
																										}
																										EC:<Id:2259;Ev:0;H:26;W:2051>{ SC: ( pid_19:o#15 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_80:dp2 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
							EXE: { |;| (:pid_65 , run) (:pid_77 , run) (:pid_79 , 
	run) (:pid_79 , dp_sendDM) (:pid_2 , run) (:pid_18 , run) (:pid_18 , n3_out_DM2) 
	}
																					
							TRACE: { |;| (:pid_65 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_1037 }) (:pid_79 , ${ output inst::Trickle.Node.DataMsg2 [ 
	2 , 2 , 1 ] ${ + param::Trickle.Node.z_1002 param::Trickle.Node.z_1037 
	param::Trickle.Node.z_132 param::Trickle.Node.z_2 param::Trickle.Node.z_32 
	param::Trickle.Node.z_422 param::Trickle.Node.z_447 param::Trickle.Node.z_762 
	param::Trickle.Node.z_792 param::Trickle.Node.z_882 } } @ (z_1002 + z_1037 + 
	z_132 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882)) }
																											/*FLAGS{ COVERAGE-ELEMENT }*/
																											INFO{
																												<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#17->run::pid_19:Trickle.Observer.o#15->prot::Trickle.Observer.o#15" as trace="tpid#17->run::pid_19:Trickle.Observer.o#15->prot::Trickle.Observer.o#15">
																											}
																											PC: (((z_1002 + z_1037 + z_792 + z_882) == t_568) && ((z_1002 + z_447 + z_762 + 
	z_792 + z_882) == t_338) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + 
	z_792 + z_882) == t_68) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) 
	&& (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 
	4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && 
	(t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_96 < 4) && (z_116 < t_10) && 
	(z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && 
	(z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && 
	(0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + 
	-2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= 
	(t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)
	) && (0 <= (t_568 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + 
	z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 
	+ z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 
	+ z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + 
	z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) 
	&& ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 
	+ z_903)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_1002 > 0) && 
	(z_11 > 0) && (z_116 > 0) && (z_132 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 
	0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && 
	(z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0)
	 && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0))
																											DATA{
																												:pid_2:uncoveredExit = 0;
																												:pid_65:node_time = (z_1002 + z_1037 + z_132 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																												:pid_65:z = z_1037;
																												:pid_65:localTime = (z_1002 + z_1037 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																												:pid_65:localPC = (((z_1002 + z_1037 + z_792 + z_882) == t_568) && ((z_1002 + z_447 + z_762 + z_792 + z_882) == t_338) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (t_23 < 4) && (t_68 < 4) && (t_338 < 4) && (t_568 < 4) && (z_132 < t_23) && (z_447 < t_338) && (z_792 < t_568) && (0 <= (t_23 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_568 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && (z_1002 > 0) && (z_132 > 0) && (z_2 > 0) && (z_32 > 0) && (z_422 > 0) && (z_447 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0));
																												:pid_66:cl = (z_1002 + z_1037 + z_422 + z_447 + z_762 + z_792 + z_882);
																												:pid_72:cl = (z_1002 + z_1037 + z_447 + z_762 + z_792 + z_882);
																												:pid_77:cl = (z_1002 + z_1037 + z_792 + z_882);
																											}
																											BUFFER{
																												:pid_31:bufferNode:<FIFO>#0{
																													:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																													:pid_65:DataMsg1([ 1 , 1 , 0 ] , (z_1002 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																													:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1002 + z_1037 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																												}
																												:pid_48:bufferNode:<FIFO>#0{
																													:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																													:pid_65:DataMsg1([ 1 , 1 , 0 ] , (z_1002 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																													:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1002 + z_1037 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																												}
																												:pid_82:bufferNode:<FIFO>#0{
																													:pid_65:DataMsg1([ 1 , 1 , 0 ] , (z_1002 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																													:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1002 + z_1037 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																												}
																												:pid_99:bufferNode:<FIFO>#0{
																													:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																													:pid_65:DataMsg1([ 1 , 1 , 0 ] , (z_1002 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																													:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1002 + z_1037 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																												}
																											}
																										}
																									}
																									EC:<Id:2152;Ev:209;H:25;W:1951>{ SC: ( pid_19:o#15 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_80:dp2 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
						EXE: { |;| (:pid_65 , run) (:pid_77 , run) (:pid_79 , run) 
	(:pid_79 , dp_sendDM) (:pid_2 , run) (:pid_18 , run) (:pid_18 , n3_out_DM2) }
																					
						TRACE: { |;| (:pid_65 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_1002 }) (:pid_79 , ${ output inst::Trickle.Node.DataMsg2 [ 
	2 , 2 , 1 ] ${ + param::Trickle.Node.z_1002 param::Trickle.Node.z_132 
	param::Trickle.Node.z_2 param::Trickle.Node.z_32 param::Trickle.Node.z_422 
	param::Trickle.Node.z_447 param::Trickle.Node.z_762 param::Trickle.Node.z_792 
	param::Trickle.Node.z_882 } } @ (z_1002 + z_132 + z_32 + z_422 + z_447 + z_762 + 
	z_792 + z_882)) }
																										/*FLAGS{ COVERAGE-ELEMENT }*/
																										INFO{
																											<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#17->run::pid_19:Trickle.Observer.o#15->prot::Trickle.Observer.o#15" as trace="tpid#17->run::pid_19:Trickle.Observer.o#15->prot::Trickle.Observer.o#15">
																										}
																										PC: (((z_1002 + z_792 + z_882) == t_568) && ((z_150 + z_90) == 4) && ((z_422 + z_447 
	+ z_762 + z_792 + z_882) == t_68) && (z_240 == t_96) && (z_595 == t_434) && 
	(z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_42 
	< 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && 
	(t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_96 < 4) && (z_116 
	< t_10) && (z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && (z_696 < 
	t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 
	+ -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 
	<= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) 
	&& (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= 
	(t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + 
	z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + 
	z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + 
	z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 
	+ z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 
	+ z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) 
	&& ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 
	+ z_2 + z_32)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) 
	<= (z_3 + z_53 + z_903)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && 
	(z_11 > 0) && (z_116 > 0) && (z_132 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 
	0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && 
	(z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0)
	 && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0))
																										DATA{
																											:pid_2:uncoveredExit = 0;
																											:pid_65:node_time = (z_1002 + z_132 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																											:pid_65:z = z_1002;
																											:pid_65:localTime = (z_1002 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																											:pid_65:localPC = (((z_1002 + z_792 + z_882) == t_568) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (t_23 < 4) && (t_68 < 4) && (t_338 < 4) && (t_568 < 4) && (z_132 < t_23) && (z_447 < t_338) && (z_792 < t_568) && (0 <= (t_23 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_568 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && (z_132 > 0) && (z_2 > 0) && (z_32 > 0) && (z_422 > 0) && (z_447 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0));
																											:pid_66:cl = (z_1002 + z_422 + z_447 + z_762 + z_792 + z_882);
																											:pid_72:cl = (z_1002 + z_447 + z_762 + z_792 + z_882);
																											:pid_77:cl = (z_1002 + z_792 + z_882);
																										}
																										BUFFER{
																											:pid_31:bufferNode:<FIFO>#0{
																												:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																												:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1002 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																											}
																											:pid_48:bufferNode:<FIFO>#0{
																												:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																												:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1002 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																											}
																											:pid_82:bufferNode:<FIFO>#0{
																												:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1002 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																											}
																											:pid_99:bufferNode:<FIFO>#0{
																												:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																												:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1002 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																											}
																										}
																									}
																									EC:<Id:2153;Ev:210;H:25;W:1952>{ SC: ( pid_18:o#14 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_53:cp2 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_79:dp1 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
						EXE: { |;| (:pid_48 , run) (:pid_49 , run) (:pid_52 , run) 
	(:pid_52 , cp_sendCM) (:pid_2 , run) }
																					
						TRACE: { |;| (:pid_48 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_1001 }) (:pid_52 , ${ output inst::Trickle.Node.ControlMsg 
	[ 1 , 1 ] ${ + param::Trickle.Node.z_1 param::Trickle.Node.z_1001 
	param::Trickle.Node.z_11 param::Trickle.Node.z_116 param::Trickle.Node.z_306 
	param::Trickle.Node.z_346 param::Trickle.Node.z_651 param::Trickle.Node.z_696 } }
	 @ (z_1001 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) }
																										PC: (((z_1001 + z_306 + z_346 + z_651 + z_696) == t_65) && ((z_150 + z_90) == 4) && 
	((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (z_240 == t_96) && (z_595 
	== t_434) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 
	4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && 
	(t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_96 
	< 4) && (z_116 < t_10) && (z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) 
	&& (z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && 
	(0 <= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + 
	-2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= 
	(t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2))
	 && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + 
	z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + 
	z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + 
	z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 
	+ z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) 
	<= (z_132 + z_2 + z_32)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 
	+ z_882) <= (z_3 + z_53 + z_903)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 
	> 0) && (z_11 > 0) && (z_116 > 0) && (z_132 > 0) && (z_150 > 0) && (z_185 > 0) 
	&& (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 
	> 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && 
	(z_535 > 0) && (z_651 > 0) && (z_696 > 0) && (z_762 > 0) && (z_792 > 0) && (z_90 
	> 0))
																										DATA{
																											:pid_2:uncoveredExit = 3;
																											:pid_48:node_time = (z_1001 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696);
																											:pid_48:z = z_1001;
																											:pid_48:localTime = (z_1 + z_1001 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696);
																											:pid_48:localPC = (((z_1001 + z_306 + z_346 + z_651 + z_696) == t_65) && (t_10 < 4) && (t_65 < 4) && (t_220 < 4) && (t_513 < 4) && (z_116 < t_10) && (z_346 < t_220) && (z_696 < t_513) && (0 <= (t_10 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_220 + -2)) && (0 <= (t_513 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_306 > 0) && (z_346 > 0) && (z_651 > 0) && (z_696 > 0));
																											:pid_49:cl = (z_1001 + z_306 + z_346 + z_651 + z_696);
																											:pid_55:cl = (z_1001 + z_346 + z_651 + z_696);
																											:pid_60:cl = (z_1001 + z_696);
																										}
																										BUFFER{
																											:pid_65:bufferNode:<FIFO>#0{
																												:pid_48:ControlMsg([ 1 , 1 ] , (z_1 + z_1001 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696));
																											}
																										}
																										EC:<Id:2290;Ev:0;H:26;W:2080>{ SC: ( pid_19:o#15 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_53:cp2 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_80:dp2 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
							EXE: { |;| (:pid_65 , run) (:pid_77 , run) (:pid_79 , 
	run) (:pid_79 , dp_sendDM) (:pid_2 , run) (:pid_18 , run) (:pid_18 , n3_out_DM2) 
	}
																					
							TRACE: { |;| (:pid_65 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_1047 }) (:pid_79 , ${ output inst::Trickle.Node.DataMsg2 [ 
	2 , 2 , 1 ] ${ + param::Trickle.Node.z_1047 param::Trickle.Node.z_132 
	param::Trickle.Node.z_2 param::Trickle.Node.z_32 param::Trickle.Node.z_422 
	param::Trickle.Node.z_447 param::Trickle.Node.z_762 param::Trickle.Node.z_792 
	param::Trickle.Node.z_882 } } @ (z_1047 + z_132 + z_32 + z_422 + z_447 + z_762 + 
	z_792 + z_882)) }
																											/*FLAGS{ COVERAGE-ELEMENT }*/
																											INFO{
																												<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#17->run::pid_19:Trickle.Observer.o#15->prot::Trickle.Observer.o#15" as trace="tpid#17->run::pid_19:Trickle.Observer.o#15->prot::Trickle.Observer.o#15">
																											}
																											PC: (((z_1001 + z_306 + z_346 + z_651 + z_696) == t_65) && ((z_1047 + z_792 + z_882) 
	== t_568) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) 
	== t_68) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && (t_10 < 4) 
	&& (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 
	4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && 
	(t_513 < 4) && (t_568 < 4) && (t_96 < 4) && (z_116 < t_10) && (z_132 < t_23) && 
	(z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && 
	(z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2))
	 && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 
	+ -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 
	<= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + 
	-2)) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + 
	z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 
	+ z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) 
	<= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 
	+ z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 
	+ z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_132 + 
	z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && 
	((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && 
	(z_132 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 
	0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && 
	(z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_651 > 0) && (z_696 > 
	0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0))
																											DATA{
																												:pid_2:uncoveredExit = 0;
																												:pid_65:node_time = (z_1047 + z_132 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																												:pid_65:z = z_1047;
																												:pid_65:localTime = (z_1047 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																												:pid_65:localPC = (((z_1047 + z_792 + z_882) == t_568) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (t_23 < 4) && (t_68 < 4) && (t_338 < 4) && (t_568 < 4) && (z_132 < t_23) && (z_447 < t_338) && (z_792 < t_568) && (0 <= (t_23 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_568 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && (z_132 > 0) && (z_2 > 0) && (z_32 > 0) && (z_422 > 0) && (z_447 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0));
																												:pid_66:cl = (z_1047 + z_422 + z_447 + z_762 + z_792 + z_882);
																												:pid_72:cl = (z_1047 + z_447 + z_762 + z_792 + z_882);
																												:pid_77:cl = (z_1047 + z_792 + z_882);
																											}
																											BUFFER{
																												:pid_31:bufferNode:<FIFO>#0{
																													:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																													:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1047 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																												}
																												:pid_48:bufferNode:<FIFO>#0{
																													:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																													:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1047 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																												}
																												:pid_82:bufferNode:<FIFO>#0{
																													:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1047 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																												}
																												:pid_99:bufferNode:<FIFO>#0{
																													:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																													:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1047 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																												}
																											}
																										}
																									}
																									EC:<Id:2154;Ev:211;H:25;W:1953>{ SC: ( pid_18:o#14 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_79:dp1 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
						EXE: { |;| (:pid_48 , run) (:pid_49 , run) (:pid_52 , run) 
	(:pid_52 , cp1_receiveCM_consistent) (:pid_2 , run) }
																					
						TRACE: { |;| (:pid_48 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_1001 }) (:pid_52 , ${ input inst::Trickle.Node.ControlMsg 
	[ 1 , 1 ] ${ + param::Trickle.Node.z_132 param::Trickle.Node.z_2 
	param::Trickle.Node.z_32 param::Trickle.Node.z_422 param::Trickle.Node.z_447 
	param::Trickle.Node.z_762 param::Trickle.Node.z_792 param::Trickle.Node.z_882 } }
	 @ (z_1001 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) }
																										PC: (((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && 
	(z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && ((z_1001 + z_306 + z_346 
	+ z_651 + z_696) < t_65) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4)
	 && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 
	< 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_96 < 4) 
	&& (z_116 < t_10) && (z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && 
	(z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 
	<= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)
	) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= 
	(t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2))
	 && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + 
	z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + 
	z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + 
	z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 
	+ z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) 
	<= (z_132 + z_2 + z_32)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 
	+ z_882) <= (z_1 + z_1001 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && 
	((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + 
	z_903)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) && 
	(z_116 > 0) && (z_132 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 
	> 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && 
	(z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_651 > 
	0) && (z_696 > 0) && (z_762 > 0) && (z_792 > 0) && (z_90 > 0))
																										DATA{
																											:pid_2:uncoveredExit = 3;
																											:pid_48:node_time = (z_1001 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696);
																											:pid_48:z = z_1001;
																											:pid_48:localTime = (z_1 + z_1001 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696);
																											:pid_48:seq_buff[0] = 1;
																											:pid_48:seq_buff[1] = 1;
																											:pid_48:localPC = (((z_1001 + z_306 + z_346 + z_651 + z_696) < t_65) && (t_10 < 4) && (t_65 < 4) && (t_220 < 4) && (t_513 < 4) && (z_116 < t_10) && (z_346 < t_220) && (z_696 < t_513) && (0 <= (t_10 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_220 + -2)) && (0 <= (t_513 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1 + z_1001 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_306 > 0) && (z_346 > 0) && (z_651 > 0) && (z_696 > 0));
																											:pid_48:timeEmit = (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																											:pid_49:c = 1;
																											:pid_49:i = 2;
																											:pid_49:consistent = true;
																											:pid_49:cl = (z_1001 + z_306 + z_346 + z_651 + z_696);
																											:pid_55:cl = (z_1001 + z_346 + z_651 + z_696);
																											:pid_60:cl = (z_1001 + z_696);
																										}
																										BUFFER{
																											:pid_48:bufferNode:<FIFO>#0{ }
																										}
																										EC:<Id:2305;Ev:0;H:26;W:2094>{ SC: ( pid_19:o#15 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_80:dp2 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
							EXE: { |;| (:pid_65 , run) (:pid_77 , run) (:pid_79 , 
	run) (:pid_79 , dp_sendDM) (:pid_2 , run) (:pid_18 , run) (:pid_18 , n3_out_DM2) 
	}
																					
							TRACE: { |;| (:pid_65 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_1052 }) (:pid_79 , ${ output inst::Trickle.Node.DataMsg2 [ 
	2 , 2 , 1 ] ${ + param::Trickle.Node.z_1052 param::Trickle.Node.z_132 
	param::Trickle.Node.z_2 param::Trickle.Node.z_32 param::Trickle.Node.z_422 
	param::Trickle.Node.z_447 param::Trickle.Node.z_762 param::Trickle.Node.z_792 
	param::Trickle.Node.z_882 } } @ (z_1052 + z_132 + z_32 + z_422 + z_447 + z_762 + 
	z_792 + z_882)) }
																											/*FLAGS{ COVERAGE-ELEMENT }*/
																											INFO{
																												<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#17->run::pid_19:Trickle.Observer.o#15->prot::Trickle.Observer.o#15" as trace="tpid#17->run::pid_19:Trickle.Observer.o#15->prot::Trickle.Observer.o#15">
																											}
																											PC: (((z_1052 + z_792 + z_882) == t_568) && ((z_150 + z_90) == 4) && ((z_422 + z_447 
	+ z_762 + z_792 + z_882) == t_68) && (z_240 == t_96) && (z_595 == t_434) && 
	(z_90 == t_5) && ((z_1001 + z_306 + z_346 + z_651 + z_696) < t_65) && (t_10 < 4) 
	&& (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 
	4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && 
	(t_513 < 4) && (t_568 < 4) && (t_96 < 4) && (z_116 < t_10) && (z_132 < t_23) && 
	(z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && 
	(z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2))
	 && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 
	+ -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 
	<= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + 
	-2)) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + 
	z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 
	+ z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) 
	<= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 
	+ z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 
	+ z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_132 + 
	z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_1 + z_1001 + z_11 + 
	z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_132 + z_2 + z_32 + z_422 + z_447 
	+ z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_150 + z_90) > t_5) && 
	(z_0 > 0) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_132 > 0) && (z_150 > 0)
	 && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 
	> 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && 
	(z_53 > 0) && (z_535 > 0) && (z_651 > 0) && (z_696 > 0) && (z_762 > 0) && (z_792 
	> 0) && (z_882 > 0) && (z_90 > 0))
																											DATA{
																												:pid_2:uncoveredExit = 0;
																												:pid_65:node_time = (z_1052 + z_132 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																												:pid_65:z = z_1052;
																												:pid_65:localTime = (z_1052 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																												:pid_65:localPC = (((z_1052 + z_792 + z_882) == t_568) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (t_23 < 4) && (t_68 < 4) && (t_338 < 4) && (t_568 < 4) && (z_132 < t_23) && (z_447 < t_338) && (z_792 < t_568) && (0 <= (t_23 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_568 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && (z_132 > 0) && (z_2 > 0) && (z_32 > 0) && (z_422 > 0) && (z_447 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0));
																												:pid_66:cl = (z_1052 + z_422 + z_447 + z_762 + z_792 + z_882);
																												:pid_72:cl = (z_1052 + z_447 + z_762 + z_792 + z_882);
																												:pid_77:cl = (z_1052 + z_792 + z_882);
																											}
																											BUFFER{
																												:pid_31:bufferNode:<FIFO>#0{
																													:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																													:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1052 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																												}
																												:pid_48:bufferNode:<FIFO>#0{
																													:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1052 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																												}
																												:pid_82:bufferNode:<FIFO>#0{
																													:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1052 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																												}
																												:pid_99:bufferNode:<FIFO>#0{
																													:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																													:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1052 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																												}
																											}
																										}
																									}
																									EC:<Id:2155;Ev:212;H:25;W:1954>{ SC: ( pid_18:o#14 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_58:dp2 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_79:dp1 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
						EXE: { |;| (:pid_48 , run) (:pid_55 , run) (:pid_57 , run) 
	(:pid_57 , dp_sendDM) (:pid_2 , run) }
																					
						TRACE: { |;| (:pid_48 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_1001 }) (:pid_57 , ${ output inst::Trickle.Node.DataMsg1 [ 
	1 , 1 , 0 ] ${ + param::Trickle.Node.z_1 param::Trickle.Node.z_1001 
	param::Trickle.Node.z_11 param::Trickle.Node.z_116 param::Trickle.Node.z_306 
	param::Trickle.Node.z_346 param::Trickle.Node.z_651 param::Trickle.Node.z_696 } }
	 @ (z_1001 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) }
																										PC: (((z_1001 + z_346 + z_651 + z_696) == t_220) && ((z_150 + z_90) == 4) && ((z_422 
	+ z_447 + z_762 + z_792 + z_882) == t_68) && (z_240 == t_96) && (z_595 == t_434) 
	&& (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && 
	(t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) 
	&& (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_96 < 4) && 
	(z_116 < t_10) && (z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && (z_696 
	< t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= 
	(t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) 
	&& (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 
	+ -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && 
	(0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + 
	z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + 
	z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + 
	z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 
	+ z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) 
	<= (z_132 + z_2 + z_32)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 
	+ z_882) <= (z_3 + z_53 + z_903)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 
	> 0) && (z_11 > 0) && (z_116 > 0) && (z_132 > 0) && (z_150 > 0) && (z_185 > 0) 
	&& (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 
	> 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && 
	(z_535 > 0) && (z_651 > 0) && (z_696 > 0) && (z_762 > 0) && (z_792 > 0) && (z_90 
	> 0))
																										DATA{
																											:pid_2:uncoveredExit = 3;
																											:pid_48:node_time = (z_1001 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696);
																											:pid_48:z = z_1001;
																											:pid_48:localTime = (z_1 + z_1001 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696);
																											:pid_48:localPC = (((z_1001 + z_346 + z_651 + z_696) == t_220) && (t_10 < 4) && (t_65 < 4) && (t_220 < 4) && (t_513 < 4) && (z_116 < t_10) && (z_346 < t_220) && (z_696 < t_513) && (0 <= (t_10 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_220 + -2)) && (0 <= (t_513 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_306 > 0) && (z_346 > 0) && (z_651 > 0) && (z_696 > 0));
																											:pid_49:cl = (z_1001 + z_306 + z_346 + z_651 + z_696);
																											:pid_55:cl = (z_1001 + z_346 + z_651 + z_696);
																											:pid_60:cl = (z_1001 + z_696);
																										}
																										BUFFER{
																											:pid_65:bufferNode:<FIFO>#0{
																												:pid_48:DataMsg1([ 1 , 1 , 0 ] , (z_1 + z_1001 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696));
																											}
																										}
																										EC:<Id:2320;Ev:0;H:26;W:2108>{ SC: ( pid_19:o#15 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_58:dp2 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_80:dp2 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
							EXE: { |;| (:pid_65 , run) (:pid_77 , run) (:pid_79 , 
	run) (:pid_79 , dp_sendDM) (:pid_2 , run) (:pid_18 , run) (:pid_18 , n3_out_DM2) 
	}
																					
							TRACE: { |;| (:pid_65 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_1057 }) (:pid_79 , ${ output inst::Trickle.Node.DataMsg2 [ 
	2 , 2 , 1 ] ${ + param::Trickle.Node.z_1057 param::Trickle.Node.z_132 
	param::Trickle.Node.z_2 param::Trickle.Node.z_32 param::Trickle.Node.z_422 
	param::Trickle.Node.z_447 param::Trickle.Node.z_762 param::Trickle.Node.z_792 
	param::Trickle.Node.z_882 } } @ (z_1057 + z_132 + z_32 + z_422 + z_447 + z_762 + 
	z_792 + z_882)) }
																											/*FLAGS{ COVERAGE-ELEMENT }*/
																											INFO{
																												<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#17->run::pid_19:Trickle.Observer.o#15->prot::Trickle.Observer.o#15" as trace="tpid#17->run::pid_19:Trickle.Observer.o#15->prot::Trickle.Observer.o#15">
																											}
																											PC: (((z_1001 + z_346 + z_651 + z_696) == t_220) && ((z_1057 + z_792 + z_882) == 
	t_568) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) == 
	t_68) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && (t_10 < 4) && 
	(t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) 
	&& (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && 
	(t_513 < 4) && (t_568 < 4) && (t_96 < 4) && (z_116 < t_10) && (z_132 < t_23) && 
	(z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && 
	(z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2))
	 && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 
	+ -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 
	<= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + 
	-2)) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + 
	z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 
	+ z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) 
	<= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 
	+ z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 
	+ z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_132 + 
	z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && 
	((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && 
	(z_132 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 
	0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && 
	(z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_651 > 0) && (z_696 > 
	0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0))
																											DATA{
																												:pid_2:uncoveredExit = 0;
																												:pid_65:node_time = (z_1057 + z_132 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																												:pid_65:z = z_1057;
																												:pid_65:localTime = (z_1057 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																												:pid_65:localPC = (((z_1057 + z_792 + z_882) == t_568) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (t_23 < 4) && (t_68 < 4) && (t_338 < 4) && (t_568 < 4) && (z_132 < t_23) && (z_447 < t_338) && (z_792 < t_568) && (0 <= (t_23 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_568 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && (z_132 > 0) && (z_2 > 0) && (z_32 > 0) && (z_422 > 0) && (z_447 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0));
																												:pid_66:cl = (z_1057 + z_422 + z_447 + z_762 + z_792 + z_882);
																												:pid_72:cl = (z_1057 + z_447 + z_762 + z_792 + z_882);
																												:pid_77:cl = (z_1057 + z_792 + z_882);
																											}
																											BUFFER{
																												:pid_31:bufferNode:<FIFO>#0{
																													:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																													:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1057 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																												}
																												:pid_48:bufferNode:<FIFO>#0{
																													:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																													:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1057 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																												}
																												:pid_82:bufferNode:<FIFO>#0{
																													:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1057 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																												}
																												:pid_99:bufferNode:<FIFO>#0{
																													:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																													:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1057 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																												}
																											}
																										}
																									}
																									EC:<Id:2156;Ev:213;H:25;W:1955>{ SC: ( pid_18:o#14 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_63:dp2 ) , ( pid_70:cp2 , pid_74:dp1 , pid_79:dp1 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
						EXE: { |;| (:pid_48 , run) (:pid_60 , run) (:pid_62 , run) 
	(:pid_62 , dp_sendDM) (:pid_2 , run) }
																					
						TRACE: { |;| (:pid_48 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_1001 }) (:pid_62 , ${ output inst::Trickle.Node.DataMsg2 [ 
	2 , 2 , 1 ] ${ + param::Trickle.Node.z_1 param::Trickle.Node.z_1001 
	param::Trickle.Node.z_11 param::Trickle.Node.z_116 param::Trickle.Node.z_306 
	param::Trickle.Node.z_346 param::Trickle.Node.z_651 param::Trickle.Node.z_696 } }
	 @ (z_1001 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) }
																										PC: (((z_1001 + z_696) == t_513) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 
	+ z_792 + z_882) == t_68) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5)
	 && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 
	< 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && 
	(t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_96 < 4) && (z_116 < t_10) && 
	(z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && 
	(z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && 
	(0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + 
	-2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= 
	(t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)
	) && (0 <= (t_568 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + 
	z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 
	+ z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 
	+ z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + 
	z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) 
	&& ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 
	+ z_903)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) && 
	(z_116 > 0) && (z_132 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 
	> 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && 
	(z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_651 > 
	0) && (z_696 > 0) && (z_762 > 0) && (z_792 > 0) && (z_90 > 0))
																										DATA{
																											:pid_2:uncoveredExit = 3;
																											:pid_48:node_time = (z_1001 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696);
																											:pid_48:z = z_1001;
																											:pid_48:localTime = (z_1 + z_1001 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696);
																											:pid_48:localPC = (((z_1001 + z_696) == t_513) && (t_10 < 4) && (t_65 < 4) && (t_220 < 4) && (t_513 < 4) && (z_116 < t_10) && (z_346 < t_220) && (z_696 < t_513) && (0 <= (t_10 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_220 + -2)) && (0 <= (t_513 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_306 > 0) && (z_346 > 0) && (z_651 > 0) && (z_696 > 0));
																											:pid_49:cl = (z_1001 + z_306 + z_346 + z_651 + z_696);
																											:pid_55:cl = (z_1001 + z_346 + z_651 + z_696);
																											:pid_60:cl = (z_1001 + z_696);
																										}
																										BUFFER{
																											:pid_65:bufferNode:<FIFO>#0{
																												:pid_48:DataMsg2([ 2 , 2 , 1 ] , (z_1 + z_1001 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696));
																											}
																										}
																										EC:<Id:2335;Ev:0;H:26;W:2122>{ SC: ( pid_19:o#15 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_63:dp2 ) , ( pid_70:cp2 , pid_74:dp1 , pid_80:dp2 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
							EXE: { |;| (:pid_65 , run) (:pid_77 , run) (:pid_79 , 
	run) (:pid_79 , dp_sendDM) (:pid_2 , run) (:pid_18 , run) (:pid_18 , n3_out_DM2) 
	}
																					
							TRACE: { |;| (:pid_65 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_1062 }) (:pid_79 , ${ output inst::Trickle.Node.DataMsg2 [ 
	2 , 2 , 1 ] ${ + param::Trickle.Node.z_1062 param::Trickle.Node.z_132 
	param::Trickle.Node.z_2 param::Trickle.Node.z_32 param::Trickle.Node.z_422 
	param::Trickle.Node.z_447 param::Trickle.Node.z_762 param::Trickle.Node.z_792 
	param::Trickle.Node.z_882 } } @ (z_1062 + z_132 + z_32 + z_422 + z_447 + z_762 + 
	z_792 + z_882)) }
																											/*FLAGS{ COVERAGE-ELEMENT }*/
																											INFO{
																												<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#17->run::pid_19:Trickle.Observer.o#15->prot::Trickle.Observer.o#15" as trace="tpid#17->run::pid_19:Trickle.Observer.o#15->prot::Trickle.Observer.o#15">
																											}
																											PC: (((z_1001 + z_696) == t_513) && ((z_1062 + z_792 + z_882) == t_568) && ((z_150 + 
	z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (z_240 == 
	t_96) && (z_595 == t_434) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_241 
	< 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && 
	(t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 
	< 4) && (t_96 < 4) && (z_116 < t_10) && (z_132 < t_23) && (z_346 < t_220) && 
	(z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= 
	(t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) 
	&& (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 
	+ -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 
	<= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_96 + 
	-2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + 
	z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + 
	z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + 
	z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + 
	z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 
	+ z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + 
	z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_150 + z_90) > t_5) && 
	(z_0 > 0) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_132 > 0) && (z_150 > 0)
	 && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 
	> 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && 
	(z_53 > 0) && (z_535 > 0) && (z_651 > 0) && (z_696 > 0) && (z_762 > 0) && (z_792 
	> 0) && (z_882 > 0) && (z_90 > 0))
																											DATA{
																												:pid_2:uncoveredExit = 0;
																												:pid_65:node_time = (z_1062 + z_132 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																												:pid_65:z = z_1062;
																												:pid_65:localTime = (z_1062 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																												:pid_65:localPC = (((z_1062 + z_792 + z_882) == t_568) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (t_23 < 4) && (t_68 < 4) && (t_338 < 4) && (t_568 < 4) && (z_132 < t_23) && (z_447 < t_338) && (z_792 < t_568) && (0 <= (t_23 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_568 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && (z_132 > 0) && (z_2 > 0) && (z_32 > 0) && (z_422 > 0) && (z_447 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0));
																												:pid_66:cl = (z_1062 + z_422 + z_447 + z_762 + z_792 + z_882);
																												:pid_72:cl = (z_1062 + z_447 + z_762 + z_792 + z_882);
																												:pid_77:cl = (z_1062 + z_792 + z_882);
																											}
																											BUFFER{
																												:pid_31:bufferNode:<FIFO>#0{
																													:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																													:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1062 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																												}
																												:pid_48:bufferNode:<FIFO>#0{
																													:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																													:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1062 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																												}
																												:pid_82:bufferNode:<FIFO>#0{
																													:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1062 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																												}
																												:pid_99:bufferNode:<FIFO>#0{
																													:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																													:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1062 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																												}
																											}
																										}
																									}
																									EC:<Id:2157;Ev:214;H:25;W:1956>{ SC: ( pid_18:o#14 , ( pid_36:cp2 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_79:dp1 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
						EXE: { |;| (:pid_31 , run) (:pid_32 , run) (:pid_35 , run) 
	(:pid_35 , cp_sendCM) (:pid_2 , run) }
																					
						TRACE: { |;| (:pid_31 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_1000 }) (:pid_35 , ${ output inst::Trickle.Node.ControlMsg 
	[ 1 , 1 ] ${ + param::Trickle.Node.z_0 param::Trickle.Node.z_1000 
	param::Trickle.Node.z_150 param::Trickle.Node.z_185 param::Trickle.Node.z_240 
	param::Trickle.Node.z_5 param::Trickle.Node.z_535 param::Trickle.Node.z_595 
	param::Trickle.Node.z_90 } } @ (z_1000 + z_150 + z_185 + z_240 + z_5 + z_535 + 
	z_595 + z_90)) }
																										PC: (((z_1000 + z_185 + z_240 + z_535 + z_595) == t_79) && ((z_150 + z_90) == 4) && 
	((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (z_240 == t_96) && (z_595 
	== t_434) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 
	4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && 
	(t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_96 
	< 4) && (z_116 < t_10) && (z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) 
	&& (z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && 
	(0 <= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + 
	-2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= 
	(t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2))
	 && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + 
	z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + 
	z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + 
	z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 
	+ z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) 
	<= (z_132 + z_2 + z_32)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 
	+ z_882) <= (z_3 + z_53 + z_903)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 
	> 0) && (z_11 > 0) && (z_116 > 0) && (z_132 > 0) && (z_150 > 0) && (z_185 > 0) 
	&& (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 
	> 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && 
	(z_535 > 0) && (z_595 > 0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) && (z_90 
	> 0))
																										DATA{
																											:pid_2:uncoveredExit = 3;
																											:pid_31:node_time = (z_1000 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90);
																											:pid_31:z = z_1000;
																											:pid_31:localTime = (z_0 + z_1000 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90);
																											:pid_31:localPC = (((z_1000 + z_185 + z_240 + z_535 + z_595) == t_79) && ((z_150 + z_90) == 4) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && (t_5 < 4) && (t_79 < 8) && (t_434 < 4) && (t_96 < 4) && (0 <= (t_5 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_434 + -2)) && (0 <= (t_96 + -2)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_150 > 0) && (z_185 > 0) && (z_240 > 0) && (z_5 > 0) && (z_535 > 0) && (z_595 > 0) && (z_90 > 0));
																											:pid_32:cl = (z_1000 + z_185 + z_240 + z_535 + z_595);
																											:pid_38:cl = (z_1000 + z_240 + z_535 + z_595);
																											:pid_43:cl = (z_1000 + z_595);
																										}
																										BUFFER{
																											:pid_48:bufferNode:<FIFO>#0{
																												:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																												:pid_31:ControlMsg([ 1 , 1 ] , (z_0 + z_1000 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90));
																											}
																											:pid_65:bufferNode:<FIFO>#0{
																												:pid_31:ControlMsg([ 1 , 1 ] , (z_0 + z_1000 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90));
																											}
																										}
																										EC:<Id:2352;Ev:0;H:26;W:2138>{ SC: ( pid_19:o#15 , ( pid_36:cp2 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_80:dp2 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
							EXE: { |;| (:pid_65 , run) (:pid_77 , run) (:pid_79 , 
	run) (:pid_79 , dp_sendDM) (:pid_2 , run) (:pid_18 , run) (:pid_18 , n3_out_DM2) 
	}
																					
							TRACE: { |;| (:pid_65 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_1067 }) (:pid_79 , ${ output inst::Trickle.Node.DataMsg2 [ 
	2 , 2 , 1 ] ${ + param::Trickle.Node.z_1067 param::Trickle.Node.z_132 
	param::Trickle.Node.z_2 param::Trickle.Node.z_32 param::Trickle.Node.z_422 
	param::Trickle.Node.z_447 param::Trickle.Node.z_762 param::Trickle.Node.z_792 
	param::Trickle.Node.z_882 } } @ (z_1067 + z_132 + z_32 + z_422 + z_447 + z_762 + 
	z_792 + z_882)) }
																											/*FLAGS{ COVERAGE-ELEMENT }*/
																											INFO{
																												<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#17->run::pid_19:Trickle.Observer.o#15->prot::Trickle.Observer.o#15" as trace="tpid#17->run::pid_19:Trickle.Observer.o#15->prot::Trickle.Observer.o#15">
																											}
																											PC: (((z_1000 + z_185 + z_240 + z_535 + z_595) == t_79) && ((z_1067 + z_792 + z_882) 
	== t_568) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) 
	== t_68) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && (t_10 < 4) 
	&& (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 
	4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && 
	(t_513 < 4) && (t_568 < 4) && (t_96 < 4) && (z_116 < t_10) && (z_132 < t_23) && 
	(z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && 
	(z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2))
	 && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 
	+ -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 
	<= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + 
	-2)) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + 
	z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 
	+ z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) 
	<= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 
	+ z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 
	+ z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_132 + 
	z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && 
	((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && 
	(z_132 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 
	0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && 
	(z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_595 > 0) && (z_651 > 
	0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0))
																											DATA{
																												:pid_2:uncoveredExit = 0;
																												:pid_65:node_time = (z_1067 + z_132 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																												:pid_65:z = z_1067;
																												:pid_65:localTime = (z_1067 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																												:pid_65:localPC = (((z_1067 + z_792 + z_882) == t_568) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (t_23 < 4) && (t_68 < 4) && (t_338 < 4) && (t_568 < 4) && (z_132 < t_23) && (z_447 < t_338) && (z_792 < t_568) && (0 <= (t_23 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_568 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && (z_132 > 0) && (z_2 > 0) && (z_32 > 0) && (z_422 > 0) && (z_447 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0));
																												:pid_66:cl = (z_1067 + z_422 + z_447 + z_762 + z_792 + z_882);
																												:pid_72:cl = (z_1067 + z_447 + z_762 + z_792 + z_882);
																												:pid_77:cl = (z_1067 + z_792 + z_882);
																											}
																											BUFFER{
																												:pid_31:bufferNode:<FIFO>#0{
																													:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																													:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1067 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																												}
																												:pid_48:bufferNode:<FIFO>#0{
																													:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																													:pid_31:ControlMsg([ 1 , 1 ] , (z_0 + z_1000 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90));
																													:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1067 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																												}
																												:pid_82:bufferNode:<FIFO>#0{
																													:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1067 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																												}
																												:pid_99:bufferNode:<FIFO>#0{
																													:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																													:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1067 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																												}
																											}
																										}
																									}
																									EC:<Id:2158;Ev:215;H:25;W:1957>{ SC: ( pid_18:o#14 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_79:dp1 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
						EXE: { |;| (:pid_31 , run) (:pid_32 , run) (:pid_35 , run) 
	(:pid_35 , cp1_receiveCM_consistent) (:pid_2 , run) }
																					
						TRACE: { |;| (:pid_31 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_1000 }) (:pid_35 , ${ input inst::Trickle.Node.ControlMsg 
	[ 1 , 1 ] ${ + param::Trickle.Node.z_132 param::Trickle.Node.z_2 
	param::Trickle.Node.z_32 param::Trickle.Node.z_422 param::Trickle.Node.z_447 
	param::Trickle.Node.z_762 param::Trickle.Node.z_792 param::Trickle.Node.z_882 } }
	 @ (z_1000 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90)) }
																										PC: (((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && 
	(z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && ((z_1000 + z_185 + z_240 
	+ z_535 + z_595) < t_79) && (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4)
	 && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 
	< 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_96 < 4) 
	&& (z_116 < t_10) && (z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && 
	(z_696 < t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 
	<= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)
	) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= 
	(t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2))
	 && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + 
	z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + 
	z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + 
	z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 
	+ z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) 
	<= (z_132 + z_2 + z_32)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 
	+ z_882) <= (z_0 + z_1000 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90)) 
	&& ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 
	+ z_903)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) && 
	(z_116 > 0) && (z_132 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 
	> 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && 
	(z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_595 > 
	0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) && (z_90 > 0))
																										DATA{
																											:pid_2:uncoveredExit = 3;
																											:pid_31:node_time = (z_1000 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90);
																											:pid_31:z = z_1000;
																											:pid_31:localTime = (z_0 + z_1000 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90);
																											:pid_31:seq_buff[0] = 1;
																											:pid_31:seq_buff[1] = 1;
																											:pid_31:localPC = (((z_150 + z_90) == 4) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && ((z_1000 + z_185 + z_240 + z_535 + z_595) < t_79) && (t_5 < 4) && (t_79 < 8) && (t_434 < 4) && (t_96 < 4) && (0 <= (t_5 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_434 + -2)) && (0 <= (t_96 + -2)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_0 + z_1000 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_150 > 0) && (z_185 > 0) && (z_240 > 0) && (z_5 > 0) && (z_535 > 0) && (z_595 > 0) && (z_90 > 0));
																											:pid_31:timeEmit = (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																											:pid_32:c = 1;
																											:pid_32:i = 2;
																											:pid_32:consistent = true;
																											:pid_32:cl = (z_1000 + z_185 + z_240 + z_535 + z_595);
																											:pid_38:cl = (z_1000 + z_240 + z_535 + z_595);
																											:pid_43:cl = (z_1000 + z_595);
																										}
																										BUFFER{
																											:pid_31:bufferNode:<FIFO>#0{ }
																										}
																										EC:<Id:2367;Ev:0;H:26;W:2152>{ SC: ( pid_19:o#15 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_80:dp2 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
							EXE: { |;| (:pid_65 , run) (:pid_77 , run) (:pid_79 , 
	run) (:pid_79 , dp_sendDM) (:pid_2 , run) (:pid_18 , run) (:pid_18 , n3_out_DM2) 
	}
																					
							TRACE: { |;| (:pid_65 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_1072 }) (:pid_79 , ${ output inst::Trickle.Node.DataMsg2 [ 
	2 , 2 , 1 ] ${ + param::Trickle.Node.z_1072 param::Trickle.Node.z_132 
	param::Trickle.Node.z_2 param::Trickle.Node.z_32 param::Trickle.Node.z_422 
	param::Trickle.Node.z_447 param::Trickle.Node.z_762 param::Trickle.Node.z_792 
	param::Trickle.Node.z_882 } } @ (z_1072 + z_132 + z_32 + z_422 + z_447 + z_762 + 
	z_792 + z_882)) }
																											/*FLAGS{ COVERAGE-ELEMENT }*/
																											INFO{
																												<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#17->run::pid_19:Trickle.Observer.o#15->prot::Trickle.Observer.o#15" as trace="tpid#17->run::pid_19:Trickle.Observer.o#15->prot::Trickle.Observer.o#15">
																											}
																											PC: (((z_1072 + z_792 + z_882) == t_568) && ((z_150 + z_90) == 4) && ((z_422 + z_447 
	+ z_762 + z_792 + z_882) == t_68) && (z_240 == t_96) && (z_595 == t_434) && 
	(z_90 == t_5) && ((z_1000 + z_185 + z_240 + z_535 + z_595) < t_79) && (t_10 < 4) 
	&& (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 
	4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && 
	(t_513 < 4) && (t_568 < 4) && (t_96 < 4) && (z_116 < t_10) && (z_132 < t_23) && 
	(z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && 
	(z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2))
	 && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 
	+ -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 
	<= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + 
	-2)) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + 
	z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 
	+ z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) 
	<= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 
	+ z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 
	+ z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_132 + 
	z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_0 + z_1000 + z_150 + 
	z_185 + z_240 + z_5 + z_535 + z_595 + z_90)) && ((z_132 + z_2 + z_32 + z_422 + 
	z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_150 + z_90) > t_5)
	 && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_132 > 0) && (z_150 
	> 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && 
	(z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0)
	 && (z_53 > 0) && (z_535 > 0) && (z_595 > 0) && (z_651 > 0) && (z_762 > 0) && 
	(z_792 > 0) && (z_882 > 0) && (z_90 > 0))
																											DATA{
																												:pid_2:uncoveredExit = 0;
																												:pid_65:node_time = (z_1072 + z_132 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																												:pid_65:z = z_1072;
																												:pid_65:localTime = (z_1072 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																												:pid_65:localPC = (((z_1072 + z_792 + z_882) == t_568) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (t_23 < 4) && (t_68 < 4) && (t_338 < 4) && (t_568 < 4) && (z_132 < t_23) && (z_447 < t_338) && (z_792 < t_568) && (0 <= (t_23 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_568 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && (z_132 > 0) && (z_2 > 0) && (z_32 > 0) && (z_422 > 0) && (z_447 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0));
																												:pid_66:cl = (z_1072 + z_422 + z_447 + z_762 + z_792 + z_882);
																												:pid_72:cl = (z_1072 + z_447 + z_762 + z_792 + z_882);
																												:pid_77:cl = (z_1072 + z_792 + z_882);
																											}
																											BUFFER{
																												:pid_31:bufferNode:<FIFO>#0{
																													:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1072 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																												}
																												:pid_48:bufferNode:<FIFO>#0{
																													:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																													:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1072 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																												}
																												:pid_82:bufferNode:<FIFO>#0{
																													:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1072 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																												}
																												:pid_99:bufferNode:<FIFO>#0{
																													:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																													:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1072 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																												}
																											}
																										}
																									}
																									EC:<Id:2159;Ev:216;H:25;W:1958>{ SC: ( pid_18:o#14 , ( pid_35:cp1 , pid_41:dp2 , pid_45:dp1 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_79:dp1 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
						EXE: { |;| (:pid_31 , run) (:pid_43 , run) (:pid_46 , run) 
	(:pid_46 , dp_resetTau) (:pid_2 , run) }
																					
						TRACE: { |;| (:pid_31 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_1000 }) (:pid_46 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_651 }) }
																										PC: (((z_1000 + z_595) == 4) && ((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + 
	z_792 + z_882) == t_68) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) 
	&& (t_10 < 4) && (t_23 < 4) && (t_241 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 
	4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && 
	(t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_651 < 8) && (t_96 < 4) && (z_116 
	< t_10) && (z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && (z_696 < 
	t_513) && (z_792 < t_568) && (z_903 < t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 
	+ -2)) && (0 <= (t_241 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 
	<= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) 
	&& (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= 
	(t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_651 + -4)) && (0 <= (t_96 + -2))
	 && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + 
	z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + 
	z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + 
	z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + 
	z_90) <= (z_132 + z_2 + z_32)) && ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + 
	z_792 + z_882) <= (z_3 + z_53 + z_903)) && ((z_1000 + z_595) > t_434) && ((z_150 
	+ z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_132 
	> 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && 
	(z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 
	0) && (z_5 > 0) && (z_53 > 0) && (z_535 > 0) && (z_595 > 0) && (z_651 > 0) && 
	(z_762 > 0) && (z_792 > 0) && (z_90 > 0))
																										DATA{
																											:pid_2:uncoveredExit = 3;
																											:pid_31:node_time = (z_1000 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90);
																											:pid_31:z = z_1000;
																											:pid_31:localTime = (z_0 + z_1000 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90);
																											:pid_31:localPC = (((z_1000 + z_595) == 4) && ((z_150 + z_90) == 4) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && (t_5 < 4) && (t_79 < 8) && (t_434 < 4) && (t_651 < 8) && (t_96 < 4) && (0 <= (t_5 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_434 + -2)) && (0 <= (t_651 + -4)) && (0 <= (t_96 + -2)) && ((z_1000 + z_595) > t_434) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_150 > 0) && (z_185 > 0) && (z_240 > 0) && (z_5 > 0) && (z_535 > 0) && (z_595 > 0) && (z_90 > 0));
																											:pid_32:cl = (z_1000 + z_185 + z_240 + z_535 + z_595);
																											:pid_38:cl = (z_1000 + z_240 + z_535 + z_595);
																											:pid_43:e = 1;
																											:pid_43:tau = 8;
																											:pid_43:c = 0;
																											:pid_43:t = t_651;
																											:pid_43:cl = 0;
																										}
																										EC:<Id:2381;Ev:0;H:26;W:2165>{ SC: ( pid_19:o#15 , ( pid_35:cp1 , pid_41:dp2 , pid_45:dp1 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_80:dp2 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
							EXE: { |;| (:pid_65 , run) (:pid_77 , run) (:pid_79 , 
	run) (:pid_79 , dp_sendDM) (:pid_2 , run) (:pid_18 , run) (:pid_18 , n3_out_DM2) 
	}
																					
							TRACE: { |;| (:pid_65 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_1077 }) (:pid_79 , ${ output inst::Trickle.Node.DataMsg2 [ 
	2 , 2 , 1 ] ${ + param::Trickle.Node.z_1077 param::Trickle.Node.z_132 
	param::Trickle.Node.z_2 param::Trickle.Node.z_32 param::Trickle.Node.z_422 
	param::Trickle.Node.z_447 param::Trickle.Node.z_762 param::Trickle.Node.z_792 
	param::Trickle.Node.z_882 } } @ (z_1077 + z_132 + z_32 + z_422 + z_447 + z_762 + 
	z_792 + z_882)) }
																											/*FLAGS{ COVERAGE-ELEMENT }*/
																											INFO{
																												<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#17->run::pid_19:Trickle.Observer.o#15->prot::Trickle.Observer.o#15" as trace="tpid#17->run::pid_19:Trickle.Observer.o#15->prot::Trickle.Observer.o#15">
																											}
																											PC: (((z_1000 + z_595) == 4) && ((z_1077 + z_792 + z_882) == t_568) && ((z_150 + 
	z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (z_240 == 
	t_96) && (z_595 == t_434) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_241 
	< 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && 
	(t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 
	< 4) && (t_651 < 8) && (t_96 < 4) && (z_116 < t_10) && (z_132 < t_23) && (z_346 
	< t_220) && (z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568) && (z_903 < 
	t_39) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_241 + -2)) && (0 
	<= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) 
	&& (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= 
	(t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)
	) && (0 <= (t_651 + -4)) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + 
	z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 
	+ z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 
	+ z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + 
	z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) 
	&& ((z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882) <= (z_3 + z_53 
	+ z_903)) && ((z_1000 + z_595) > t_434) && ((z_150 + z_90) > t_5) && (z_0 > 0) 
	&& (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_132 > 0) && (z_150 > 0) && 
	(z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0)
	 && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_53 
	> 0) && (z_535 > 0) && (z_595 > 0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) 
	&& (z_882 > 0) && (z_90 > 0))
																											DATA{
																												:pid_2:uncoveredExit = 0;
																												:pid_65:node_time = (z_1077 + z_132 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																												:pid_65:z = z_1077;
																												:pid_65:localTime = (z_1077 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																												:pid_65:localPC = (((z_1077 + z_792 + z_882) == t_568) && ((z_422 + z_447 + z_762 + z_792 + z_882) == t_68) && (t_23 < 4) && (t_68 < 4) && (t_338 < 4) && (t_568 < 4) && (z_132 < t_23) && (z_447 < t_338) && (z_792 < t_568) && (0 <= (t_23 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_568 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && (z_132 > 0) && (z_2 > 0) && (z_32 > 0) && (z_422 > 0) && (z_447 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0));
																												:pid_66:cl = (z_1077 + z_422 + z_447 + z_762 + z_792 + z_882);
																												:pid_72:cl = (z_1077 + z_447 + z_762 + z_792 + z_882);
																												:pid_77:cl = (z_1077 + z_792 + z_882);
																											}
																											BUFFER{
																												:pid_31:bufferNode:<FIFO>#0{
																													:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																													:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1077 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																												}
																												:pid_48:bufferNode:<FIFO>#0{
																													:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																													:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1077 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																												}
																												:pid_82:bufferNode:<FIFO>#0{
																													:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1077 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																												}
																												:pid_99:bufferNode:<FIFO>#0{
																													:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																													:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_1077 + z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																												}
																											}
																										}
																									}
																								}
																							}
																							EC:<Id:1867;Ev:182;H:23;W:1690>{ SC: ( pid_18:o#14 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_69:cp1 , pid_75:dp2 , pid_79:dp1 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
				EXE: { |;| (:pid_65 , run) (:pid_72 , run) (:pid_74 , run) (:pid_74 
	, dp_sendDM) (:pid_2 , run) }
																					
				TRACE: { |;| (:pid_65 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_882 }) (:pid_74 , ${ output inst::Trickle.Node.DataMsg1 [ 
	1 , 1 , 0 ] ${ + param::Trickle.Node.z_132 param::Trickle.Node.z_2 
	param::Trickle.Node.z_32 param::Trickle.Node.z_422 param::Trickle.Node.z_447 
	param::Trickle.Node.z_762 param::Trickle.Node.z_792 param::Trickle.Node.z_882 } }
	 @ (z_132 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882)) }
																								PC: (((z_150 + z_90) == 4) && ((z_447 + z_762 + z_792 + z_882) == t_338) && (z_240 
	== t_96) && (z_595 == t_434) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && 
	(t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) 
	&& (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && 
	(t_96 < 4) && (z_116 < t_10) && (z_132 < t_23) && (z_346 < t_220) && (z_447 < 
	t_338) && (z_696 < t_513) && (z_792 < t_568) && (0 <= (t_10 + -2)) && (0 <= 
	(t_23 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && 
	(0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + 
	-2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 
	<= (t_568 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + 
	z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= 
	(z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_150 
	+ z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_132 
	> 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && 
	(z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 
	0) && (z_5 > 0) && (z_535 > 0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) && 
	(z_90 > 0))
																								DATA{
																									:pid_2:uncoveredExit = 1;
																									:pid_65:node_time = (z_132 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																									:pid_65:z = z_882;
																									:pid_65:localTime = (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																									:pid_65:localPC = (((z_447 + z_762 + z_792 + z_882) == t_338) && (t_23 < 4) && (t_68 < 4) && (t_338 < 4) && (t_568 < 4) && (z_132 < t_23) && (z_447 < t_338) && (z_792 < t_568) && (0 <= (t_23 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_568 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && (z_132 > 0) && (z_2 > 0) && (z_32 > 0) && (z_422 > 0) && (z_447 > 0) && (z_762 > 0) && (z_792 > 0));
																									:pid_66:cl = (z_422 + z_447 + z_762 + z_792 + z_882);
																									:pid_72:cl = (z_447 + z_762 + z_792 + z_882);
																									:pid_77:cl = (z_792 + z_882);
																								}
																								BUFFER{
																									:pid_31:bufferNode:<FIFO>#0{
																										:pid_65:DataMsg1([ 1 , 1 , 0 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																									}
																									:pid_48:bufferNode:<FIFO>#0{
																										:pid_65:DataMsg1([ 1 , 1 , 0 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																									}
																									:pid_82:bufferNode:<FIFO>#0{
																										:pid_65:DataMsg1([ 1 , 1 , 0 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																									}
																									:pid_99:bufferNode:<FIFO>#0{
																										:pid_65:DataMsg1([ 1 , 1 , 0 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																									}
																								}
																								EC:<Id:1924;Ev:0;H:24;W:1742>{ SC: ( pid_18:o#14 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_75:dp2 , pid_79:dp1 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
					EXE: { |;| (:pid_65 , run) (:pid_66 , run) (:pid_69 , run) 
	(:pid_69 , cp_sendCM) (:pid_2 , run) }
																					
					TRACE: { |;| (:pid_65 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_907 }) (:pid_69 , ${ output inst::Trickle.Node.ControlMsg 
	[ 1 , 1 ] ${ + param::Trickle.Node.z_132 param::Trickle.Node.z_2 
	param::Trickle.Node.z_32 param::Trickle.Node.z_422 param::Trickle.Node.z_447 
	param::Trickle.Node.z_762 param::Trickle.Node.z_792 param::Trickle.Node.z_882 
	param::Trickle.Node.z_907 } } @ (z_132 + z_32 + z_422 + z_447 + z_762 + z_792 + 
	z_882 + z_907)) }
																									/*FLAGS{ COVERAGE-ELEMENT }*/
																									INFO{
																										<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#15->Node.ControlProcess->cp1.cp_sendCM" as trace="tpid#15->Node.ControlProcess->cp1.cp_sendCM">
																									}
																									PC: (((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882 + z_907) == 
	t_68) && ((z_447 + z_762 + z_792 + z_882) == t_338) && (z_240 == t_96) && (z_595 
	== t_434) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_39 < 4) && (t_42 < 
	4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && 
	(t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_96 < 4) && (z_116 
	< t_10) && (z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && (z_696 < 
	t_513) && (z_792 < t_568) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= 
	(t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && 
	(0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 
	+ -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && 
	(0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90)
	 <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + 
	z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + 
	z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= 
	(z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + 
	z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_150 + z_90) > t_5)
	 && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_132 > 0) && (z_150 
	> 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && 
	(z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0)
	 && (z_535 > 0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && 
	(z_90 > 0))
																									DATA{
																										:pid_2:uncoveredExit = 2;
																										:pid_65:node_time = (z_132 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882 + z_907);
																										:pid_65:z = z_907;
																										:pid_65:localTime = (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882 + z_907);
																										:pid_65:localPC = (((z_422 + z_447 + z_762 + z_792 + z_882 + z_907) == t_68) && ((z_447 + z_762 + z_792 + z_882) == t_338) && (t_23 < 4) && (t_68 < 4) && (t_338 < 4) && (t_568 < 4) && (z_132 < t_23) && (z_447 < t_338) && (z_792 < t_568) && (0 <= (t_23 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_568 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && (z_132 > 0) && (z_2 > 0) && (z_32 > 0) && (z_422 > 0) && (z_447 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0));
																										:pid_66:cl = (z_422 + z_447 + z_762 + z_792 + z_882 + z_907);
																										:pid_72:cl = (z_447 + z_762 + z_792 + z_882 + z_907);
																										:pid_77:cl = (z_792 + z_882 + z_907);
																									}
																									BUFFER{
																										:pid_31:bufferNode:<FIFO>#0{
																											:pid_65:DataMsg1([ 1 , 1 , 0 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																											:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882 + z_907));
																										}
																										:pid_48:bufferNode:<FIFO>#0{
																											:pid_65:DataMsg1([ 1 , 1 , 0 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																											:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882 + z_907));
																										}
																										:pid_82:bufferNode:<FIFO>#0{
																											:pid_65:DataMsg1([ 1 , 1 , 0 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																											:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882 + z_907));
																										}
																										:pid_99:bufferNode:<FIFO>#0{
																											:pid_65:DataMsg1([ 1 , 1 , 0 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																											:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882 + z_907));
																										}
																									}
																								}
																							}
																							EC:<Id:1868;Ev:183;H:23;W:1691>{ SC: ( pid_19:o#15 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_69:cp1 , pid_74:dp1 , pid_80:dp2 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
				EXE: { |;| (:pid_65 , run) (:pid_77 , run) (:pid_79 , run) (:pid_79 
	, dp_sendDM) (:pid_2 , run) (:pid_18 , run) (:pid_18 , n3_out_DM2) }
																					
				TRACE: { |;| (:pid_65 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_882 }) (:pid_79 , ${ output inst::Trickle.Node.DataMsg2 [ 
	2 , 2 , 1 ] ${ + param::Trickle.Node.z_132 param::Trickle.Node.z_2 
	param::Trickle.Node.z_32 param::Trickle.Node.z_422 param::Trickle.Node.z_447 
	param::Trickle.Node.z_762 param::Trickle.Node.z_792 param::Trickle.Node.z_882 } }
	 @ (z_132 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882)) }
																								PC: (((z_150 + z_90) == 4) && ((z_792 + z_882) == t_568) && (z_240 == t_96) && 
	(z_595 == t_434) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_39 < 4) && 
	(t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) 
	&& (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_96 < 4) && 
	(z_116 < t_10) && (z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && (z_696 
	< t_513) && (z_792 < t_568) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= 
	(t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && 
	(0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 
	+ -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && 
	(0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90)
	 <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + 
	z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + 
	z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= 
	(z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + 
	z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_150 + z_90) > t_5)
	 && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_132 > 0) && (z_150 
	> 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && 
	(z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0)
	 && (z_535 > 0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) && (z_90 > 0))
																								DATA{
																									:pid_2:uncoveredExit = 0;
																									:pid_65:node_time = (z_132 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																									:pid_65:z = z_882;
																									:pid_65:localTime = (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882);
																									:pid_65:localPC = (((z_792 + z_882) == t_568) && (t_23 < 4) && (t_68 < 4) && (t_338 < 4) && (t_568 < 4) && (z_132 < t_23) && (z_447 < t_338) && (z_792 < t_568) && (0 <= (t_23 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_568 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && (z_132 > 0) && (z_2 > 0) && (z_32 > 0) && (z_422 > 0) && (z_447 > 0) && (z_762 > 0) && (z_792 > 0));
																									:pid_66:cl = (z_422 + z_447 + z_762 + z_792 + z_882);
																									:pid_72:cl = (z_447 + z_762 + z_792 + z_882);
																									:pid_77:cl = (z_792 + z_882);
																								}
																								BUFFER{
																									:pid_31:bufferNode:<FIFO>#0{
																										:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																									}
																									:pid_48:bufferNode:<FIFO>#0{
																										:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																									}
																									:pid_82:bufferNode:<FIFO>#0{
																										:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																									}
																									:pid_99:bufferNode:<FIFO>#0{
																										:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																									}
																								}
																								EC:<Id:1935;Ev:0;H:24;W:1752>{ SC: ( pid_19:o#15 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_80:dp2 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
					EXE: { |;| (:pid_65 , run) (:pid_66 , run) (:pid_69 , run) 
	(:pid_69 , cp_sendCM) (:pid_2 , run) }
																					
					TRACE: { |;| (:pid_65 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_912 }) (:pid_69 , ${ output inst::Trickle.Node.ControlMsg 
	[ 1 , 1 ] ${ + param::Trickle.Node.z_132 param::Trickle.Node.z_2 
	param::Trickle.Node.z_32 param::Trickle.Node.z_422 param::Trickle.Node.z_447 
	param::Trickle.Node.z_762 param::Trickle.Node.z_792 param::Trickle.Node.z_882 
	param::Trickle.Node.z_912 } } @ (z_132 + z_32 + z_422 + z_447 + z_762 + z_792 + 
	z_882 + z_912)) }
																									/*FLAGS{ COVERAGE-ELEMENT }*/
																									INFO{
																										<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#15->Node.ControlProcess->cp1.cp_sendCM" as trace="tpid#15->Node.ControlProcess->cp1.cp_sendCM">
																									}
																									PC: (((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_882 + z_912) == 
	t_68) && ((z_792 + z_882) == t_568) && (z_240 == t_96) && (z_595 == t_434) && 
	(z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 
	4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && 
	(t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_96 < 4) && (z_116 < t_10) && 
	(z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && 
	(z_792 < t_568) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_39 + -2))
	 && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 
	+ -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 
	<= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_96 + 
	-2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + 
	z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + 
	z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + 
	z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + 
	z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 
	+ z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && 
	(z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_132 > 0) && (z_150 > 0) && (z_185 > 
	0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && 
	(z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_535 > 
	0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0) && (z_90 > 0))
																									DATA{
																										:pid_2:uncoveredExit = 1;
																										:pid_65:node_time = (z_132 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882 + z_912);
																										:pid_65:z = z_912;
																										:pid_65:localTime = (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882 + z_912);
																										:pid_65:localPC = (((z_422 + z_447 + z_762 + z_792 + z_882 + z_912) == t_68) && ((z_792 + z_882) == t_568) && (t_23 < 4) && (t_68 < 4) && (t_338 < 4) && (t_568 < 4) && (z_132 < t_23) && (z_447 < t_338) && (z_792 < t_568) && (0 <= (t_23 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_568 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && (z_132 > 0) && (z_2 > 0) && (z_32 > 0) && (z_422 > 0) && (z_447 > 0) && (z_762 > 0) && (z_792 > 0) && (z_882 > 0));
																										:pid_66:cl = (z_422 + z_447 + z_762 + z_792 + z_882 + z_912);
																										:pid_72:cl = (z_447 + z_762 + z_792 + z_882 + z_912);
																										:pid_77:cl = (z_792 + z_882 + z_912);
																									}
																									BUFFER{
																										:pid_31:bufferNode:<FIFO>#0{
																											:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																											:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882 + z_912));
																										}
																										:pid_48:bufferNode:<FIFO>#0{
																											:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																											:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882 + z_912));
																										}
																										:pid_82:bufferNode:<FIFO>#0{
																											:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																											:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882 + z_912));
																										}
																										:pid_99:bufferNode:<FIFO>#0{
																											:pid_65:DataMsg2([ 2 , 2 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882));
																											:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_882 + z_912));
																										}
																									}
																								}
																							}
																							EC:<Id:1869;Ev:184;H:23;W:1692>{ SC: ( pid_18:o#14 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_53:cp2 , pid_57:dp1 , pid_62:dp1 ) , ( pid_69:cp1 , pid_74:dp1 , pid_79:dp1 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
				EXE: { |;| (:pid_48 , run) (:pid_49 , run) (:pid_52 , run) (:pid_52 
	, cp_sendCM) (:pid_2 , run) }
																					
				TRACE: { |;| (:pid_48 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_881 }) (:pid_52 , ${ output inst::Trickle.Node.ControlMsg 
	[ 1 , 1 ] ${ + param::Trickle.Node.z_1 param::Trickle.Node.z_11 
	param::Trickle.Node.z_116 param::Trickle.Node.z_306 param::Trickle.Node.z_346 
	param::Trickle.Node.z_651 param::Trickle.Node.z_696 param::Trickle.Node.z_881 } }
	 @ (z_11 + z_116 + z_306 + z_346 + z_651 + z_696 + z_881)) }
																								PC: (((z_150 + z_90) == 4) && ((z_306 + z_346 + z_651 + z_696 + z_881) == t_65) && 
	(z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) 
	&& (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 
	8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && 
	(t_96 < 4) && (z_116 < t_10) && (z_132 < t_23) && (z_346 < t_220) && (z_447 < 
	t_338) && (z_696 < t_513) && (z_792 < t_568) && (0 <= (t_10 + -2)) && (0 <= 
	(t_23 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && 
	(0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + 
	-2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 
	<= (t_568 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + 
	z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= 
	(z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_150 
	+ z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_132 
	> 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && 
	(z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 
	0) && (z_5 > 0) && (z_535 > 0) && (z_651 > 0) && (z_696 > 0) && (z_762 > 0) && 
	(z_90 > 0))
																								DATA{
																									:pid_2:uncoveredExit = 1;
																									:pid_48:node_time = (z_11 + z_116 + z_306 + z_346 + z_651 + z_696 + z_881);
																									:pid_48:z = z_881;
																									:pid_48:localTime = (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696 + z_881);
																									:pid_48:localPC = (((z_306 + z_346 + z_651 + z_696 + z_881) == t_65) && (t_10 < 4) && (t_65 < 4) && (t_220 < 4) && (t_513 < 4) && (z_116 < t_10) && (z_346 < t_220) && (z_696 < t_513) && (0 <= (t_10 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_220 + -2)) && (0 <= (t_513 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_306 > 0) && (z_346 > 0) && (z_651 > 0) && (z_696 > 0));
																									:pid_49:cl = (z_306 + z_346 + z_651 + z_696 + z_881);
																									:pid_55:cl = (z_346 + z_651 + z_696 + z_881);
																									:pid_60:cl = (z_696 + z_881);
																								}
																								BUFFER{
																									:pid_65:bufferNode:<FIFO>#0{
																										:pid_48:ControlMsg([ 1 , 1 ] , (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696 + z_881));
																									}
																								}
																								EC:<Id:1947;Ev:0;H:24;W:1763>{ SC: ( pid_18:o#14 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_53:cp2 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_79:dp1 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
					EXE: { |;| (:pid_65 , run) (:pid_66 , run) (:pid_69 , run) 
	(:pid_69 , cp_sendCM) (:pid_2 , run) }
																					
					TRACE: { |;| (:pid_65 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_917 }) (:pid_69 , ${ output inst::Trickle.Node.ControlMsg 
	[ 1 , 1 ] ${ + param::Trickle.Node.z_132 param::Trickle.Node.z_2 
	param::Trickle.Node.z_32 param::Trickle.Node.z_422 param::Trickle.Node.z_447 
	param::Trickle.Node.z_762 param::Trickle.Node.z_792 param::Trickle.Node.z_917 } }
	 @ (z_132 + z_32 + z_422 + z_447 + z_762 + z_792 + z_917)) }
																									/*FLAGS{ COVERAGE-ELEMENT }*/
																									INFO{
																										<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#15->Node.ControlProcess->cp1.cp_sendCM" as trace="tpid#15->Node.ControlProcess->cp1.cp_sendCM">
																									}
																									PC: (((z_150 + z_90) == 4) && ((z_306 + z_346 + z_651 + z_696 + z_881) == t_65) && 
	((z_422 + z_447 + z_762 + z_792 + z_917) == t_68) && (z_240 == t_96) && (z_595 
	== t_434) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_39 < 4) && (t_42 < 
	4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && 
	(t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_96 < 4) && (z_116 
	< t_10) && (z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && (z_696 < 
	t_513) && (z_792 < t_568) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= 
	(t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && 
	(0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 
	+ -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && 
	(0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90)
	 <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + 
	z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + 
	z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= 
	(z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + 
	z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_150 + z_90) > t_5)
	 && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_132 > 0) && (z_150 
	> 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && 
	(z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0)
	 && (z_535 > 0) && (z_651 > 0) && (z_696 > 0) && (z_762 > 0) && (z_792 > 0) && 
	(z_90 > 0))
																									DATA{
																										:pid_2:uncoveredExit = 2;
																										:pid_65:node_time = (z_132 + z_32 + z_422 + z_447 + z_762 + z_792 + z_917);
																										:pid_65:z = z_917;
																										:pid_65:localTime = (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_917);
																										:pid_65:localPC = (((z_422 + z_447 + z_762 + z_792 + z_917) == t_68) && (t_23 < 4) && (t_68 < 4) && (t_338 < 4) && (t_568 < 4) && (z_132 < t_23) && (z_447 < t_338) && (z_792 < t_568) && (0 <= (t_23 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_568 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && (z_132 > 0) && (z_2 > 0) && (z_32 > 0) && (z_422 > 0) && (z_447 > 0) && (z_762 > 0) && (z_792 > 0));
																										:pid_66:cl = (z_422 + z_447 + z_762 + z_792 + z_917);
																										:pid_72:cl = (z_447 + z_762 + z_792 + z_917);
																										:pid_77:cl = (z_792 + z_917);
																									}
																									BUFFER{
																										:pid_31:bufferNode:<FIFO>#0{
																											:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_917));
																										}
																										:pid_48:bufferNode:<FIFO>#0{
																											:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_917));
																										}
																										:pid_82:bufferNode:<FIFO>#0{
																											:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_917));
																										}
																										:pid_99:bufferNode:<FIFO>#0{
																											:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_917));
																										}
																									}
																								}
																							}
																							EC:<Id:1870;Ev:185;H:23;W:1693>{ SC: ( pid_18:o#14 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_58:dp2 , pid_62:dp1 ) , ( pid_69:cp1 , pid_74:dp1 , pid_79:dp1 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
				EXE: { |;| (:pid_48 , run) (:pid_55 , run) (:pid_57 , run) (:pid_57 
	, dp_sendDM) (:pid_2 , run) }
																					
				TRACE: { |;| (:pid_48 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_881 }) (:pid_57 , ${ output inst::Trickle.Node.DataMsg1 [ 
	1 , 1 , 0 ] ${ + param::Trickle.Node.z_1 param::Trickle.Node.z_11 
	param::Trickle.Node.z_116 param::Trickle.Node.z_306 param::Trickle.Node.z_346 
	param::Trickle.Node.z_651 param::Trickle.Node.z_696 param::Trickle.Node.z_881 } }
	 @ (z_11 + z_116 + z_306 + z_346 + z_651 + z_696 + z_881)) }
																								PC: (((z_150 + z_90) == 4) && ((z_346 + z_651 + z_696 + z_881) == t_220) && (z_240 
	== t_96) && (z_595 == t_434) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && 
	(t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) 
	&& (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && 
	(t_96 < 4) && (z_116 < t_10) && (z_132 < t_23) && (z_346 < t_220) && (z_447 < 
	t_338) && (z_696 < t_513) && (z_792 < t_568) && (0 <= (t_10 + -2)) && (0 <= 
	(t_23 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && 
	(0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + 
	-2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 
	<= (t_568 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + 
	z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= 
	(z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_150 
	+ z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_132 
	> 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && 
	(z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 
	0) && (z_5 > 0) && (z_535 > 0) && (z_651 > 0) && (z_696 > 0) && (z_762 > 0) && 
	(z_90 > 0))
																								DATA{
																									:pid_2:uncoveredExit = 1;
																									:pid_48:node_time = (z_11 + z_116 + z_306 + z_346 + z_651 + z_696 + z_881);
																									:pid_48:z = z_881;
																									:pid_48:localTime = (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696 + z_881);
																									:pid_48:localPC = (((z_346 + z_651 + z_696 + z_881) == t_220) && (t_10 < 4) && (t_65 < 4) && (t_220 < 4) && (t_513 < 4) && (z_116 < t_10) && (z_346 < t_220) && (z_696 < t_513) && (0 <= (t_10 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_220 + -2)) && (0 <= (t_513 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_306 > 0) && (z_346 > 0) && (z_651 > 0) && (z_696 > 0));
																									:pid_49:cl = (z_306 + z_346 + z_651 + z_696 + z_881);
																									:pid_55:cl = (z_346 + z_651 + z_696 + z_881);
																									:pid_60:cl = (z_696 + z_881);
																								}
																								BUFFER{
																									:pid_65:bufferNode:<FIFO>#0{
																										:pid_48:DataMsg1([ 1 , 1 , 0 ] , (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696 + z_881));
																									}
																								}
																								EC:<Id:1958;Ev:0;H:24;W:1773>{ SC: ( pid_18:o#14 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_58:dp2 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_79:dp1 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
					EXE: { |;| (:pid_65 , run) (:pid_66 , run) (:pid_69 , run) 
	(:pid_69 , cp_sendCM) (:pid_2 , run) }
																					
					TRACE: { |;| (:pid_65 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_922 }) (:pid_69 , ${ output inst::Trickle.Node.ControlMsg 
	[ 1 , 1 ] ${ + param::Trickle.Node.z_132 param::Trickle.Node.z_2 
	param::Trickle.Node.z_32 param::Trickle.Node.z_422 param::Trickle.Node.z_447 
	param::Trickle.Node.z_762 param::Trickle.Node.z_792 param::Trickle.Node.z_922 } }
	 @ (z_132 + z_32 + z_422 + z_447 + z_762 + z_792 + z_922)) }
																									/*FLAGS{ COVERAGE-ELEMENT }*/
																									INFO{
																										<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#15->Node.ControlProcess->cp1.cp_sendCM" as trace="tpid#15->Node.ControlProcess->cp1.cp_sendCM">
																									}
																									PC: (((z_150 + z_90) == 4) && ((z_346 + z_651 + z_696 + z_881) == t_220) && ((z_422 
	+ z_447 + z_762 + z_792 + z_922) == t_68) && (z_240 == t_96) && (z_595 == t_434) 
	&& (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 
	< 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && 
	(t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_96 < 4) && (z_116 < t_10) && 
	(z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && 
	(z_792 < t_568) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_39 + -2))
	 && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 
	+ -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 
	<= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_96 + 
	-2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + 
	z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + 
	z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + 
	z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + 
	z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 
	+ z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && 
	(z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_132 > 0) && (z_150 > 0) && (z_185 > 
	0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && 
	(z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_535 > 
	0) && (z_651 > 0) && (z_696 > 0) && (z_762 > 0) && (z_792 > 0) && (z_90 > 0))
																									DATA{
																										:pid_2:uncoveredExit = 2;
																										:pid_65:node_time = (z_132 + z_32 + z_422 + z_447 + z_762 + z_792 + z_922);
																										:pid_65:z = z_922;
																										:pid_65:localTime = (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_922);
																										:pid_65:localPC = (((z_422 + z_447 + z_762 + z_792 + z_922) == t_68) && (t_23 < 4) && (t_68 < 4) && (t_338 < 4) && (t_568 < 4) && (z_132 < t_23) && (z_447 < t_338) && (z_792 < t_568) && (0 <= (t_23 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_568 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && (z_132 > 0) && (z_2 > 0) && (z_32 > 0) && (z_422 > 0) && (z_447 > 0) && (z_762 > 0) && (z_792 > 0));
																										:pid_66:cl = (z_422 + z_447 + z_762 + z_792 + z_922);
																										:pid_72:cl = (z_447 + z_762 + z_792 + z_922);
																										:pid_77:cl = (z_792 + z_922);
																									}
																									BUFFER{
																										:pid_31:bufferNode:<FIFO>#0{
																											:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_922));
																										}
																										:pid_48:bufferNode:<FIFO>#0{
																											:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_922));
																										}
																										:pid_82:bufferNode:<FIFO>#0{
																											:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_922));
																										}
																										:pid_99:bufferNode:<FIFO>#0{
																											:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_922));
																										}
																									}
																								}
																							}
																							EC:<Id:1871;Ev:186;H:23;W:1694>{ SC: ( pid_18:o#14 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_63:dp2 ) , ( pid_69:cp1 , pid_74:dp1 , pid_79:dp1 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
				EXE: { |;| (:pid_48 , run) (:pid_60 , run) (:pid_62 , run) (:pid_62 
	, dp_sendDM) (:pid_2 , run) }
																					
				TRACE: { |;| (:pid_48 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_881 }) (:pid_62 , ${ output inst::Trickle.Node.DataMsg2 [ 
	2 , 2 , 1 ] ${ + param::Trickle.Node.z_1 param::Trickle.Node.z_11 
	param::Trickle.Node.z_116 param::Trickle.Node.z_306 param::Trickle.Node.z_346 
	param::Trickle.Node.z_651 param::Trickle.Node.z_696 param::Trickle.Node.z_881 } }
	 @ (z_11 + z_116 + z_306 + z_346 + z_651 + z_696 + z_881)) }
																								PC: (((z_150 + z_90) == 4) && ((z_696 + z_881) == t_513) && (z_240 == t_96) && 
	(z_595 == t_434) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_39 < 4) && 
	(t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) 
	&& (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_96 < 4) && 
	(z_116 < t_10) && (z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && (z_696 
	< t_513) && (z_792 < t_568) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= 
	(t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && 
	(0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 
	+ -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && 
	(0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90)
	 <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + 
	z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + 
	z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= 
	(z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + 
	z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_150 + z_90) > t_5)
	 && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_132 > 0) && (z_150 
	> 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && 
	(z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0)
	 && (z_535 > 0) && (z_651 > 0) && (z_696 > 0) && (z_762 > 0) && (z_90 > 0))
																								DATA{
																									:pid_2:uncoveredExit = 1;
																									:pid_48:node_time = (z_11 + z_116 + z_306 + z_346 + z_651 + z_696 + z_881);
																									:pid_48:z = z_881;
																									:pid_48:localTime = (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696 + z_881);
																									:pid_48:localPC = (((z_696 + z_881) == t_513) && (t_10 < 4) && (t_65 < 4) && (t_220 < 4) && (t_513 < 4) && (z_116 < t_10) && (z_346 < t_220) && (z_696 < t_513) && (0 <= (t_10 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_220 + -2)) && (0 <= (t_513 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_306 > 0) && (z_346 > 0) && (z_651 > 0) && (z_696 > 0));
																									:pid_49:cl = (z_306 + z_346 + z_651 + z_696 + z_881);
																									:pid_55:cl = (z_346 + z_651 + z_696 + z_881);
																									:pid_60:cl = (z_696 + z_881);
																								}
																								BUFFER{
																									:pid_65:bufferNode:<FIFO>#0{
																										:pid_48:DataMsg2([ 2 , 2 , 1 ] , (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696 + z_881));
																									}
																								}
																								EC:<Id:1969;Ev:0;H:24;W:1783>{ SC: ( pid_18:o#14 , ( pid_35:cp1 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_63:dp2 ) , ( pid_70:cp2 , pid_74:dp1 , pid_79:dp1 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
					EXE: { |;| (:pid_65 , run) (:pid_66 , run) (:pid_69 , run) 
	(:pid_69 , cp_sendCM) (:pid_2 , run) }
																					
					TRACE: { |;| (:pid_65 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_927 }) (:pid_69 , ${ output inst::Trickle.Node.ControlMsg 
	[ 1 , 1 ] ${ + param::Trickle.Node.z_132 param::Trickle.Node.z_2 
	param::Trickle.Node.z_32 param::Trickle.Node.z_422 param::Trickle.Node.z_447 
	param::Trickle.Node.z_762 param::Trickle.Node.z_792 param::Trickle.Node.z_927 } }
	 @ (z_132 + z_32 + z_422 + z_447 + z_762 + z_792 + z_927)) }
																									/*FLAGS{ COVERAGE-ELEMENT }*/
																									INFO{
																										<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#15->Node.ControlProcess->cp1.cp_sendCM" as trace="tpid#15->Node.ControlProcess->cp1.cp_sendCM">
																									}
																									PC: (((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_927) == t_68) && 
	((z_696 + z_881) == t_513) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == 
	t_5) && (t_10 < 4) && (t_23 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && 
	(t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 
	4) && (t_513 < 4) && (t_568 < 4) && (t_96 < 4) && (z_116 < t_10) && (z_132 < 
	t_23) && (z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && (z_792 < t_568)
	 && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_39 + -2)) && (0 <= 
	(t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && 
	(0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 
	+ -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_96 + -2)) && 
	((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + 
	z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + 
	z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + 
	z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + 
	z_90) <= (z_132 + z_2 + z_32)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_1 > 
	0) && (z_11 > 0) && (z_116 > 0) && (z_132 > 0) && (z_150 > 0) && (z_185 > 0) && 
	(z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0)
	 && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_535 > 0) && 
	(z_651 > 0) && (z_696 > 0) && (z_762 > 0) && (z_792 > 0) && (z_90 > 0))
																									DATA{
																										:pid_2:uncoveredExit = 2;
																										:pid_65:node_time = (z_132 + z_32 + z_422 + z_447 + z_762 + z_792 + z_927);
																										:pid_65:z = z_927;
																										:pid_65:localTime = (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_927);
																										:pid_65:localPC = (((z_422 + z_447 + z_762 + z_792 + z_927) == t_68) && (t_23 < 4) && (t_68 < 4) && (t_338 < 4) && (t_568 < 4) && (z_132 < t_23) && (z_447 < t_338) && (z_792 < t_568) && (0 <= (t_23 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_568 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && (z_132 > 0) && (z_2 > 0) && (z_32 > 0) && (z_422 > 0) && (z_447 > 0) && (z_762 > 0) && (z_792 > 0));
																										:pid_66:cl = (z_422 + z_447 + z_762 + z_792 + z_927);
																										:pid_72:cl = (z_447 + z_762 + z_792 + z_927);
																										:pid_77:cl = (z_792 + z_927);
																									}
																									BUFFER{
																										:pid_31:bufferNode:<FIFO>#0{
																											:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_927));
																										}
																										:pid_48:bufferNode:<FIFO>#0{
																											:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_927));
																										}
																										:pid_82:bufferNode:<FIFO>#0{
																											:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_927));
																										}
																										:pid_99:bufferNode:<FIFO>#0{
																											:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_927));
																										}
																									}
																								}
																							}
																							EC:<Id:1872;Ev:187;H:23;W:1695>{ SC: ( pid_18:o#14 , ( pid_36:cp2 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_69:cp1 , pid_74:dp1 , pid_79:dp1 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
				EXE: { |;| (:pid_31 , run) (:pid_32 , run) (:pid_35 , run) (:pid_35 
	, cp_sendCM) (:pid_2 , run) }
																					
				TRACE: { |;| (:pid_31 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_880 }) (:pid_35 , ${ output inst::Trickle.Node.ControlMsg 
	[ 1 , 1 ] ${ + param::Trickle.Node.z_0 param::Trickle.Node.z_150 
	param::Trickle.Node.z_185 param::Trickle.Node.z_240 param::Trickle.Node.z_5 
	param::Trickle.Node.z_535 param::Trickle.Node.z_595 param::Trickle.Node.z_880 
	param::Trickle.Node.z_90 } } @ (z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + 
	z_880 + z_90)) }
																								PC: (((z_150 + z_90) == 4) && ((z_185 + z_240 + z_535 + z_595 + z_880) == t_79) && 
	(z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) 
	&& (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 
	8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && 
	(t_96 < 4) && (z_116 < t_10) && (z_132 < t_23) && (z_346 < t_220) && (z_447 < 
	t_338) && (z_696 < t_513) && (z_792 < t_568) && (0 <= (t_10 + -2)) && (0 <= 
	(t_23 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && 
	(0 <= (t_65 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + 
	-2)) && (0 <= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 
	<= (t_568 + -2)) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) 
	&& ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + 
	z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + 
	z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 
	+ z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= 
	(z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_150 
	+ z_90) > t_5) && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_132 
	> 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && 
	(z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 
	0) && (z_5 > 0) && (z_535 > 0) && (z_595 > 0) && (z_651 > 0) && (z_762 > 0) && 
	(z_90 > 0))
																								DATA{
																									:pid_2:uncoveredExit = 1;
																									:pid_31:node_time = (z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_880 + z_90);
																									:pid_31:z = z_880;
																									:pid_31:localTime = (z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_880 + z_90);
																									:pid_31:localPC = (((z_150 + z_90) == 4) && ((z_185 + z_240 + z_535 + z_595 + z_880) == t_79) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && (t_5 < 4) && (t_79 < 8) && (t_434 < 4) && (t_96 < 4) && (0 <= (t_5 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_434 + -2)) && (0 <= (t_96 + -2)) && ((z_150 + z_90) > t_5) && (z_0 > 0) && (z_150 > 0) && (z_185 > 0) && (z_240 > 0) && (z_5 > 0) && (z_535 > 0) && (z_595 > 0) && (z_90 > 0));
																									:pid_32:cl = (z_185 + z_240 + z_535 + z_595 + z_880);
																									:pid_38:cl = (z_240 + z_535 + z_595 + z_880);
																									:pid_43:cl = (z_595 + z_880);
																								}
																								BUFFER{
																									:pid_48:bufferNode:<FIFO>#0{
																										:pid_31:ControlMsg([ 1 , 1 ] , (z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_880 + z_90));
																									}
																									:pid_65:bufferNode:<FIFO>#0{
																										:pid_31:ControlMsg([ 1 , 1 ] , (z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_880 + z_90));
																									}
																								}
																								EC:<Id:1980;Ev:0;H:24;W:1793>{ SC: ( pid_18:o#14 , ( pid_36:cp2 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_79:dp1 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
					EXE: { |;| (:pid_65 , run) (:pid_66 , run) (:pid_69 , run) 
	(:pid_69 , cp_sendCM) (:pid_2 , run) }
																					
					TRACE: { |;| (:pid_65 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_932 }) (:pid_69 , ${ output inst::Trickle.Node.ControlMsg 
	[ 1 , 1 ] ${ + param::Trickle.Node.z_132 param::Trickle.Node.z_2 
	param::Trickle.Node.z_32 param::Trickle.Node.z_422 param::Trickle.Node.z_447 
	param::Trickle.Node.z_762 param::Trickle.Node.z_792 param::Trickle.Node.z_932 } }
	 @ (z_132 + z_32 + z_422 + z_447 + z_762 + z_792 + z_932)) }
																									/*FLAGS{ COVERAGE-ELEMENT }*/
																									INFO{
																										<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#15->Node.ControlProcess->cp1.cp_sendCM" as trace="tpid#15->Node.ControlProcess->cp1.cp_sendCM">
																									}
																									PC: (((z_150 + z_90) == 4) && ((z_185 + z_240 + z_535 + z_595 + z_880) == t_79) && 
	((z_422 + z_447 + z_762 + z_792 + z_932) == t_68) && (z_240 == t_96) && (z_595 
	== t_434) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_39 < 4) && (t_42 < 
	4) && (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && 
	(t_338 < 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_96 < 4) && (z_116 
	< t_10) && (z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && (z_696 < 
	t_513) && (z_792 < t_568) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= 
	(t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && 
	(0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 
	+ -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && 
	(0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90)
	 <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 + z_150 + 
	z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + 
	z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_1 + 
	z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= 
	(z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + 
	z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_150 + z_90) > t_5)
	 && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_132 > 0) && (z_150 
	> 0) && (z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && 
	(z_32 > 0) && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0)
	 && (z_535 > 0) && (z_595 > 0) && (z_651 > 0) && (z_762 > 0) && (z_792 > 0) && 
	(z_90 > 0))
																									DATA{
																										:pid_2:uncoveredExit = 2;
																										:pid_65:node_time = (z_132 + z_32 + z_422 + z_447 + z_762 + z_792 + z_932);
																										:pid_65:z = z_932;
																										:pid_65:localTime = (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_932);
																										:pid_65:localPC = (((z_422 + z_447 + z_762 + z_792 + z_932) == t_68) && (t_23 < 4) && (t_68 < 4) && (t_338 < 4) && (t_568 < 4) && (z_132 < t_23) && (z_447 < t_338) && (z_792 < t_568) && (0 <= (t_23 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_568 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && (z_132 > 0) && (z_2 > 0) && (z_32 > 0) && (z_422 > 0) && (z_447 > 0) && (z_762 > 0) && (z_792 > 0));
																										:pid_66:cl = (z_422 + z_447 + z_762 + z_792 + z_932);
																										:pid_72:cl = (z_447 + z_762 + z_792 + z_932);
																										:pid_77:cl = (z_792 + z_932);
																									}
																									BUFFER{
																										:pid_31:bufferNode:<FIFO>#0{
																											:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_932));
																										}
																										:pid_48:bufferNode:<FIFO>#0{
																											:pid_31:ControlMsg([ 1 , 1 ] , (z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_880 + z_90));
																											:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_932));
																										}
																										:pid_82:bufferNode:<FIFO>#0{
																											:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_932));
																										}
																										:pid_99:bufferNode:<FIFO>#0{
																											:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_932));
																										}
																									}
																								}
																							}
																							EC:<Id:1873;Ev:188;H:23;W:1696>{ SC: ( pid_18:o#14 , ( pid_35:cp1 , pid_41:dp2 , pid_45:dp1 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_69:cp1 , pid_74:dp1 , pid_79:dp1 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
				EXE: { |;| (:pid_31 , run) (:pid_43 , run) (:pid_46 , run) (:pid_46 
	, dp_resetTau) (:pid_2 , run) }
																					
				TRACE: { |;| (:pid_31 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_880 }) (:pid_46 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_619 }) }
																								PC: (((z_150 + z_90) == 4) && ((z_595 + z_880) == 4) && (z_240 == t_96) && (z_595 == 
	t_434) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_39 < 4) && (t_42 < 4) 
	&& (t_5 < 4) && (t_65 < 4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 
	< 4) && (t_434 < 4) && (t_513 < 4) && (t_568 < 4) && (t_619 < 8) && (t_96 < 4) 
	&& (z_116 < t_10) && (z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && 
	(z_696 < t_513) && (z_792 < t_568) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) 
	&& (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 
	+ -2)) && (0 <= (t_68 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 
	<= (t_338 + -2)) && (0 <= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + 
	-2)) && (0 <= (t_619 + -4)) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + 
	z_240 + z_5 + z_535 + z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + 
	z_651 + z_696)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) 
	<= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + 
	z_185 + z_240 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + 
	z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && 
	((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + 
	z_2 + z_32)) && ((z_150 + z_90) > t_5) && ((z_595 + z_880) > t_434) && (z_0 > 0) 
	&& (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_132 > 0) && (z_150 > 0) && 
	(z_185 > 0) && (z_2 > 0) && (z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0)
	 && (z_346 > 0) && (z_4 > 0) && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && 
	(z_535 > 0) && (z_595 > 0) && (z_651 > 0) && (z_762 > 0) && (z_90 > 0))
																								DATA{
																									:pid_2:uncoveredExit = 1;
																									:pid_31:node_time = (z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_880 + z_90);
																									:pid_31:z = z_880;
																									:pid_31:localTime = (z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_880 + z_90);
																									:pid_31:localPC = (((z_150 + z_90) == 4) && ((z_595 + z_880) == 4) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) && (t_5 < 4) && (t_79 < 8) && (t_434 < 4) && (t_619 < 8) && (t_96 < 4) && (0 <= (t_5 + -2)) && (0 <= (t_79 + -4)) && (0 <= (t_434 + -2)) && (0 <= (t_619 + -4)) && (0 <= (t_96 + -2)) && ((z_150 + z_90) > t_5) && ((z_595 + z_880) > t_434) && (z_0 > 0) && (z_150 > 0) && (z_185 > 0) && (z_240 > 0) && (z_5 > 0) && (z_535 > 0) && (z_595 > 0) && (z_90 > 0));
																									:pid_32:cl = (z_185 + z_240 + z_535 + z_595 + z_880);
																									:pid_38:cl = (z_240 + z_535 + z_595 + z_880);
																									:pid_43:e = 1;
																									:pid_43:tau = 8;
																									:pid_43:c = 0;
																									:pid_43:t = t_619;
																									:pid_43:cl = 0;
																								}
																								EC:<Id:1992;Ev:0;H:24;W:1804>{ SC: ( pid_18:o#14 , ( pid_35:cp1 , pid_41:dp2 , pid_45:dp1 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_79:dp1 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
					EXE: { |;| (:pid_65 , run) (:pid_66 , run) (:pid_69 , run) 
	(:pid_69 , cp_sendCM) (:pid_2 , run) }
																					
					TRACE: { |;| (:pid_65 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_937 }) (:pid_69 , ${ output inst::Trickle.Node.ControlMsg 
	[ 1 , 1 ] ${ + param::Trickle.Node.z_132 param::Trickle.Node.z_2 
	param::Trickle.Node.z_32 param::Trickle.Node.z_422 param::Trickle.Node.z_447 
	param::Trickle.Node.z_762 param::Trickle.Node.z_792 param::Trickle.Node.z_937 } }
	 @ (z_132 + z_32 + z_422 + z_447 + z_762 + z_792 + z_937)) }
																									/*FLAGS{ COVERAGE-ELEMENT }*/
																									INFO{
																										<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#15->Node.ControlProcess->cp1.cp_sendCM" as trace="tpid#15->Node.ControlProcess->cp1.cp_sendCM">
																									}
																									PC: (((z_150 + z_90) == 4) && ((z_422 + z_447 + z_762 + z_792 + z_937) == t_68) && 
	((z_595 + z_880) == 4) && (z_240 == t_96) && (z_595 == t_434) && (z_90 == t_5) 
	&& (t_10 < 4) && (t_23 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 
	4) && (t_68 < 4) && (t_79 < 8) && (t_220 < 4) && (t_338 < 4) && (t_434 < 4) && 
	(t_513 < 4) && (t_568 < 4) && (t_619 < 8) && (t_96 < 4) && (z_116 < t_10) && 
	(z_132 < t_23) && (z_346 < t_220) && (z_447 < t_338) && (z_696 < t_513) && 
	(z_792 < t_568) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_39 + -2))
	 && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_68 
	+ -2)) && (0 <= (t_79 + -4)) && (0 <= (t_220 + -2)) && (0 <= (t_338 + -2)) && (0 
	<= (t_434 + -2)) && (0 <= (t_513 + -2)) && (0 <= (t_568 + -2)) && (0 <= (t_619 + 
	-4)) && (0 <= (t_96 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + 
	z_595 + z_90) <= (z_1 + z_11 + z_116 + z_306 + z_346 + z_651 + z_696)) && ((z_0 
	+ z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + 
	z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) 
	<= (z_1 + z_11 + z_116 + z_306 + z_346)) && ((z_0 + z_150 + z_185 + z_240 + z_5 
	+ z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_1 
	+ z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && ((z_150 + 
	z_90) > t_5) && ((z_595 + z_880) > t_434) && (z_0 > 0) && (z_1 > 0) && (z_11 > 0)
	 && (z_116 > 0) && (z_132 > 0) && (z_150 > 0) && (z_185 > 0) && (z_2 > 0) && 
	(z_240 > 0) && (z_3 > 0) && (z_306 > 0) && (z_32 > 0) && (z_346 > 0) && (z_4 > 0)
	 && (z_422 > 0) && (z_447 > 0) && (z_5 > 0) && (z_535 > 0) && (z_595 > 0) && 
	(z_651 > 0) && (z_762 > 0) && (z_792 > 0) && (z_90 > 0))
																									DATA{
																										:pid_2:uncoveredExit = 2;
																										:pid_65:node_time = (z_132 + z_32 + z_422 + z_447 + z_762 + z_792 + z_937);
																										:pid_65:z = z_937;
																										:pid_65:localTime = (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_937);
																										:pid_65:localPC = (((z_422 + z_447 + z_762 + z_792 + z_937) == t_68) && (t_23 < 4) && (t_68 < 4) && (t_338 < 4) && (t_568 < 4) && (z_132 < t_23) && (z_447 < t_338) && (z_792 < t_568) && (0 <= (t_23 + -2)) && (0 <= (t_68 + -2)) && (0 <= (t_338 + -2)) && (0 <= (t_568 + -2)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_535 + z_595 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792)) && ((z_0 + z_150 + z_185 + z_240 + z_5 + z_90) <= (z_132 + z_2 + z_32 + z_422 + z_447)) && ((z_0 + z_5 + z_90) <= (z_132 + z_2 + z_32)) && (z_132 > 0) && (z_2 > 0) && (z_32 > 0) && (z_422 > 0) && (z_447 > 0) && (z_762 > 0) && (z_792 > 0));
																										:pid_66:cl = (z_422 + z_447 + z_762 + z_792 + z_937);
																										:pid_72:cl = (z_447 + z_762 + z_792 + z_937);
																										:pid_77:cl = (z_792 + z_937);
																									}
																									BUFFER{
																										:pid_31:bufferNode:<FIFO>#0{
																											:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_937));
																										}
																										:pid_48:bufferNode:<FIFO>#0{
																											:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_937));
																										}
																										:pid_82:bufferNode:<FIFO>#0{
																											:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_937));
																										}
																										:pid_99:bufferNode:<FIFO>#0{
																											:pid_65:ControlMsg([ 1 , 1 ] , (z_132 + z_2 + z_32 + z_422 + z_447 + z_762 + z_792 + z_937));
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
									EC:<Id:196;Ev:32;H:9;W:169>{ SC: ( pid_11:o#7 , ( pid_36:cp2 , pid_39:dp0 , pid_44:dp0 ) , ( pid_53:cp2 , pid_56:dp0 , pid_61:dp0 ) , ( pid_69:cp1 , pid_73:dp0 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
										EXE: { |;| (:pid_48 , run) (:pid_49 , 
	run) (:pid_52 , run) (:pid_52 , cp_sendCM) (:pid_2 , run) }
										TRACE: { |;| (:pid_48 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_131 }) (:pid_52 , ${ output 
	inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + param::Trickle.Node.z_1 
	param::Trickle.Node.z_11 param::Trickle.Node.z_116 param::Trickle.Node.z_131 } } 
	@ (z_11 + z_116 + z_131)) }
										PC: ((z_131 == t_65) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_39 < 4) && 
	(t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (z_116 < t_10) && (0 <= (t_10 + -2)) && 
	(0 <= (t_23 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + 
	-2)) && (0 <= (t_65 + -2)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && 
	(z_0 > 0) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_2 > 0) && (z_3 > 0) && 
	(z_4 > 0) && (z_5 > 0))
										DATA{
											:pid_2:uncoveredExit = 1;
											:pid_48:node_time = (z_11 + z_116 + z_131);
											:pid_48:z = z_131;
											:pid_48:localTime = (z_1 + z_11 + z_116 + z_131);
											:pid_48:localPC = ((z_131 == t_65) && (t_10 < 4) && (t_65 < 4) && (z_116 < t_10) && (0 <= (t_10 + -2)) && (0 <= (t_65 + -2)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0));
											:pid_49:cl = z_131;
											:pid_55:cl = (z_11 + z_116 + z_131);
											:pid_60:cl = (z_11 + z_116 + z_131);
										}
										BUFFER{
											:pid_65:bufferNode:<FIFO>#0{
												:pid_31:ControlMsg([ 1 , 1 ] , (z_0 + z_5 + z_90));
												:pid_48:ControlMsg([ 0 , 0 ] , (z_1 + z_11 + z_116 + z_131));
											}
										}
										EC:<Id:249;Ev:0;H:10;W:169>{ SC: ( pid_12:o#8 , ( pid_36:cp2 , pid_39:dp0 , pid_44:dp0 ) , ( pid_53:cp2 , pid_56:dp0 , pid_61:dp0 ) , ( pid_69:cp1 , pid_73:dp0 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
											EXE: { |;| (:pid_65 , run) (:pid_66 
	, run) (:pid_69 , run) (:pid_69 , cp1_receiveCM_inconsistent) (:pid_2 , run) 
	(:pid_11 , run) (:pid_11 , n3_in_CM) }
											TRACE: { |;| (:pid_65 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_157 }) (:pid_69 , ${ input 
	inst::Trickle.Node.ControlMsg [ 1 , 1 ] ${ + param::Trickle.Node.z_0 
	param::Trickle.Node.z_5 param::Trickle.Node.z_90 } } @ (z_157 + z_32)) (:pid_69 
	, ${ newfresh inst::Trickle.Node.ControlProcess.t 
	param::Trickle.Node.ControlProcess.t_82 }) }
											/*FLAGS{ COVERAGE-ELEMENT }*/
											INFO{
												<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#8->run::pid_12:Trickle.Observer.o#8->prot::Trickle.Observer.o#8" as trace="tpid#8->run::pid_12:Trickle.Observer.o#8->prot::Trickle.Observer.o#8">
											}
											PC: ((z_131 == t_65) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_39 < 4) && 
	(t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_82 < 4) && (z_116 < t_10) && (z_157 
	< t_23) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_39 + -2)) && (0 
	<= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_82 + -2)) 
	&& ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_157 
	+ z_2 + z_32)) && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_2 > 
	0) && (z_3 > 0) && (z_32 > 0) && (z_4 > 0) && (z_5 > 0))
											DATA{
												:pid_2:uncoveredExit = 0;
												:pid_65:mydp_run[0] = true;
												:pid_65:mydp_run[1] = true;
												:pid_65:node_time = (z_157 + z_32);
												:pid_65:z = z_157;
												:pid_65:localTime = (z_157 + z_2 + z_32);
												:pid_65:seq_buff[0] = 1;
												:pid_65:seq_buff[1] = 1;
												:pid_65:localPC = ((t_23 < 4) && (t_82 < 4) && (z_157 < t_23) && (0 <= (t_23 + -2)) && (0 <= (t_82 + -2)) && ((z_0 + z_5 + z_90) <= (z_157 + z_2 + z_32)) && (z_2 > 0) && (z_32 > 0));
												:pid_65:timeEmit = (z_0 + z_5 + z_90);
												:pid_66:e = 0;
												:pid_66:c = 0;
												:pid_66:i = 2;
												:pid_66:t = t_82;
												:pid_66:consistent = false;
												:pid_66:cl = 0;
												:pid_72:cl = (z_157 + z_32);
												:pid_77:cl = (z_157 + z_32);
											}
											BUFFER{
												:pid_65:bufferNode:<FIFO>#0{
													:pid_48:ControlMsg([ 0 , 0 ] , (z_1 + z_11 + z_116 + z_131));
												}
											}
										}
									}
									EC:<Id:197;Ev:33;H:9;W:170>{ SC: ( pid_11:o#7 , ( pid_36:cp2 , pid_39:dp0 , pid_44:dp0 ) , ( pid_52:cp1 , pid_57:dp1 , pid_61:dp0 ) , ( pid_69:cp1 , pid_73:dp0 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
										EXE: { |;| (:pid_48 , run) (:pid_55 , 
	run) (:pid_56 , run) (:pid_56 , dp_init) (:pid_2 , run) }
										TRACE: { |;| (:pid_48 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_131 }) (:pid_56 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_56 }) }
										PC: ((z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 
	4) && (t_65 < 4) && (t_56 < 4) && (z_116 < t_10) && (0 <= (t_10 + -2)) && (0 <= 
	(t_23 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && 
	(0 <= (t_65 + -2)) && (0 <= (t_56 + -2)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + 
	z_116)) && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_2 > 0) && 
	(z_3 > 0) && (z_4 > 0) && (z_5 > 0))
										DATA{
											:pid_2:uncoveredExit = 1;
											:pid_48:node_time = (z_11 + z_116 + z_131);
											:pid_48:z = z_131;
											:pid_48:localTime = (z_1 + z_11 + z_116 + z_131);
											:pid_48:localPC = ((t_10 < 4) && (t_65 < 4) && (t_56 < 4) && (z_116 < t_10) && (0 <= (t_10 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_56 + -2)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0));
											:pid_49:cl = z_131;
											:pid_55:e = 0;
											:pid_55:tau = 4;
											:pid_55:tau_l = 4;
											:pid_55:tau_h = 8;
											:pid_55:k = 2;
											:pid_55:c = 0;
											:pid_55:t = t_56;
											:pid_55:cl = 0;
											:pid_60:cl = (z_11 + z_116 + z_131);
										}
										EC:<Id:259;Ev:0;H:10;W:170>{ SC: ( pid_12:o#8 , ( pid_36:cp2 , pid_39:dp0 , pid_44:dp0 ) , ( pid_52:cp1 , pid_57:dp1 , pid_61:dp0 ) , ( pid_69:cp1 , pid_73:dp0 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
											EXE: { |;| (:pid_65 , run) (:pid_66 
	, run) (:pid_69 , run) (:pid_69 , cp1_receiveCM_inconsistent) (:pid_2 , run) 
	(:pid_11 , run) (:pid_11 , n3_in_CM) }
											TRACE: { |;| (:pid_65 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_162 }) (:pid_69 , ${ input 
	inst::Trickle.Node.ControlMsg [ 1 , 1 ] ${ + param::Trickle.Node.z_0 
	param::Trickle.Node.z_5 param::Trickle.Node.z_90 } } @ (z_162 + z_32)) (:pid_69 
	, ${ newfresh inst::Trickle.Node.ControlProcess.t 
	param::Trickle.Node.ControlProcess.t_84 }) }
											/*FLAGS{ COVERAGE-ELEMENT }*/
											INFO{
												<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#8->run::pid_12:Trickle.Observer.o#8->prot::Trickle.Observer.o#8" as trace="tpid#8->run::pid_12:Trickle.Observer.o#8->prot::Trickle.Observer.o#8">
											}
											PC: ((z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 
	4) && (t_65 < 4) && (t_84 < 4) && (t_56 < 4) && (z_116 < t_10) && (z_162 < t_23) 
	&& (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 
	+ -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_84 + -2)) && (0 <= 
	(t_56 + -2)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + 
	z_90) <= (z_162 + z_2 + z_32)) && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) && (z_116 
	> 0) && (z_2 > 0) && (z_3 > 0) && (z_32 > 0) && (z_4 > 0) && (z_5 > 0))
											DATA{
												:pid_2:uncoveredExit = 0;
												:pid_65:mydp_run[0] = true;
												:pid_65:mydp_run[1] = true;
												:pid_65:node_time = (z_162 + z_32);
												:pid_65:z = z_162;
												:pid_65:localTime = (z_162 + z_2 + z_32);
												:pid_65:seq_buff[0] = 1;
												:pid_65:seq_buff[1] = 1;
												:pid_65:localPC = ((t_23 < 4) && (t_84 < 4) && (z_162 < t_23) && (0 <= (t_23 + -2)) && (0 <= (t_84 + -2)) && ((z_0 + z_5 + z_90) <= (z_162 + z_2 + z_32)) && (z_2 > 0) && (z_32 > 0));
												:pid_65:timeEmit = (z_0 + z_5 + z_90);
												:pid_66:e = 0;
												:pid_66:c = 0;
												:pid_66:i = 2;
												:pid_66:t = t_84;
												:pid_66:consistent = false;
												:pid_66:cl = 0;
												:pid_72:cl = (z_162 + z_32);
												:pid_77:cl = (z_162 + z_32);
											}
											BUFFER{
												:pid_65:bufferNode:<FIFO>#0{ }
											}
										}
									}
									EC:<Id:198;Ev:34;H:9;W:171>{ SC: ( pid_11:o#7 , ( pid_36:cp2 , pid_39:dp0 , pid_44:dp0 ) , ( pid_52:cp1 , pid_56:dp0 , pid_62:dp1 ) , ( pid_69:cp1 , pid_73:dp0 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
										EXE: { |;| (:pid_48 , run) (:pid_60 , 
	run) (:pid_61 , run) (:pid_61 , dp_init) (:pid_2 , run) }
										TRACE: { |;| (:pid_48 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_131 }) (:pid_61 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_57 }) }
										PC: ((z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 
	4) && (t_65 < 4) && (t_57 < 4) && (z_116 < t_10) && (0 <= (t_10 + -2)) && (0 <= 
	(t_23 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && 
	(0 <= (t_65 + -2)) && (0 <= (t_57 + -2)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + 
	z_116)) && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_2 > 0) && 
	(z_3 > 0) && (z_4 > 0) && (z_5 > 0))
										DATA{
											:pid_2:uncoveredExit = 1;
											:pid_48:node_time = (z_11 + z_116 + z_131);
											:pid_48:z = z_131;
											:pid_48:localTime = (z_1 + z_11 + z_116 + z_131);
											:pid_48:localPC = ((t_10 < 4) && (t_65 < 4) && (t_57 < 4) && (z_116 < t_10) && (0 <= (t_10 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_57 + -2)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0));
											:pid_49:cl = z_131;
											:pid_55:cl = (z_11 + z_116 + z_131);
											:pid_60:e = 0;
											:pid_60:tau = 4;
											:pid_60:tau_l = 4;
											:pid_60:tau_h = 8;
											:pid_60:k = 2;
											:pid_60:c = 0;
											:pid_60:t = t_57;
											:pid_60:cl = 0;
										}
										EC:<Id:269;Ev:39;H:10;W:171>{ SC: ( pid_12:o#8 , ( pid_36:cp2 , pid_39:dp0 , pid_44:dp0 ) , ( pid_52:cp1 , pid_56:dp0 , pid_62:dp1 ) , ( pid_69:cp1 , pid_73:dp0 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
											EXE: { |;| (:pid_65 , run) (:pid_66 
	, run) (:pid_69 , run) (:pid_69 , cp1_receiveCM_inconsistent) (:pid_2 , run) 
	(:pid_11 , run) (:pid_11 , n3_in_CM) }
											TRACE: { |;| (:pid_65 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_167 }) (:pid_69 , ${ input 
	inst::Trickle.Node.ControlMsg [ 1 , 1 ] ${ + param::Trickle.Node.z_0 
	param::Trickle.Node.z_5 param::Trickle.Node.z_90 } } @ (z_167 + z_32)) (:pid_69 
	, ${ newfresh inst::Trickle.Node.ControlProcess.t 
	param::Trickle.Node.ControlProcess.t_86 }) }
											/*FLAGS{ COVERAGE-ELEMENT }*/
											INFO{
												<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#8->run::pid_12:Trickle.Observer.o#8->prot::Trickle.Observer.o#8" as trace="tpid#8->run::pid_12:Trickle.Observer.o#8->prot::Trickle.Observer.o#8">
											}
											PC: ((z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 
	4) && (t_65 < 4) && (t_86 < 4) && (t_57 < 4) && (z_116 < t_10) && (z_167 < t_23) 
	&& (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 
	+ -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_86 + -2)) && (0 <= 
	(t_57 + -2)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + 
	z_90) <= (z_167 + z_2 + z_32)) && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) && (z_116 
	> 0) && (z_2 > 0) && (z_3 > 0) && (z_32 > 0) && (z_4 > 0) && (z_5 > 0))
											DATA{
												:pid_2:uncoveredExit = 0;
												:pid_65:mydp_run[0] = true;
												:pid_65:mydp_run[1] = true;
												:pid_65:node_time = (z_167 + z_32);
												:pid_65:z = z_167;
												:pid_65:localTime = (z_167 + z_2 + z_32);
												:pid_65:seq_buff[0] = 1;
												:pid_65:seq_buff[1] = 1;
												:pid_65:localPC = ((t_23 < 4) && (t_86 < 4) && (z_167 < t_23) && (0 <= (t_23 + -2)) && (0 <= (t_86 + -2)) && ((z_0 + z_5 + z_90) <= (z_167 + z_2 + z_32)) && (z_2 > 0) && (z_32 > 0));
												:pid_65:timeEmit = (z_0 + z_5 + z_90);
												:pid_66:e = 0;
												:pid_66:c = 0;
												:pid_66:i = 2;
												:pid_66:t = t_86;
												:pid_66:consistent = false;
												:pid_66:cl = 0;
												:pid_72:cl = (z_167 + z_32);
												:pid_77:cl = (z_167 + z_32);
											}
											BUFFER{
												:pid_65:bufferNode:<FIFO>#0{ }
											}
											EC:<Id:329;Ev:60;H:11;W:290>{ SC: ( pid_12:o#8 , ( pid_36:cp2 , pid_40:dp1 , pid_44:dp0 ) , ( pid_52:cp1 , pid_56:dp0 , pid_62:dp1 ) , ( pid_69:cp1 , pid_73:dp0 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
												EXE: { |;| (:pid_31 , run) 
	(:pid_38 , run) (:pid_39 , run) (:pid_39 , dp_init) (:pid_2 , run) }
												TRACE: { |;| (:pid_31 , ${ 
	newfresh inst::Trickle.Node.z param::Trickle.Node.z_190 }) (:pid_39 , ${ 
	newfresh inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_102 }
	) }
												PC: ((z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 
	4) && (t_65 < 4) && (t_86 < 4) && (t_102 < 4) && (t_57 < 4) && (z_116 < t_10) && 
	(z_167 < t_23) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_39 + -2)) 
	&& (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_86 
	+ -2)) && (0 <= (t_102 + -2)) && (0 <= (t_57 + -2)) && ((z_0 + z_5 + z_90) <= 
	(z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_167 + z_2 + z_32)) && (z_0 > 
	0) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_2 > 0) && (z_3 > 0) && (z_32 
	> 0) && (z_4 > 0) && (z_5 > 0) && (z_90 > 0))
												DATA{
													:pid_2:uncoveredExit = 1;
													:pid_31:node_time = (z_190 + z_5 + z_90);
													:pid_31:z = z_190;
													:pid_31:localTime = (z_0 + z_190 + z_5 + z_90);
													:pid_31:localPC = ((z_90 == t_5) && (t_5 < 4) && (t_102 < 4) && (0 <= (t_5 + -2)) && (0 <= (t_102 + -2)) && (z_0 > 0) && (z_5 > 0) && (z_90 > 0));
													:pid_32:cl = (z_190 + z_90);
													:pid_38:e = 0;
													:pid_38:tau = 4;
													:pid_38:tau_l = 4;
													:pid_38:tau_h = 8;
													:pid_38:k = 2;
													:pid_38:c = 0;
													:pid_38:t = t_102;
													:pid_38:cl = 0;
													:pid_43:cl = (z_190 + z_5 + z_90);
												}
												EC:<Id:575;Ev:63;H:12;W:515>{ SC: ( pid_13:o#9 , ( pid_36:cp2 , pid_41:dp2 , pid_44:dp0 ) , ( pid_52:cp1 , pid_56:dp0 , pid_62:dp1 ) , ( pid_69:cp1 , pid_73:dp0 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
													EXE: { |;| (:pid_31 , run) 
	(:pid_38 , run) (:pid_40 , run) (:pid_40 , dp_sendDM) (:pid_2 , run) (:pid_12 , 
	run) (:pid_12 , n1_out_DM1) }
													TRACE: { |;| (:pid_31 , ${ 
	newfresh inst::Trickle.Node.z param::Trickle.Node.z_295 }) (:pid_40 , ${ output 
	inst::Trickle.Node.DataMsg1 [ 1 , 1 , 0 ] ${ + param::Trickle.Node.z_0 
	param::Trickle.Node.z_190 param::Trickle.Node.z_295 param::Trickle.Node.z_5 
	param::Trickle.Node.z_90 } } @ (z_190 + z_295 + z_5 + z_90)) }
													/*FLAGS{ COVERAGE-ELEMENT }*/
													INFO{
														<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#9->run::pid_13:Trickle.Observer.o#9->prot::Trickle.Observer.o#9" as trace="tpid#9->run::pid_13:Trickle.Observer.o#9->prot::Trickle.Observer.o#9">
													}
													PC: ((z_295 == t_102) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_39 < 4) && 
	(t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_86 < 4) && (t_102 < 4) && (t_57 < 4) 
	&& (z_116 < t_10) && (z_167 < t_23) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) 
	&& (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 
	+ -2)) && (0 <= (t_86 + -2)) && (0 <= (t_102 + -2)) && (0 <= (t_57 + -2)) && 
	((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_167 + 
	z_2 + z_32)) && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_190 > 
	0) && (z_2 > 0) && (z_3 > 0) && (z_32 > 0) && (z_4 > 0) && (z_5 > 0) && (z_90 > 
	0))
													DATA{
														:pid_2:uncoveredExit = 0;
														:pid_2:dataMessage.seq = 1;
														:pid_2:dataMessage.fragment = FRAGMENT_0;
														:pid_2:dataMessage.offset = 0;
														:pid_31:node_time = (z_190 + z_295 + z_5 + z_90);
														:pid_31:z = z_295;
														:pid_31:localTime = (z_0 + z_190 + z_295 + z_5 + z_90);
														:pid_31:localPC = ((z_295 == t_102) && (z_90 == t_5) && (t_5 < 4) && (t_102 < 4) && (0 <= (t_5 + -2)) && (0 <= (t_102 + -2)) && (z_0 > 0) && (z_190 > 0) && (z_5 > 0) && (z_90 > 0));
														:pid_32:cl = (z_190 + z_295 + z_90);
														:pid_38:cl = z_295;
														:pid_43:cl = (z_190 + z_295 + z_5 + z_90);
													}
													BUFFER{
														:pid_48:bufferNode:<FIFO>#0{
															:pid_31:DataMsg1([ 1 , 1 , 0 ] , (z_0 + z_190 + z_295 + z_5 + z_90));
														}
														:pid_65:bufferNode:<FIFO>#0{
															:pid_31:DataMsg1([ 1 , 1 , 0 ] , (z_0 + z_190 + z_295 + z_5 + z_90));
														}
													}
													EC:<Id:605;Ev:81;H:13;W:542>{ SC: ( pid_13:o#9 , ( pid_36:cp2 , pid_41:dp2 , pid_44:dp0 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_69:cp1 , pid_73:dp0 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
														EXE: { |;| (:pid_48 , 
	run) (:pid_55 , run) (:pid_56 , run) (:pid_56 , dp_init) (:pid_2 , run) }
														TRACE: { |;| (:pid_48 , 
	${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_311 }) (:pid_56 , ${ 
	newfresh inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_226 }
	) }
														PC: ((z_295 == t_102) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_39 < 4) && 
	(t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_86 < 4) && (t_102 < 4) && (t_226 < 4)
	 && (t_57 < 4) && (z_116 < t_10) && (z_167 < t_23) && (0 <= (t_10 + -2)) && (0 
	<= (t_23 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) 
	&& (0 <= (t_65 + -2)) && (0 <= (t_86 + -2)) && (0 <= (t_102 + -2)) && (0 <= 
	(t_226 + -2)) && (0 <= (t_57 + -2)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + 
	z_116)) && ((z_0 + z_5 + z_90) <= (z_167 + z_2 + z_32)) && (z_0 > 0) && (z_1 > 0)
	 && (z_11 > 0) && (z_116 > 0) && (z_131 > 0) && (z_190 > 0) && (z_2 > 0) && (z_3 
	> 0) && (z_32 > 0) && (z_4 > 0) && (z_5 > 0) && (z_90 > 0))
														DATA{
															:pid_2:uncoveredExit = 1;
															:pid_48:node_time = (z_11 + z_116 + z_131 + z_311);
															:pid_48:z = z_311;
															:pid_48:localTime = (z_1 + z_11 + z_116 + z_131 + z_311);
															:pid_48:localPC = ((t_10 < 4) && (t_65 < 4) && (t_226 < 4) && (t_57 < 4) && (z_116 < t_10) && (0 <= (t_10 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_226 + -2)) && (0 <= (t_57 + -2)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_131 > 0));
															:pid_49:cl = (z_131 + z_311);
															:pid_55:e = 0;
															:pid_55:tau = 4;
															:pid_55:tau_l = 4;
															:pid_55:tau_h = 8;
															:pid_55:k = 2;
															:pid_55:c = 0;
															:pid_55:t = t_226;
															:pid_55:cl = 0;
															:pid_60:cl = z_311;
														}
														EC:<Id:806;Ev:86;H:14;W:725>{ SC: ( pid_14:o#10 , ( pid_36:cp2 , pid_41:dp2 , pid_44:dp0 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_69:cp1 , pid_73:dp0 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
															EXE: { |;| (:pid_48 
	, run) (:pid_55 , run) (:pid_57 , run) (:pid_57 , dp1_receiveDM_consistent) 
	(:pid_2 , run) (:pid_13 , run) (:pid_13 , n2_in_DM1) }
															TRACE: { |;| 
	(:pid_48 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_401 }) 
	(:pid_57 , ${ input inst::Trickle.Node.DataMsg1 [ 1 , 1 , 0 ] ${ + 
	param::Trickle.Node.z_0 param::Trickle.Node.z_190 param::Trickle.Node.z_295 
	param::Trickle.Node.z_5 param::Trickle.Node.z_90 } } @ (z_11 + z_116 + z_131 + 
	z_311 + z_401)) }
															/*FLAGS{ COVERAGE-ELEMENT }*/
															INFO{
																<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#10->run::pid_14:Trickle.Observer.o#10->prot::Trickle.Observer.o#10" as trace="tpid#10->run::pid_14:Trickle.Observer.o#10->prot::Trickle.Observer.o#10">
															}
															PC: ((z_295 == t_102) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_39 < 4) && 
	(t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_86 < 4) && (t_102 < 4) && (t_226 < 4)
	 && (t_57 < 4) && (z_116 < t_10) && (z_167 < t_23) && (z_401 < t_226) && (0 <= 
	(t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) 
	&& (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_86 + -2)) && (0 <= (t_102 
	+ -2)) && (0 <= (t_226 + -2)) && (0 <= (t_57 + -2)) && ((z_0 + z_190 + z_295 + 
	z_5 + z_90) <= (z_1 + z_11 + z_116 + z_131 + z_311 + z_401)) && ((z_0 + z_5 + 
	z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_167 + z_2 + z_32)) 
	&& (z_0 > 0) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_131 > 0) && (z_190 
	> 0) && (z_2 > 0) && (z_3 > 0) && (z_311 > 0) && (z_32 > 0) && (z_4 > 0) && (z_5 
	> 0) && (z_90 > 0))
															DATA{
																:pid_2:uncoveredExit = 0;
																:pid_48:my_buff[0].seq = 1;
																:pid_48:my_buff[0].fragment = FRAGMENT_0;
																:pid_48:my_buff[0].offset = 0;
																:pid_48:firmware[0] = FRAGMENT_0;
																:pid_48:myseq_buff[0] = 1;
																:pid_48:node_time = (z_11 + z_116 + z_131 + z_311 + z_401);
																:pid_48:z = z_401;
																:pid_48:localTime = (z_1 + z_11 + z_116 + z_131 + z_311 + z_401);
																:pid_48:undef_DM1 = false;
																:pid_48:localPC = ((t_10 < 4) && (t_65 < 4) && (t_226 < 4) && (t_57 < 4) && (z_116 < t_10) && (z_401 < t_226) && (0 <= (t_10 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_226 + -2)) && (0 <= (t_57 + -2)) && ((z_0 + z_190 + z_295 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_131 + z_311 + z_401)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_131 > 0) && (z_311 > 0));
																:pid_48:timeEmit = (z_0 + z_190 + z_295 + z_5 + z_90);
																:pid_49:cl = (z_131 + z_311 + z_401);
																:pid_55:c = 1;
																:pid_55:consistent = true;
																:pid_55:cl = z_401;
																:pid_55:d.seq = 1;
																:pid_55:d.fragment = FRAGMENT_0;
																:pid_55:d.offset = 0;
																:pid_60:cl = (z_311 + z_401);
															}
															BUFFER{
																:pid_48:bufferNode:<FIFO>#0{ }
															}
															EC:<Id:855;Ev:101;H:15;W:769>{ SC: ( pid_14:o#10 , ( pid_36:cp2 , pid_41:dp2 , pid_44:dp0 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_69:cp1 , pid_74:dp1 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																EXE: { |;| 
	(:pid_65 , run) (:pid_72 , run) (:pid_73 , run) (:pid_73 , dp_init) (:pid_2 , 
	run) }
																TRACE: { |;| 
	(:pid_65 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_427 }) 
	(:pid_73 , ${ newfresh inst::Trickle.Node.DataProcess.t 
	param::Trickle.Node.DataProcess.t_342 }) }
																PC: ((z_295 == t_102) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_39 < 4) && 
	(t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_86 < 4) && (t_102 < 4) && (t_226 < 4)
	 && (t_342 < 4) && (t_57 < 4) && (z_116 < t_10) && (z_167 < t_23) && (z_401 < 
	t_226) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_39 + -2)) && (0 
	<= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_86 + -2)) 
	&& (0 <= (t_102 + -2)) && (0 <= (t_226 + -2)) && (0 <= (t_342 + -2)) && (0 <= 
	(t_57 + -2)) && ((z_0 + z_190 + z_295 + z_5 + z_90) <= (z_1 + z_11 + z_116 + 
	z_131 + z_311 + z_401)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 
	+ z_5 + z_90) <= (z_167 + z_2 + z_32)) && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) 
	&& (z_116 > 0) && (z_131 > 0) && (z_167 > 0) && (z_190 > 0) && (z_2 > 0) && (z_3 
	> 0) && (z_311 > 0) && (z_32 > 0) && (z_4 > 0) && (z_5 > 0) && (z_90 > 0))
																DATA{
																	:pid_2:uncoveredExit = 1;
																	:pid_65:node_time = (z_167 + z_32 + z_427);
																	:pid_65:z = z_427;
																	:pid_65:localTime = (z_167 + z_2 + z_32 + z_427);
																	:pid_65:localPC = ((t_23 < 4) && (t_86 < 4) && (t_342 < 4) && (z_167 < t_23) && (0 <= (t_23 + -2)) && (0 <= (t_86 + -2)) && (0 <= (t_342 + -2)) && ((z_0 + z_5 + z_90) <= (z_167 + z_2 + z_32)) && (z_167 > 0) && (z_2 > 0) && (z_32 > 0));
																	:pid_66:cl = z_427;
																	:pid_72:e = 0;
																	:pid_72:tau = 4;
																	:pid_72:tau_l = 4;
																	:pid_72:tau_h = 8;
																	:pid_72:k = 2;
																	:pid_72:c = 0;
																	:pid_72:t = t_342;
																	:pid_72:cl = 0;
																	:pid_77:cl = (z_167 + z_32 + z_427);
																}
																EC:<Id:1029;Ev:109;H:16;W:928>{ SC: ( pid_15:o#11 , ( pid_36:cp2 , pid_41:dp2 , pid_44:dp0 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_69:cp1 , pid_74:dp1 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																	EXE: { |;| 
	(:pid_65 , run) (:pid_72 , run) (:pid_74 , run) (:pid_74 , 
	dp1_receiveDM_consistent) (:pid_2 , run) (:pid_14 , run) (:pid_14 , n3_in_DM1) }
																	TRACE: { |;| 
	(:pid_65 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_502 }) 
	(:pid_74 , ${ input inst::Trickle.Node.DataMsg1 [ 1 , 1 , 0 ] ${ + 
	param::Trickle.Node.z_0 param::Trickle.Node.z_190 param::Trickle.Node.z_295 
	param::Trickle.Node.z_5 param::Trickle.Node.z_90 } } @ (z_167 + z_32 + z_427 + 
	z_502)) }
																	/*FLAGS{ COVERAGE-ELEMENT }*/
																	INFO{
																		<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#11->run::pid_15:Trickle.Observer.o#11->prot::Trickle.Observer.o#11" as trace="tpid#11->run::pid_15:Trickle.Observer.o#11->prot::Trickle.Observer.o#11">
																	}
																	PC: ((z_295 == t_102) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_39 < 4) && 
	(t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_86 < 4) && (t_102 < 4) && (t_226 < 4)
	 && (t_342 < 4) && (t_57 < 4) && (z_116 < t_10) && (z_167 < t_23) && (z_401 < 
	t_226) && (z_502 < t_342) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= 
	(t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && 
	(0 <= (t_86 + -2)) && (0 <= (t_102 + -2)) && (0 <= (t_226 + -2)) && (0 <= (t_342 
	+ -2)) && (0 <= (t_57 + -2)) && ((z_0 + z_190 + z_295 + z_5 + z_90) <= (z_1 + 
	z_11 + z_116 + z_131 + z_311 + z_401)) && ((z_0 + z_190 + z_295 + z_5 + z_90) <= 
	(z_167 + z_2 + z_32 + z_427 + z_502)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + 
	z_116)) && ((z_0 + z_5 + z_90) <= (z_167 + z_2 + z_32)) && (z_0 > 0) && (z_1 > 0)
	 && (z_11 > 0) && (z_116 > 0) && (z_131 > 0) && (z_167 > 0) && (z_190 > 0) && 
	(z_2 > 0) && (z_3 > 0) && (z_311 > 0) && (z_32 > 0) && (z_4 > 0) && (z_427 > 0) 
	&& (z_5 > 0) && (z_90 > 0))
																	DATA{
																		:pid_2:uncoveredExit = 0;
																		:pid_65:my_buff[0].seq = 1;
																		:pid_65:my_buff[0].fragment = FRAGMENT_0;
																		:pid_65:my_buff[0].offset = 0;
																		:pid_65:firmware[0] = FRAGMENT_0;
																		:pid_65:myseq_buff[0] = 1;
																		:pid_65:node_time = (z_167 + z_32 + z_427 + z_502);
																		:pid_65:z = z_502;
																		:pid_65:localTime = (z_167 + z_2 + z_32 + z_427 + z_502);
																		:pid_65:undef_DM1 = false;
																		:pid_65:localPC = ((t_23 < 4) && (t_86 < 4) && (t_342 < 4) && (z_167 < t_23) && (z_502 < t_342) && (0 <= (t_23 + -2)) && (0 <= (t_86 + -2)) && (0 <= (t_342 + -2)) && ((z_0 + z_190 + z_295 + z_5 + z_90) <= (z_167 + z_2 + z_32 + z_427 + z_502)) && ((z_0 + z_5 + z_90) <= (z_167 + z_2 + z_32)) && (z_167 > 0) && (z_2 > 0) && (z_32 > 0) && (z_427 > 0));
																		:pid_65:timeEmit = (z_0 + z_190 + z_295 + z_5 + z_90);
																		:pid_66:cl = (z_427 + z_502);
																		:pid_72:c = 1;
																		:pid_72:consistent = true;
																		:pid_72:cl = z_502;
																		:pid_72:d.seq = 1;
																		:pid_72:d.fragment = FRAGMENT_0;
																		:pid_72:d.offset = 0;
																		:pid_77:cl = (z_167 + z_32 + z_427 + z_502);
																	}
																	BUFFER{
																		:pid_65:bufferNode:<FIFO>#0{ }
																	}
																	EC:<Id:1117;Ev:130;H:17;W:1008>{ SC: ( pid_15:o#11 , ( pid_36:cp2 , pid_41:dp2 , pid_45:dp1 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_69:cp1 , pid_74:dp1 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																		EXE: { 
	|;| (:pid_31 , run) (:pid_43 , run) (:pid_44 , run) (:pid_44 , dp_init) (:pid_2 
	, run) }
																		TRACE: { 
	|;| (:pid_31 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_540 }) 
	(:pid_44 , ${ newfresh inst::Trickle.Node.DataProcess.t 
	param::Trickle.Node.DataProcess.t_438 }) }
																		PC: ((z_295 == t_102) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_39 < 4) && 
	(t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_86 < 4) && (t_102 < 4) && (t_226 < 4)
	 && (t_342 < 4) && (t_438 < 4) && (t_57 < 4) && (z_116 < t_10) && (z_167 < t_23) 
	&& (z_401 < t_226) && (z_502 < t_342) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2))
	 && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 
	+ -2)) && (0 <= (t_86 + -2)) && (0 <= (t_102 + -2)) && (0 <= (t_226 + -2)) && (0 
	<= (t_342 + -2)) && (0 <= (t_438 + -2)) && (0 <= (t_57 + -2)) && ((z_0 + z_190 + 
	z_295 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_131 + z_311 + z_401)) && ((z_0 + 
	z_190 + z_295 + z_5 + z_90) <= (z_167 + z_2 + z_32 + z_427 + z_502)) && ((z_0 + 
	z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_167 + z_2 + 
	z_32)) && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_131 > 0) && 
	(z_167 > 0) && (z_190 > 0) && (z_2 > 0) && (z_295 > 0) && (z_3 > 0) && (z_311 > 
	0) && (z_32 > 0) && (z_4 > 0) && (z_427 > 0) && (z_5 > 0) && (z_90 > 0))
																		DATA{
																			:pid_2:uncoveredExit = 1;
																			:pid_31:node_time = (z_190 + z_295 + z_5 + z_540 + z_90);
																			:pid_31:z = z_540;
																			:pid_31:localTime = (z_0 + z_190 + z_295 + z_5 + z_540 + z_90);
																			:pid_31:localPC = ((z_295 == t_102) && (z_90 == t_5) && (t_5 < 4) && (t_102 < 4) && (t_438 < 4) && (0 <= (t_5 + -2)) && (0 <= (t_102 + -2)) && (0 <= (t_438 + -2)) && (z_0 > 0) && (z_190 > 0) && (z_295 > 0) && (z_5 > 0) && (z_90 > 0));
																			:pid_32:cl = (z_190 + z_295 + z_540 + z_90);
																			:pid_38:cl = (z_295 + z_540);
																			:pid_43:e = 0;
																			:pid_43:tau = 4;
																			:pid_43:tau_l = 4;
																			:pid_43:tau_h = 8;
																			:pid_43:k = 2;
																			:pid_43:c = 0;
																			:pid_43:t = t_438;
																			:pid_43:cl = 0;
																		}
																		EC:<Id:1359;Ev:132;H:18;W:1229>{ SC: ( pid_16:o#12 , ( pid_36:cp2 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_69:cp1 , pid_74:dp1 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																			EXE: 
	{ |;| (:pid_31 , run) (:pid_43 , run) (:pid_45 , run) (:pid_45 , dp_sendDM) 
	(:pid_2 , run) (:pid_15 , run) (:pid_15 , n1_out_DM2) }
																			
	TRACE: { |;| (:pid_31 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_645 }) (:pid_45 , ${ output inst::Trickle.Node.DataMsg2 [ 
	2 , 2 , 1 ] ${ + param::Trickle.Node.z_0 param::Trickle.Node.z_190 
	param::Trickle.Node.z_295 param::Trickle.Node.z_5 param::Trickle.Node.z_540 
	param::Trickle.Node.z_645 param::Trickle.Node.z_90 } } @ (z_190 + z_295 + z_5 + 
	z_540 + z_645 + z_90)) }
																			/*FLAGS{ COVERAGE-ELEMENT }*/
																			INFO{
																				<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#12->run::pid_16:Trickle.Observer.o#12->prot::Trickle.Observer.o#12" as trace="tpid#12->run::pid_16:Trickle.Observer.o#12->prot::Trickle.Observer.o#12">
																			}
																			PC: ((z_295 == t_102) && (z_645 == t_438) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 
	4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_86 < 4) && 
	(t_102 < 4) && (t_226 < 4) && (t_342 < 4) && (t_438 < 4) && (t_57 < 4) && (z_116 
	< t_10) && (z_167 < t_23) && (z_401 < t_226) && (z_502 < t_342) && (0 <= (t_10 + 
	-2)) && (0 <= (t_23 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= 
	(t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_86 + -2)) && (0 <= (t_102 + -2)) 
	&& (0 <= (t_226 + -2)) && (0 <= (t_342 + -2)) && (0 <= (t_438 + -2)) && (0 <= 
	(t_57 + -2)) && ((z_0 + z_190 + z_295 + z_5 + z_90) <= (z_1 + z_11 + z_116 + 
	z_131 + z_311 + z_401)) && ((z_0 + z_190 + z_295 + z_5 + z_90) <= (z_167 + z_2 + 
	z_32 + z_427 + z_502)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 
	+ z_5 + z_90) <= (z_167 + z_2 + z_32)) && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) 
	&& (z_116 > 0) && (z_131 > 0) && (z_167 > 0) && (z_190 > 0) && (z_2 > 0) && 
	(z_295 > 0) && (z_3 > 0) && (z_311 > 0) && (z_32 > 0) && (z_4 > 0) && (z_427 > 0)
	 && (z_5 > 0) && (z_540 > 0) && (z_90 > 0))
																			DATA{
																				:pid_2:uncoveredExit = 0;
																				:pid_2:dataMessage.seq = 2;
																				:pid_2:dataMessage.fragment = FRAGMENT_1;
																				:pid_2:dataMessage.offset = 1;
																				:pid_31:node_time = (z_190 + z_295 + z_5 + z_540 + z_645 + z_90);
																				:pid_31:z = z_645;
																				:pid_31:localTime = (z_0 + z_190 + z_295 + z_5 + z_540 + z_645 + z_90);
																				:pid_31:localPC = ((z_295 == t_102) && (z_645 == t_438) && (z_90 == t_5) && (t_5 < 4) && (t_102 < 4) && (t_438 < 4) && (0 <= (t_5 + -2)) && (0 <= (t_102 + -2)) && (0 <= (t_438 + -2)) && (z_0 > 0) && (z_190 > 0) && (z_295 > 0) && (z_5 > 0) && (z_540 > 0) && (z_90 > 0));
																				:pid_32:cl = (z_190 + z_295 + z_540 + z_645 + z_90);
																				:pid_38:cl = (z_295 + z_540 + z_645);
																				:pid_43:cl = z_645;
																			}
																			BUFFER{
																				:pid_48:bufferNode:<FIFO>#0{
																					:pid_31:DataMsg2([ 2 , 2 , 1 ] , (z_0 + z_190 + z_295 + z_5 + z_540 + z_645 + z_90));
																				}
																				:pid_65:bufferNode:<FIFO>#0{
																					:pid_31:DataMsg2([ 2 , 2 , 1 ] , (z_0 + z_190 + z_295 + z_5 + z_540 + z_645 + z_90));
																				}
																			}
																			EC:<Id:1370;Ev:143;H:19;W:1229>{ SC: ( pid_16:o#12 , ( pid_36:cp2 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_69:cp1 , pid_74:dp1 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																				
	EXE: { |;| (:pid_99 , run) (:pid_100 , run) (:pid_103 , run) (:pid_103 , 
	cp_sendCM) (:pid_2 , run) }
																				
	TRACE: { |;| (:pid_99 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_659 }) (:pid_103 , ${ output inst::Trickle.Node.ControlMsg 
	[ 0 , 0 ] ${ + param::Trickle.Node.z_4 param::Trickle.Node.z_64 
	param::Trickle.Node.z_659 } } @ (z_64 + z_659)) }
																				PC: ((z_295 == t_102) && (z_645 == t_438) && (z_659 == t_42) && (z_90 == t_5) && 
	(t_10 < 4) && (t_23 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) 
	&& (t_86 < 4) && (t_102 < 4) && (t_226 < 4) && (t_342 < 4) && (t_438 < 4) && 
	(t_57 < 4) && (z_116 < t_10) && (z_167 < t_23) && (z_401 < t_226) && (z_502 < 
	t_342) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_39 + -2)) && (0 
	<= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_86 + -2)) 
	&& (0 <= (t_102 + -2)) && (0 <= (t_226 + -2)) && (0 <= (t_342 + -2)) && (0 <= 
	(t_438 + -2)) && (0 <= (t_57 + -2)) && ((z_0 + z_190 + z_295 + z_5 + z_90) <= 
	(z_1 + z_11 + z_116 + z_131 + z_311 + z_401)) && ((z_0 + z_190 + z_295 + z_5 + 
	z_90) <= (z_167 + z_2 + z_32 + z_427 + z_502)) && ((z_0 + z_5 + z_90) <= (z_1 + 
	z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_167 + z_2 + z_32)) && (z_0 > 0) && 
	(z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_131 > 0) && (z_167 > 0) && (z_190 > 
	0) && (z_2 > 0) && (z_295 > 0) && (z_3 > 0) && (z_311 > 0) && (z_32 > 0) && (z_4 
	> 0) && (z_427 > 0) && (z_5 > 0) && (z_540 > 0) && (z_64 > 0) && (z_90 > 0))
																				DATA{
																					:pid_2:uncoveredExit = 1;
																					:pid_99:node_time = (z_64 + z_659);
																					:pid_99:z = z_659;
																					:pid_99:localTime = (z_4 + z_64 + z_659);
																					:pid_99:localPC = ((z_659 == t_42) && (t_42 < 4) && (0 <= (t_42 + -2)) && (z_4 > 0) && (z_64 > 0));
																					:pid_100:cl = z_659;
																					:pid_106:cl = (z_64 + z_659);
																					:pid_111:cl = (z_64 + z_659);
																				}
																				BUFFER{
																					:pid_82:bufferNode:<FIFO>#0{
																						:pid_99:ControlMsg([ 0 , 0 ] , (z_4 + z_64 + z_659));
																					}
																				}
																				EC:<Id:1494;Ev:0;H:20;W:1351>{ SC: ( pid_17:o#13 , ( pid_36:cp2 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_69:cp1 , pid_74:dp1 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_104:cp2 , pid_107:dp0 , pid_112:dp0 ) )
																					
	EXE: { |;| (:pid_48 , run) (:pid_60 , run) (:pid_62 , run) (:pid_62 , 
	dp1_receiveDM_consistent) (:pid_2 , run) (:pid_16 , run) (:pid_16 , n2_in_DM2) }
																					
	TRACE: { |;| (:pid_48 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_711 }) (:pid_62 , ${ input inst::Trickle.Node.DataMsg2 [ 2 
	, 2 , 1 ] ${ + param::Trickle.Node.z_0 param::Trickle.Node.z_190 
	param::Trickle.Node.z_295 param::Trickle.Node.z_5 param::Trickle.Node.z_540 
	param::Trickle.Node.z_645 param::Trickle.Node.z_90 } } @ (z_11 + z_116 + z_131 + 
	z_311 + z_401 + z_711)) }
																					/*FLAGS{ COVERAGE-ELEMENT }*/
																					INFO{
																						<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#13->run::pid_17:Trickle.Observer.o#13->prot::Trickle.Observer.o#13" as trace="tpid#13->run::pid_17:Trickle.Observer.o#13->prot::Trickle.Observer.o#13">
																					}
																					PC: ((z_295 == t_102) && (z_645 == t_438) && (z_659 == t_42) && (z_90 == t_5) && 
	((z_311 + z_401 + z_711) < t_57) && (t_10 < 4) && (t_23 < 4) && (t_39 < 4) && 
	(t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_86 < 4) && (t_102 < 4) && (t_226 < 4)
	 && (t_342 < 4) && (t_438 < 4) && (t_57 < 4) && (z_116 < t_10) && (z_167 < t_23) 
	&& (z_401 < t_226) && (z_502 < t_342) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2))
	 && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 
	+ -2)) && (0 <= (t_86 + -2)) && (0 <= (t_102 + -2)) && (0 <= (t_226 + -2)) && (0 
	<= (t_342 + -2)) && (0 <= (t_438 + -2)) && (0 <= (t_57 + -2)) && ((z_0 + z_190 + 
	z_295 + z_5 + z_540 + z_645 + z_90) <= (z_1 + z_11 + z_116 + z_131 + z_311 + 
	z_401 + z_711)) && ((z_0 + z_190 + z_295 + z_5 + z_90) <= (z_1 + z_11 + z_116 + 
	z_131 + z_311 + z_401)) && ((z_0 + z_190 + z_295 + z_5 + z_90) <= (z_167 + z_2 + 
	z_32 + z_427 + z_502)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 
	+ z_5 + z_90) <= (z_167 + z_2 + z_32)) && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) 
	&& (z_116 > 0) && (z_131 > 0) && (z_167 > 0) && (z_190 > 0) && (z_2 > 0) && 
	(z_295 > 0) && (z_3 > 0) && (z_311 > 0) && (z_32 > 0) && (z_4 > 0) && (z_401 > 0)
	 && (z_427 > 0) && (z_5 > 0) && (z_540 > 0) && (z_64 > 0) && (z_90 > 0))
																					DATA{
																						:pid_2:uncoveredExit = 0;
																						:pid_48:my_buff[1].seq = 2;
																						:pid_48:my_buff[1].fragment = FRAGMENT_1;
																						:pid_48:my_buff[1].offset = 1;
																						:pid_48:firmware[1] = FRAGMENT_1;
																						:pid_48:myseq_buff[1] = 1;
																						:pid_48:node_time = (z_11 + z_116 + z_131 + z_311 + z_401 + z_711);
																						:pid_48:z = z_711;
																						:pid_48:localTime = (z_1 + z_11 + z_116 + z_131 + z_311 + z_401 + z_711);
																						:pid_48:undef_DM2 = false;
																						:pid_48:localPC = (((z_311 + z_401 + z_711) < t_57) && (t_10 < 4) && (t_65 < 4) && (t_226 < 4) && (t_57 < 4) && (z_116 < t_10) && (z_401 < t_226) && (0 <= (t_10 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_226 + -2)) && (0 <= (t_57 + -2)) && ((z_0 + z_190 + z_295 + z_5 + z_540 + z_645 + z_90) <= (z_1 + z_11 + z_116 + z_131 + z_311 + z_401 + z_711)) && ((z_0 + z_190 + z_295 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_131 + z_311 + z_401)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_131 > 0) && (z_311 > 0) && (z_401 > 0));
																						:pid_48:timeEmit = (z_0 + z_190 + z_295 + z_5 + z_540 + z_645 + z_90);
																						:pid_49:cl = (z_131 + z_311 + z_401 + z_711);
																						:pid_55:cl = (z_401 + z_711);
																						:pid_60:c = 1;
																						:pid_60:consistent = true;
																						:pid_60:cl = (z_311 + z_401 + z_711);
																						:pid_60:d.seq = 2;
																						:pid_60:d.fragment = FRAGMENT_1;
																						:pid_60:d.offset = 1;
																					}
																					BUFFER{
																						:pid_48:bufferNode:<FIFO>#0{ }
																					}
																				}
																			}
																			EC:<Id:1371;Ev:144;H:19;W:1239>{ SC: ( pid_16:o#12 , ( pid_36:cp2 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_69:cp1 , pid_74:dp1 , pid_78:dp0 ) , ( pid_87:cp2 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																				
	EXE: { |;| (:pid_82 , run) (:pid_83 , run) (:pid_86 , run) (:pid_86 , cp_sendCM) 
	(:pid_2 , run) }
																				
	TRACE: { |;| (:pid_82 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_658 }) (:pid_86 , ${ output inst::Trickle.Node.ControlMsg 
	[ 0 , 0 ] ${ + param::Trickle.Node.z_3 param::Trickle.Node.z_53 
	param::Trickle.Node.z_658 } } @ (z_53 + z_658)) }
																				PC: ((z_295 == t_102) && (z_645 == t_438) && (z_658 == t_39) && (z_90 == t_5) && 
	(t_10 < 4) && (t_23 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) 
	&& (t_86 < 4) && (t_102 < 4) && (t_226 < 4) && (t_342 < 4) && (t_438 < 4) && 
	(t_57 < 4) && (z_116 < t_10) && (z_167 < t_23) && (z_401 < t_226) && (z_502 < 
	t_342) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_39 + -2)) && (0 
	<= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_86 + -2)) 
	&& (0 <= (t_102 + -2)) && (0 <= (t_226 + -2)) && (0 <= (t_342 + -2)) && (0 <= 
	(t_438 + -2)) && (0 <= (t_57 + -2)) && ((z_0 + z_190 + z_295 + z_5 + z_90) <= 
	(z_1 + z_11 + z_116 + z_131 + z_311 + z_401)) && ((z_0 + z_190 + z_295 + z_5 + 
	z_90) <= (z_167 + z_2 + z_32 + z_427 + z_502)) && ((z_0 + z_5 + z_90) <= (z_1 + 
	z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_167 + z_2 + z_32)) && (z_0 > 0) && 
	(z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_131 > 0) && (z_167 > 0) && (z_190 > 
	0) && (z_2 > 0) && (z_295 > 0) && (z_3 > 0) && (z_311 > 0) && (z_32 > 0) && (z_4 
	> 0) && (z_427 > 0) && (z_5 > 0) && (z_53 > 0) && (z_540 > 0) && (z_90 > 0))
																				DATA{
																					:pid_2:uncoveredExit = 1;
																					:pid_82:node_time = (z_53 + z_658);
																					:pid_82:z = z_658;
																					:pid_82:localTime = (z_3 + z_53 + z_658);
																					:pid_82:localPC = ((z_658 == t_39) && (t_39 < 4) && (0 <= (t_39 + -2)) && (z_3 > 0) && (z_53 > 0));
																					:pid_83:cl = z_658;
																					:pid_89:cl = (z_53 + z_658);
																					:pid_94:cl = (z_53 + z_658);
																				}
																				BUFFER{
																					:pid_48:bufferNode:<FIFO>#0{
																						:pid_31:DataMsg2([ 2 , 2 , 1 ] , (z_0 + z_190 + z_295 + z_5 + z_540 + z_645 + z_90));
																						:pid_82:ControlMsg([ 0 , 0 ] , (z_3 + z_53 + z_658));
																					}
																				}
																				EC:<Id:1504;Ev:0;H:20;W:1360>{ SC: ( pid_17:o#13 , ( pid_36:cp2 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_69:cp1 , pid_74:dp1 , pid_78:dp0 ) , ( pid_87:cp2 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
	EXE: { |;| (:pid_48 , run) (:pid_60 , run) (:pid_62 , run) (:pid_62 , 
	dp1_receiveDM_consistent) (:pid_2 , run) (:pid_16 , run) (:pid_16 , n2_in_DM2) }
																					
	TRACE: { |;| (:pid_48 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_716 }) (:pid_62 , ${ input inst::Trickle.Node.DataMsg2 [ 2 
	, 2 , 1 ] ${ + param::Trickle.Node.z_0 param::Trickle.Node.z_190 
	param::Trickle.Node.z_295 param::Trickle.Node.z_5 param::Trickle.Node.z_540 
	param::Trickle.Node.z_645 param::Trickle.Node.z_90 } } @ (z_11 + z_116 + z_131 + 
	z_311 + z_401 + z_716)) }
																					/*FLAGS{ COVERAGE-ELEMENT }*/
																					INFO{
																						<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#13->run::pid_17:Trickle.Observer.o#13->prot::Trickle.Observer.o#13" as trace="tpid#13->run::pid_17:Trickle.Observer.o#13->prot::Trickle.Observer.o#13">
																					}
																					PC: ((z_295 == t_102) && (z_645 == t_438) && (z_658 == t_39) && (z_90 == t_5) && 
	((z_311 + z_401 + z_716) < t_57) && (t_10 < 4) && (t_23 < 4) && (t_39 < 4) && 
	(t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_86 < 4) && (t_102 < 4) && (t_226 < 4)
	 && (t_342 < 4) && (t_438 < 4) && (t_57 < 4) && (z_116 < t_10) && (z_167 < t_23) 
	&& (z_401 < t_226) && (z_502 < t_342) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2))
	 && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 
	+ -2)) && (0 <= (t_86 + -2)) && (0 <= (t_102 + -2)) && (0 <= (t_226 + -2)) && (0 
	<= (t_342 + -2)) && (0 <= (t_438 + -2)) && (0 <= (t_57 + -2)) && ((z_0 + z_190 + 
	z_295 + z_5 + z_540 + z_645 + z_90) <= (z_1 + z_11 + z_116 + z_131 + z_311 + 
	z_401 + z_716)) && ((z_0 + z_190 + z_295 + z_5 + z_90) <= (z_1 + z_11 + z_116 + 
	z_131 + z_311 + z_401)) && ((z_0 + z_190 + z_295 + z_5 + z_90) <= (z_167 + z_2 + 
	z_32 + z_427 + z_502)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 
	+ z_5 + z_90) <= (z_167 + z_2 + z_32)) && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) 
	&& (z_116 > 0) && (z_131 > 0) && (z_167 > 0) && (z_190 > 0) && (z_2 > 0) && 
	(z_295 > 0) && (z_3 > 0) && (z_311 > 0) && (z_32 > 0) && (z_4 > 0) && (z_401 > 0)
	 && (z_427 > 0) && (z_5 > 0) && (z_53 > 0) && (z_540 > 0) && (z_90 > 0))
																					DATA{
																						:pid_2:uncoveredExit = 0;
																						:pid_48:my_buff[1].seq = 2;
																						:pid_48:my_buff[1].fragment = FRAGMENT_1;
																						:pid_48:my_buff[1].offset = 1;
																						:pid_48:firmware[1] = FRAGMENT_1;
																						:pid_48:myseq_buff[1] = 1;
																						:pid_48:node_time = (z_11 + z_116 + z_131 + z_311 + z_401 + z_716);
																						:pid_48:z = z_716;
																						:pid_48:localTime = (z_1 + z_11 + z_116 + z_131 + z_311 + z_401 + z_716);
																						:pid_48:undef_DM2 = false;
																						:pid_48:localPC = (((z_311 + z_401 + z_716) < t_57) && (t_10 < 4) && (t_65 < 4) && (t_226 < 4) && (t_57 < 4) && (z_116 < t_10) && (z_401 < t_226) && (0 <= (t_10 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_226 + -2)) && (0 <= (t_57 + -2)) && ((z_0 + z_190 + z_295 + z_5 + z_540 + z_645 + z_90) <= (z_1 + z_11 + z_116 + z_131 + z_311 + z_401 + z_716)) && ((z_0 + z_190 + z_295 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_131 + z_311 + z_401)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_131 > 0) && (z_311 > 0) && (z_401 > 0));
																						:pid_48:timeEmit = (z_0 + z_190 + z_295 + z_5 + z_540 + z_645 + z_90);
																						:pid_49:cl = (z_131 + z_311 + z_401 + z_716);
																						:pid_55:cl = (z_401 + z_716);
																						:pid_60:c = 1;
																						:pid_60:consistent = true;
																						:pid_60:cl = (z_311 + z_401 + z_716);
																						:pid_60:d.seq = 2;
																						:pid_60:d.fragment = FRAGMENT_1;
																						:pid_60:d.offset = 1;
																					}
																					BUFFER{
																						:pid_48:bufferNode:<FIFO>#0{
																							:pid_82:ControlMsg([ 0 , 0 ] , (z_3 + z_53 + z_658));
																						}
																					}
																				}
																			}
																			EC:<Id:1372;Ev:145;H:19;W:1240>{ SC: ( pid_16:o#12 , ( pid_36:cp2 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																				
	EXE: { |;| (:pid_65 , run) (:pid_66 , run) (:pid_69 , run) (:pid_69 , cp_sendCM) 
	(:pid_2 , run) }
																				
	TRACE: { |;| (:pid_65 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_657 }) (:pid_69 , ${ output inst::Trickle.Node.ControlMsg 
	[ 1 , 0 ] ${ + param::Trickle.Node.z_167 param::Trickle.Node.z_2 
	param::Trickle.Node.z_32 param::Trickle.Node.z_427 param::Trickle.Node.z_502 
	param::Trickle.Node.z_657 } } @ (z_167 + z_32 + z_427 + z_502 + z_657)) }
																				PC: (((z_427 + z_502 + z_657) == t_86) && (z_295 == t_102) && (z_645 == t_438) && 
	(z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 
	4) && (t_65 < 4) && (t_86 < 4) && (t_102 < 4) && (t_226 < 4) && (t_342 < 4) && 
	(t_438 < 4) && (t_57 < 4) && (z_116 < t_10) && (z_167 < t_23) && (z_401 < t_226) 
	&& (z_502 < t_342) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_39 + 
	-2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= 
	(t_86 + -2)) && (0 <= (t_102 + -2)) && (0 <= (t_226 + -2)) && (0 <= (t_342 + -2))
	 && (0 <= (t_438 + -2)) && (0 <= (t_57 + -2)) && ((z_0 + z_190 + z_295 + z_5 + 
	z_90) <= (z_1 + z_11 + z_116 + z_131 + z_311 + z_401)) && ((z_0 + z_190 + z_295 
	+ z_5 + z_90) <= (z_167 + z_2 + z_32 + z_427 + z_502)) && ((z_0 + z_5 + z_90) <= 
	(z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_167 + z_2 + z_32)) && (z_0 > 
	0) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_131 > 0) && (z_167 > 0) && 
	(z_190 > 0) && (z_2 > 0) && (z_295 > 0) && (z_3 > 0) && (z_311 > 0) && (z_32 > 0)
	 && (z_4 > 0) && (z_427 > 0) && (z_5 > 0) && (z_502 > 0) && (z_540 > 0) && (z_90 
	> 0))
																				DATA{
																					:pid_2:uncoveredExit = 1;
																					:pid_65:node_time = (z_167 + z_32 + z_427 + z_502 + z_657);
																					:pid_65:z = z_657;
																					:pid_65:localTime = (z_167 + z_2 + z_32 + z_427 + z_502 + z_657);
																					:pid_65:localPC = (((z_427 + z_502 + z_657) == t_86) && (t_23 < 4) && (t_86 < 4) && (t_342 < 4) && (z_167 < t_23) && (z_502 < t_342) && (0 <= (t_23 + -2)) && (0 <= (t_86 + -2)) && (0 <= (t_342 + -2)) && ((z_0 + z_190 + z_295 + z_5 + z_90) <= (z_167 + z_2 + z_32 + z_427 + z_502)) && ((z_0 + z_5 + z_90) <= (z_167 + z_2 + z_32)) && (z_167 > 0) && (z_2 > 0) && (z_32 > 0) && (z_427 > 0) && (z_502 > 0));
																					:pid_66:cl = (z_427 + z_502 + z_657);
																					:pid_72:cl = (z_502 + z_657);
																					:pid_77:cl = (z_167 + z_32 + z_427 + z_502 + z_657);
																				}
																				BUFFER{
																					:pid_31:bufferNode:<FIFO>#0{
																						:pid_65:ControlMsg([ 1 , 0 ] , (z_167 + z_2 + z_32 + z_427 + z_502 + z_657));
																					}
																					:pid_48:bufferNode:<FIFO>#0{
																						:pid_31:DataMsg2([ 2 , 2 , 1 ] , (z_0 + z_190 + z_295 + z_5 + z_540 + z_645 + z_90));
																						:pid_65:ControlMsg([ 1 , 0 ] , (z_167 + z_2 + z_32 + z_427 + z_502 + z_657));
																					}
																					:pid_82:bufferNode:<FIFO>#0{
																						:pid_65:ControlMsg([ 1 , 0 ] , (z_167 + z_2 + z_32 + z_427 + z_502 + z_657));
																					}
																					:pid_99:bufferNode:<FIFO>#0{
																						:pid_65:ControlMsg([ 1 , 0 ] , (z_167 + z_2 + z_32 + z_427 + z_502 + z_657));
																					}
																				}
																				EC:<Id:1516;Ev:154;H:20;W:1371>{ SC: ( pid_17:o#13 , ( pid_36:cp2 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
	EXE: { |;| (:pid_48 , run) (:pid_60 , run) (:pid_62 , run) (:pid_62 , 
	dp1_receiveDM_consistent) (:pid_2 , run) (:pid_16 , run) (:pid_16 , n2_in_DM2) }
																					
	TRACE: { |;| (:pid_48 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_721 }) (:pid_62 , ${ input inst::Trickle.Node.DataMsg2 [ 2 
	, 2 , 1 ] ${ + param::Trickle.Node.z_0 param::Trickle.Node.z_190 
	param::Trickle.Node.z_295 param::Trickle.Node.z_5 param::Trickle.Node.z_540 
	param::Trickle.Node.z_645 param::Trickle.Node.z_90 } } @ (z_11 + z_116 + z_131 + 
	z_311 + z_401 + z_721)) }
																					/*FLAGS{ COVERAGE-ELEMENT }*/
																					INFO{
																						<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#13->run::pid_17:Trickle.Observer.o#13->prot::Trickle.Observer.o#13" as trace="tpid#13->run::pid_17:Trickle.Observer.o#13->prot::Trickle.Observer.o#13">
																					}
																					PC: (((z_427 + z_502 + z_657) == t_86) && (z_295 == t_102) && (z_645 == t_438) && 
	(z_90 == t_5) && ((z_311 + z_401 + z_721) < t_57) && (t_10 < 4) && (t_23 < 4) && 
	(t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_86 < 4) && (t_102 < 4) 
	&& (t_226 < 4) && (t_342 < 4) && (t_438 < 4) && (t_57 < 4) && (z_116 < t_10) && 
	(z_167 < t_23) && (z_401 < t_226) && (z_502 < t_342) && (0 <= (t_10 + -2)) && (0 
	<= (t_23 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) 
	&& (0 <= (t_65 + -2)) && (0 <= (t_86 + -2)) && (0 <= (t_102 + -2)) && (0 <= 
	(t_226 + -2)) && (0 <= (t_342 + -2)) && (0 <= (t_438 + -2)) && (0 <= (t_57 + -2))
	 && ((z_0 + z_190 + z_295 + z_5 + z_540 + z_645 + z_90) <= (z_1 + z_11 + z_116 + 
	z_131 + z_311 + z_401 + z_721)) && ((z_0 + z_190 + z_295 + z_5 + z_90) <= (z_1 + 
	z_11 + z_116 + z_131 + z_311 + z_401)) && ((z_0 + z_190 + z_295 + z_5 + z_90) <= 
	(z_167 + z_2 + z_32 + z_427 + z_502)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + 
	z_116)) && ((z_0 + z_5 + z_90) <= (z_167 + z_2 + z_32)) && (z_0 > 0) && (z_1 > 0)
	 && (z_11 > 0) && (z_116 > 0) && (z_131 > 0) && (z_167 > 0) && (z_190 > 0) && 
	(z_2 > 0) && (z_295 > 0) && (z_3 > 0) && (z_311 > 0) && (z_32 > 0) && (z_4 > 0) 
	&& (z_401 > 0) && (z_427 > 0) && (z_5 > 0) && (z_502 > 0) && (z_540 > 0) && 
	(z_90 > 0))
																					DATA{
																						:pid_2:uncoveredExit = 0;
																						:pid_48:my_buff[1].seq = 2;
																						:pid_48:my_buff[1].fragment = FRAGMENT_1;
																						:pid_48:my_buff[1].offset = 1;
																						:pid_48:firmware[1] = FRAGMENT_1;
																						:pid_48:myseq_buff[1] = 1;
																						:pid_48:node_time = (z_11 + z_116 + z_131 + z_311 + z_401 + z_721);
																						:pid_48:z = z_721;
																						:pid_48:localTime = (z_1 + z_11 + z_116 + z_131 + z_311 + z_401 + z_721);
																						:pid_48:undef_DM2 = false;
																						:pid_48:localPC = (((z_311 + z_401 + z_721) < t_57) && (t_10 < 4) && (t_65 < 4) && (t_226 < 4) && (t_57 < 4) && (z_116 < t_10) && (z_401 < t_226) && (0 <= (t_10 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_226 + -2)) && (0 <= (t_57 + -2)) && ((z_0 + z_190 + z_295 + z_5 + z_540 + z_645 + z_90) <= (z_1 + z_11 + z_116 + z_131 + z_311 + z_401 + z_721)) && ((z_0 + z_190 + z_295 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_131 + z_311 + z_401)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_131 > 0) && (z_311 > 0) && (z_401 > 0));
																						:pid_48:timeEmit = (z_0 + z_190 + z_295 + z_5 + z_540 + z_645 + z_90);
																						:pid_49:cl = (z_131 + z_311 + z_401 + z_721);
																						:pid_55:cl = (z_401 + z_721);
																						:pid_60:c = 1;
																						:pid_60:consistent = true;
																						:pid_60:cl = (z_311 + z_401 + z_721);
																						:pid_60:d.seq = 2;
																						:pid_60:d.fragment = FRAGMENT_1;
																						:pid_60:d.offset = 1;
																					}
																					BUFFER{
																						:pid_48:bufferNode:<FIFO>#0{
																							:pid_65:ControlMsg([ 1 , 0 ] , (z_167 + z_2 + z_32 + z_427 + z_502 + z_657));
																						}
																					}
																					EC:<Id:1605;Ev:171;H:21;W:1451>{ SC: ( pid_17:o#13 , ( pid_36:cp2 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_79:dp1 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
		EXE: { |;| (:pid_65 , run) (:pid_77 , run) (:pid_78 , run) (:pid_78 , 
	dp_init) (:pid_2 , run) }
																					
		TRACE: { |;| (:pid_65 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_767 }) (:pid_78 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_570 }) }
																						PC: (((z_427 + z_502 + z_657) == t_86) && (z_295 == t_102) && (z_645 == t_438) && 
	(z_90 == t_5) && ((z_311 + z_401 + z_721) < t_57) && (t_10 < 4) && (t_23 < 4) && 
	(t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_86 < 4) && (t_102 < 4) 
	&& (t_226 < 4) && (t_342 < 4) && (t_438 < 4) && (t_57 < 4) && (t_570 < 4) && 
	(z_116 < t_10) && (z_167 < t_23) && (z_401 < t_226) && (z_502 < t_342) && (0 <= 
	(t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) 
	&& (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_86 + -2)) && (0 <= (t_102 
	+ -2)) && (0 <= (t_226 + -2)) && (0 <= (t_342 + -2)) && (0 <= (t_438 + -2)) && 
	(0 <= (t_57 + -2)) && (0 <= (t_570 + -2)) && ((z_0 + z_190 + z_295 + z_5 + z_540 
	+ z_645 + z_90) <= (z_1 + z_11 + z_116 + z_131 + z_311 + z_401 + z_721)) && 
	((z_0 + z_190 + z_295 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_131 + z_311 + 
	z_401)) && ((z_0 + z_190 + z_295 + z_5 + z_90) <= (z_167 + z_2 + z_32 + z_427 + 
	z_502)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) 
	<= (z_167 + z_2 + z_32)) && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) 
	&& (z_131 > 0) && (z_167 > 0) && (z_190 > 0) && (z_2 > 0) && (z_295 > 0) && (z_3 
	> 0) && (z_311 > 0) && (z_32 > 0) && (z_4 > 0) && (z_401 > 0) && (z_427 > 0) && 
	(z_5 > 0) && (z_502 > 0) && (z_540 > 0) && (z_657 > 0) && (z_90 > 0))
																						DATA{
																							:pid_2:uncoveredExit = 1;
																							:pid_65:node_time = (z_167 + z_32 + z_427 + z_502 + z_657 + z_767);
																							:pid_65:z = z_767;
																							:pid_65:localTime = (z_167 + z_2 + z_32 + z_427 + z_502 + z_657 + z_767);
																							:pid_65:localPC = (((z_427 + z_502 + z_657) == t_86) && (t_23 < 4) && (t_86 < 4) && (t_342 < 4) && (t_570 < 4) && (z_167 < t_23) && (z_502 < t_342) && (0 <= (t_23 + -2)) && (0 <= (t_86 + -2)) && (0 <= (t_342 + -2)) && (0 <= (t_570 + -2)) && ((z_0 + z_190 + z_295 + z_5 + z_90) <= (z_167 + z_2 + z_32 + z_427 + z_502)) && ((z_0 + z_5 + z_90) <= (z_167 + z_2 + z_32)) && (z_167 > 0) && (z_2 > 0) && (z_32 > 0) && (z_427 > 0) && (z_502 > 0) && (z_657 > 0));
																							:pid_66:cl = (z_427 + z_502 + z_657 + z_767);
																							:pid_72:cl = (z_502 + z_657 + z_767);
																							:pid_77:e = 0;
																							:pid_77:tau = 4;
																							:pid_77:tau_l = 4;
																							:pid_77:tau_h = 8;
																							:pid_77:k = 2;
																							:pid_77:c = 0;
																							:pid_77:t = t_570;
																							:pid_77:cl = 0;
																						}
																						EC:<Id:1798;Ev:178;H:22;W:1627>{ SC: ( pid_18:o#14 , ( pid_36:cp2 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_79:dp1 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
			EXE: { |;| (:pid_65 , run) (:pid_77 , run) (:pid_79 , run) (:pid_79 , 
	dp1_receiveDM_consistent) (:pid_2 , run) (:pid_17 , run) (:pid_17 , n3_in_DM2) }
																					
			TRACE: { |;| (:pid_65 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_852 }) (:pid_79 , ${ input inst::Trickle.Node.DataMsg2 [ 2 
	, 2 , 1 ] ${ + param::Trickle.Node.z_0 param::Trickle.Node.z_190 
	param::Trickle.Node.z_295 param::Trickle.Node.z_5 param::Trickle.Node.z_540 
	param::Trickle.Node.z_645 param::Trickle.Node.z_90 } } @ (z_167 + z_32 + z_427 + 
	z_502 + z_657 + z_767 + z_852)) }
																							/*FLAGS{ COVERAGE-ELEMENT }*/
																							INFO{
																								<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#14->run::pid_18:Trickle.Observer.o#14->prot::Trickle.Observer.o#14" as trace="tpid#14->run::pid_18:Trickle.Observer.o#14->prot::Trickle.Observer.o#14">
																							}
																							PC: (((z_427 + z_502 + z_657) == t_86) && (z_295 == t_102) && (z_645 == t_438) && 
	(z_90 == t_5) && ((z_311 + z_401 + z_721) < t_57) && (t_10 < 4) && (t_23 < 4) && 
	(t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_86 < 4) && (t_102 < 4) 
	&& (t_226 < 4) && (t_342 < 4) && (t_438 < 4) && (t_57 < 4) && (t_570 < 4) && 
	(z_116 < t_10) && (z_167 < t_23) && (z_401 < t_226) && (z_502 < t_342) && (z_852 
	< t_570) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_39 + -2)) && (0 
	<= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_86 + -2)) 
	&& (0 <= (t_102 + -2)) && (0 <= (t_226 + -2)) && (0 <= (t_342 + -2)) && (0 <= 
	(t_438 + -2)) && (0 <= (t_57 + -2)) && (0 <= (t_570 + -2)) && ((z_0 + z_190 + 
	z_295 + z_5 + z_540 + z_645 + z_90) <= (z_1 + z_11 + z_116 + z_131 + z_311 + 
	z_401 + z_721)) && ((z_0 + z_190 + z_295 + z_5 + z_540 + z_645 + z_90) <= (z_167 
	+ z_2 + z_32 + z_427 + z_502 + z_657 + z_767 + z_852)) && ((z_0 + z_190 + z_295 
	+ z_5 + z_90) <= (z_1 + z_11 + z_116 + z_131 + z_311 + z_401)) && ((z_0 + z_190 
	+ z_295 + z_5 + z_90) <= (z_167 + z_2 + z_32 + z_427 + z_502)) && ((z_0 + z_5 + 
	z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_167 + z_2 + z_32)) 
	&& (z_0 > 0) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_131 > 0) && (z_167 
	> 0) && (z_190 > 0) && (z_2 > 0) && (z_295 > 0) && (z_3 > 0) && (z_311 > 0) && 
	(z_32 > 0) && (z_4 > 0) && (z_401 > 0) && (z_427 > 0) && (z_5 > 0) && (z_502 > 0)
	 && (z_540 > 0) && (z_657 > 0) && (z_767 > 0) && (z_90 > 0))
																							DATA{
																								:pid_2:uncoveredExit = 0;
																								:pid_65:my_buff[1].seq = 2;
																								:pid_65:my_buff[1].fragment = FRAGMENT_1;
																								:pid_65:my_buff[1].offset = 1;
																								:pid_65:firmware[1] = FRAGMENT_1;
																								:pid_65:myseq_buff[1] = 1;
																								:pid_65:node_time = (z_167 + z_32 + z_427 + z_502 + z_657 + z_767 + z_852);
																								:pid_65:z = z_852;
																								:pid_65:localTime = (z_167 + z_2 + z_32 + z_427 + z_502 + z_657 + z_767 + z_852);
																								:pid_65:undef_DM2 = false;
																								:pid_65:localPC = (((z_427 + z_502 + z_657) == t_86) && (t_23 < 4) && (t_86 < 4) && (t_342 < 4) && (t_570 < 4) && (z_167 < t_23) && (z_502 < t_342) && (z_852 < t_570) && (0 <= (t_23 + -2)) && (0 <= (t_86 + -2)) && (0 <= (t_342 + -2)) && (0 <= (t_570 + -2)) && ((z_0 + z_190 + z_295 + z_5 + z_540 + z_645 + z_90) <= (z_167 + z_2 + z_32 + z_427 + z_502 + z_657 + z_767 + z_852)) && ((z_0 + z_190 + z_295 + z_5 + z_90) <= (z_167 + z_2 + z_32 + z_427 + z_502)) && ((z_0 + z_5 + z_90) <= (z_167 + z_2 + z_32)) && (z_167 > 0) && (z_2 > 0) && (z_32 > 0) && (z_427 > 0) && (z_502 > 0) && (z_657 > 0) && (z_767 > 0));
																								:pid_65:timeEmit = (z_0 + z_190 + z_295 + z_5 + z_540 + z_645 + z_90);
																								:pid_66:cl = (z_427 + z_502 + z_657 + z_767 + z_852);
																								:pid_72:cl = (z_502 + z_657 + z_767 + z_852);
																								:pid_77:c = 1;
																								:pid_77:consistent = true;
																								:pid_77:cl = z_852;
																								:pid_77:d.seq = 2;
																								:pid_77:d.fragment = FRAGMENT_1;
																								:pid_77:d.offset = 1;
																							}
																							BUFFER{
																								:pid_65:bufferNode:<FIFO>#0{ }
																							}
																							EC:<Id:1878;Ev:193;H:23;W:1700>{ SC: ( pid_18:o#14 , ( pid_36:cp2 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_69:cp1 , pid_74:dp1 , pid_79:dp1 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
				EXE: { |;| (:pid_65 , run) (:pid_66 , run) (:pid_70 , run) (:pid_70 
	, cp_resetTau) (:pid_2 , run) }
																					
				TRACE: { |;| (:pid_65 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_887 }) (:pid_70 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_234 }) }
																								PC: (((z_427 + z_502 + z_657) == t_86) && ((z_427 + z_502 + z_657 + z_767 + z_852 + 
	z_887) == 4) && (z_295 == t_102) && (z_645 == t_438) && (z_90 == t_5) && ((z_311 
	+ z_401 + z_721) < t_57) && (t_10 < 4) && (t_23 < 4) && (t_234 < 8) && (t_39 < 4)
	 && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_86 < 4) && (t_102 < 4) && (t_226 
	< 4) && (t_342 < 4) && (t_438 < 4) && (t_57 < 4) && (t_570 < 4) && (z_116 < t_10)
	 && (z_167 < t_23) && (z_401 < t_226) && (z_502 < t_342) && (z_852 < t_570) && 
	(0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_234 + -4)) && (0 <= (t_39 + 
	-2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= 
	(t_86 + -2)) && (0 <= (t_102 + -2)) && (0 <= (t_226 + -2)) && (0 <= (t_342 + -2))
	 && (0 <= (t_438 + -2)) && (0 <= (t_57 + -2)) && (0 <= (t_570 + -2)) && ((z_0 + 
	z_190 + z_295 + z_5 + z_540 + z_645 + z_90) <= (z_1 + z_11 + z_116 + z_131 + 
	z_311 + z_401 + z_721)) && ((z_0 + z_190 + z_295 + z_5 + z_540 + z_645 + z_90) 
	<= (z_167 + z_2 + z_32 + z_427 + z_502 + z_657 + z_767 + z_852)) && ((z_0 + 
	z_190 + z_295 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_131 + z_311 + z_401)) && 
	((z_0 + z_190 + z_295 + z_5 + z_90) <= (z_167 + z_2 + z_32 + z_427 + z_502)) && 
	((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_167 + 
	z_2 + z_32)) && ((z_427 + z_502 + z_657 + z_767 + z_852 + z_887) > t_86) && (z_0 
	> 0) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_131 > 0) && (z_167 > 0) && 
	(z_190 > 0) && (z_2 > 0) && (z_295 > 0) && (z_3 > 0) && (z_311 > 0) && (z_32 > 0)
	 && (z_4 > 0) && (z_401 > 0) && (z_427 > 0) && (z_5 > 0) && (z_502 > 0) && 
	(z_540 > 0) && (z_657 > 0) && (z_767 > 0) && (z_852 > 0) && (z_90 > 0))
																								DATA{
																									:pid_2:uncoveredExit = 1;
																									:pid_65:node_time = (z_167 + z_32 + z_427 + z_502 + z_657 + z_767 + z_852 + z_887);
																									:pid_65:z = z_887;
																									:pid_65:localTime = (z_167 + z_2 + z_32 + z_427 + z_502 + z_657 + z_767 + z_852 + z_887);
																									:pid_65:localPC = (((z_427 + z_502 + z_657) == t_86) && ((z_427 + z_502 + z_657 + z_767 + z_852 + z_887) == 4) && (t_23 < 4) && (t_234 < 8) && (t_86 < 4) && (t_342 < 4) && (t_570 < 4) && (z_167 < t_23) && (z_502 < t_342) && (z_852 < t_570) && (0 <= (t_23 + -2)) && (0 <= (t_234 + -4)) && (0 <= (t_86 + -2)) && (0 <= (t_342 + -2)) && (0 <= (t_570 + -2)) && ((z_0 + z_190 + z_295 + z_5 + z_540 + z_645 + z_90) <= (z_167 + z_2 + z_32 + z_427 + z_502 + z_657 + z_767 + z_852)) && ((z_0 + z_190 + z_295 + z_5 + z_90) <= (z_167 + z_2 + z_32 + z_427 + z_502)) && ((z_0 + z_5 + z_90) <= (z_167 + z_2 + z_32)) && ((z_427 + z_502 + z_657 + z_767 + z_852 + z_887) > t_86) && (z_167 > 0) && (z_2 > 0) && (z_32 > 0) && (z_427 > 0) && (z_502 > 0) && (z_657 > 0) && (z_767 > 0) && (z_852 > 0));
																									:pid_66:e = 1;
																									:pid_66:tau = 8;
																									:pid_66:c = 0;
																									:pid_66:t = t_234;
																									:pid_66:cl = 0;
																									:pid_72:cl = (z_502 + z_657 + z_767 + z_852 + z_887);
																									:pid_77:cl = (z_852 + z_887);
																								}
																								EC:<Id:2052;Ev:0;H:24;W:1859>{ SC: ( pid_18:o#14 , ( pid_36:cp2 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_70:cp2 , pid_74:dp1 , pid_79:dp1 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
					EXE: { |;| (:pid_65 , run) (:pid_66 , run) (:pid_69 , run) 
	(:pid_69 , cp_sendCM) (:pid_2 , run) }
																					
					TRACE: { |;| (:pid_65 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_962 }) (:pid_69 , ${ output inst::Trickle.Node.ControlMsg 
	[ 1 , 1 ] ${ + param::Trickle.Node.z_167 param::Trickle.Node.z_2 
	param::Trickle.Node.z_32 param::Trickle.Node.z_427 param::Trickle.Node.z_502 
	param::Trickle.Node.z_657 param::Trickle.Node.z_767 param::Trickle.Node.z_852 
	param::Trickle.Node.z_887 param::Trickle.Node.z_962 } } @ (z_167 + z_32 + z_427 
	+ z_502 + z_657 + z_767 + z_852 + z_887 + z_962)) }
																									/*FLAGS{ COVERAGE-ELEMENT }*/
																									INFO{
																										<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#15->Node.ControlProcess->cp1.cp_sendCM" as trace="tpid#15->Node.ControlProcess->cp1.cp_sendCM">
																									}
																									PC: (((z_427 + z_502 + z_657) == t_86) && ((z_427 + z_502 + z_657 + z_767 + z_852 + 
	z_887) == 4) && (z_295 == t_102) && (z_645 == t_438) && (z_90 == t_5) && (z_962 
	== t_234) && ((z_311 + z_401 + z_721) < t_57) && (t_10 < 4) && (t_23 < 4) && 
	(t_234 < 8) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_86 < 4) 
	&& (t_102 < 4) && (t_226 < 4) && (t_342 < 4) && (t_438 < 4) && (t_57 < 4) && 
	(t_570 < 4) && (z_116 < t_10) && (z_167 < t_23) && (z_401 < t_226) && (z_502 < 
	t_342) && (z_852 < t_570) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= 
	(t_234 + -4)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) 
	&& (0 <= (t_65 + -2)) && (0 <= (t_86 + -2)) && (0 <= (t_102 + -2)) && (0 <= 
	(t_226 + -2)) && (0 <= (t_342 + -2)) && (0 <= (t_438 + -2)) && (0 <= (t_57 + -2))
	 && (0 <= (t_570 + -2)) && ((z_0 + z_190 + z_295 + z_5 + z_540 + z_645 + z_90) 
	<= (z_1 + z_11 + z_116 + z_131 + z_311 + z_401 + z_721)) && ((z_0 + z_190 + 
	z_295 + z_5 + z_540 + z_645 + z_90) <= (z_167 + z_2 + z_32 + z_427 + z_502 + 
	z_657 + z_767 + z_852)) && ((z_0 + z_190 + z_295 + z_5 + z_90) <= (z_1 + z_11 + 
	z_116 + z_131 + z_311 + z_401)) && ((z_0 + z_190 + z_295 + z_5 + z_90) <= (z_167 
	+ z_2 + z_32 + z_427 + z_502)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) 
	&& ((z_0 + z_5 + z_90) <= (z_167 + z_2 + z_32)) && ((z_427 + z_502 + z_657 + 
	z_767 + z_852 + z_887) > t_86) && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) && (z_116 
	> 0) && (z_131 > 0) && (z_167 > 0) && (z_190 > 0) && (z_2 > 0) && (z_295 > 0) && 
	(z_3 > 0) && (z_311 > 0) && (z_32 > 0) && (z_4 > 0) && (z_401 > 0) && (z_427 > 0)
	 && (z_5 > 0) && (z_502 > 0) && (z_540 > 0) && (z_657 > 0) && (z_767 > 0) && 
	(z_852 > 0) && (z_887 > 0) && (z_90 > 0))
																									DATA{
																										:pid_2:uncoveredExit = 2;
																										:pid_65:node_time = (z_167 + z_32 + z_427 + z_502 + z_657 + z_767 + z_852 + z_887 + z_962);
																										:pid_65:z = z_962;
																										:pid_65:localTime = (z_167 + z_2 + z_32 + z_427 + z_502 + z_657 + z_767 + z_852 + z_887 + z_962);
																										:pid_65:localPC = (((z_427 + z_502 + z_657) == t_86) && ((z_427 + z_502 + z_657 + z_767 + z_852 + z_887) == 4) && (z_962 == t_234) && (t_23 < 4) && (t_234 < 8) && (t_86 < 4) && (t_342 < 4) && (t_570 < 4) && (z_167 < t_23) && (z_502 < t_342) && (z_852 < t_570) && (0 <= (t_23 + -2)) && (0 <= (t_234 + -4)) && (0 <= (t_86 + -2)) && (0 <= (t_342 + -2)) && (0 <= (t_570 + -2)) && ((z_0 + z_190 + z_295 + z_5 + z_540 + z_645 + z_90) <= (z_167 + z_2 + z_32 + z_427 + z_502 + z_657 + z_767 + z_852)) && ((z_0 + z_190 + z_295 + z_5 + z_90) <= (z_167 + z_2 + z_32 + z_427 + z_502)) && ((z_0 + z_5 + z_90) <= (z_167 + z_2 + z_32)) && ((z_427 + z_502 + z_657 + z_767 + z_852 + z_887) > t_86) && (z_167 > 0) && (z_2 > 0) && (z_32 > 0) && (z_427 > 0) && (z_502 > 0) && (z_657 > 0) && (z_767 > 0) && (z_852 > 0) && (z_887 > 0));
																										:pid_66:cl = z_962;
																										:pid_72:cl = (z_502 + z_657 + z_767 + z_852 + z_887 + z_962);
																										:pid_77:cl = (z_852 + z_887 + z_962);
																									}
																									BUFFER{
																										:pid_31:bufferNode:<FIFO>#0{
																											:pid_65:ControlMsg([ 1 , 0 ] , (z_167 + z_2 + z_32 + z_427 + z_502 + z_657));
																											:pid_65:ControlMsg([ 1 , 1 ] , (z_167 + z_2 + z_32 + z_427 + z_502 + z_657 + z_767 + z_852 + z_887 + z_962));
																										}
																										:pid_48:bufferNode:<FIFO>#0{
																											:pid_65:ControlMsg([ 1 , 0 ] , (z_167 + z_2 + z_32 + z_427 + z_502 + z_657));
																											:pid_65:ControlMsg([ 1 , 1 ] , (z_167 + z_2 + z_32 + z_427 + z_502 + z_657 + z_767 + z_852 + z_887 + z_962));
																										}
																										:pid_82:bufferNode:<FIFO>#0{
																											:pid_65:ControlMsg([ 1 , 0 ] , (z_167 + z_2 + z_32 + z_427 + z_502 + z_657));
																											:pid_65:ControlMsg([ 1 , 1 ] , (z_167 + z_2 + z_32 + z_427 + z_502 + z_657 + z_767 + z_852 + z_887 + z_962));
																										}
																										:pid_99:bufferNode:<FIFO>#0{
																											:pid_65:ControlMsg([ 1 , 0 ] , (z_167 + z_2 + z_32 + z_427 + z_502 + z_657));
																											:pid_65:ControlMsg([ 1 , 1 ] , (z_167 + z_2 + z_32 + z_427 + z_502 + z_657 + z_767 + z_852 + z_887 + z_962));
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																			EC:<Id:1373;Ev:146;H:19;W:1241>{ SC: ( pid_16:o#12 , ( pid_36:cp2 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_69:cp1 , pid_75:dp2 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																				
	EXE: { |;| (:pid_65 , run) (:pid_72 , run) (:pid_74 , run) (:pid_74 , dp_sendDM) 
	(:pid_2 , run) }
																				
	TRACE: { |;| (:pid_65 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_657 }) (:pid_74 , ${ output inst::Trickle.Node.DataMsg1 [ 
	1 , 1 , 0 ] ${ + param::Trickle.Node.z_167 param::Trickle.Node.z_2 
	param::Trickle.Node.z_32 param::Trickle.Node.z_427 param::Trickle.Node.z_502 
	param::Trickle.Node.z_657 } } @ (z_167 + z_32 + z_427 + z_502 + z_657)) }
																				PC: (((z_502 + z_657) == t_342) && (z_295 == t_102) && (z_645 == t_438) && (z_90 == 
	t_5) && (t_10 < 4) && (t_23 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && 
	(t_65 < 4) && (t_86 < 4) && (t_102 < 4) && (t_226 < 4) && (t_342 < 4) && (t_438 
	< 4) && (t_57 < 4) && (z_116 < t_10) && (z_167 < t_23) && (z_401 < t_226) && 
	(z_502 < t_342) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_39 + -2))
	 && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_86 
	+ -2)) && (0 <= (t_102 + -2)) && (0 <= (t_226 + -2)) && (0 <= (t_342 + -2)) && 
	(0 <= (t_438 + -2)) && (0 <= (t_57 + -2)) && ((z_0 + z_190 + z_295 + z_5 + z_90) 
	<= (z_1 + z_11 + z_116 + z_131 + z_311 + z_401)) && ((z_0 + z_190 + z_295 + z_5 
	+ z_90) <= (z_167 + z_2 + z_32 + z_427 + z_502)) && ((z_0 + z_5 + z_90) <= (z_1 
	+ z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_167 + z_2 + z_32)) && (z_0 > 0) && 
	(z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_131 > 0) && (z_167 > 0) && (z_190 > 
	0) && (z_2 > 0) && (z_295 > 0) && (z_3 > 0) && (z_311 > 0) && (z_32 > 0) && (z_4 
	> 0) && (z_427 > 0) && (z_5 > 0) && (z_502 > 0) && (z_540 > 0) && (z_90 > 0))
																				DATA{
																					:pid_2:uncoveredExit = 1;
																					:pid_65:node_time = (z_167 + z_32 + z_427 + z_502 + z_657);
																					:pid_65:z = z_657;
																					:pid_65:localTime = (z_167 + z_2 + z_32 + z_427 + z_502 + z_657);
																					:pid_65:localPC = (((z_502 + z_657) == t_342) && (t_23 < 4) && (t_86 < 4) && (t_342 < 4) && (z_167 < t_23) && (z_502 < t_342) && (0 <= (t_23 + -2)) && (0 <= (t_86 + -2)) && (0 <= (t_342 + -2)) && ((z_0 + z_190 + z_295 + z_5 + z_90) <= (z_167 + z_2 + z_32 + z_427 + z_502)) && ((z_0 + z_5 + z_90) <= (z_167 + z_2 + z_32)) && (z_167 > 0) && (z_2 > 0) && (z_32 > 0) && (z_427 > 0) && (z_502 > 0));
																					:pid_66:cl = (z_427 + z_502 + z_657);
																					:pid_72:cl = (z_502 + z_657);
																					:pid_77:cl = (z_167 + z_32 + z_427 + z_502 + z_657);
																				}
																				BUFFER{
																					:pid_31:bufferNode:<FIFO>#0{
																						:pid_65:DataMsg1([ 1 , 1 , 0 ] , (z_167 + z_2 + z_32 + z_427 + z_502 + z_657));
																					}
																					:pid_48:bufferNode:<FIFO>#0{
																						:pid_31:DataMsg2([ 2 , 2 , 1 ] , (z_0 + z_190 + z_295 + z_5 + z_540 + z_645 + z_90));
																						:pid_65:DataMsg1([ 1 , 1 , 0 ] , (z_167 + z_2 + z_32 + z_427 + z_502 + z_657));
																					}
																					:pid_82:bufferNode:<FIFO>#0{
																						:pid_65:DataMsg1([ 1 , 1 , 0 ] , (z_167 + z_2 + z_32 + z_427 + z_502 + z_657));
																					}
																					:pid_99:bufferNode:<FIFO>#0{
																						:pid_65:DataMsg1([ 1 , 1 , 0 ] , (z_167 + z_2 + z_32 + z_427 + z_502 + z_657));
																					}
																				}
																				EC:<Id:1526;Ev:0;H:20;W:1380>{ SC: ( pid_17:o#13 , ( pid_36:cp2 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_69:cp1 , pid_75:dp2 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
	EXE: { |;| (:pid_48 , run) (:pid_60 , run) (:pid_62 , run) (:pid_62 , 
	dp1_receiveDM_consistent) (:pid_2 , run) (:pid_16 , run) (:pid_16 , n2_in_DM2) }
																					
	TRACE: { |;| (:pid_48 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_726 }) (:pid_62 , ${ input inst::Trickle.Node.DataMsg2 [ 2 
	, 2 , 1 ] ${ + param::Trickle.Node.z_0 param::Trickle.Node.z_190 
	param::Trickle.Node.z_295 param::Trickle.Node.z_5 param::Trickle.Node.z_540 
	param::Trickle.Node.z_645 param::Trickle.Node.z_90 } } @ (z_11 + z_116 + z_131 + 
	z_311 + z_401 + z_726)) }
																					/*FLAGS{ COVERAGE-ELEMENT }*/
																					INFO{
																						<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#13->run::pid_17:Trickle.Observer.o#13->prot::Trickle.Observer.o#13" as trace="tpid#13->run::pid_17:Trickle.Observer.o#13->prot::Trickle.Observer.o#13">
																					}
																					PC: (((z_502 + z_657) == t_342) && (z_295 == t_102) && (z_645 == t_438) && (z_90 == 
	t_5) && ((z_311 + z_401 + z_726) < t_57) && (t_10 < 4) && (t_23 < 4) && (t_39 < 
	4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_86 < 4) && (t_102 < 4) && 
	(t_226 < 4) && (t_342 < 4) && (t_438 < 4) && (t_57 < 4) && (z_116 < t_10) && 
	(z_167 < t_23) && (z_401 < t_226) && (z_502 < t_342) && (0 <= (t_10 + -2)) && (0 
	<= (t_23 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) 
	&& (0 <= (t_65 + -2)) && (0 <= (t_86 + -2)) && (0 <= (t_102 + -2)) && (0 <= 
	(t_226 + -2)) && (0 <= (t_342 + -2)) && (0 <= (t_438 + -2)) && (0 <= (t_57 + -2))
	 && ((z_0 + z_190 + z_295 + z_5 + z_540 + z_645 + z_90) <= (z_1 + z_11 + z_116 + 
	z_131 + z_311 + z_401 + z_726)) && ((z_0 + z_190 + z_295 + z_5 + z_90) <= (z_1 + 
	z_11 + z_116 + z_131 + z_311 + z_401)) && ((z_0 + z_190 + z_295 + z_5 + z_90) <= 
	(z_167 + z_2 + z_32 + z_427 + z_502)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + 
	z_116)) && ((z_0 + z_5 + z_90) <= (z_167 + z_2 + z_32)) && (z_0 > 0) && (z_1 > 0)
	 && (z_11 > 0) && (z_116 > 0) && (z_131 > 0) && (z_167 > 0) && (z_190 > 0) && 
	(z_2 > 0) && (z_295 > 0) && (z_3 > 0) && (z_311 > 0) && (z_32 > 0) && (z_4 > 0) 
	&& (z_401 > 0) && (z_427 > 0) && (z_5 > 0) && (z_502 > 0) && (z_540 > 0) && 
	(z_90 > 0))
																					DATA{
																						:pid_2:uncoveredExit = 0;
																						:pid_48:my_buff[1].seq = 2;
																						:pid_48:my_buff[1].fragment = FRAGMENT_1;
																						:pid_48:my_buff[1].offset = 1;
																						:pid_48:firmware[1] = FRAGMENT_1;
																						:pid_48:myseq_buff[1] = 1;
																						:pid_48:node_time = (z_11 + z_116 + z_131 + z_311 + z_401 + z_726);
																						:pid_48:z = z_726;
																						:pid_48:localTime = (z_1 + z_11 + z_116 + z_131 + z_311 + z_401 + z_726);
																						:pid_48:undef_DM2 = false;
																						:pid_48:localPC = (((z_311 + z_401 + z_726) < t_57) && (t_10 < 4) && (t_65 < 4) && (t_226 < 4) && (t_57 < 4) && (z_116 < t_10) && (z_401 < t_226) && (0 <= (t_10 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_226 + -2)) && (0 <= (t_57 + -2)) && ((z_0 + z_190 + z_295 + z_5 + z_540 + z_645 + z_90) <= (z_1 + z_11 + z_116 + z_131 + z_311 + z_401 + z_726)) && ((z_0 + z_190 + z_295 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_131 + z_311 + z_401)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_131 > 0) && (z_311 > 0) && (z_401 > 0));
																						:pid_48:timeEmit = (z_0 + z_190 + z_295 + z_5 + z_540 + z_645 + z_90);
																						:pid_49:cl = (z_131 + z_311 + z_401 + z_726);
																						:pid_55:cl = (z_401 + z_726);
																						:pid_60:c = 1;
																						:pid_60:consistent = true;
																						:pid_60:cl = (z_311 + z_401 + z_726);
																						:pid_60:d.seq = 2;
																						:pid_60:d.fragment = FRAGMENT_1;
																						:pid_60:d.offset = 1;
																					}
																					BUFFER{
																						:pid_48:bufferNode:<FIFO>#0{
																							:pid_65:DataMsg1([ 1 , 1 , 0 ] , (z_167 + z_2 + z_32 + z_427 + z_502 + z_657));
																						}
																					}
																				}
																			}
																			EC:<Id:1374;Ev:147;H:19;W:1242>{ SC: ( pid_16:o#12 , ( pid_36:cp2 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_69:cp1 , pid_74:dp1 , pid_79:dp1 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																				
	EXE: { |;| (:pid_65 , run) (:pid_77 , run) (:pid_78 , run) (:pid_78 , dp_init) 
	(:pid_2 , run) }
																				
	TRACE: { |;| (:pid_65 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_657 }) (:pid_78 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_516 }) }
																				PC: ((z_295 == t_102) && (z_645 == t_438) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 
	4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_86 < 4) && 
	(t_102 < 4) && (t_226 < 4) && (t_342 < 4) && (t_438 < 4) && (t_516 < 4) && (t_57 
	< 4) && (z_116 < t_10) && (z_167 < t_23) && (z_401 < t_226) && (z_502 < t_342) 
	&& (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 
	+ -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_86 + -2)) && (0 <= 
	(t_102 + -2)) && (0 <= (t_226 + -2)) && (0 <= (t_342 + -2)) && (0 <= (t_438 + -2)
	) && (0 <= (t_516 + -2)) && (0 <= (t_57 + -2)) && ((z_0 + z_190 + z_295 + z_5 + 
	z_90) <= (z_1 + z_11 + z_116 + z_131 + z_311 + z_401)) && ((z_0 + z_190 + z_295 
	+ z_5 + z_90) <= (z_167 + z_2 + z_32 + z_427 + z_502)) && ((z_0 + z_5 + z_90) <= 
	(z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_167 + z_2 + z_32)) && (z_0 > 
	0) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_131 > 0) && (z_167 > 0) && 
	(z_190 > 0) && (z_2 > 0) && (z_295 > 0) && (z_3 > 0) && (z_311 > 0) && (z_32 > 0)
	 && (z_4 > 0) && (z_427 > 0) && (z_5 > 0) && (z_502 > 0) && (z_540 > 0) && (z_90 
	> 0))
																				DATA{
																					:pid_2:uncoveredExit = 1;
																					:pid_65:node_time = (z_167 + z_32 + z_427 + z_502 + z_657);
																					:pid_65:z = z_657;
																					:pid_65:localTime = (z_167 + z_2 + z_32 + z_427 + z_502 + z_657);
																					:pid_65:localPC = ((t_23 < 4) && (t_86 < 4) && (t_342 < 4) && (t_516 < 4) && (z_167 < t_23) && (z_502 < t_342) && (0 <= (t_23 + -2)) && (0 <= (t_86 + -2)) && (0 <= (t_342 + -2)) && (0 <= (t_516 + -2)) && ((z_0 + z_190 + z_295 + z_5 + z_90) <= (z_167 + z_2 + z_32 + z_427 + z_502)) && ((z_0 + z_5 + z_90) <= (z_167 + z_2 + z_32)) && (z_167 > 0) && (z_2 > 0) && (z_32 > 0) && (z_427 > 0) && (z_502 > 0));
																					:pid_66:cl = (z_427 + z_502 + z_657);
																					:pid_72:cl = (z_502 + z_657);
																					:pid_77:e = 0;
																					:pid_77:tau = 4;
																					:pid_77:tau_l = 4;
																					:pid_77:tau_h = 8;
																					:pid_77:k = 2;
																					:pid_77:c = 0;
																					:pid_77:t = t_516;
																					:pid_77:cl = 0;
																				}
																				EC:<Id:1537;Ev:0;H:20;W:1390>{ SC: ( pid_17:o#13 , ( pid_36:cp2 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_69:cp1 , pid_74:dp1 , pid_79:dp1 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
	EXE: { |;| (:pid_48 , run) (:pid_60 , run) (:pid_62 , run) (:pid_62 , 
	dp1_receiveDM_consistent) (:pid_2 , run) (:pid_16 , run) (:pid_16 , n2_in_DM2) }
																					
	TRACE: { |;| (:pid_48 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_731 }) (:pid_62 , ${ input inst::Trickle.Node.DataMsg2 [ 2 
	, 2 , 1 ] ${ + param::Trickle.Node.z_0 param::Trickle.Node.z_190 
	param::Trickle.Node.z_295 param::Trickle.Node.z_5 param::Trickle.Node.z_540 
	param::Trickle.Node.z_645 param::Trickle.Node.z_90 } } @ (z_11 + z_116 + z_131 + 
	z_311 + z_401 + z_731)) }
																					/*FLAGS{ COVERAGE-ELEMENT }*/
																					INFO{
																						<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#13->run::pid_17:Trickle.Observer.o#13->prot::Trickle.Observer.o#13" as trace="tpid#13->run::pid_17:Trickle.Observer.o#13->prot::Trickle.Observer.o#13">
																					}
																					PC: ((z_295 == t_102) && (z_645 == t_438) && (z_90 == t_5) && ((z_311 + z_401 + 
	z_731) < t_57) && (t_10 < 4) && (t_23 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 
	4) && (t_65 < 4) && (t_86 < 4) && (t_102 < 4) && (t_226 < 4) && (t_342 < 4) && 
	(t_438 < 4) && (t_516 < 4) && (t_57 < 4) && (z_116 < t_10) && (z_167 < t_23) && 
	(z_401 < t_226) && (z_502 < t_342) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) 
	&& (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 
	+ -2)) && (0 <= (t_86 + -2)) && (0 <= (t_102 + -2)) && (0 <= (t_226 + -2)) && (0 
	<= (t_342 + -2)) && (0 <= (t_438 + -2)) && (0 <= (t_516 + -2)) && (0 <= (t_57 + 
	-2)) && ((z_0 + z_190 + z_295 + z_5 + z_540 + z_645 + z_90) <= (z_1 + z_11 + 
	z_116 + z_131 + z_311 + z_401 + z_731)) && ((z_0 + z_190 + z_295 + z_5 + z_90) 
	<= (z_1 + z_11 + z_116 + z_131 + z_311 + z_401)) && ((z_0 + z_190 + z_295 + z_5 
	+ z_90) <= (z_167 + z_2 + z_32 + z_427 + z_502)) && ((z_0 + z_5 + z_90) <= (z_1 
	+ z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_167 + z_2 + z_32)) && (z_0 > 0) && 
	(z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_131 > 0) && (z_167 > 0) && (z_190 > 
	0) && (z_2 > 0) && (z_295 > 0) && (z_3 > 0) && (z_311 > 0) && (z_32 > 0) && (z_4 
	> 0) && (z_401 > 0) && (z_427 > 0) && (z_5 > 0) && (z_502 > 0) && (z_540 > 0) && 
	(z_90 > 0))
																					DATA{
																						:pid_2:uncoveredExit = 0;
																						:pid_48:my_buff[1].seq = 2;
																						:pid_48:my_buff[1].fragment = FRAGMENT_1;
																						:pid_48:my_buff[1].offset = 1;
																						:pid_48:firmware[1] = FRAGMENT_1;
																						:pid_48:myseq_buff[1] = 1;
																						:pid_48:node_time = (z_11 + z_116 + z_131 + z_311 + z_401 + z_731);
																						:pid_48:z = z_731;
																						:pid_48:localTime = (z_1 + z_11 + z_116 + z_131 + z_311 + z_401 + z_731);
																						:pid_48:undef_DM2 = false;
																						:pid_48:localPC = (((z_311 + z_401 + z_731) < t_57) && (t_10 < 4) && (t_65 < 4) && (t_226 < 4) && (t_57 < 4) && (z_116 < t_10) && (z_401 < t_226) && (0 <= (t_10 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_226 + -2)) && (0 <= (t_57 + -2)) && ((z_0 + z_190 + z_295 + z_5 + z_540 + z_645 + z_90) <= (z_1 + z_11 + z_116 + z_131 + z_311 + z_401 + z_731)) && ((z_0 + z_190 + z_295 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_131 + z_311 + z_401)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_131 > 0) && (z_311 > 0) && (z_401 > 0));
																						:pid_48:timeEmit = (z_0 + z_190 + z_295 + z_5 + z_540 + z_645 + z_90);
																						:pid_49:cl = (z_131 + z_311 + z_401 + z_731);
																						:pid_55:cl = (z_401 + z_731);
																						:pid_60:c = 1;
																						:pid_60:consistent = true;
																						:pid_60:cl = (z_311 + z_401 + z_731);
																						:pid_60:d.seq = 2;
																						:pid_60:d.fragment = FRAGMENT_1;
																						:pid_60:d.offset = 1;
																					}
																					BUFFER{
																						:pid_48:bufferNode:<FIFO>#0{ }
																					}
																				}
																			}
																			EC:<Id:1375;Ev:148;H:19;W:1243>{ SC: ( pid_16:o#12 , ( pid_36:cp2 , pid_41:dp2 , pid_46:dp2 ) , ( pid_53:cp2 , pid_57:dp1 , pid_62:dp1 ) , ( pid_69:cp1 , pid_74:dp1 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																				
	EXE: { |;| (:pid_48 , run) (:pid_49 , run) (:pid_52 , run) (:pid_52 , cp_sendCM) 
	(:pid_2 , run) }
																				
	TRACE: { |;| (:pid_48 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_656 }) (:pid_52 , ${ output inst::Trickle.Node.ControlMsg 
	[ 1 , 0 ] ${ + param::Trickle.Node.z_1 param::Trickle.Node.z_11 
	param::Trickle.Node.z_116 param::Trickle.Node.z_131 param::Trickle.Node.z_311 
	param::Trickle.Node.z_401 param::Trickle.Node.z_656 } } @ (z_11 + z_116 + z_131 
	+ z_311 + z_401 + z_656)) }
																				PC: (((z_131 + z_311 + z_401 + z_656) == t_65) && (z_295 == t_102) && (z_645 == 
	t_438) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_39 < 4) && (t_42 < 4) 
	&& (t_5 < 4) && (t_65 < 4) && (t_86 < 4) && (t_102 < 4) && (t_226 < 4) && (t_342 
	< 4) && (t_438 < 4) && (t_57 < 4) && (z_116 < t_10) && (z_167 < t_23) && (z_401 
	< t_226) && (z_502 < t_342) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= 
	(t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && 
	(0 <= (t_86 + -2)) && (0 <= (t_102 + -2)) && (0 <= (t_226 + -2)) && (0 <= (t_342 
	+ -2)) && (0 <= (t_438 + -2)) && (0 <= (t_57 + -2)) && ((z_0 + z_190 + z_295 + 
	z_5 + z_90) <= (z_1 + z_11 + z_116 + z_131 + z_311 + z_401)) && ((z_0 + z_190 + 
	z_295 + z_5 + z_90) <= (z_167 + z_2 + z_32 + z_427 + z_502)) && ((z_0 + z_5 + 
	z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_167 + z_2 + z_32)) 
	&& (z_0 > 0) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_131 > 0) && (z_167 
	> 0) && (z_190 > 0) && (z_2 > 0) && (z_295 > 0) && (z_3 > 0) && (z_311 > 0) && 
	(z_32 > 0) && (z_4 > 0) && (z_401 > 0) && (z_427 > 0) && (z_5 > 0) && (z_540 > 0)
	 && (z_90 > 0))
																				DATA{
																					:pid_2:uncoveredExit = 1;
																					:pid_48:node_time = (z_11 + z_116 + z_131 + z_311 + z_401 + z_656);
																					:pid_48:z = z_656;
																					:pid_48:localTime = (z_1 + z_11 + z_116 + z_131 + z_311 + z_401 + z_656);
																					:pid_48:localPC = (((z_131 + z_311 + z_401 + z_656) == t_65) && (t_10 < 4) && (t_65 < 4) && (t_226 < 4) && (t_57 < 4) && (z_116 < t_10) && (z_401 < t_226) && (0 <= (t_10 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_226 + -2)) && (0 <= (t_57 + -2)) && ((z_0 + z_190 + z_295 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_131 + z_311 + z_401)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_131 > 0) && (z_311 > 0) && (z_401 > 0));
																					:pid_49:cl = (z_131 + z_311 + z_401 + z_656);
																					:pid_55:cl = (z_401 + z_656);
																					:pid_60:cl = (z_311 + z_401 + z_656);
																				}
																				BUFFER{
																					:pid_65:bufferNode:<FIFO>#0{
																						:pid_31:DataMsg2([ 2 , 2 , 1 ] , (z_0 + z_190 + z_295 + z_5 + z_540 + z_645 + z_90));
																						:pid_48:ControlMsg([ 1 , 0 ] , (z_1 + z_11 + z_116 + z_131 + z_311 + z_401 + z_656));
																					}
																				}
																				EC:<Id:1547;Ev:0;H:20;W:1399>{ SC: ( pid_17:o#13 , ( pid_36:cp2 , pid_41:dp2 , pid_46:dp2 ) , ( pid_53:cp2 , pid_57:dp1 , pid_62:dp1 ) , ( pid_69:cp1 , pid_74:dp1 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
	EXE: { |;| (:pid_48 , run) (:pid_60 , run) (:pid_62 , run) (:pid_62 , 
	dp1_receiveDM_consistent) (:pid_2 , run) (:pid_16 , run) (:pid_16 , n2_in_DM2) }
																					
	TRACE: { |;| (:pid_48 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_736 }) (:pid_62 , ${ input inst::Trickle.Node.DataMsg2 [ 2 
	, 2 , 1 ] ${ + param::Trickle.Node.z_0 param::Trickle.Node.z_190 
	param::Trickle.Node.z_295 param::Trickle.Node.z_5 param::Trickle.Node.z_540 
	param::Trickle.Node.z_645 param::Trickle.Node.z_90 } } @ (z_11 + z_116 + z_131 + 
	z_311 + z_401 + z_656 + z_736)) }
																					/*FLAGS{ COVERAGE-ELEMENT }*/
																					INFO{
																						<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#13->run::pid_17:Trickle.Observer.o#13->prot::Trickle.Observer.o#13" as trace="tpid#13->run::pid_17:Trickle.Observer.o#13->prot::Trickle.Observer.o#13">
																					}
																					PC: (((z_131 + z_311 + z_401 + z_656) == t_65) && (z_295 == t_102) && (z_645 == 
	t_438) && (z_90 == t_5) && ((z_311 + z_401 + z_656 + z_736) < t_57) && (t_10 < 4)
	 && (t_23 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_86 < 
	4) && (t_102 < 4) && (t_226 < 4) && (t_342 < 4) && (t_438 < 4) && (t_57 < 4) && 
	(z_116 < t_10) && (z_167 < t_23) && (z_401 < t_226) && (z_502 < t_342) && (0 <= 
	(t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) 
	&& (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_86 + -2)) && (0 <= (t_102 
	+ -2)) && (0 <= (t_226 + -2)) && (0 <= (t_342 + -2)) && (0 <= (t_438 + -2)) && 
	(0 <= (t_57 + -2)) && ((z_0 + z_190 + z_295 + z_5 + z_540 + z_645 + z_90) <= 
	(z_1 + z_11 + z_116 + z_131 + z_311 + z_401 + z_656 + z_736)) && ((z_0 + z_190 + 
	z_295 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_131 + z_311 + z_401)) && ((z_0 + 
	z_190 + z_295 + z_5 + z_90) <= (z_167 + z_2 + z_32 + z_427 + z_502)) && ((z_0 + 
	z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_167 + z_2 + 
	z_32)) && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_131 > 0) && 
	(z_167 > 0) && (z_190 > 0) && (z_2 > 0) && (z_295 > 0) && (z_3 > 0) && (z_311 > 
	0) && (z_32 > 0) && (z_4 > 0) && (z_401 > 0) && (z_427 > 0) && (z_5 > 0) && 
	(z_540 > 0) && (z_656 > 0) && (z_90 > 0))
																					DATA{
																						:pid_2:uncoveredExit = 0;
																						:pid_48:my_buff[1].seq = 2;
																						:pid_48:my_buff[1].fragment = FRAGMENT_1;
																						:pid_48:my_buff[1].offset = 1;
																						:pid_48:firmware[1] = FRAGMENT_1;
																						:pid_48:myseq_buff[1] = 1;
																						:pid_48:node_time = (z_11 + z_116 + z_131 + z_311 + z_401 + z_656 + z_736);
																						:pid_48:z = z_736;
																						:pid_48:localTime = (z_1 + z_11 + z_116 + z_131 + z_311 + z_401 + z_656 + z_736);
																						:pid_48:undef_DM2 = false;
																						:pid_48:localPC = (((z_131 + z_311 + z_401 + z_656) == t_65) && ((z_311 + z_401 + z_656 + z_736) < t_57) && (t_10 < 4) && (t_65 < 4) && (t_226 < 4) && (t_57 < 4) && (z_116 < t_10) && (z_401 < t_226) && (0 <= (t_10 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_226 + -2)) && (0 <= (t_57 + -2)) && ((z_0 + z_190 + z_295 + z_5 + z_540 + z_645 + z_90) <= (z_1 + z_11 + z_116 + z_131 + z_311 + z_401 + z_656 + z_736)) && ((z_0 + z_190 + z_295 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_131 + z_311 + z_401)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_131 > 0) && (z_311 > 0) && (z_401 > 0) && (z_656 > 0));
																						:pid_48:timeEmit = (z_0 + z_190 + z_295 + z_5 + z_540 + z_645 + z_90);
																						:pid_49:cl = (z_131 + z_311 + z_401 + z_656 + z_736);
																						:pid_55:cl = (z_401 + z_656 + z_736);
																						:pid_60:c = 1;
																						:pid_60:consistent = true;
																						:pid_60:cl = (z_311 + z_401 + z_656 + z_736);
																						:pid_60:d.seq = 2;
																						:pid_60:d.fragment = FRAGMENT_1;
																						:pid_60:d.offset = 1;
																					}
																					BUFFER{
																						:pid_48:bufferNode:<FIFO>#0{ }
																					}
																				}
																			}
																			EC:<Id:1376;Ev:149;H:19;W:1244>{ SC: ( pid_16:o#12 , ( pid_36:cp2 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_58:dp2 , pid_62:dp1 ) , ( pid_69:cp1 , pid_74:dp1 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																				
	EXE: { |;| (:pid_48 , run) (:pid_55 , run) (:pid_57 , run) (:pid_57 , dp_sendDM) 
	(:pid_2 , run) }
																				
	TRACE: { |;| (:pid_48 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_656 }) (:pid_57 , ${ output inst::Trickle.Node.DataMsg1 [ 
	1 , 1 , 0 ] ${ + param::Trickle.Node.z_1 param::Trickle.Node.z_11 
	param::Trickle.Node.z_116 param::Trickle.Node.z_131 param::Trickle.Node.z_311 
	param::Trickle.Node.z_401 param::Trickle.Node.z_656 } } @ (z_11 + z_116 + z_131 
	+ z_311 + z_401 + z_656)) }
																				PC: (((z_401 + z_656) == t_226) && (z_295 == t_102) && (z_645 == t_438) && (z_90 == 
	t_5) && (t_10 < 4) && (t_23 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && 
	(t_65 < 4) && (t_86 < 4) && (t_102 < 4) && (t_226 < 4) && (t_342 < 4) && (t_438 
	< 4) && (t_57 < 4) && (z_116 < t_10) && (z_167 < t_23) && (z_401 < t_226) && 
	(z_502 < t_342) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_39 + -2))
	 && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_86 
	+ -2)) && (0 <= (t_102 + -2)) && (0 <= (t_226 + -2)) && (0 <= (t_342 + -2)) && 
	(0 <= (t_438 + -2)) && (0 <= (t_57 + -2)) && ((z_0 + z_190 + z_295 + z_5 + z_90) 
	<= (z_1 + z_11 + z_116 + z_131 + z_311 + z_401)) && ((z_0 + z_190 + z_295 + z_5 
	+ z_90) <= (z_167 + z_2 + z_32 + z_427 + z_502)) && ((z_0 + z_5 + z_90) <= (z_1 
	+ z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_167 + z_2 + z_32)) && (z_0 > 0) && 
	(z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_131 > 0) && (z_167 > 0) && (z_190 > 
	0) && (z_2 > 0) && (z_295 > 0) && (z_3 > 0) && (z_311 > 0) && (z_32 > 0) && (z_4 
	> 0) && (z_401 > 0) && (z_427 > 0) && (z_5 > 0) && (z_540 > 0) && (z_90 > 0))
																				DATA{
																					:pid_2:uncoveredExit = 1;
																					:pid_48:node_time = (z_11 + z_116 + z_131 + z_311 + z_401 + z_656);
																					:pid_48:z = z_656;
																					:pid_48:localTime = (z_1 + z_11 + z_116 + z_131 + z_311 + z_401 + z_656);
																					:pid_48:localPC = (((z_401 + z_656) == t_226) && (t_10 < 4) && (t_65 < 4) && (t_226 < 4) && (t_57 < 4) && (z_116 < t_10) && (z_401 < t_226) && (0 <= (t_10 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_226 + -2)) && (0 <= (t_57 + -2)) && ((z_0 + z_190 + z_295 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_131 + z_311 + z_401)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_131 > 0) && (z_311 > 0) && (z_401 > 0));
																					:pid_49:cl = (z_131 + z_311 + z_401 + z_656);
																					:pid_55:cl = (z_401 + z_656);
																					:pid_60:cl = (z_311 + z_401 + z_656);
																				}
																				BUFFER{
																					:pid_65:bufferNode:<FIFO>#0{
																						:pid_31:DataMsg2([ 2 , 2 , 1 ] , (z_0 + z_190 + z_295 + z_5 + z_540 + z_645 + z_90));
																						:pid_48:DataMsg1([ 1 , 1 , 0 ] , (z_1 + z_11 + z_116 + z_131 + z_311 + z_401 + z_656));
																					}
																				}
																				EC:<Id:1557;Ev:0;H:20;W:1408>{ SC: ( pid_17:o#13 , ( pid_36:cp2 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_58:dp2 , pid_62:dp1 ) , ( pid_69:cp1 , pid_74:dp1 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
	EXE: { |;| (:pid_48 , run) (:pid_60 , run) (:pid_62 , run) (:pid_62 , 
	dp1_receiveDM_consistent) (:pid_2 , run) (:pid_16 , run) (:pid_16 , n2_in_DM2) }
																					
	TRACE: { |;| (:pid_48 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_741 }) (:pid_62 , ${ input inst::Trickle.Node.DataMsg2 [ 2 
	, 2 , 1 ] ${ + param::Trickle.Node.z_0 param::Trickle.Node.z_190 
	param::Trickle.Node.z_295 param::Trickle.Node.z_5 param::Trickle.Node.z_540 
	param::Trickle.Node.z_645 param::Trickle.Node.z_90 } } @ (z_11 + z_116 + z_131 + 
	z_311 + z_401 + z_656 + z_741)) }
																					/*FLAGS{ COVERAGE-ELEMENT }*/
																					INFO{
																						<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#13->run::pid_17:Trickle.Observer.o#13->prot::Trickle.Observer.o#13" as trace="tpid#13->run::pid_17:Trickle.Observer.o#13->prot::Trickle.Observer.o#13">
																					}
																					PC: (((z_401 + z_656) == t_226) && (z_295 == t_102) && (z_645 == t_438) && (z_90 == 
	t_5) && ((z_311 + z_401 + z_656 + z_741) < t_57) && (t_10 < 4) && (t_23 < 4) && 
	(t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_86 < 4) && (t_102 < 4) 
	&& (t_226 < 4) && (t_342 < 4) && (t_438 < 4) && (t_57 < 4) && (z_116 < t_10) && 
	(z_167 < t_23) && (z_401 < t_226) && (z_502 < t_342) && (0 <= (t_10 + -2)) && (0 
	<= (t_23 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) 
	&& (0 <= (t_65 + -2)) && (0 <= (t_86 + -2)) && (0 <= (t_102 + -2)) && (0 <= 
	(t_226 + -2)) && (0 <= (t_342 + -2)) && (0 <= (t_438 + -2)) && (0 <= (t_57 + -2))
	 && ((z_0 + z_190 + z_295 + z_5 + z_540 + z_645 + z_90) <= (z_1 + z_11 + z_116 + 
	z_131 + z_311 + z_401 + z_656 + z_741)) && ((z_0 + z_190 + z_295 + z_5 + z_90) 
	<= (z_1 + z_11 + z_116 + z_131 + z_311 + z_401)) && ((z_0 + z_190 + z_295 + z_5 
	+ z_90) <= (z_167 + z_2 + z_32 + z_427 + z_502)) && ((z_0 + z_5 + z_90) <= (z_1 
	+ z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_167 + z_2 + z_32)) && (z_0 > 0) && 
	(z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_131 > 0) && (z_167 > 0) && (z_190 > 
	0) && (z_2 > 0) && (z_295 > 0) && (z_3 > 0) && (z_311 > 0) && (z_32 > 0) && (z_4 
	> 0) && (z_401 > 0) && (z_427 > 0) && (z_5 > 0) && (z_540 > 0) && (z_656 > 0) && 
	(z_90 > 0))
																					DATA{
																						:pid_2:uncoveredExit = 0;
																						:pid_48:my_buff[1].seq = 2;
																						:pid_48:my_buff[1].fragment = FRAGMENT_1;
																						:pid_48:my_buff[1].offset = 1;
																						:pid_48:firmware[1] = FRAGMENT_1;
																						:pid_48:myseq_buff[1] = 1;
																						:pid_48:node_time = (z_11 + z_116 + z_131 + z_311 + z_401 + z_656 + z_741);
																						:pid_48:z = z_741;
																						:pid_48:localTime = (z_1 + z_11 + z_116 + z_131 + z_311 + z_401 + z_656 + z_741);
																						:pid_48:undef_DM2 = false;
																						:pid_48:localPC = (((z_401 + z_656) == t_226) && ((z_311 + z_401 + z_656 + z_741) < t_57) && (t_10 < 4) && (t_65 < 4) && (t_226 < 4) && (t_57 < 4) && (z_116 < t_10) && (z_401 < t_226) && (0 <= (t_10 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_226 + -2)) && (0 <= (t_57 + -2)) && ((z_0 + z_190 + z_295 + z_5 + z_540 + z_645 + z_90) <= (z_1 + z_11 + z_116 + z_131 + z_311 + z_401 + z_656 + z_741)) && ((z_0 + z_190 + z_295 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_131 + z_311 + z_401)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_131 > 0) && (z_311 > 0) && (z_401 > 0) && (z_656 > 0));
																						:pid_48:timeEmit = (z_0 + z_190 + z_295 + z_5 + z_540 + z_645 + z_90);
																						:pid_49:cl = (z_131 + z_311 + z_401 + z_656 + z_741);
																						:pid_55:cl = (z_401 + z_656 + z_741);
																						:pid_60:c = 1;
																						:pid_60:consistent = true;
																						:pid_60:cl = (z_311 + z_401 + z_656 + z_741);
																						:pid_60:d.seq = 2;
																						:pid_60:d.fragment = FRAGMENT_1;
																						:pid_60:d.offset = 1;
																					}
																					BUFFER{
																						:pid_48:bufferNode:<FIFO>#0{ }
																					}
																				}
																			}
																			EC:<Id:1377;Ev:150;H:19;W:1245>{ SC: ( pid_17:o#13 , ( pid_36:cp2 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_69:cp1 , pid_74:dp1 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																				
	EXE: { |;| (:pid_48 , run) (:pid_60 , run) (:pid_62 , run) (:pid_62 , 
	dp1_receiveDM_consistent) (:pid_2 , run) (:pid_16 , run) (:pid_16 , n2_in_DM2) }
																				
	TRACE: { |;| (:pid_48 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_656 }) (:pid_62 , ${ input inst::Trickle.Node.DataMsg2 [ 2 
	, 2 , 1 ] ${ + param::Trickle.Node.z_0 param::Trickle.Node.z_190 
	param::Trickle.Node.z_295 param::Trickle.Node.z_5 param::Trickle.Node.z_540 
	param::Trickle.Node.z_645 param::Trickle.Node.z_90 } } @ (z_11 + z_116 + z_131 + 
	z_311 + z_401 + z_656)) }
																				/*FLAGS{ COVERAGE-ELEMENT }*/
																				INFO{
																					<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#13->run::pid_17:Trickle.Observer.o#13->prot::Trickle.Observer.o#13" as trace="tpid#13->run::pid_17:Trickle.Observer.o#13->prot::Trickle.Observer.o#13">
																				}
																				PC: ((z_295 == t_102) && (z_645 == t_438) && (z_90 == t_5) && ((z_311 + z_401 + 
	z_656) < t_57) && (t_10 < 4) && (t_23 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 
	4) && (t_65 < 4) && (t_86 < 4) && (t_102 < 4) && (t_226 < 4) && (t_342 < 4) && 
	(t_438 < 4) && (t_57 < 4) && (z_116 < t_10) && (z_167 < t_23) && (z_401 < t_226) 
	&& (z_502 < t_342) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_39 + 
	-2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= 
	(t_86 + -2)) && (0 <= (t_102 + -2)) && (0 <= (t_226 + -2)) && (0 <= (t_342 + -2))
	 && (0 <= (t_438 + -2)) && (0 <= (t_57 + -2)) && ((z_0 + z_190 + z_295 + z_5 + 
	z_540 + z_645 + z_90) <= (z_1 + z_11 + z_116 + z_131 + z_311 + z_401 + z_656)) 
	&& ((z_0 + z_190 + z_295 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_131 + z_311 + 
	z_401)) && ((z_0 + z_190 + z_295 + z_5 + z_90) <= (z_167 + z_2 + z_32 + z_427 + 
	z_502)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) 
	<= (z_167 + z_2 + z_32)) && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) 
	&& (z_131 > 0) && (z_167 > 0) && (z_190 > 0) && (z_2 > 0) && (z_295 > 0) && (z_3 
	> 0) && (z_311 > 0) && (z_32 > 0) && (z_4 > 0) && (z_401 > 0) && (z_427 > 0) && 
	(z_5 > 0) && (z_540 > 0) && (z_90 > 0))
																				DATA{
																					:pid_2:uncoveredExit = 0;
																					:pid_48:my_buff[1].seq = 2;
																					:pid_48:my_buff[1].fragment = FRAGMENT_1;
																					:pid_48:my_buff[1].offset = 1;
																					:pid_48:firmware[1] = FRAGMENT_1;
																					:pid_48:myseq_buff[1] = 1;
																					:pid_48:node_time = (z_11 + z_116 + z_131 + z_311 + z_401 + z_656);
																					:pid_48:z = z_656;
																					:pid_48:localTime = (z_1 + z_11 + z_116 + z_131 + z_311 + z_401 + z_656);
																					:pid_48:undef_DM2 = false;
																					:pid_48:localPC = (((z_311 + z_401 + z_656) < t_57) && (t_10 < 4) && (t_65 < 4) && (t_226 < 4) && (t_57 < 4) && (z_116 < t_10) && (z_401 < t_226) && (0 <= (t_10 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_226 + -2)) && (0 <= (t_57 + -2)) && ((z_0 + z_190 + z_295 + z_5 + z_540 + z_645 + z_90) <= (z_1 + z_11 + z_116 + z_131 + z_311 + z_401 + z_656)) && ((z_0 + z_190 + z_295 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_131 + z_311 + z_401)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_131 > 0) && (z_311 > 0) && (z_401 > 0));
																					:pid_48:timeEmit = (z_0 + z_190 + z_295 + z_5 + z_540 + z_645 + z_90);
																					:pid_49:cl = (z_131 + z_311 + z_401 + z_656);
																					:pid_55:cl = (z_401 + z_656);
																					:pid_60:c = 1;
																					:pid_60:consistent = true;
																					:pid_60:cl = (z_311 + z_401 + z_656);
																					:pid_60:d.seq = 2;
																					:pid_60:d.fragment = FRAGMENT_1;
																					:pid_60:d.offset = 1;
																				}
																				BUFFER{
																					:pid_48:bufferNode:<FIFO>#0{ }
																				}
																			}
																			EC:<Id:1378;Ev:151;H:19;W:1246>{ SC: ( pid_16:o#12 , ( pid_36:cp2 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_63:dp2 ) , ( pid_69:cp1 , pid_74:dp1 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																				
	EXE: { |;| (:pid_48 , run) (:pid_60 , run) (:pid_62 , run) (:pid_62 , 
	dp1_reach_k) (:pid_2 , run) }
																				
	TRACE: (:pid_48 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_656 })
																				PC: (((z_311 + z_401 + z_656) == t_57) && (z_295 == t_102) && (z_645 == t_438) && 
	(z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 
	4) && (t_65 < 4) && (t_86 < 4) && (t_102 < 4) && (t_226 < 4) && (t_342 < 4) && 
	(t_438 < 4) && (t_57 < 4) && (z_116 < t_10) && (z_167 < t_23) && (z_401 < t_226) 
	&& (z_502 < t_342) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_39 + 
	-2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= 
	(t_86 + -2)) && (0 <= (t_102 + -2)) && (0 <= (t_226 + -2)) && (0 <= (t_342 + -2))
	 && (0 <= (t_438 + -2)) && (0 <= (t_57 + -2)) && ((z_0 + z_190 + z_295 + z_5 + 
	z_90) <= (z_1 + z_11 + z_116 + z_131 + z_311 + z_401)) && ((z_0 + z_190 + z_295 
	+ z_5 + z_90) <= (z_167 + z_2 + z_32 + z_427 + z_502)) && ((z_0 + z_5 + z_90) <= 
	(z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_167 + z_2 + z_32)) && (z_0 > 
	0) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_131 > 0) && (z_167 > 0) && 
	(z_190 > 0) && (z_2 > 0) && (z_295 > 0) && (z_3 > 0) && (z_311 > 0) && (z_32 > 0)
	 && (z_4 > 0) && (z_401 > 0) && (z_427 > 0) && (z_5 > 0) && (z_540 > 0) && (z_90 
	> 0))
																				DATA{
																					:pid_2:uncoveredExit = 1;
																					:pid_48:node_time = (z_11 + z_116 + z_131 + z_311 + z_401 + z_656);
																					:pid_48:z = z_656;
																					:pid_48:localTime = (z_1 + z_11 + z_116 + z_131 + z_311 + z_401 + z_656);
																					:pid_48:localPC = (((z_311 + z_401 + z_656) == t_57) && (t_10 < 4) && (t_65 < 4) && (t_226 < 4) && (t_57 < 4) && (z_116 < t_10) && (z_401 < t_226) && (0 <= (t_10 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_226 + -2)) && (0 <= (t_57 + -2)) && ((z_0 + z_190 + z_295 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_131 + z_311 + z_401)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_131 > 0) && (z_311 > 0) && (z_401 > 0));
																					:pid_49:cl = (z_131 + z_311 + z_401 + z_656);
																					:pid_55:cl = (z_401 + z_656);
																					:pid_60:cl = (z_311 + z_401 + z_656);
																				}
																				EC:<Id:1577;Ev:0;H:20;W:1426>{ SC: ( pid_17:o#13 , ( pid_36:cp2 , pid_41:dp2 , pid_46:dp2 ) , ( pid_52:cp1 , pid_57:dp1 , pid_63:dp2 ) , ( pid_69:cp1 , pid_74:dp1 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
	EXE: { |;| (:pid_48 , run) (:pid_60 , run) (:pid_63 , run) (:pid_63 , 
	dp2_receiveDM_consistent) (:pid_2 , run) (:pid_16 , run) (:pid_16 , n2_in_DM2) }
																					
	TRACE: { |;| (:pid_48 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_751 }) (:pid_63 , ${ input inst::Trickle.Node.DataMsg2 [ 2 
	, 2 , 1 ] ${ + param::Trickle.Node.z_0 param::Trickle.Node.z_190 
	param::Trickle.Node.z_295 param::Trickle.Node.z_5 param::Trickle.Node.z_540 
	param::Trickle.Node.z_645 param::Trickle.Node.z_90 } } @ (z_11 + z_116 + z_131 + 
	z_311 + z_401 + z_656 + z_751)) }
																					/*FLAGS{ COVERAGE-ELEMENT }*/
																					INFO{
																						<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#13->run::pid_17:Trickle.Observer.o#13->prot::Trickle.Observer.o#13" as trace="tpid#13->run::pid_17:Trickle.Observer.o#13->prot::Trickle.Observer.o#13">
																					}
																					PC: (((z_311 + z_401 + z_656) == t_57) && (z_295 == t_102) && (z_645 == t_438) && 
	(z_90 == t_5) && ((z_311 + z_401 + z_656 + z_751) < 4) && (t_10 < 4) && (t_23 < 
	4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_86 < 4) && 
	(t_102 < 4) && (t_226 < 4) && (t_342 < 4) && (t_438 < 4) && (t_57 < 4) && (z_116 
	< t_10) && (z_167 < t_23) && (z_401 < t_226) && (z_502 < t_342) && (0 <= (t_10 + 
	-2)) && (0 <= (t_23 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= 
	(t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_86 + -2)) && (0 <= (t_102 + -2)) 
	&& (0 <= (t_226 + -2)) && (0 <= (t_342 + -2)) && (0 <= (t_438 + -2)) && (0 <= 
	(t_57 + -2)) && ((z_0 + z_190 + z_295 + z_5 + z_540 + z_645 + z_90) <= (z_1 + 
	z_11 + z_116 + z_131 + z_311 + z_401 + z_656 + z_751)) && ((z_0 + z_190 + z_295 
	+ z_5 + z_90) <= (z_1 + z_11 + z_116 + z_131 + z_311 + z_401)) && ((z_0 + z_190 
	+ z_295 + z_5 + z_90) <= (z_167 + z_2 + z_32 + z_427 + z_502)) && ((z_0 + z_5 + 
	z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_167 + z_2 + z_32)) 
	&& (z_0 > 0) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_131 > 0) && (z_167 
	> 0) && (z_190 > 0) && (z_2 > 0) && (z_295 > 0) && (z_3 > 0) && (z_311 > 0) && 
	(z_32 > 0) && (z_4 > 0) && (z_401 > 0) && (z_427 > 0) && (z_5 > 0) && (z_540 > 0)
	 && (z_656 > 0) && (z_90 > 0))
																					DATA{
																						:pid_2:uncoveredExit = 0;
																						:pid_48:my_buff[1].seq = 2;
																						:pid_48:my_buff[1].fragment = FRAGMENT_1;
																						:pid_48:my_buff[1].offset = 1;
																						:pid_48:firmware[1] = FRAGMENT_1;
																						:pid_48:myseq_buff[1] = 1;
																						:pid_48:node_time = (z_11 + z_116 + z_131 + z_311 + z_401 + z_656 + z_751);
																						:pid_48:z = z_751;
																						:pid_48:localTime = (z_1 + z_11 + z_116 + z_131 + z_311 + z_401 + z_656 + z_751);
																						:pid_48:undef_DM2 = false;
																						:pid_48:localPC = (((z_311 + z_401 + z_656) == t_57) && ((z_311 + z_401 + z_656 + z_751) < 4) && (t_10 < 4) && (t_65 < 4) && (t_226 < 4) && (t_57 < 4) && (z_116 < t_10) && (z_401 < t_226) && (0 <= (t_10 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_226 + -2)) && (0 <= (t_57 + -2)) && ((z_0 + z_190 + z_295 + z_5 + z_540 + z_645 + z_90) <= (z_1 + z_11 + z_116 + z_131 + z_311 + z_401 + z_656 + z_751)) && ((z_0 + z_190 + z_295 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_131 + z_311 + z_401)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_131 > 0) && (z_311 > 0) && (z_401 > 0) && (z_656 > 0));
																						:pid_48:timeEmit = (z_0 + z_190 + z_295 + z_5 + z_540 + z_645 + z_90);
																						:pid_49:cl = (z_131 + z_311 + z_401 + z_656 + z_751);
																						:pid_55:cl = (z_401 + z_656 + z_751);
																						:pid_60:c = 1;
																						:pid_60:consistent = true;
																						:pid_60:cl = (z_311 + z_401 + z_656 + z_751);
																						:pid_60:d.seq = 2;
																						:pid_60:d.fragment = FRAGMENT_1;
																						:pid_60:d.offset = 1;
																					}
																					BUFFER{
																						:pid_48:bufferNode:<FIFO>#0{ }
																					}
																				}
																			}
																			EC:<Id:1379;Ev:152;H:19;W:1247>{ SC: ( pid_16:o#12 , ( pid_36:cp2 , pid_41:dp2 , pid_45:dp1 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_69:cp1 , pid_74:dp1 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																				
	EXE: { |;| (:pid_31 , run) (:pid_43 , run) (:pid_46 , run) (:pid_46 , 
	dp_resetTau) (:pid_2 , run) }
																				
	TRACE: { |;| (:pid_31 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_655 }) (:pid_46 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_515 }) }
																				PC: (((z_645 + z_655) == 4) && (z_295 == t_102) && (z_645 == t_438) && (z_90 == t_5) 
	&& (t_10 < 4) && (t_23 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_65 < 
	4) && (t_86 < 4) && (t_102 < 4) && (t_226 < 4) && (t_342 < 4) && (t_438 < 4) && 
	(t_515 < 8) && (t_57 < 4) && (z_116 < t_10) && (z_167 < t_23) && (z_401 < t_226) 
	&& (z_502 < t_342) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_39 + 
	-2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= 
	(t_86 + -2)) && (0 <= (t_102 + -2)) && (0 <= (t_226 + -2)) && (0 <= (t_342 + -2))
	 && (0 <= (t_438 + -2)) && (0 <= (t_515 + -4)) && (0 <= (t_57 + -2)) && ((z_0 + 
	z_190 + z_295 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_131 + z_311 + z_401)) && 
	((z_0 + z_190 + z_295 + z_5 + z_90) <= (z_167 + z_2 + z_32 + z_427 + z_502)) && 
	((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_167 + 
	z_2 + z_32)) && ((z_645 + z_655) > t_438) && (z_0 > 0) && (z_1 > 0) && (z_11 > 0)
	 && (z_116 > 0) && (z_131 > 0) && (z_167 > 0) && (z_190 > 0) && (z_2 > 0) && 
	(z_295 > 0) && (z_3 > 0) && (z_311 > 0) && (z_32 > 0) && (z_4 > 0) && (z_427 > 0)
	 && (z_5 > 0) && (z_540 > 0) && (z_645 > 0) && (z_90 > 0))
																				DATA{
																					:pid_2:uncoveredExit = 1;
																					:pid_31:node_time = (z_190 + z_295 + z_5 + z_540 + z_645 + z_655 + z_90);
																					:pid_31:z = z_655;
																					:pid_31:localTime = (z_0 + z_190 + z_295 + z_5 + z_540 + z_645 + z_655 + z_90);
																					:pid_31:localPC = (((z_645 + z_655) == 4) && (z_295 == t_102) && (z_645 == t_438) && (z_90 == t_5) && (t_5 < 4) && (t_102 < 4) && (t_438 < 4) && (t_515 < 8) && (0 <= (t_5 + -2)) && (0 <= (t_102 + -2)) && (0 <= (t_438 + -2)) && (0 <= (t_515 + -4)) && ((z_645 + z_655) > t_438) && (z_0 > 0) && (z_190 > 0) && (z_295 > 0) && (z_5 > 0) && (z_540 > 0) && (z_645 > 0) && (z_90 > 0));
																					:pid_32:cl = (z_190 + z_295 + z_540 + z_645 + z_655 + z_90);
																					:pid_38:cl = (z_295 + z_540 + z_645 + z_655);
																					:pid_43:e = 1;
																					:pid_43:tau = 8;
																					:pid_43:c = 0;
																					:pid_43:t = t_515;
																					:pid_43:cl = 0;
																				}
																				EC:<Id:1586;Ev:0;H:20;W:1434>{ SC: ( pid_17:o#13 , ( pid_36:cp2 , pid_41:dp2 , pid_45:dp1 ) , ( pid_52:cp1 , pid_57:dp1 , pid_62:dp1 ) , ( pid_69:cp1 , pid_74:dp1 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
																					
	EXE: { |;| (:pid_48 , run) (:pid_60 , run) (:pid_62 , run) (:pid_62 , 
	dp1_receiveDM_consistent) (:pid_2 , run) (:pid_16 , run) (:pid_16 , n2_in_DM2) }
																					
	TRACE: { |;| (:pid_48 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_756 }) (:pid_62 , ${ input inst::Trickle.Node.DataMsg2 [ 2 
	, 2 , 1 ] ${ + param::Trickle.Node.z_0 param::Trickle.Node.z_190 
	param::Trickle.Node.z_295 param::Trickle.Node.z_5 param::Trickle.Node.z_540 
	param::Trickle.Node.z_645 param::Trickle.Node.z_90 } } @ (z_11 + z_116 + z_131 + 
	z_311 + z_401 + z_756)) }
																					/*FLAGS{ COVERAGE-ELEMENT }*/
																					INFO{
																						<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#13->run::pid_17:Trickle.Observer.o#13->prot::Trickle.Observer.o#13" as trace="tpid#13->run::pid_17:Trickle.Observer.o#13->prot::Trickle.Observer.o#13">
																					}
																					PC: (((z_645 + z_655) == 4) && (z_295 == t_102) && (z_645 == t_438) && (z_90 == t_5) 
	&& ((z_311 + z_401 + z_756) < t_57) && (t_10 < 4) && (t_23 < 4) && (t_39 < 4) && 
	(t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_86 < 4) && (t_102 < 4) && (t_226 < 4)
	 && (t_342 < 4) && (t_438 < 4) && (t_515 < 8) && (t_57 < 4) && (z_116 < t_10) && 
	(z_167 < t_23) && (z_401 < t_226) && (z_502 < t_342) && (0 <= (t_10 + -2)) && (0 
	<= (t_23 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) 
	&& (0 <= (t_65 + -2)) && (0 <= (t_86 + -2)) && (0 <= (t_102 + -2)) && (0 <= 
	(t_226 + -2)) && (0 <= (t_342 + -2)) && (0 <= (t_438 + -2)) && (0 <= (t_515 + -4)
	) && (0 <= (t_57 + -2)) && ((z_0 + z_190 + z_295 + z_5 + z_540 + z_645 + z_90) 
	<= (z_1 + z_11 + z_116 + z_131 + z_311 + z_401 + z_756)) && ((z_0 + z_190 + 
	z_295 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_131 + z_311 + z_401)) && ((z_0 + 
	z_190 + z_295 + z_5 + z_90) <= (z_167 + z_2 + z_32 + z_427 + z_502)) && ((z_0 + 
	z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + z_90) <= (z_167 + z_2 + 
	z_32)) && ((z_645 + z_655) > t_438) && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) && 
	(z_116 > 0) && (z_131 > 0) && (z_167 > 0) && (z_190 > 0) && (z_2 > 0) && (z_295 
	> 0) && (z_3 > 0) && (z_311 > 0) && (z_32 > 0) && (z_4 > 0) && (z_401 > 0) && 
	(z_427 > 0) && (z_5 > 0) && (z_540 > 0) && (z_645 > 0) && (z_90 > 0))
																					DATA{
																						:pid_2:uncoveredExit = 0;
																						:pid_48:my_buff[1].seq = 2;
																						:pid_48:my_buff[1].fragment = FRAGMENT_1;
																						:pid_48:my_buff[1].offset = 1;
																						:pid_48:firmware[1] = FRAGMENT_1;
																						:pid_48:myseq_buff[1] = 1;
																						:pid_48:node_time = (z_11 + z_116 + z_131 + z_311 + z_401 + z_756);
																						:pid_48:z = z_756;
																						:pid_48:localTime = (z_1 + z_11 + z_116 + z_131 + z_311 + z_401 + z_756);
																						:pid_48:undef_DM2 = false;
																						:pid_48:localPC = (((z_311 + z_401 + z_756) < t_57) && (t_10 < 4) && (t_65 < 4) && (t_226 < 4) && (t_57 < 4) && (z_116 < t_10) && (z_401 < t_226) && (0 <= (t_10 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_226 + -2)) && (0 <= (t_57 + -2)) && ((z_0 + z_190 + z_295 + z_5 + z_540 + z_645 + z_90) <= (z_1 + z_11 + z_116 + z_131 + z_311 + z_401 + z_756)) && ((z_0 + z_190 + z_295 + z_5 + z_90) <= (z_1 + z_11 + z_116 + z_131 + z_311 + z_401)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && (z_1 > 0) && (z_11 > 0) && (z_116 > 0) && (z_131 > 0) && (z_311 > 0) && (z_401 > 0));
																						:pid_48:timeEmit = (z_0 + z_190 + z_295 + z_5 + z_540 + z_645 + z_90);
																						:pid_49:cl = (z_131 + z_311 + z_401 + z_756);
																						:pid_55:cl = (z_401 + z_756);
																						:pid_60:c = 1;
																						:pid_60:consistent = true;
																						:pid_60:cl = (z_311 + z_401 + z_756);
																						:pid_60:d.seq = 2;
																						:pid_60:d.fragment = FRAGMENT_1;
																						:pid_60:d.offset = 1;
																					}
																					BUFFER{
																						:pid_48:bufferNode:<FIFO>#0{ }
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
									EC:<Id:199;Ev:35;H:9;W:172>{ SC: ( pid_11:o#7 , ( pid_35:cp1 , pid_39:dp0 , pid_44:dp0 ) , ( pid_52:cp1 , pid_56:dp0 , pid_61:dp0 ) , ( pid_69:cp1 , pid_73:dp0 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
										EXE: { |;| (:pid_31 , run) (:pid_32 , 
	run) (:pid_36 , run) (:pid_36 , cp_resetTau) (:pid_2 , run) }
										TRACE: { |;| (:pid_31 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_130 }) (:pid_36 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_67 }) }
										PC: (((z_130 + z_90) == 4) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_39 < 4)
	 && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_67 < 8) && (z_116 < t_10) && (0 
	<= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2))
	 && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_67 + -4)) && ((z_0 + z_5 
	+ z_90) <= (z_1 + z_11 + z_116)) && ((z_130 + z_90) > t_5) && (z_0 > 0) && (z_1 
	> 0) && (z_11 > 0) && (z_2 > 0) && (z_3 > 0) && (z_4 > 0) && (z_5 > 0) && (z_90 
	> 0))
										DATA{
											:pid_2:uncoveredExit = 1;
											:pid_31:node_time = (z_130 + z_5 + z_90);
											:pid_31:z = z_130;
											:pid_31:localTime = (z_0 + z_130 + z_5 + z_90);
											:pid_31:localPC = (((z_130 + z_90) == 4) && (z_90 == t_5) && (t_5 < 4) && (t_67 < 8) && (0 <= (t_5 + -2)) && (0 <= (t_67 + -4)) && ((z_130 + z_90) > t_5) && (z_0 > 0) && (z_5 > 0) && (z_90 > 0));
											:pid_32:e = 1;
											:pid_32:tau = 8;
											:pid_32:c = 0;
											:pid_32:t = t_67;
											:pid_32:cl = 0;
											:pid_38:cl = (z_130 + z_5 + z_90);
											:pid_43:cl = (z_130 + z_5 + z_90);
										}
										EC:<Id:279;Ev:0;H:10;W:172>{ SC: ( pid_12:o#8 , ( pid_35:cp1 , pid_39:dp0 , pid_44:dp0 ) , ( pid_52:cp1 , pid_56:dp0 , pid_61:dp0 ) , ( pid_69:cp1 , pid_73:dp0 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
											EXE: { |;| (:pid_65 , run) (:pid_66 
	, run) (:pid_69 , run) (:pid_69 , cp1_receiveCM_inconsistent) (:pid_2 , run) 
	(:pid_11 , run) (:pid_11 , n3_in_CM) }
											TRACE: { |;| (:pid_65 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_172 }) (:pid_69 , ${ input 
	inst::Trickle.Node.ControlMsg [ 1 , 1 ] ${ + param::Trickle.Node.z_0 
	param::Trickle.Node.z_5 param::Trickle.Node.z_90 } } @ (z_172 + z_32)) (:pid_69 
	, ${ newfresh inst::Trickle.Node.ControlProcess.t 
	param::Trickle.Node.ControlProcess.t_87 }) }
											/*FLAGS{ COVERAGE-ELEMENT }*/
											INFO{
												<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#8->run::pid_12:Trickle.Observer.o#8->prot::Trickle.Observer.o#8" as trace="tpid#8->run::pid_12:Trickle.Observer.o#8->prot::Trickle.Observer.o#8">
											}
											PC: (((z_130 + z_90) == 4) && (z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_39 < 4)
	 && (t_42 < 4) && (t_5 < 4) && (t_65 < 4) && (t_67 < 8) && (t_87 < 4) && (z_116 
	< t_10) && (z_172 < t_23) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= 
	(t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && 
	(0 <= (t_67 + -4)) && (0 <= (t_87 + -2)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + 
	z_116)) && ((z_0 + z_5 + z_90) <= (z_172 + z_2 + z_32)) && ((z_130 + z_90) > t_5)
	 && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) && (z_2 > 0) && (z_3 > 0) && (z_32 > 0) 
	&& (z_4 > 0) && (z_5 > 0) && (z_90 > 0))
											DATA{
												:pid_2:uncoveredExit = 0;
												:pid_65:mydp_run[0] = true;
												:pid_65:mydp_run[1] = true;
												:pid_65:node_time = (z_172 + z_32);
												:pid_65:z = z_172;
												:pid_65:localTime = (z_172 + z_2 + z_32);
												:pid_65:seq_buff[0] = 1;
												:pid_65:seq_buff[1] = 1;
												:pid_65:localPC = ((t_23 < 4) && (t_87 < 4) && (z_172 < t_23) && (0 <= (t_23 + -2)) && (0 <= (t_87 + -2)) && ((z_0 + z_5 + z_90) <= (z_172 + z_2 + z_32)) && (z_2 > 0) && (z_32 > 0));
												:pid_65:timeEmit = (z_0 + z_5 + z_90);
												:pid_66:e = 0;
												:pid_66:c = 0;
												:pid_66:i = 2;
												:pid_66:t = t_87;
												:pid_66:consistent = false;
												:pid_66:cl = 0;
												:pid_72:cl = (z_172 + z_32);
												:pid_77:cl = (z_172 + z_32);
											}
											BUFFER{
												:pid_65:bufferNode:<FIFO>#0{ }
											}
										}
									}
									EC:<Id:200;Ev:36;H:9;W:173>{ SC: ( pid_11:o#7 , ( pid_36:cp2 , pid_40:dp1 , pid_44:dp0 ) , ( pid_52:cp1 , pid_56:dp0 , pid_61:dp0 ) , ( pid_69:cp1 , pid_73:dp0 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
										EXE: { |;| (:pid_31 , run) (:pid_38 , 
	run) (:pid_39 , run) (:pid_39 , dp_init) (:pid_2 , run) }
										TRACE: { |;| (:pid_31 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_130 }) (:pid_39 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_54 }) }
										PC: ((z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 
	4) && (t_65 < 4) && (t_54 < 4) && (z_116 < t_10) && (0 <= (t_10 + -2)) && (0 <= 
	(t_23 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && 
	(0 <= (t_65 + -2)) && (0 <= (t_54 + -2)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + 
	z_116)) && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) && (z_2 > 0) && (z_3 > 0) && 
	(z_4 > 0) && (z_5 > 0) && (z_90 > 0))
										DATA{
											:pid_2:uncoveredExit = 1;
											:pid_31:node_time = (z_130 + z_5 + z_90);
											:pid_31:z = z_130;
											:pid_31:localTime = (z_0 + z_130 + z_5 + z_90);
											:pid_31:localPC = ((z_90 == t_5) && (t_5 < 4) && (t_54 < 4) && (0 <= (t_5 + -2)) && (0 <= (t_54 + -2)) && (z_0 > 0) && (z_5 > 0) && (z_90 > 0));
											:pid_32:cl = (z_130 + z_90);
											:pid_38:e = 0;
											:pid_38:tau = 4;
											:pid_38:tau_l = 4;
											:pid_38:tau_h = 8;
											:pid_38:k = 2;
											:pid_38:c = 0;
											:pid_38:t = t_54;
											:pid_38:cl = 0;
											:pid_43:cl = (z_130 + z_5 + z_90);
										}
										EC:<Id:289;Ev:0;H:10;W:173>{ SC: ( pid_12:o#8 , ( pid_36:cp2 , pid_40:dp1 , pid_44:dp0 ) , ( pid_52:cp1 , pid_56:dp0 , pid_61:dp0 ) , ( pid_69:cp1 , pid_73:dp0 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
											EXE: { |;| (:pid_65 , run) (:pid_66 
	, run) (:pid_69 , run) (:pid_69 , cp1_receiveCM_inconsistent) (:pid_2 , run) 
	(:pid_11 , run) (:pid_11 , n3_in_CM) }
											TRACE: { |;| (:pid_65 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_177 }) (:pid_69 , ${ input 
	inst::Trickle.Node.ControlMsg [ 1 , 1 ] ${ + param::Trickle.Node.z_0 
	param::Trickle.Node.z_5 param::Trickle.Node.z_90 } } @ (z_177 + z_32)) (:pid_69 
	, ${ newfresh inst::Trickle.Node.ControlProcess.t 
	param::Trickle.Node.ControlProcess.t_89 }) }
											/*FLAGS{ COVERAGE-ELEMENT }*/
											INFO{
												<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#8->run::pid_12:Trickle.Observer.o#8->prot::Trickle.Observer.o#8" as trace="tpid#8->run::pid_12:Trickle.Observer.o#8->prot::Trickle.Observer.o#8">
											}
											PC: ((z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 
	4) && (t_65 < 4) && (t_89 < 4) && (t_54 < 4) && (z_116 < t_10) && (z_177 < t_23) 
	&& (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 
	+ -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_89 + -2)) && (0 <= 
	(t_54 + -2)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + 
	z_90) <= (z_177 + z_2 + z_32)) && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) && (z_2 > 
	0) && (z_3 > 0) && (z_32 > 0) && (z_4 > 0) && (z_5 > 0) && (z_90 > 0))
											DATA{
												:pid_2:uncoveredExit = 0;
												:pid_65:mydp_run[0] = true;
												:pid_65:mydp_run[1] = true;
												:pid_65:node_time = (z_177 + z_32);
												:pid_65:z = z_177;
												:pid_65:localTime = (z_177 + z_2 + z_32);
												:pid_65:seq_buff[0] = 1;
												:pid_65:seq_buff[1] = 1;
												:pid_65:localPC = ((t_23 < 4) && (t_89 < 4) && (z_177 < t_23) && (0 <= (t_23 + -2)) && (0 <= (t_89 + -2)) && ((z_0 + z_5 + z_90) <= (z_177 + z_2 + z_32)) && (z_2 > 0) && (z_32 > 0));
												:pid_65:timeEmit = (z_0 + z_5 + z_90);
												:pid_66:e = 0;
												:pid_66:c = 0;
												:pid_66:i = 2;
												:pid_66:t = t_89;
												:pid_66:consistent = false;
												:pid_66:cl = 0;
												:pid_72:cl = (z_177 + z_32);
												:pid_77:cl = (z_177 + z_32);
											}
											BUFFER{
												:pid_65:bufferNode:<FIFO>#0{ }
											}
										}
									}
									EC:<Id:201;Ev:37;H:9;W:174>{ SC: ( pid_11:o#7 , ( pid_36:cp2 , pid_39:dp0 , pid_45:dp1 ) , ( pid_52:cp1 , pid_56:dp0 , pid_61:dp0 ) , ( pid_69:cp1 , pid_73:dp0 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
										EXE: { |;| (:pid_31 , run) (:pid_43 , 
	run) (:pid_44 , run) (:pid_44 , dp_init) (:pid_2 , run) }
										TRACE: { |;| (:pid_31 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_130 }) (:pid_44 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_55 }) }
										PC: ((z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 
	4) && (t_65 < 4) && (t_55 < 4) && (z_116 < t_10) && (0 <= (t_10 + -2)) && (0 <= 
	(t_23 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && 
	(0 <= (t_65 + -2)) && (0 <= (t_55 + -2)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + 
	z_116)) && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) && (z_2 > 0) && (z_3 > 0) && 
	(z_4 > 0) && (z_5 > 0) && (z_90 > 0))
										DATA{
											:pid_2:uncoveredExit = 1;
											:pid_31:node_time = (z_130 + z_5 + z_90);
											:pid_31:z = z_130;
											:pid_31:localTime = (z_0 + z_130 + z_5 + z_90);
											:pid_31:localPC = ((z_90 == t_5) && (t_5 < 4) && (t_55 < 4) && (0 <= (t_5 + -2)) && (0 <= (t_55 + -2)) && (z_0 > 0) && (z_5 > 0) && (z_90 > 0));
											:pid_32:cl = (z_130 + z_90);
											:pid_38:cl = (z_130 + z_5 + z_90);
											:pid_43:e = 0;
											:pid_43:tau = 4;
											:pid_43:tau_l = 4;
											:pid_43:tau_h = 8;
											:pid_43:k = 2;
											:pid_43:c = 0;
											:pid_43:t = t_55;
											:pid_43:cl = 0;
										}
										EC:<Id:299;Ev:0;H:10;W:174>{ SC: ( pid_12:o#8 , ( pid_36:cp2 , pid_39:dp0 , pid_45:dp1 ) , ( pid_52:cp1 , pid_56:dp0 , pid_61:dp0 ) , ( pid_69:cp1 , pid_73:dp0 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
											EXE: { |;| (:pid_65 , run) (:pid_66 
	, run) (:pid_69 , run) (:pid_69 , cp1_receiveCM_inconsistent) (:pid_2 , run) 
	(:pid_11 , run) (:pid_11 , n3_in_CM) }
											TRACE: { |;| (:pid_65 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_182 }) (:pid_69 , ${ input 
	inst::Trickle.Node.ControlMsg [ 1 , 1 ] ${ + param::Trickle.Node.z_0 
	param::Trickle.Node.z_5 param::Trickle.Node.z_90 } } @ (z_182 + z_32)) (:pid_69 
	, ${ newfresh inst::Trickle.Node.ControlProcess.t 
	param::Trickle.Node.ControlProcess.t_91 }) }
											/*FLAGS{ COVERAGE-ELEMENT }*/
											INFO{
												<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#8->run::pid_12:Trickle.Observer.o#8->prot::Trickle.Observer.o#8" as trace="tpid#8->run::pid_12:Trickle.Observer.o#8->prot::Trickle.Observer.o#8">
											}
											PC: ((z_90 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 
	4) && (t_65 < 4) && (t_91 < 4) && (t_55 < 4) && (z_116 < t_10) && (z_182 < t_23) 
	&& (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 
	+ -2)) && (0 <= (t_5 + -2)) && (0 <= (t_65 + -2)) && (0 <= (t_91 + -2)) && (0 <= 
	(t_55 + -2)) && ((z_0 + z_5 + z_90) <= (z_1 + z_11 + z_116)) && ((z_0 + z_5 + 
	z_90) <= (z_182 + z_2 + z_32)) && (z_0 > 0) && (z_1 > 0) && (z_11 > 0) && (z_2 > 
	0) && (z_3 > 0) && (z_32 > 0) && (z_4 > 0) && (z_5 > 0) && (z_90 > 0))
											DATA{
												:pid_2:uncoveredExit = 0;
												:pid_65:mydp_run[0] = true;
												:pid_65:mydp_run[1] = true;
												:pid_65:node_time = (z_182 + z_32);
												:pid_65:z = z_182;
												:pid_65:localTime = (z_182 + z_2 + z_32);
												:pid_65:seq_buff[0] = 1;
												:pid_65:seq_buff[1] = 1;
												:pid_65:localPC = ((t_23 < 4) && (t_91 < 4) && (z_182 < t_23) && (0 <= (t_23 + -2)) && (0 <= (t_91 + -2)) && ((z_0 + z_5 + z_90) <= (z_182 + z_2 + z_32)) && (z_2 > 0) && (z_32 > 0));
												:pid_65:timeEmit = (z_0 + z_5 + z_90);
												:pid_66:e = 0;
												:pid_66:c = 0;
												:pid_66:i = 2;
												:pid_66:t = t_91;
												:pid_66:consistent = false;
												:pid_66:cl = 0;
												:pid_72:cl = (z_182 + z_32);
												:pid_77:cl = (z_182 + z_32);
											}
											BUFFER{
												:pid_65:bufferNode:<FIFO>#0{ }
											}
										}
									}
								}
							}
							EC:<Id:132;Ev:25;H:7;W:113>{ SC: ( pid_9:o#5 , ( pid_35:cp1 , pid_40:dp1 , pid_44:dp0 ) , ( pid_52:cp1 , pid_56:dp0 , pid_61:dp0 ) , ( pid_69:cp1 , pid_73:dp0 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
								EXE: { |;| (:pid_31 , run) (:pid_38 , run) 
	(:pid_39 , run) (:pid_39 , dp_init) (:pid_2 , run) }
								TRACE: { |;| (:pid_31 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_90 }) (:pid_39 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_40 }) }
								PC: ((t_10 < 4) && (t_23 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_40 < 4) 
	&& (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 
	+ -2)) && (0 <= (t_5 + -2)) && (0 <= (t_40 + -2)) && (z_0 > 0) && (z_1 > 0) && 
	(z_2 > 0) && (z_3 > 0) && (z_4 > 0) && (z_5 > 0))
								DATA{
									:pid_2:uncoveredExit = 1;
									:pid_31:node_time = (z_5 + z_90);
									:pid_31:z = z_90;
									:pid_31:localTime = (z_0 + z_5 + z_90);
									:pid_31:localPC = ((t_5 < 4) && (t_40 < 4) && (0 <= (t_5 + -2)) && (0 <= (t_40 + -2)) && (z_0 > 0) && (z_5 > 0));
									:pid_32:cl = z_90;
									:pid_38:e = 0;
									:pid_38:tau = 4;
									:pid_38:tau_l = 4;
									:pid_38:tau_h = 8;
									:pid_38:k = 2;
									:pid_38:c = 0;
									:pid_38:t = t_40;
									:pid_38:cl = 0;
									:pid_43:cl = (z_5 + z_90);
								}
								EC:<Id:178;Ev:0;H:8;W:113>{ SC: ( pid_10:o#6 , ( pid_36:cp2 , pid_40:dp1 , pid_44:dp0 ) , ( pid_52:cp1 , pid_56:dp0 , pid_61:dp0 ) , ( pid_69:cp1 , pid_73:dp0 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
									EXE: { |;| (:pid_31 , run) (:pid_32 , run) 
	(:pid_35 , run) (:pid_35 , cp_sendCM) (:pid_2 , run) (:pid_9 , run) (:pid_9 , 
	n1_out_CM) }
									TRACE: { |;| (:pid_31 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_120 }) (:pid_35 , ${ output 
	inst::Trickle.Node.ControlMsg [ 1 , 1 ] ${ + param::Trickle.Node.z_0 
	param::Trickle.Node.z_120 param::Trickle.Node.z_5 param::Trickle.Node.z_90 } } @ 
	(z_120 + z_5 + z_90)) }
									/*FLAGS{ COVERAGE-ELEMENT }*/
									INFO{
										<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#6->run::pid_10:Trickle.Observer.o#6->prot::Trickle.Observer.o#6" as trace="tpid#6->run::pid_10:Trickle.Observer.o#6->prot::Trickle.Observer.o#6">
									}
									PC: (((z_120 + z_90) == t_5) && (t_10 < 4) && (t_23 < 4) && (t_39 < 4) && (t_42 < 4) 
	&& (t_5 < 4) && (t_40 < 4) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= 
	(t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_40 + -2)) && 
	(z_0 > 0) && (z_1 > 0) && (z_2 > 0) && (z_3 > 0) && (z_4 > 0) && (z_5 > 0) && 
	(z_90 > 0))
									DATA{
										:pid_2:uncoveredExit = 0;
										:pid_2:seqBuff[0] = 1;
										:pid_2:seqBuff[1] = 1;
										:pid_31:node_time = (z_120 + z_5 + z_90);
										:pid_31:z = z_120;
										:pid_31:localTime = (z_0 + z_120 + z_5 + z_90);
										:pid_31:localPC = (((z_120 + z_90) == t_5) && (t_5 < 4) && (t_40 < 4) && (0 <= (t_5 + -2)) && (0 <= (t_40 + -2)) && (z_0 > 0) && (z_5 > 0) && (z_90 > 0));
										:pid_32:cl = (z_120 + z_90);
										:pid_38:cl = z_120;
										:pid_43:cl = (z_120 + z_5 + z_90);
									}
									BUFFER{
										:pid_48:bufferNode:<FIFO>#0{
											:pid_31:ControlMsg([ 1 , 1 ] , (z_0 + z_120 + z_5 + z_90));
										}
										:pid_65:bufferNode:<FIFO>#0{
											:pid_31:ControlMsg([ 1 , 1 ] , (z_0 + z_120 + z_5 + z_90));
										}
									}
								}
							}
							EC:<Id:133;Ev:26;H:7;W:114>{ SC: ( pid_9:o#5 , ( pid_35:cp1 , pid_39:dp0 , pid_45:dp1 ) , ( pid_52:cp1 , pid_56:dp0 , pid_61:dp0 ) , ( pid_69:cp1 , pid_73:dp0 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
								EXE: { |;| (:pid_31 , run) (:pid_43 , run) 
	(:pid_44 , run) (:pid_44 , dp_init) (:pid_2 , run) }
								TRACE: { |;| (:pid_31 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_90 }) (:pid_44 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_41 }) }
								PC: ((t_10 < 4) && (t_23 < 4) && (t_39 < 4) && (t_42 < 4) && (t_5 < 4) && (t_41 < 4) 
	&& (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_39 + -2)) && (0 <= (t_42 
	+ -2)) && (0 <= (t_5 + -2)) && (0 <= (t_41 + -2)) && (z_0 > 0) && (z_1 > 0) && 
	(z_2 > 0) && (z_3 > 0) && (z_4 > 0) && (z_5 > 0))
								DATA{
									:pid_2:uncoveredExit = 1;
									:pid_31:node_time = (z_5 + z_90);
									:pid_31:z = z_90;
									:pid_31:localTime = (z_0 + z_5 + z_90);
									:pid_31:localPC = ((t_5 < 4) && (t_41 < 4) && (0 <= (t_5 + -2)) && (0 <= (t_41 + -2)) && (z_0 > 0) && (z_5 > 0));
									:pid_32:cl = z_90;
									:pid_38:cl = (z_5 + z_90);
									:pid_43:e = 0;
									:pid_43:tau = 4;
									:pid_43:tau_l = 4;
									:pid_43:tau_h = 8;
									:pid_43:k = 2;
									:pid_43:c = 0;
									:pid_43:t = t_41;
									:pid_43:cl = 0;
								}
								EC:<Id:185;Ev:0;H:8;W:114>{ SC: ( pid_10:o#6 , ( pid_36:cp2 , pid_39:dp0 , pid_45:dp1 ) , ( pid_52:cp1 , pid_56:dp0 , pid_61:dp0 ) , ( pid_69:cp1 , pid_73:dp0 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_103:cp1 , pid_107:dp0 , pid_112:dp0 ) )
									EXE: { |;| (:pid_31 , run) (:pid_32 , run) 
	(:pid_35 , run) (:pid_35 , cp_sendCM) (:pid_2 , run) (:pid_9 , run) (:pid_9 , 
	n1_out_CM) }
									TRACE: { |;| (:pid_31 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_125 }) (:pid_35 , ${ output 
	inst::Trickle.Node.ControlMsg [ 1 , 1 ] ${ + param::Trickle.Node.z_0 
	param::Trickle.Node.z_125 param::Trickle.Node.z_5 param::Trickle.Node.z_90 } } @ 
	(z_125 + z_5 + z_90)) }
									/*FLAGS{ COVERAGE-ELEMENT }*/
									INFO{
										<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#6->run::pid_10:Trickle.Observer.o#6->prot::Trickle.Observer.o#6" as trace="tpid#6->run::pid_10:Trickle.Observer.o#6->prot::Trickle.Observer.o#6">
									}
									PC: (((z_125 + z_90) == t_5) && (t_10 < 4) && (t_23 < 4) && (t_39 < 4) && (t_42 < 4) 
	&& (t_5 < 4) && (t_41 < 4) && (0 <= (t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= 
	(t_39 + -2)) && (0 <= (t_42 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_41 + -2)) && 
	(z_0 > 0) && (z_1 > 0) && (z_2 > 0) && (z_3 > 0) && (z_4 > 0) && (z_5 > 0) && 
	(z_90 > 0))
									DATA{
										:pid_2:uncoveredExit = 0;
										:pid_2:seqBuff[0] = 1;
										:pid_2:seqBuff[1] = 1;
										:pid_31:node_time = (z_125 + z_5 + z_90);
										:pid_31:z = z_125;
										:pid_31:localTime = (z_0 + z_125 + z_5 + z_90);
										:pid_31:localPC = (((z_125 + z_90) == t_5) && (t_5 < 4) && (t_41 < 4) && (0 <= (t_5 + -2)) && (0 <= (t_41 + -2)) && (z_0 > 0) && (z_5 > 0) && (z_90 > 0));
										:pid_32:cl = (z_125 + z_90);
										:pid_38:cl = (z_125 + z_5 + z_90);
										:pid_43:cl = z_125;
									}
									BUFFER{
										:pid_48:bufferNode:<FIFO>#0{
											:pid_31:ControlMsg([ 1 , 1 ] , (z_0 + z_125 + z_5 + z_90));
										}
										:pid_65:bufferNode:<FIFO>#0{
											:pid_31:ControlMsg([ 1 , 1 ] , (z_0 + z_125 + z_5 + z_90));
										}
									}
								}
							}
						}
					}
					EC:<Id:68;Ev:14;H:5;W:57>{ SC: ( pid_7:o#3 , ( pid_35:cp1 , pid_39:dp0 , pid_44:dp0 ) , ( pid_52:cp1 , pid_56:dp0 , pid_61:dp0 ) , ( pid_70:cp2 , pid_73:dp0 , pid_78:dp0 ) , ( pid_85:cp0 , pid_90:dp0 , pid_95:dp0 ) , ( pid_102:cp0 , pid_107:dp0 , pid_112:dp0 ) )
						EXE: { |;| (:pid_65 , run) (:pid_66 , run) (:pid_69 , 
	run) (:pid_69 , cp_sendCM) (:pid_2 , run) }
						TRACE: { |;| (:pid_65 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_52 }) (:pid_69 , ${ output inst::Trickle.Node.ControlMsg [ 
	0 , 0 ] ${ + param::Trickle.Node.z_2 param::Trickle.Node.z_32 
	param::Trickle.Node.z_52 } } @ (z_32 + z_52)) }
						PC: ((z_52 == t_23) && (t_10 < 4) && (t_23 < 4) && (t_5 < 4) && (0 <= (t_10 + -2)) 
	&& (0 <= (t_23 + -2)) && (0 <= (t_5 + -2)) && (z_0 > 0) && (z_1 > 0) && (z_2 > 0)
	 && (z_3 > 0) && (z_32 > 0) && (z_4 > 0))
						DATA{
							:pid_2:uncoveredExit = 1;
							:pid_65:node_time = (z_32 + z_52);
							:pid_65:z = z_52;
							:pid_65:localTime = (z_2 + z_32 + z_52);
							:pid_65:localPC = ((z_52 == t_23) && (t_23 < 4) && (0 <= (t_23 + -2)) && (z_2 > 0) && (z_32 > 0));
							:pid_66:cl = z_52;
							:pid_72:cl = (z_32 + z_52);
							:pid_77:cl = (z_32 + z_52);
						}
						BUFFER{
							:pid_31:bufferNode:<FIFO>#0{
								:pid_65:ControlMsg([ 0 , 0 ] , (z_2 + z_32 + z_52));
							}
							:pid_48:bufferNode:<FIFO>#0{
								:pid_65:ControlMsg([ 0 , 0 ] , (z_2 + z_32 + z_52));
							}
							:pid_82:bufferNode:<FIFO>#0{
								:pid_65:ControlMsg([ 0 , 0 ] , (z_2 + z_32 + z_52));
							}
							:pid_99:bufferNode:<FIFO>#0{
								:pid_65:ControlMsg([ 0 , 0 ] , (z_2 + z_32 + z_52));
							}
						}
						EC:<Id:87;Ev:0;H:6;W:57>{ SC: ( pid_8:o#4 , ( pid_35:cp1 , pid_39:dp0 , pid_44:dp0 ) , ( pid_52:cp1 , pid_56:dp0 , pid_61:dp0 ) , ( pid_70:cp2 , pid_73:dp0 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_102:cp0 , pid_107:dp0 , pid_112:dp0 ) )
							EXE: { |;| (:pid_82 , run) (:pid_83 , run) (:pid_85 
	, run) (:pid_85 , cp_init) (:pid_2 , run) (:pid_7 , run) (:pid_7 , n4_out_Log) }
							TRACE: { |;| (:pid_82 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_68 }) (:pid_85 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_45 }) 
	(:pid_85 , ${ output#env inst::Trickle.Node.Log 0 ${ + param::Trickle.Node.z_3 
	param::Trickle.Node.z_68 } } @ z_68) }
							/*FLAGS{ COVERAGE-ELEMENT }*/
							INFO{
								<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#4->run::pid_8:Trickle.Observer.o#4->prot::Trickle.Observer.o#4" as trace="tpid#4->run::pid_8:Trickle.Observer.o#4->prot::Trickle.Observer.o#4">
							}
							PC: ((z_52 == t_23) && (t_10 < 4) && (t_23 < 4) && (t_45 < 4) && (t_5 < 4) && (0 <= 
	(t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_45 + -2)) && (0 <= (t_5 + -2)) && 
	(z_0 > 0) && (z_1 > 0) && (z_2 > 0) && (z_3 > 0) && (z_32 > 0) && (z_4 > 0))
							DATA{
								:pid_2:uncoveredExit = 0;
								:pid_82:node_time = z_68;
								:pid_82:z = z_68;
								:pid_82:localTime = (z_3 + z_68);
								:pid_82:undef_DM1 = true;
								:pid_82:undef_DM2 = true;
								:pid_82:localPC = ((t_45 < 4) && (0 <= (t_45 + -2)) && (z_3 > 0));
								:pid_83:e = 0;
								:pid_83:tau = 4;
								:pid_83:c = 0;
								:pid_83:t = t_45;
								:pid_83:cl = 0;
								:pid_89:cl = z_68;
								:pid_94:cl = z_68;
							}
						}
					}
					EC:<Id:69;Ev:15;H:5;W:58>{ SC: ( pid_7:o#3 , ( pid_35:cp1 , pid_39:dp0 , pid_44:dp0 ) , ( pid_53:cp2 , pid_56:dp0 , pid_61:dp0 ) , ( pid_69:cp1 , pid_73:dp0 , pid_78:dp0 ) , ( pid_85:cp0 , pid_90:dp0 , pid_95:dp0 ) , ( pid_102:cp0 , pid_107:dp0 , pid_112:dp0 ) )
						EXE: { |;| (:pid_48 , run) (:pid_49 , run) (:pid_52 , 
	run) (:pid_52 , cp_sendCM) (:pid_2 , run) }
						TRACE: { |;| (:pid_48 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_51 }) (:pid_52 , ${ output inst::Trickle.Node.ControlMsg [ 
	0 , 0 ] ${ + param::Trickle.Node.z_1 param::Trickle.Node.z_11 
	param::Trickle.Node.z_51 } } @ (z_11 + z_51)) }
						PC: ((z_51 == t_10) && (t_10 < 4) && (t_23 < 4) && (t_5 < 4) && (0 <= (t_10 + -2)) 
	&& (0 <= (t_23 + -2)) && (0 <= (t_5 + -2)) && (z_0 > 0) && (z_1 > 0) && (z_11 > 
	0) && (z_2 > 0) && (z_3 > 0) && (z_4 > 0))
						DATA{
							:pid_2:uncoveredExit = 1;
							:pid_48:node_time = (z_11 + z_51);
							:pid_48:z = z_51;
							:pid_48:localTime = (z_1 + z_11 + z_51);
							:pid_48:localPC = ((z_51 == t_10) && (t_10 < 4) && (0 <= (t_10 + -2)) && (z_1 > 0) && (z_11 > 0));
							:pid_49:cl = z_51;
							:pid_55:cl = (z_11 + z_51);
							:pid_60:cl = (z_11 + z_51);
						}
						BUFFER{
							:pid_65:bufferNode:<FIFO>#0{
								:pid_48:ControlMsg([ 0 , 0 ] , (z_1 + z_11 + z_51));
							}
						}
						EC:<Id:96;Ev:0;H:6;W:58>{ SC: ( pid_8:o#4 , ( pid_35:cp1 , pid_39:dp0 , pid_44:dp0 ) , ( pid_53:cp2 , pid_56:dp0 , pid_61:dp0 ) , ( pid_69:cp1 , pid_73:dp0 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_102:cp0 , pid_107:dp0 , pid_112:dp0 ) )
							EXE: { |;| (:pid_82 , run) (:pid_83 , run) (:pid_85 
	, run) (:pid_85 , cp_init) (:pid_2 , run) (:pid_7 , run) (:pid_7 , n4_out_Log) }
							TRACE: { |;| (:pid_82 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_73 }) (:pid_85 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_48 }) 
	(:pid_85 , ${ output#env inst::Trickle.Node.Log 0 ${ + param::Trickle.Node.z_3 
	param::Trickle.Node.z_73 } } @ z_73) }
							/*FLAGS{ COVERAGE-ELEMENT }*/
							INFO{
								<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#4->run::pid_8:Trickle.Observer.o#4->prot::Trickle.Observer.o#4" as trace="tpid#4->run::pid_8:Trickle.Observer.o#4->prot::Trickle.Observer.o#4">
							}
							PC: ((z_51 == t_10) && (t_10 < 4) && (t_23 < 4) && (t_48 < 4) && (t_5 < 4) && (0 <= 
	(t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_48 + -2)) && (0 <= (t_5 + -2)) && 
	(z_0 > 0) && (z_1 > 0) && (z_11 > 0) && (z_2 > 0) && (z_3 > 0) && (z_4 > 0))
							DATA{
								:pid_2:uncoveredExit = 0;
								:pid_82:node_time = z_73;
								:pid_82:z = z_73;
								:pid_82:localTime = (z_3 + z_73);
								:pid_82:undef_DM1 = true;
								:pid_82:undef_DM2 = true;
								:pid_82:localPC = ((t_48 < 4) && (0 <= (t_48 + -2)) && (z_3 > 0));
								:pid_83:e = 0;
								:pid_83:tau = 4;
								:pid_83:c = 0;
								:pid_83:t = t_48;
								:pid_83:cl = 0;
								:pid_89:cl = z_73;
								:pid_94:cl = z_73;
							}
						}
					}
					EC:<Id:70;Ev:16;H:5;W:59>{ SC: ( pid_7:o#3 , ( pid_36:cp2 , pid_39:dp0 , pid_44:dp0 ) , ( pid_52:cp1 , pid_56:dp0 , pid_61:dp0 ) , ( pid_69:cp1 , pid_73:dp0 , pid_78:dp0 ) , ( pid_85:cp0 , pid_90:dp0 , pid_95:dp0 ) , ( pid_102:cp0 , pid_107:dp0 , pid_112:dp0 ) )
						EXE: { |;| (:pid_31 , run) (:pid_32 , run) (:pid_35 , 
	run) (:pid_35 , cp_sendCM) (:pid_2 , run) }
						TRACE: { |;| (:pid_31 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_50 }) (:pid_35 , ${ output inst::Trickle.Node.ControlMsg [ 
	1 , 1 ] ${ + param::Trickle.Node.z_0 param::Trickle.Node.z_5 
	param::Trickle.Node.z_50 } } @ (z_5 + z_50)) }
						PC: ((z_50 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_5 < 4) && (0 <= (t_10 + -2)) && 
	(0 <= (t_23 + -2)) && (0 <= (t_5 + -2)) && (z_0 > 0) && (z_1 > 0) && (z_2 > 0) 
	&& (z_3 > 0) && (z_4 > 0) && (z_5 > 0))
						DATA{
							:pid_2:uncoveredExit = 1;
							:pid_31:node_time = (z_5 + z_50);
							:pid_31:z = z_50;
							:pid_31:localTime = (z_0 + z_5 + z_50);
							:pid_31:localPC = ((z_50 == t_5) && (t_5 < 4) && (0 <= (t_5 + -2)) && (z_0 > 0) && (z_5 > 0));
							:pid_32:cl = z_50;
							:pid_38:cl = (z_5 + z_50);
							:pid_43:cl = (z_5 + z_50);
						}
						BUFFER{
							:pid_48:bufferNode:<FIFO>#0{
								:pid_31:ControlMsg([ 1 , 1 ] , (z_0 + z_5 + z_50));
							}
							:pid_65:bufferNode:<FIFO>#0{
								:pid_31:ControlMsg([ 1 , 1 ] , (z_0 + z_5 + z_50));
							}
						}
						EC:<Id:104;Ev:0;H:6;W:59>{ SC: ( pid_8:o#4 , ( pid_36:cp2 , pid_39:dp0 , pid_44:dp0 ) , ( pid_52:cp1 , pid_56:dp0 , pid_61:dp0 ) , ( pid_69:cp1 , pid_73:dp0 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_102:cp0 , pid_107:dp0 , pid_112:dp0 ) )
							EXE: { |;| (:pid_82 , run) (:pid_83 , run) (:pid_85 
	, run) (:pid_85 , cp_init) (:pid_2 , run) (:pid_7 , run) (:pid_7 , n4_out_Log) }
							TRACE: { |;| (:pid_82 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_78 }) (:pid_85 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_53 }) 
	(:pid_85 , ${ output#env inst::Trickle.Node.Log 0 ${ + param::Trickle.Node.z_3 
	param::Trickle.Node.z_78 } } @ z_78) }
							/*FLAGS{ COVERAGE-ELEMENT }*/
							INFO{
								<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#4->run::pid_8:Trickle.Observer.o#4->prot::Trickle.Observer.o#4" as trace="tpid#4->run::pid_8:Trickle.Observer.o#4->prot::Trickle.Observer.o#4">
							}
							PC: ((z_50 == t_5) && (t_10 < 4) && (t_23 < 4) && (t_5 < 4) && (t_53 < 4) && (0 <= 
	(t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_53 + -2)) && 
	(z_0 > 0) && (z_1 > 0) && (z_2 > 0) && (z_3 > 0) && (z_4 > 0) && (z_5 > 0))
							DATA{
								:pid_2:uncoveredExit = 0;
								:pid_82:node_time = z_78;
								:pid_82:z = z_78;
								:pid_82:localTime = (z_3 + z_78);
								:pid_82:undef_DM1 = true;
								:pid_82:undef_DM2 = true;
								:pid_82:localPC = ((t_53 < 4) && (0 <= (t_53 + -2)) && (z_3 > 0));
								:pid_83:e = 0;
								:pid_83:tau = 4;
								:pid_83:c = 0;
								:pid_83:t = t_53;
								:pid_83:cl = 0;
								:pid_89:cl = z_78;
								:pid_94:cl = z_78;
							}
						}
					}
					EC:<Id:71;Ev:17;H:5;W:60>{ SC: ( pid_7:o#3 , ( pid_35:cp1 , pid_40:dp1 , pid_44:dp0 ) , ( pid_52:cp1 , pid_56:dp0 , pid_61:dp0 ) , ( pid_69:cp1 , pid_73:dp0 , pid_78:dp0 ) , ( pid_85:cp0 , pid_90:dp0 , pid_95:dp0 ) , ( pid_102:cp0 , pid_107:dp0 , pid_112:dp0 ) )
						EXE: { |;| (:pid_31 , run) (:pid_38 , run) (:pid_39 , 
	run) (:pid_39 , dp_init) (:pid_2 , run) }
						TRACE: { |;| (:pid_31 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_50 }) (:pid_39 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_26 }) }
						PC: ((t_10 < 4) && (t_23 < 4) && (t_5 < 4) && (t_26 < 4) && (0 <= (t_10 + -2)) && (0 
	<= (t_23 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_26 + -2)) && (z_0 > 0) && (z_1 
	> 0) && (z_2 > 0) && (z_3 > 0) && (z_4 > 0) && (z_5 > 0))
						DATA{
							:pid_2:uncoveredExit = 1;
							:pid_31:node_time = (z_5 + z_50);
							:pid_31:z = z_50;
							:pid_31:localTime = (z_0 + z_5 + z_50);
							:pid_31:localPC = ((t_5 < 4) && (t_26 < 4) && (0 <= (t_5 + -2)) && (0 <= (t_26 + -2)) && (z_0 > 0) && (z_5 > 0));
							:pid_32:cl = z_50;
							:pid_38:e = 0;
							:pid_38:tau = 4;
							:pid_38:tau_l = 4;
							:pid_38:tau_h = 8;
							:pid_38:k = 2;
							:pid_38:c = 0;
							:pid_38:t = t_26;
							:pid_38:cl = 0;
							:pid_43:cl = (z_5 + z_50);
						}
						EC:<Id:113;Ev:0;H:6;W:60>{ SC: ( pid_8:o#4 , ( pid_35:cp1 , pid_40:dp1 , pid_44:dp0 ) , ( pid_52:cp1 , pid_56:dp0 , pid_61:dp0 ) , ( pid_69:cp1 , pid_73:dp0 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_102:cp0 , pid_107:dp0 , pid_112:dp0 ) )
							EXE: { |;| (:pid_82 , run) (:pid_83 , run) (:pid_85 
	, run) (:pid_85 , cp_init) (:pid_2 , run) (:pid_7 , run) (:pid_7 , n4_out_Log) }
							TRACE: { |;| (:pid_82 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_83 }) (:pid_85 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_55 }) 
	(:pid_85 , ${ output#env inst::Trickle.Node.Log 0 ${ + param::Trickle.Node.z_3 
	param::Trickle.Node.z_83 } } @ z_83) }
							/*FLAGS{ COVERAGE-ELEMENT }*/
							INFO{
								<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#4->run::pid_8:Trickle.Observer.o#4->prot::Trickle.Observer.o#4" as trace="tpid#4->run::pid_8:Trickle.Observer.o#4->prot::Trickle.Observer.o#4">
							}
							PC: ((t_10 < 4) && (t_23 < 4) && (t_5 < 4) && (t_55 < 4) && (t_26 < 4) && (0 <= 
	(t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_55 + -2)) && 
	(0 <= (t_26 + -2)) && (z_0 > 0) && (z_1 > 0) && (z_2 > 0) && (z_3 > 0) && (z_4 > 
	0) && (z_5 > 0))
							DATA{
								:pid_2:uncoveredExit = 0;
								:pid_82:node_time = z_83;
								:pid_82:z = z_83;
								:pid_82:localTime = (z_3 + z_83);
								:pid_82:undef_DM1 = true;
								:pid_82:undef_DM2 = true;
								:pid_82:localPC = ((t_55 < 4) && (0 <= (t_55 + -2)) && (z_3 > 0));
								:pid_83:e = 0;
								:pid_83:tau = 4;
								:pid_83:c = 0;
								:pid_83:t = t_55;
								:pid_83:cl = 0;
								:pid_89:cl = z_83;
								:pid_94:cl = z_83;
							}
						}
					}
					EC:<Id:72;Ev:18;H:5;W:61>{ SC: ( pid_7:o#3 , ( pid_35:cp1 , pid_39:dp0 , pid_45:dp1 ) , ( pid_52:cp1 , pid_56:dp0 , pid_61:dp0 ) , ( pid_69:cp1 , pid_73:dp0 , pid_78:dp0 ) , ( pid_85:cp0 , pid_90:dp0 , pid_95:dp0 ) , ( pid_102:cp0 , pid_107:dp0 , pid_112:dp0 ) )
						EXE: { |;| (:pid_31 , run) (:pid_43 , run) (:pid_44 , 
	run) (:pid_44 , dp_init) (:pid_2 , run) }
						TRACE: { |;| (:pid_31 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_50 }) (:pid_44 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_27 }) }
						PC: ((t_10 < 4) && (t_23 < 4) && (t_5 < 4) && (t_27 < 4) && (0 <= (t_10 + -2)) && (0 
	<= (t_23 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_27 + -2)) && (z_0 > 0) && (z_1 
	> 0) && (z_2 > 0) && (z_3 > 0) && (z_4 > 0) && (z_5 > 0))
						DATA{
							:pid_2:uncoveredExit = 1;
							:pid_31:node_time = (z_5 + z_50);
							:pid_31:z = z_50;
							:pid_31:localTime = (z_0 + z_5 + z_50);
							:pid_31:localPC = ((t_5 < 4) && (t_27 < 4) && (0 <= (t_5 + -2)) && (0 <= (t_27 + -2)) && (z_0 > 0) && (z_5 > 0));
							:pid_32:cl = z_50;
							:pid_38:cl = (z_5 + z_50);
							:pid_43:e = 0;
							:pid_43:tau = 4;
							:pid_43:tau_l = 4;
							:pid_43:tau_h = 8;
							:pid_43:k = 2;
							:pid_43:c = 0;
							:pid_43:t = t_27;
							:pid_43:cl = 0;
						}
						EC:<Id:120;Ev:0;H:6;W:61>{ SC: ( pid_8:o#4 , ( pid_35:cp1 , pid_39:dp0 , pid_45:dp1 ) , ( pid_52:cp1 , pid_56:dp0 , pid_61:dp0 ) , ( pid_69:cp1 , pid_73:dp0 , pid_78:dp0 ) , ( pid_86:cp1 , pid_90:dp0 , pid_95:dp0 ) , ( pid_102:cp0 , pid_107:dp0 , pid_112:dp0 ) )
							EXE: { |;| (:pid_82 , run) (:pid_83 , run) (:pid_85 
	, run) (:pid_85 , cp_init) (:pid_2 , run) (:pid_7 , run) (:pid_7 , n4_out_Log) }
							TRACE: { |;| (:pid_82 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_88 }) (:pid_85 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_57 }) 
	(:pid_85 , ${ output#env inst::Trickle.Node.Log 0 ${ + param::Trickle.Node.z_3 
	param::Trickle.Node.z_88 } } @ z_88) }
							/*FLAGS{ COVERAGE-ELEMENT }*/
							INFO{
								<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#4->run::pid_8:Trickle.Observer.o#4->prot::Trickle.Observer.o#4" as trace="tpid#4->run::pid_8:Trickle.Observer.o#4->prot::Trickle.Observer.o#4">
							}
							PC: ((t_10 < 4) && (t_23 < 4) && (t_5 < 4) && (t_57 < 4) && (t_27 < 4) && (0 <= 
	(t_10 + -2)) && (0 <= (t_23 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_57 + -2)) && 
	(0 <= (t_27 + -2)) && (z_0 > 0) && (z_1 > 0) && (z_2 > 0) && (z_3 > 0) && (z_4 > 
	0) && (z_5 > 0))
							DATA{
								:pid_2:uncoveredExit = 0;
								:pid_82:node_time = z_88;
								:pid_82:z = z_88;
								:pid_82:localTime = (z_3 + z_88);
								:pid_82:undef_DM1 = true;
								:pid_82:undef_DM2 = true;
								:pid_82:localPC = ((t_57 < 4) && (0 <= (t_57 + -2)) && (z_3 > 0));
								:pid_83:e = 0;
								:pid_83:tau = 4;
								:pid_83:c = 0;
								:pid_83:t = t_57;
								:pid_83:cl = 0;
								:pid_89:cl = z_88;
								:pid_94:cl = z_88;
							}
						}
					}
				}
			}
			EC:<Id:14;Ev:8;H:3;W:11>{ SC: ( pid_5:o#1 , ( pid_36:cp2 , pid_39:dp0 , pid_44:dp0 ) , ( pid_51:cp0 , pid_56:dp0 , pid_61:dp0 ) , ( pid_68:cp0 , pid_73:dp0 , pid_78:dp0 ) , ( pid_85:cp0 , pid_90:dp0 , pid_95:dp0 ) , ( pid_102:cp0 , pid_107:dp0 , pid_112:dp0 ) )
				EXE: { |;| (:pid_31 , run) (:pid_32 , run) (:pid_35 , run) 
	(:pid_35 , cp_sendCM) (:pid_2 , run) }
				TRACE: { |;| (:pid_31 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_10 }) (:pid_35 , ${ output inst::Trickle.Node.ControlMsg [ 
	1 , 1 ] ${ + param::Trickle.Node.z_0 param::Trickle.Node.z_10 
	param::Trickle.Node.z_5 } } @ (z_10 + z_5)) }
				PC: ((z_10 == t_5) && (t_5 < 4) && (0 <= (t_5 + -2)) && (z_0 > 0) && (z_1 > 0) && 
	(z_2 > 0) && (z_3 > 0) && (z_4 > 0) && (z_5 > 0))
				DATA{
					:pid_2:uncoveredExit = 1;
					:pid_31:node_time = (z_10 + z_5);
					:pid_31:z = z_10;
					:pid_31:localTime = (z_0 + z_10 + z_5);
					:pid_31:localPC = ((z_10 == t_5) && (t_5 < 4) && (0 <= (t_5 + -2)) && (z_0 > 0) && (z_5 > 0));
					:pid_32:cl = z_10;
					:pid_38:cl = (z_10 + z_5);
					:pid_43:cl = (z_10 + z_5);
				}
				BUFFER{
					:pid_48:bufferNode:<FIFO>#0{
						:pid_31:ControlMsg([ 1 , 1 ] , (z_0 + z_10 + z_5));
					}
					:pid_65:bufferNode:<FIFO>#0{
						:pid_31:ControlMsg([ 1 , 1 ] , (z_0 + z_10 + z_5));
					}
				}
				EC:<Id:45;Ev:0;H:4;W:11>{ SC: ( pid_6:o#2 , ( pid_36:cp2 , pid_39:dp0 , pid_44:dp0 ) , ( pid_52:cp1 , pid_56:dp0 , pid_61:dp0 ) , ( pid_68:cp0 , pid_73:dp0 , pid_78:dp0 ) , ( pid_85:cp0 , pid_90:dp0 , pid_95:dp0 ) , ( pid_102:cp0 , pid_107:dp0 , pid_112:dp0 ) )
					EXE: { |;| (:pid_48 , run) (:pid_49 , run) (:pid_51 , run) 
	(:pid_51 , cp_init) (:pid_2 , run) (:pid_5 , run) (:pid_5 , n2_out_Log) }
					TRACE: { |;| (:pid_48 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_36 }) (:pid_51 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_27 }) 
	(:pid_51 , ${ output#env inst::Trickle.Node.Log 0 ${ + param::Trickle.Node.z_1 
	param::Trickle.Node.z_36 } } @ z_36) }
					/*FLAGS{ COVERAGE-ELEMENT }*/
					INFO{
						<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#2->run::pid_6:Trickle.Observer.o#2->prot::Trickle.Observer.o#2" as trace="tpid#2->run::pid_6:Trickle.Observer.o#2->prot::Trickle.Observer.o#2">
					}
					PC: ((z_10 == t_5) && (t_27 < 4) && (t_5 < 4) && (0 <= (t_27 + -2)) && (0 <= (t_5 + 
	-2)) && (z_0 > 0) && (z_1 > 0) && (z_2 > 0) && (z_3 > 0) && (z_4 > 0) && (z_5 > 
	0))
					DATA{
						:pid_2:uncoveredExit = 0;
						:pid_48:node_time = z_36;
						:pid_48:z = z_36;
						:pid_48:localTime = (z_1 + z_36);
						:pid_48:undef_DM1 = true;
						:pid_48:undef_DM2 = true;
						:pid_48:localPC = ((t_27 < 4) && (0 <= (t_27 + -2)) && (z_1 > 0));
						:pid_49:e = 0;
						:pid_49:tau = 4;
						:pid_49:c = 0;
						:pid_49:t = t_27;
						:pid_49:cl = 0;
						:pid_55:cl = z_36;
						:pid_60:cl = z_36;
					}
				}
			}
			EC:<Id:15;Ev:9;H:3;W:12>{ SC: ( pid_5:o#1 , ( pid_35:cp1 , pid_40:dp1 , pid_44:dp0 ) , ( pid_51:cp0 , pid_56:dp0 , pid_61:dp0 ) , ( pid_68:cp0 , pid_73:dp0 , pid_78:dp0 ) , ( pid_85:cp0 , pid_90:dp0 , pid_95:dp0 ) , ( pid_102:cp0 , pid_107:dp0 , pid_112:dp0 ) )
				EXE: { |;| (:pid_31 , run) (:pid_38 , run) (:pid_39 , run) 
	(:pid_39 , dp_init) (:pid_2 , run) }
				TRACE: { |;| (:pid_31 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_10 }) (:pid_39 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_12 }) }
				PC: ((t_5 < 4) && (t_12 < 4) && (0 <= (t_5 + -2)) && (0 <= (t_12 + -2)) && (z_0 > 0) 
	&& (z_1 > 0) && (z_2 > 0) && (z_3 > 0) && (z_4 > 0) && (z_5 > 0))
				DATA{
					:pid_2:uncoveredExit = 1;
					:pid_31:node_time = (z_10 + z_5);
					:pid_31:z = z_10;
					:pid_31:localTime = (z_0 + z_10 + z_5);
					:pid_31:localPC = ((t_5 < 4) && (t_12 < 4) && (0 <= (t_5 + -2)) && (0 <= (t_12 + -2)) && (z_0 > 0) && (z_5 > 0));
					:pid_32:cl = z_10;
					:pid_38:e = 0;
					:pid_38:tau = 4;
					:pid_38:tau_l = 4;
					:pid_38:tau_h = 8;
					:pid_38:k = 2;
					:pid_38:c = 0;
					:pid_38:t = t_12;
					:pid_38:cl = 0;
					:pid_43:cl = (z_10 + z_5);
				}
				EC:<Id:52;Ev:0;H:4;W:12>{ SC: ( pid_6:o#2 , ( pid_35:cp1 , pid_40:dp1 , pid_44:dp0 ) , ( pid_52:cp1 , pid_56:dp0 , pid_61:dp0 ) , ( pid_68:cp0 , pid_73:dp0 , pid_78:dp0 ) , ( pid_85:cp0 , pid_90:dp0 , pid_95:dp0 ) , ( pid_102:cp0 , pid_107:dp0 , pid_112:dp0 ) )
					EXE: { |;| (:pid_48 , run) (:pid_49 , run) (:pid_51 , run) 
	(:pid_51 , cp_init) (:pid_2 , run) (:pid_5 , run) (:pid_5 , n2_out_Log) }
					TRACE: { |;| (:pid_48 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_41 }) (:pid_51 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_31 }) 
	(:pid_51 , ${ output#env inst::Trickle.Node.Log 0 ${ + param::Trickle.Node.z_1 
	param::Trickle.Node.z_41 } } @ z_41) }
					/*FLAGS{ COVERAGE-ELEMENT }*/
					INFO{
						<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#2->run::pid_6:Trickle.Observer.o#2->prot::Trickle.Observer.o#2" as trace="tpid#2->run::pid_6:Trickle.Observer.o#2->prot::Trickle.Observer.o#2">
					}
					PC: ((t_31 < 4) && (t_5 < 4) && (t_12 < 4) && (0 <= (t_31 + -2)) && (0 <= (t_5 + -2))
	 && (0 <= (t_12 + -2)) && (z_0 > 0) && (z_1 > 0) && (z_2 > 0) && (z_3 > 0) && 
	(z_4 > 0) && (z_5 > 0))
					DATA{
						:pid_2:uncoveredExit = 0;
						:pid_48:node_time = z_41;
						:pid_48:z = z_41;
						:pid_48:localTime = (z_1 + z_41);
						:pid_48:undef_DM1 = true;
						:pid_48:undef_DM2 = true;
						:pid_48:localPC = ((t_31 < 4) && (0 <= (t_31 + -2)) && (z_1 > 0));
						:pid_49:e = 0;
						:pid_49:tau = 4;
						:pid_49:c = 0;
						:pid_49:t = t_31;
						:pid_49:cl = 0;
						:pid_55:cl = z_41;
						:pid_60:cl = z_41;
					}
				}
			}
			EC:<Id:16;Ev:10;H:3;W:13>{ SC: ( pid_5:o#1 , ( pid_35:cp1 , pid_39:dp0 , pid_45:dp1 ) , ( pid_51:cp0 , pid_56:dp0 , pid_61:dp0 ) , ( pid_68:cp0 , pid_73:dp0 , pid_78:dp0 ) , ( pid_85:cp0 , pid_90:dp0 , pid_95:dp0 ) , ( pid_102:cp0 , pid_107:dp0 , pid_112:dp0 ) )
				EXE: { |;| (:pid_31 , run) (:pid_43 , run) (:pid_44 , run) 
	(:pid_44 , dp_init) (:pid_2 , run) }
				TRACE: { |;| (:pid_31 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_10 }) (:pid_44 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_13 }) }
				PC: ((t_5 < 4) && (t_13 < 4) && (0 <= (t_5 + -2)) && (0 <= (t_13 + -2)) && (z_0 > 0) 
	&& (z_1 > 0) && (z_2 > 0) && (z_3 > 0) && (z_4 > 0) && (z_5 > 0))
				DATA{
					:pid_2:uncoveredExit = 1;
					:pid_31:node_time = (z_10 + z_5);
					:pid_31:z = z_10;
					:pid_31:localTime = (z_0 + z_10 + z_5);
					:pid_31:localPC = ((t_5 < 4) && (t_13 < 4) && (0 <= (t_5 + -2)) && (0 <= (t_13 + -2)) && (z_0 > 0) && (z_5 > 0));
					:pid_32:cl = z_10;
					:pid_38:cl = (z_10 + z_5);
					:pid_43:e = 0;
					:pid_43:tau = 4;
					:pid_43:tau_l = 4;
					:pid_43:tau_h = 8;
					:pid_43:k = 2;
					:pid_43:c = 0;
					:pid_43:t = t_13;
					:pid_43:cl = 0;
				}
				EC:<Id:59;Ev:0;H:4;W:13>{ SC: ( pid_6:o#2 , ( pid_35:cp1 , pid_39:dp0 , pid_45:dp1 ) , ( pid_52:cp1 , pid_56:dp0 , pid_61:dp0 ) , ( pid_68:cp0 , pid_73:dp0 , pid_78:dp0 ) , ( pid_85:cp0 , pid_90:dp0 , pid_95:dp0 ) , ( pid_102:cp0 , pid_107:dp0 , pid_112:dp0 ) )
					EXE: { |;| (:pid_48 , run) (:pid_49 , run) (:pid_51 , run) 
	(:pid_51 , cp_init) (:pid_2 , run) (:pid_5 , run) (:pid_5 , n2_out_Log) }
					TRACE: { |;| (:pid_48 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_46 }) (:pid_51 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_35 }) 
	(:pid_51 , ${ output#env inst::Trickle.Node.Log 0 ${ + param::Trickle.Node.z_1 
	param::Trickle.Node.z_46 } } @ z_46) }
					/*FLAGS{ COVERAGE-ELEMENT }*/
					INFO{
						<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#2->run::pid_6:Trickle.Observer.o#2->prot::Trickle.Observer.o#2" as trace="tpid#2->run::pid_6:Trickle.Observer.o#2->prot::Trickle.Observer.o#2">
					}
					PC: ((t_35 < 4) && (t_5 < 4) && (t_13 < 4) && (0 <= (t_35 + -2)) && (0 <= (t_5 + -2))
	 && (0 <= (t_13 + -2)) && (z_0 > 0) && (z_1 > 0) && (z_2 > 0) && (z_3 > 0) && 
	(z_4 > 0) && (z_5 > 0))
					DATA{
						:pid_2:uncoveredExit = 0;
						:pid_48:node_time = z_46;
						:pid_48:z = z_46;
						:pid_48:localTime = (z_1 + z_46);
						:pid_48:undef_DM1 = true;
						:pid_48:undef_DM2 = true;
						:pid_48:localPC = ((t_35 < 4) && (0 <= (t_35 + -2)) && (z_1 > 0));
						:pid_49:e = 0;
						:pid_49:tau = 4;
						:pid_49:c = 0;
						:pid_49:t = t_35;
						:pid_49:cl = 0;
						:pid_55:cl = z_46;
						:pid_60:cl = z_46;
					}
				}
			}
		}
	}
}
