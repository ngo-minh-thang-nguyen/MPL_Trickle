EC:<Id:1;Ev:1;H:0;W:1>{ SC: ( pid_3:startup , ( pid_27:cp0 , pid_33:dp0 , pid_38:dp0 ) , ( pid_44:cp0 , pid_50:dp0 , pid_55:dp0 ) , ( pid_61:cp0 , pid_67:dp0 , pid_72:dp0 ) , ( pid_78:cp0 , pid_84:dp0 , pid_89:dp0 ) )
	ALIAS{
		:ppid_-1:pid_0 = run::#PARAMETERS#; // model is spec::Trickle;
		:ppid_-1:pid_1 = spec::Trickle;
		:ppid_1:pid_2 = spec::Trickle.Observer;
			DATA{
				:ppid_1:pid_2:uncoveredExit = spec::Trickle.Observer.uncoveredExit;
				:ppid_1:pid_2:mess = spec::Trickle.Observer.mess;
				:ppid_1:pid_2:seqBuff[0] = spec::Trickle.Observer.seqBuff;
				:ppid_1:pid_2:seqBuff[1] = spec::Trickle.Observer.seqBuff;
				:ppid_1:pid_2:dataMessage.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_2:dataMessage.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_2:dataMessage.offset = spec::Trickle.DATA_MESSAGE.offset;
				:ppid_1:pid_2:emit_time = spec::Trickle.Observer.emit_time;
			}
		:ppid_2:pid_3 = spec::Trickle.Observer.startup;
		:ppid_2:pid_4 = spec::Trickle.Observer.o#0;
		:ppid_2:pid_5 = spec::Trickle.Observer.o#1;
		:ppid_2:pid_6 = spec::Trickle.Observer.o#2;
		:ppid_2:pid_7 = spec::Trickle.Observer.o#3;
		:ppid_2:pid_8 = spec::Trickle.Observer.o#4;
		:ppid_2:pid_9 = spec::Trickle.Observer.o#5;
		:ppid_2:pid_10 = spec::Trickle.Observer.o#6;
		:ppid_2:pid_11 = spec::Trickle.Observer.o#7;
		:ppid_2:pid_12 = spec::Trickle.Observer.o#8;
		:ppid_2:pid_13 = spec::Trickle.Observer.o#9;
		:ppid_2:pid_14 = spec::Trickle.Observer.o#10;
		:ppid_2:pid_15 = spec::Trickle.Observer.o#11;
		:ppid_2:pid_16 = spec::Trickle.Observer.o#12;
		:ppid_2:pid_17 = spec::Trickle.Observer.o#13;
		:ppid_2:pid_18 = spec::Trickle.Observer.o#14;
		:ppid_2:pid_19 = spec::Trickle.Observer.o#15;
		:ppid_2:pid_20 = spec::Trickle.Observer.o#16;
		:ppid_2:pid_21 = spec::Trickle.Observer.o#17;
		:ppid_2:pid_22 = spec::Trickle.Observer.o#18;
		:ppid_2:pid_23 = spec::Trickle.Observer.PASS;
		:ppid_2:pid_24 = spec::Trickle.Observer.FAILED;
		:ppid_1:pid_25 = run::Trickle.n1; // model is spec::Trickle.Node;
			BUFFER NUMBER = 3;
			/*BUFFER{
				:ppid_1:pid_25:bufferCM = spec::Trickle.Node.bufferCM;
				:ppid_1:pid_25:bufferDM1 = spec::Trickle.Node.bufferDM1;
				:ppid_1:pid_25:bufferDM2 = spec::Trickle.Node.bufferDM2;
			}*/
			DATA{
				:ppid_1:pid_25:my_buff[0].seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_25:my_buff[0].fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_25:my_buff[0].offset = spec::Trickle.DATA_MESSAGE.offset;
				:ppid_1:pid_25:my_buff[1].seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_25:my_buff[1].fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_25:my_buff[1].offset = spec::Trickle.DATA_MESSAGE.offset;
				:ppid_1:pid_25:firmware[0] = spec::Trickle.Node.firmware;
				:ppid_1:pid_25:firmware[1] = spec::Trickle.Node.firmware;
				:ppid_1:pid_25:myseq_buff[0] = spec::Trickle.Node.myseq_buff;
				:ppid_1:pid_25:myseq_buff[1] = spec::Trickle.Node.myseq_buff;
				:ppid_1:pid_25:mydp_run[0] = spec::Trickle.Node.mydp_run;
				:ppid_1:pid_25:mydp_run[1] = spec::Trickle.Node.mydp_run;
				:ppid_1:pid_25:$time = spec::Trickle.Node.$time;
				:ppid_1:pid_25:z = spec::Trickle.Node.z;
				:ppid_1:pid_25:coverageProp1 = spec::Trickle.Node.coverageProp1;
				:ppid_1:pid_25:coverageProp2 = spec::Trickle.Node.coverageProp2;
				:ppid_1:pid_25:CM_zero_zero = spec::Trickle.Node.CM_zero_zero;
				:ppid_1:pid_25:CM_one_one = spec::Trickle.Node.CM_one_one;
				:ppid_1:pid_25:reach_DATA_EXPIR_DM1 = spec::Trickle.Node.reach_DATA_EXPIR_DM1;
				:ppid_1:pid_25:reach_DATA_EXPIR_DM2 = spec::Trickle.Node.reach_DATA_EXPIR_DM2;
				:ppid_1:pid_25:reach_CTRL_EXPIR = spec::Trickle.Node.reach_CTRL_EXPIR;
				:ppid_1:pid_25:seq_buff[0] = spec::Trickle.Node.seq_buff;
				:ppid_1:pid_25:seq_buff[1] = spec::Trickle.Node.seq_buff;
				:ppid_1:pid_25:i = spec::Trickle.Node.i;
				:ppid_1:pid_25:localTime = spec::Trickle.Node.localTime;
				:ppid_1:pid_25:localPC = spec::Trickle.Node.localPC;
				:ppid_1:pid_25:localPtC = spec::Trickle.Node.localPtC;
				:ppid_1:pid_25:new_seq_buff = spec::Trickle.Node.new_seq_buff;
				:ppid_1:pid_25:new_seq = spec::Trickle.Node.new_seq;
				:ppid_1:pid_25:new_fragment = spec::Trickle.Node.new_fragment;
				:ppid_1:pid_25:new_offset = spec::Trickle.Node.new_offset;
				:ppid_1:pid_25:timeEmit = spec::Trickle.Node.timeEmit;
			}
			INTERFACE{
				:ppid_1:pid_25:ControlMsg = spec::Trickle.Node.ControlMsg;
				:ppid_1:pid_25:DataMsg1 = spec::Trickle.Node.DataMsg1;
				:ppid_1:pid_25:DataMsg2 = spec::Trickle.Node.DataMsg2;
				:ppid_1:pid_25:Log = spec::Trickle.Node.Log;
			}
		:ppid_25:pid_26 = spec::Trickle.Node.ControlProcess;
			DATA{
				:ppid_25:pid_26:e = spec::Trickle.Node.ControlProcess.e;
				:ppid_25:pid_26:k = spec::Trickle.Node.ControlProcess.k;
				:ppid_25:pid_26:c = spec::Trickle.Node.ControlProcess.c;
				:ppid_25:pid_26:tau = spec::Trickle.Node.ControlProcess.tau;
				:ppid_25:pid_26:tau_l = spec::Trickle.Node.ControlProcess.tau_l;
				:ppid_25:pid_26:tau_h = spec::Trickle.Node.ControlProcess.tau_h;
				:ppid_25:pid_26:i = spec::Trickle.Node.ControlProcess.i;
				:ppid_25:pid_26:t = spec::Trickle.Node.ControlProcess.t;
				:ppid_25:pid_26:consistent = spec::Trickle.Node.ControlProcess.consistent;
				:ppid_25:pid_26:cl = spec::Trickle.Node.ControlProcess.cl;
			}
		:ppid_26:pid_27 = spec::Trickle.Node.ControlProcess.cp0;
		:ppid_26:pid_28 = spec::Trickle.Node.ControlProcess.cp0_init;
		:ppid_26:pid_29 = spec::Trickle.Node.ControlProcess.cp1;
		:ppid_26:pid_30 = spec::Trickle.Node.ControlProcess.cp2;
		:ppid_26:pid_31 = spec::Trickle.Node.ControlProcess.cp3;
		:ppid_25:pid_32 = run::Trickle.n1.DataProcess1; // model is spec::Trickle.Node.DataProcess;
			DATA{
				:ppid_25:pid_32:mySeq = spec::Trickle.Node.DataProcess.mySeq;
				:ppid_25:pid_32:e = spec::Trickle.Node.DataProcess.e;
				:ppid_25:pid_32:k = spec::Trickle.Node.DataProcess.k;
				:ppid_25:pid_32:c = spec::Trickle.Node.DataProcess.c;
				:ppid_25:pid_32:tau = spec::Trickle.Node.DataProcess.tau;
				:ppid_25:pid_32:tau_l = spec::Trickle.Node.DataProcess.tau_l;
				:ppid_25:pid_32:tau_h = spec::Trickle.Node.DataProcess.tau_h;
				:ppid_25:pid_32:i = spec::Trickle.Node.DataProcess.i;
				:ppid_25:pid_32:t = spec::Trickle.Node.DataProcess.t;
				:ppid_25:pid_32:consistent = spec::Trickle.Node.DataProcess.consistent;
				:ppid_25:pid_32:cl = spec::Trickle.Node.DataProcess.cl;
				:ppid_25:pid_32:d.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_25:pid_32:d.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_25:pid_32:d.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_32:pid_33 = spec::Trickle.Node.DataProcess.dp0;
		:ppid_32:pid_34 = spec::Trickle.Node.DataProcess.dp1;
		:ppid_32:pid_35 = spec::Trickle.Node.DataProcess.dp2;
		:ppid_32:pid_36 = spec::Trickle.Node.DataProcess.dp3;
		:ppid_25:pid_37 = run::Trickle.n1.DataProcess2; // model is spec::Trickle.Node.DataProcess;
			DATA{
				:ppid_25:pid_37:mySeq = spec::Trickle.Node.DataProcess.mySeq;
				:ppid_25:pid_37:e = spec::Trickle.Node.DataProcess.e;
				:ppid_25:pid_37:k = spec::Trickle.Node.DataProcess.k;
				:ppid_25:pid_37:c = spec::Trickle.Node.DataProcess.c;
				:ppid_25:pid_37:tau = spec::Trickle.Node.DataProcess.tau;
				:ppid_25:pid_37:tau_l = spec::Trickle.Node.DataProcess.tau_l;
				:ppid_25:pid_37:tau_h = spec::Trickle.Node.DataProcess.tau_h;
				:ppid_25:pid_37:i = spec::Trickle.Node.DataProcess.i;
				:ppid_25:pid_37:t = spec::Trickle.Node.DataProcess.t;
				:ppid_25:pid_37:consistent = spec::Trickle.Node.DataProcess.consistent;
				:ppid_25:pid_37:cl = spec::Trickle.Node.DataProcess.cl;
				:ppid_25:pid_37:d.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_25:pid_37:d.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_25:pid_37:d.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_37:pid_38 = spec::Trickle.Node.DataProcess.dp0;
		:ppid_37:pid_39 = spec::Trickle.Node.DataProcess.dp1;
		:ppid_37:pid_40 = spec::Trickle.Node.DataProcess.dp2;
		:ppid_37:pid_41 = spec::Trickle.Node.DataProcess.dp3;
		:ppid_1:pid_42 = run::Trickle.n2; // model is spec::Trickle.Node;
			BUFFER NUMBER = 3;
			/*BUFFER{
				:ppid_1:pid_42:bufferCM = spec::Trickle.Node.bufferCM;
				:ppid_1:pid_42:bufferDM1 = spec::Trickle.Node.bufferDM1;
				:ppid_1:pid_42:bufferDM2 = spec::Trickle.Node.bufferDM2;
			}*/
			DATA{
				:ppid_1:pid_42:my_buff[0].seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_42:my_buff[0].fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_42:my_buff[0].offset = spec::Trickle.DATA_MESSAGE.offset;
				:ppid_1:pid_42:my_buff[1].seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_42:my_buff[1].fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_42:my_buff[1].offset = spec::Trickle.DATA_MESSAGE.offset;
				:ppid_1:pid_42:firmware[0] = spec::Trickle.Node.firmware;
				:ppid_1:pid_42:firmware[1] = spec::Trickle.Node.firmware;
				:ppid_1:pid_42:myseq_buff[0] = spec::Trickle.Node.myseq_buff;
				:ppid_1:pid_42:myseq_buff[1] = spec::Trickle.Node.myseq_buff;
				:ppid_1:pid_42:mydp_run[0] = spec::Trickle.Node.mydp_run;
				:ppid_1:pid_42:mydp_run[1] = spec::Trickle.Node.mydp_run;
				:ppid_1:pid_42:$time = spec::Trickle.Node.$time;
				:ppid_1:pid_42:z = spec::Trickle.Node.z;
				:ppid_1:pid_42:coverageProp1 = spec::Trickle.Node.coverageProp1;
				:ppid_1:pid_42:coverageProp2 = spec::Trickle.Node.coverageProp2;
				:ppid_1:pid_42:CM_zero_zero = spec::Trickle.Node.CM_zero_zero;
				:ppid_1:pid_42:CM_one_one = spec::Trickle.Node.CM_one_one;
				:ppid_1:pid_42:reach_DATA_EXPIR_DM1 = spec::Trickle.Node.reach_DATA_EXPIR_DM1;
				:ppid_1:pid_42:reach_DATA_EXPIR_DM2 = spec::Trickle.Node.reach_DATA_EXPIR_DM2;
				:ppid_1:pid_42:reach_CTRL_EXPIR = spec::Trickle.Node.reach_CTRL_EXPIR;
				:ppid_1:pid_42:seq_buff[0] = spec::Trickle.Node.seq_buff;
				:ppid_1:pid_42:seq_buff[1] = spec::Trickle.Node.seq_buff;
				:ppid_1:pid_42:i = spec::Trickle.Node.i;
				:ppid_1:pid_42:localTime = spec::Trickle.Node.localTime;
				:ppid_1:pid_42:localPC = spec::Trickle.Node.localPC;
				:ppid_1:pid_42:localPtC = spec::Trickle.Node.localPtC;
				:ppid_1:pid_42:new_seq_buff = spec::Trickle.Node.new_seq_buff;
				:ppid_1:pid_42:new_seq = spec::Trickle.Node.new_seq;
				:ppid_1:pid_42:new_fragment = spec::Trickle.Node.new_fragment;
				:ppid_1:pid_42:new_offset = spec::Trickle.Node.new_offset;
				:ppid_1:pid_42:timeEmit = spec::Trickle.Node.timeEmit;
			}
			INTERFACE{
				:ppid_1:pid_42:ControlMsg = spec::Trickle.Node.ControlMsg;
				:ppid_1:pid_42:DataMsg1 = spec::Trickle.Node.DataMsg1;
				:ppid_1:pid_42:DataMsg2 = spec::Trickle.Node.DataMsg2;
				:ppid_1:pid_42:Log = spec::Trickle.Node.Log;
			}
		:ppid_42:pid_43 = spec::Trickle.Node.ControlProcess;
			DATA{
				:ppid_42:pid_43:e = spec::Trickle.Node.ControlProcess.e;
				:ppid_42:pid_43:k = spec::Trickle.Node.ControlProcess.k;
				:ppid_42:pid_43:c = spec::Trickle.Node.ControlProcess.c;
				:ppid_42:pid_43:tau = spec::Trickle.Node.ControlProcess.tau;
				:ppid_42:pid_43:tau_l = spec::Trickle.Node.ControlProcess.tau_l;
				:ppid_42:pid_43:tau_h = spec::Trickle.Node.ControlProcess.tau_h;
				:ppid_42:pid_43:i = spec::Trickle.Node.ControlProcess.i;
				:ppid_42:pid_43:t = spec::Trickle.Node.ControlProcess.t;
				:ppid_42:pid_43:consistent = spec::Trickle.Node.ControlProcess.consistent;
				:ppid_42:pid_43:cl = spec::Trickle.Node.ControlProcess.cl;
			}
		:ppid_43:pid_44 = spec::Trickle.Node.ControlProcess.cp0;
		:ppid_43:pid_45 = spec::Trickle.Node.ControlProcess.cp0_init;
		:ppid_43:pid_46 = spec::Trickle.Node.ControlProcess.cp1;
		:ppid_43:pid_47 = spec::Trickle.Node.ControlProcess.cp2;
		:ppid_43:pid_48 = spec::Trickle.Node.ControlProcess.cp3;
		:ppid_42:pid_49 = run::Trickle.n2.DataProcess1; // model is spec::Trickle.Node.DataProcess;
			DATA{
				:ppid_42:pid_49:mySeq = spec::Trickle.Node.DataProcess.mySeq;
				:ppid_42:pid_49:e = spec::Trickle.Node.DataProcess.e;
				:ppid_42:pid_49:k = spec::Trickle.Node.DataProcess.k;
				:ppid_42:pid_49:c = spec::Trickle.Node.DataProcess.c;
				:ppid_42:pid_49:tau = spec::Trickle.Node.DataProcess.tau;
				:ppid_42:pid_49:tau_l = spec::Trickle.Node.DataProcess.tau_l;
				:ppid_42:pid_49:tau_h = spec::Trickle.Node.DataProcess.tau_h;
				:ppid_42:pid_49:i = spec::Trickle.Node.DataProcess.i;
				:ppid_42:pid_49:t = spec::Trickle.Node.DataProcess.t;
				:ppid_42:pid_49:consistent = spec::Trickle.Node.DataProcess.consistent;
				:ppid_42:pid_49:cl = spec::Trickle.Node.DataProcess.cl;
				:ppid_42:pid_49:d.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_42:pid_49:d.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_42:pid_49:d.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_49:pid_50 = spec::Trickle.Node.DataProcess.dp0;
		:ppid_49:pid_51 = spec::Trickle.Node.DataProcess.dp1;
		:ppid_49:pid_52 = spec::Trickle.Node.DataProcess.dp2;
		:ppid_49:pid_53 = spec::Trickle.Node.DataProcess.dp3;
		:ppid_42:pid_54 = run::Trickle.n2.DataProcess2; // model is spec::Trickle.Node.DataProcess;
			DATA{
				:ppid_42:pid_54:mySeq = spec::Trickle.Node.DataProcess.mySeq;
				:ppid_42:pid_54:e = spec::Trickle.Node.DataProcess.e;
				:ppid_42:pid_54:k = spec::Trickle.Node.DataProcess.k;
				:ppid_42:pid_54:c = spec::Trickle.Node.DataProcess.c;
				:ppid_42:pid_54:tau = spec::Trickle.Node.DataProcess.tau;
				:ppid_42:pid_54:tau_l = spec::Trickle.Node.DataProcess.tau_l;
				:ppid_42:pid_54:tau_h = spec::Trickle.Node.DataProcess.tau_h;
				:ppid_42:pid_54:i = spec::Trickle.Node.DataProcess.i;
				:ppid_42:pid_54:t = spec::Trickle.Node.DataProcess.t;
				:ppid_42:pid_54:consistent = spec::Trickle.Node.DataProcess.consistent;
				:ppid_42:pid_54:cl = spec::Trickle.Node.DataProcess.cl;
				:ppid_42:pid_54:d.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_42:pid_54:d.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_42:pid_54:d.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_54:pid_55 = spec::Trickle.Node.DataProcess.dp0;
		:ppid_54:pid_56 = spec::Trickle.Node.DataProcess.dp1;
		:ppid_54:pid_57 = spec::Trickle.Node.DataProcess.dp2;
		:ppid_54:pid_58 = spec::Trickle.Node.DataProcess.dp3;
		:ppid_1:pid_59 = run::Trickle.n3; // model is spec::Trickle.Node;
			BUFFER NUMBER = 3;
			/*BUFFER{
				:ppid_1:pid_59:bufferCM = spec::Trickle.Node.bufferCM;
				:ppid_1:pid_59:bufferDM1 = spec::Trickle.Node.bufferDM1;
				:ppid_1:pid_59:bufferDM2 = spec::Trickle.Node.bufferDM2;
			}*/
			DATA{
				:ppid_1:pid_59:my_buff[0].seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_59:my_buff[0].fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_59:my_buff[0].offset = spec::Trickle.DATA_MESSAGE.offset;
				:ppid_1:pid_59:my_buff[1].seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_59:my_buff[1].fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_59:my_buff[1].offset = spec::Trickle.DATA_MESSAGE.offset;
				:ppid_1:pid_59:firmware[0] = spec::Trickle.Node.firmware;
				:ppid_1:pid_59:firmware[1] = spec::Trickle.Node.firmware;
				:ppid_1:pid_59:myseq_buff[0] = spec::Trickle.Node.myseq_buff;
				:ppid_1:pid_59:myseq_buff[1] = spec::Trickle.Node.myseq_buff;
				:ppid_1:pid_59:mydp_run[0] = spec::Trickle.Node.mydp_run;
				:ppid_1:pid_59:mydp_run[1] = spec::Trickle.Node.mydp_run;
				:ppid_1:pid_59:$time = spec::Trickle.Node.$time;
				:ppid_1:pid_59:z = spec::Trickle.Node.z;
				:ppid_1:pid_59:coverageProp1 = spec::Trickle.Node.coverageProp1;
				:ppid_1:pid_59:coverageProp2 = spec::Trickle.Node.coverageProp2;
				:ppid_1:pid_59:CM_zero_zero = spec::Trickle.Node.CM_zero_zero;
				:ppid_1:pid_59:CM_one_one = spec::Trickle.Node.CM_one_one;
				:ppid_1:pid_59:reach_DATA_EXPIR_DM1 = spec::Trickle.Node.reach_DATA_EXPIR_DM1;
				:ppid_1:pid_59:reach_DATA_EXPIR_DM2 = spec::Trickle.Node.reach_DATA_EXPIR_DM2;
				:ppid_1:pid_59:reach_CTRL_EXPIR = spec::Trickle.Node.reach_CTRL_EXPIR;
				:ppid_1:pid_59:seq_buff[0] = spec::Trickle.Node.seq_buff;
				:ppid_1:pid_59:seq_buff[1] = spec::Trickle.Node.seq_buff;
				:ppid_1:pid_59:i = spec::Trickle.Node.i;
				:ppid_1:pid_59:localTime = spec::Trickle.Node.localTime;
				:ppid_1:pid_59:localPC = spec::Trickle.Node.localPC;
				:ppid_1:pid_59:localPtC = spec::Trickle.Node.localPtC;
				:ppid_1:pid_59:new_seq_buff = spec::Trickle.Node.new_seq_buff;
				:ppid_1:pid_59:new_seq = spec::Trickle.Node.new_seq;
				:ppid_1:pid_59:new_fragment = spec::Trickle.Node.new_fragment;
				:ppid_1:pid_59:new_offset = spec::Trickle.Node.new_offset;
				:ppid_1:pid_59:timeEmit = spec::Trickle.Node.timeEmit;
			}
			INTERFACE{
				:ppid_1:pid_59:ControlMsg = spec::Trickle.Node.ControlMsg;
				:ppid_1:pid_59:DataMsg1 = spec::Trickle.Node.DataMsg1;
				:ppid_1:pid_59:DataMsg2 = spec::Trickle.Node.DataMsg2;
				:ppid_1:pid_59:Log = spec::Trickle.Node.Log;
			}
		:ppid_59:pid_60 = spec::Trickle.Node.ControlProcess;
			DATA{
				:ppid_59:pid_60:e = spec::Trickle.Node.ControlProcess.e;
				:ppid_59:pid_60:k = spec::Trickle.Node.ControlProcess.k;
				:ppid_59:pid_60:c = spec::Trickle.Node.ControlProcess.c;
				:ppid_59:pid_60:tau = spec::Trickle.Node.ControlProcess.tau;
				:ppid_59:pid_60:tau_l = spec::Trickle.Node.ControlProcess.tau_l;
				:ppid_59:pid_60:tau_h = spec::Trickle.Node.ControlProcess.tau_h;
				:ppid_59:pid_60:i = spec::Trickle.Node.ControlProcess.i;
				:ppid_59:pid_60:t = spec::Trickle.Node.ControlProcess.t;
				:ppid_59:pid_60:consistent = spec::Trickle.Node.ControlProcess.consistent;
				:ppid_59:pid_60:cl = spec::Trickle.Node.ControlProcess.cl;
			}
		:ppid_60:pid_61 = spec::Trickle.Node.ControlProcess.cp0;
		:ppid_60:pid_62 = spec::Trickle.Node.ControlProcess.cp0_init;
		:ppid_60:pid_63 = spec::Trickle.Node.ControlProcess.cp1;
		:ppid_60:pid_64 = spec::Trickle.Node.ControlProcess.cp2;
		:ppid_60:pid_65 = spec::Trickle.Node.ControlProcess.cp3;
		:ppid_59:pid_66 = run::Trickle.n3.DataProcess1; // model is spec::Trickle.Node.DataProcess;
			DATA{
				:ppid_59:pid_66:mySeq = spec::Trickle.Node.DataProcess.mySeq;
				:ppid_59:pid_66:e = spec::Trickle.Node.DataProcess.e;
				:ppid_59:pid_66:k = spec::Trickle.Node.DataProcess.k;
				:ppid_59:pid_66:c = spec::Trickle.Node.DataProcess.c;
				:ppid_59:pid_66:tau = spec::Trickle.Node.DataProcess.tau;
				:ppid_59:pid_66:tau_l = spec::Trickle.Node.DataProcess.tau_l;
				:ppid_59:pid_66:tau_h = spec::Trickle.Node.DataProcess.tau_h;
				:ppid_59:pid_66:i = spec::Trickle.Node.DataProcess.i;
				:ppid_59:pid_66:t = spec::Trickle.Node.DataProcess.t;
				:ppid_59:pid_66:consistent = spec::Trickle.Node.DataProcess.consistent;
				:ppid_59:pid_66:cl = spec::Trickle.Node.DataProcess.cl;
				:ppid_59:pid_66:d.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_59:pid_66:d.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_59:pid_66:d.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_66:pid_67 = spec::Trickle.Node.DataProcess.dp0;
		:ppid_66:pid_68 = spec::Trickle.Node.DataProcess.dp1;
		:ppid_66:pid_69 = spec::Trickle.Node.DataProcess.dp2;
		:ppid_66:pid_70 = spec::Trickle.Node.DataProcess.dp3;
		:ppid_59:pid_71 = run::Trickle.n3.DataProcess2; // model is spec::Trickle.Node.DataProcess;
			DATA{
				:ppid_59:pid_71:mySeq = spec::Trickle.Node.DataProcess.mySeq;
				:ppid_59:pid_71:e = spec::Trickle.Node.DataProcess.e;
				:ppid_59:pid_71:k = spec::Trickle.Node.DataProcess.k;
				:ppid_59:pid_71:c = spec::Trickle.Node.DataProcess.c;
				:ppid_59:pid_71:tau = spec::Trickle.Node.DataProcess.tau;
				:ppid_59:pid_71:tau_l = spec::Trickle.Node.DataProcess.tau_l;
				:ppid_59:pid_71:tau_h = spec::Trickle.Node.DataProcess.tau_h;
				:ppid_59:pid_71:i = spec::Trickle.Node.DataProcess.i;
				:ppid_59:pid_71:t = spec::Trickle.Node.DataProcess.t;
				:ppid_59:pid_71:consistent = spec::Trickle.Node.DataProcess.consistent;
				:ppid_59:pid_71:cl = spec::Trickle.Node.DataProcess.cl;
				:ppid_59:pid_71:d.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_59:pid_71:d.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_59:pid_71:d.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_71:pid_72 = spec::Trickle.Node.DataProcess.dp0;
		:ppid_71:pid_73 = spec::Trickle.Node.DataProcess.dp1;
		:ppid_71:pid_74 = spec::Trickle.Node.DataProcess.dp2;
		:ppid_71:pid_75 = spec::Trickle.Node.DataProcess.dp3;
		:ppid_1:pid_76 = run::Trickle.n4; // model is spec::Trickle.Node;
			BUFFER NUMBER = 3;
			/*BUFFER{
				:ppid_1:pid_76:bufferCM = spec::Trickle.Node.bufferCM;
				:ppid_1:pid_76:bufferDM1 = spec::Trickle.Node.bufferDM1;
				:ppid_1:pid_76:bufferDM2 = spec::Trickle.Node.bufferDM2;
			}*/
			DATA{
				:ppid_1:pid_76:my_buff[0].seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_76:my_buff[0].fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_76:my_buff[0].offset = spec::Trickle.DATA_MESSAGE.offset;
				:ppid_1:pid_76:my_buff[1].seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_76:my_buff[1].fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_76:my_buff[1].offset = spec::Trickle.DATA_MESSAGE.offset;
				:ppid_1:pid_76:firmware[0] = spec::Trickle.Node.firmware;
				:ppid_1:pid_76:firmware[1] = spec::Trickle.Node.firmware;
				:ppid_1:pid_76:myseq_buff[0] = spec::Trickle.Node.myseq_buff;
				:ppid_1:pid_76:myseq_buff[1] = spec::Trickle.Node.myseq_buff;
				:ppid_1:pid_76:mydp_run[0] = spec::Trickle.Node.mydp_run;
				:ppid_1:pid_76:mydp_run[1] = spec::Trickle.Node.mydp_run;
				:ppid_1:pid_76:$time = spec::Trickle.Node.$time;
				:ppid_1:pid_76:z = spec::Trickle.Node.z;
				:ppid_1:pid_76:coverageProp1 = spec::Trickle.Node.coverageProp1;
				:ppid_1:pid_76:coverageProp2 = spec::Trickle.Node.coverageProp2;
				:ppid_1:pid_76:CM_zero_zero = spec::Trickle.Node.CM_zero_zero;
				:ppid_1:pid_76:CM_one_one = spec::Trickle.Node.CM_one_one;
				:ppid_1:pid_76:reach_DATA_EXPIR_DM1 = spec::Trickle.Node.reach_DATA_EXPIR_DM1;
				:ppid_1:pid_76:reach_DATA_EXPIR_DM2 = spec::Trickle.Node.reach_DATA_EXPIR_DM2;
				:ppid_1:pid_76:reach_CTRL_EXPIR = spec::Trickle.Node.reach_CTRL_EXPIR;
				:ppid_1:pid_76:seq_buff[0] = spec::Trickle.Node.seq_buff;
				:ppid_1:pid_76:seq_buff[1] = spec::Trickle.Node.seq_buff;
				:ppid_1:pid_76:i = spec::Trickle.Node.i;
				:ppid_1:pid_76:localTime = spec::Trickle.Node.localTime;
				:ppid_1:pid_76:localPC = spec::Trickle.Node.localPC;
				:ppid_1:pid_76:localPtC = spec::Trickle.Node.localPtC;
				:ppid_1:pid_76:new_seq_buff = spec::Trickle.Node.new_seq_buff;
				:ppid_1:pid_76:new_seq = spec::Trickle.Node.new_seq;
				:ppid_1:pid_76:new_fragment = spec::Trickle.Node.new_fragment;
				:ppid_1:pid_76:new_offset = spec::Trickle.Node.new_offset;
				:ppid_1:pid_76:timeEmit = spec::Trickle.Node.timeEmit;
			}
			INTERFACE{
				:ppid_1:pid_76:ControlMsg = spec::Trickle.Node.ControlMsg;
				:ppid_1:pid_76:DataMsg1 = spec::Trickle.Node.DataMsg1;
				:ppid_1:pid_76:DataMsg2 = spec::Trickle.Node.DataMsg2;
				:ppid_1:pid_76:Log = spec::Trickle.Node.Log;
			}
		:ppid_76:pid_77 = spec::Trickle.Node.ControlProcess;
			DATA{
				:ppid_76:pid_77:e = spec::Trickle.Node.ControlProcess.e;
				:ppid_76:pid_77:k = spec::Trickle.Node.ControlProcess.k;
				:ppid_76:pid_77:c = spec::Trickle.Node.ControlProcess.c;
				:ppid_76:pid_77:tau = spec::Trickle.Node.ControlProcess.tau;
				:ppid_76:pid_77:tau_l = spec::Trickle.Node.ControlProcess.tau_l;
				:ppid_76:pid_77:tau_h = spec::Trickle.Node.ControlProcess.tau_h;
				:ppid_76:pid_77:i = spec::Trickle.Node.ControlProcess.i;
				:ppid_76:pid_77:t = spec::Trickle.Node.ControlProcess.t;
				:ppid_76:pid_77:consistent = spec::Trickle.Node.ControlProcess.consistent;
				:ppid_76:pid_77:cl = spec::Trickle.Node.ControlProcess.cl;
			}
		:ppid_77:pid_78 = spec::Trickle.Node.ControlProcess.cp0;
		:ppid_77:pid_79 = spec::Trickle.Node.ControlProcess.cp0_init;
		:ppid_77:pid_80 = spec::Trickle.Node.ControlProcess.cp1;
		:ppid_77:pid_81 = spec::Trickle.Node.ControlProcess.cp2;
		:ppid_77:pid_82 = spec::Trickle.Node.ControlProcess.cp3;
		:ppid_76:pid_83 = run::Trickle.n4.DataProcess1; // model is spec::Trickle.Node.DataProcess;
			DATA{
				:ppid_76:pid_83:mySeq = spec::Trickle.Node.DataProcess.mySeq;
				:ppid_76:pid_83:e = spec::Trickle.Node.DataProcess.e;
				:ppid_76:pid_83:k = spec::Trickle.Node.DataProcess.k;
				:ppid_76:pid_83:c = spec::Trickle.Node.DataProcess.c;
				:ppid_76:pid_83:tau = spec::Trickle.Node.DataProcess.tau;
				:ppid_76:pid_83:tau_l = spec::Trickle.Node.DataProcess.tau_l;
				:ppid_76:pid_83:tau_h = spec::Trickle.Node.DataProcess.tau_h;
				:ppid_76:pid_83:i = spec::Trickle.Node.DataProcess.i;
				:ppid_76:pid_83:t = spec::Trickle.Node.DataProcess.t;
				:ppid_76:pid_83:consistent = spec::Trickle.Node.DataProcess.consistent;
				:ppid_76:pid_83:cl = spec::Trickle.Node.DataProcess.cl;
				:ppid_76:pid_83:d.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_76:pid_83:d.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_76:pid_83:d.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_83:pid_84 = spec::Trickle.Node.DataProcess.dp0;
		:ppid_83:pid_85 = spec::Trickle.Node.DataProcess.dp1;
		:ppid_83:pid_86 = spec::Trickle.Node.DataProcess.dp2;
		:ppid_83:pid_87 = spec::Trickle.Node.DataProcess.dp3;
		:ppid_76:pid_88 = run::Trickle.n4.DataProcess2; // model is spec::Trickle.Node.DataProcess;
			DATA{
				:ppid_76:pid_88:mySeq = spec::Trickle.Node.DataProcess.mySeq;
				:ppid_76:pid_88:e = spec::Trickle.Node.DataProcess.e;
				:ppid_76:pid_88:k = spec::Trickle.Node.DataProcess.k;
				:ppid_76:pid_88:c = spec::Trickle.Node.DataProcess.c;
				:ppid_76:pid_88:tau = spec::Trickle.Node.DataProcess.tau;
				:ppid_76:pid_88:tau_l = spec::Trickle.Node.DataProcess.tau_l;
				:ppid_76:pid_88:tau_h = spec::Trickle.Node.DataProcess.tau_h;
				:ppid_76:pid_88:i = spec::Trickle.Node.DataProcess.i;
				:ppid_76:pid_88:t = spec::Trickle.Node.DataProcess.t;
				:ppid_76:pid_88:consistent = spec::Trickle.Node.DataProcess.consistent;
				:ppid_76:pid_88:cl = spec::Trickle.Node.DataProcess.cl;
				:ppid_76:pid_88:d.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_76:pid_88:d.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_76:pid_88:d.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_88:pid_89 = spec::Trickle.Node.DataProcess.dp0;
		:ppid_88:pid_90 = spec::Trickle.Node.DataProcess.dp1;
		:ppid_88:pid_91 = spec::Trickle.Node.DataProcess.dp2;
		:ppid_88:pid_92 = spec::Trickle.Node.DataProcess.dp3;
	}
	PC: true
	PtC: true
	DATA{
		:pid_2:uncoveredExit = 0;
		:pid_2:mess = mess_0;
		:pid_2:seqBuff[0] = seqBuff[0]_0;
		:pid_2:seqBuff[1] = seqBuff[1]_0;
		:pid_2:dataMessage.seq = dataMessage.seq_0;
		:pid_2:dataMessage.fragment = dataMessage.fragment_0;
		:pid_2:dataMessage.offset = dataMessage.offset_0;
		:pid_2:emit_time = emit_time_0;
		:pid_25:my_buff[0].seq = 1;
		:pid_25:my_buff[0].fragment = FRAGMENT_0;
		:pid_25:my_buff[0].offset = 0;
		:pid_25:my_buff[1].seq = 2;
		:pid_25:my_buff[1].fragment = FRAGMENT_1;
		:pid_25:my_buff[1].offset = 1;
		:pid_25:firmware[0] = FRAGMENT_0;
		:pid_25:firmware[1] = FRAGMENT_1;
		:pid_25:myseq_buff[0] = 1;
		:pid_25:myseq_buff[1] = 1;
		:pid_25:mydp_run[0] = true;
		:pid_25:mydp_run[1] = true;
		:pid_25:$time = 0;
		:pid_25:z = $delta#initial;
		:pid_25:coverageProp1 = false;
		:pid_25:coverageProp2 = false;
		:pid_25:CM_zero_zero = false;
		:pid_25:CM_one_one = false;
		:pid_25:reach_DATA_EXPIR_DM1 = false;
		:pid_25:reach_DATA_EXPIR_DM2 = false;
		:pid_25:reach_CTRL_EXPIR = false;
		:pid_25:seq_buff[0] = seq_buff[0]_0;
		:pid_25:seq_buff[1] = seq_buff[1]_0;
		:pid_25:i = i_0;
		:pid_25:localTime = 0;
		:pid_25:localPC = true;
		:pid_25:localPtC = true;
		:pid_25:new_seq_buff = new_seq_buff_0;
		:pid_25:new_seq = new_seq_0;
		:pid_25:new_fragment = new_fragment_0;
		:pid_25:new_offset = new_offset_0;
		:pid_25:timeEmit = timeEmit_0;
		:pid_26:e = e_0;
		:pid_26:k = k_0;
		:pid_26:c = c_0;
		:pid_26:tau = tau_0;
		:pid_26:tau_l = tau_l_0;
		:pid_26:tau_h = tau_h_0;
		:pid_26:i = i_0;
		:pid_26:t = t_0;
		:pid_26:consistent = consistent_0;
		:pid_26:cl = 0;
		:pid_32:mySeq = 1;
		:pid_32:e = e_0;
		:pid_32:k = k_0;
		:pid_32:c = c_0;
		:pid_32:tau = tau_0;
		:pid_32:tau_l = tau_l_0;
		:pid_32:tau_h = tau_h_0;
		:pid_32:i = i_0;
		:pid_32:t = t_0;
		:pid_32:consistent = consistent_0;
		:pid_32:cl = 0;
		:pid_32:d.seq = d.seq_0;
		:pid_32:d.fragment = d.fragment_0;
		:pid_32:d.offset = d.offset_0;
		:pid_37:mySeq = 2;
		:pid_37:e = e_1;
		:pid_37:k = k_1;
		:pid_37:c = c_1;
		:pid_37:tau = tau_1;
		:pid_37:tau_l = tau_l_1;
		:pid_37:tau_h = tau_h_1;
		:pid_37:i = i_1;
		:pid_37:t = t_1;
		:pid_37:consistent = consistent_1;
		:pid_37:cl = 0;
		:pid_37:d.seq = d.seq_1;
		:pid_37:d.fragment = d.fragment_1;
		:pid_37:d.offset = d.offset_1;
		:pid_42:my_buff[0].seq = 0;
		:pid_42:my_buff[0].fragment = UNDEF_FRAGMENT;
		:pid_42:my_buff[0].offset = 0;
		:pid_42:my_buff[1].seq = 0;
		:pid_42:my_buff[1].fragment = UNDEF_FRAGMENT;
		:pid_42:my_buff[1].offset = 1;
		:pid_42:firmware[0] = UNDEF_FRAGMENT;
		:pid_42:firmware[1] = UNDEF_FRAGMENT;
		:pid_42:myseq_buff[0] = 0;
		:pid_42:myseq_buff[1] = 0;
		:pid_42:mydp_run[0] = false;
		:pid_42:mydp_run[1] = false;
		:pid_42:$time = 0;
		:pid_42:z = $delta#initial;
		:pid_42:coverageProp1 = false;
		:pid_42:coverageProp2 = false;
		:pid_42:CM_zero_zero = false;
		:pid_42:CM_one_one = false;
		:pid_42:reach_DATA_EXPIR_DM1 = false;
		:pid_42:reach_DATA_EXPIR_DM2 = false;
		:pid_42:reach_CTRL_EXPIR = false;
		:pid_42:seq_buff[0] = seq_buff[0]_1;
		:pid_42:seq_buff[1] = seq_buff[1]_1;
		:pid_42:i = i_1;
		:pid_42:localTime = 0;
		:pid_42:localPC = true;
		:pid_42:localPtC = true;
		:pid_42:new_seq_buff = new_seq_buff_1;
		:pid_42:new_seq = new_seq_1;
		:pid_42:new_fragment = new_fragment_1;
		:pid_42:new_offset = new_offset_1;
		:pid_42:timeEmit = timeEmit_1;
		:pid_43:e = e_1;
		:pid_43:k = k_1;
		:pid_43:c = c_1;
		:pid_43:tau = tau_1;
		:pid_43:tau_l = tau_l_1;
		:pid_43:tau_h = tau_h_1;
		:pid_43:i = i_1;
		:pid_43:t = t_1;
		:pid_43:consistent = consistent_1;
		:pid_43:cl = 0;
		:pid_49:mySeq = 1;
		:pid_49:e = e_2;
		:pid_49:k = k_2;
		:pid_49:c = c_2;
		:pid_49:tau = tau_2;
		:pid_49:tau_l = tau_l_2;
		:pid_49:tau_h = tau_h_2;
		:pid_49:i = i_2;
		:pid_49:t = t_2;
		:pid_49:consistent = consistent_2;
		:pid_49:cl = 0;
		:pid_49:d.seq = d.seq_2;
		:pid_49:d.fragment = d.fragment_2;
		:pid_49:d.offset = d.offset_2;
		:pid_54:mySeq = 2;
		:pid_54:e = e_3;
		:pid_54:k = k_3;
		:pid_54:c = c_3;
		:pid_54:tau = tau_3;
		:pid_54:tau_l = tau_l_3;
		:pid_54:tau_h = tau_h_3;
		:pid_54:i = i_3;
		:pid_54:t = t_3;
		:pid_54:consistent = consistent_3;
		:pid_54:cl = 0;
		:pid_54:d.seq = d.seq_3;
		:pid_54:d.fragment = d.fragment_3;
		:pid_54:d.offset = d.offset_3;
		:pid_59:my_buff[0].seq = 0;
		:pid_59:my_buff[0].fragment = UNDEF_FRAGMENT;
		:pid_59:my_buff[0].offset = 0;
		:pid_59:my_buff[1].seq = 0;
		:pid_59:my_buff[1].fragment = UNDEF_FRAGMENT;
		:pid_59:my_buff[1].offset = 1;
		:pid_59:firmware[0] = UNDEF_FRAGMENT;
		:pid_59:firmware[1] = UNDEF_FRAGMENT;
		:pid_59:myseq_buff[0] = 0;
		:pid_59:myseq_buff[1] = 0;
		:pid_59:mydp_run[0] = false;
		:pid_59:mydp_run[1] = false;
		:pid_59:$time = 0;
		:pid_59:z = $delta#initial;
		:pid_59:coverageProp1 = false;
		:pid_59:coverageProp2 = false;
		:pid_59:CM_zero_zero = false;
		:pid_59:CM_one_one = false;
		:pid_59:reach_DATA_EXPIR_DM1 = false;
		:pid_59:reach_DATA_EXPIR_DM2 = false;
		:pid_59:reach_CTRL_EXPIR = false;
		:pid_59:seq_buff[0] = seq_buff[0]_2;
		:pid_59:seq_buff[1] = seq_buff[1]_2;
		:pid_59:i = i_2;
		:pid_59:localTime = 0;
		:pid_59:localPC = true;
		:pid_59:localPtC = true;
		:pid_59:new_seq_buff = new_seq_buff_2;
		:pid_59:new_seq = new_seq_2;
		:pid_59:new_fragment = new_fragment_2;
		:pid_59:new_offset = new_offset_2;
		:pid_59:timeEmit = timeEmit_2;
		:pid_60:e = e_2;
		:pid_60:k = k_2;
		:pid_60:c = c_2;
		:pid_60:tau = tau_2;
		:pid_60:tau_l = tau_l_2;
		:pid_60:tau_h = tau_h_2;
		:pid_60:i = i_2;
		:pid_60:t = t_2;
		:pid_60:consistent = consistent_2;
		:pid_60:cl = 0;
		:pid_66:mySeq = 1;
		:pid_66:e = e_4;
		:pid_66:k = k_4;
		:pid_66:c = c_4;
		:pid_66:tau = tau_4;
		:pid_66:tau_l = tau_l_4;
		:pid_66:tau_h = tau_h_4;
		:pid_66:i = i_4;
		:pid_66:t = t_4;
		:pid_66:consistent = consistent_4;
		:pid_66:cl = 0;
		:pid_66:d.seq = d.seq_4;
		:pid_66:d.fragment = d.fragment_4;
		:pid_66:d.offset = d.offset_4;
		:pid_71:mySeq = 2;
		:pid_71:e = e_5;
		:pid_71:k = k_5;
		:pid_71:c = c_5;
		:pid_71:tau = tau_5;
		:pid_71:tau_l = tau_l_5;
		:pid_71:tau_h = tau_h_5;
		:pid_71:i = i_5;
		:pid_71:t = t_5;
		:pid_71:consistent = consistent_5;
		:pid_71:cl = 0;
		:pid_71:d.seq = d.seq_5;
		:pid_71:d.fragment = d.fragment_5;
		:pid_71:d.offset = d.offset_5;
		:pid_76:my_buff[0].seq = 0;
		:pid_76:my_buff[0].fragment = UNDEF_FRAGMENT;
		:pid_76:my_buff[0].offset = 0;
		:pid_76:my_buff[1].seq = 0;
		:pid_76:my_buff[1].fragment = UNDEF_FRAGMENT;
		:pid_76:my_buff[1].offset = 1;
		:pid_76:firmware[0] = UNDEF_FRAGMENT;
		:pid_76:firmware[1] = UNDEF_FRAGMENT;
		:pid_76:myseq_buff[0] = 0;
		:pid_76:myseq_buff[1] = 0;
		:pid_76:mydp_run[0] = false;
		:pid_76:mydp_run[1] = false;
		:pid_76:$time = 0;
		:pid_76:z = $delta#initial;
		:pid_76:coverageProp1 = false;
		:pid_76:coverageProp2 = false;
		:pid_76:CM_zero_zero = false;
		:pid_76:CM_one_one = false;
		:pid_76:reach_DATA_EXPIR_DM1 = false;
		:pid_76:reach_DATA_EXPIR_DM2 = false;
		:pid_76:reach_CTRL_EXPIR = false;
		:pid_76:seq_buff[0] = seq_buff[0]_3;
		:pid_76:seq_buff[1] = seq_buff[1]_3;
		:pid_76:i = i_3;
		:pid_76:localTime = 0;
		:pid_76:localPC = true;
		:pid_76:localPtC = true;
		:pid_76:new_seq_buff = new_seq_buff_3;
		:pid_76:new_seq = new_seq_3;
		:pid_76:new_fragment = new_fragment_3;
		:pid_76:new_offset = new_offset_3;
		:pid_76:timeEmit = timeEmit_3;
		:pid_77:e = e_3;
		:pid_77:k = k_3;
		:pid_77:c = c_3;
		:pid_77:tau = tau_3;
		:pid_77:tau_l = tau_l_3;
		:pid_77:tau_h = tau_h_3;
		:pid_77:i = i_3;
		:pid_77:t = t_3;
		:pid_77:consistent = consistent_3;
		:pid_77:cl = 0;
		:pid_83:mySeq = 1;
		:pid_83:e = e_6;
		:pid_83:k = k_6;
		:pid_83:c = c_6;
		:pid_83:tau = tau_6;
		:pid_83:tau_l = tau_l_6;
		:pid_83:tau_h = tau_h_6;
		:pid_83:i = i_6;
		:pid_83:t = t_6;
		:pid_83:consistent = consistent_6;
		:pid_83:cl = 0;
		:pid_83:d.seq = d.seq_6;
		:pid_83:d.fragment = d.fragment_6;
		:pid_83:d.offset = d.offset_6;
		:pid_88:mySeq = 2;
		:pid_88:e = e_7;
		:pid_88:k = k_7;
		:pid_88:c = c_7;
		:pid_88:tau = tau_7;
		:pid_88:tau_l = tau_l_7;
		:pid_88:tau_h = tau_h_7;
		:pid_88:i = i_7;
		:pid_88:t = t_7;
		:pid_88:consistent = consistent_7;
		:pid_88:cl = 0;
		:pid_88:d.seq = d.seq_7;
		:pid_88:d.fragment = d.fragment_7;
		:pid_88:d.offset = d.offset_7;
	}
	BUFFER{
		:pid_25:bufferCM:<FIFO>#0{ }
		:pid_25:bufferDM1:<FIFO>#1{ }
		:pid_25:bufferDM2:<FIFO>#2{ }
		:pid_42:bufferCM:<FIFO>#0{ }
		:pid_42:bufferDM1:<FIFO>#1{ }
		:pid_42:bufferDM2:<FIFO>#2{ }
		:pid_59:bufferCM:<FIFO>#0{ }
		:pid_59:bufferDM1:<FIFO>#1{ }
		:pid_59:bufferDM2:<FIFO>#2{ }
		:pid_76:bufferCM:<FIFO>#0{ }
		:pid_76:bufferDM1:<FIFO>#1{ }
		:pid_76:bufferDM2:<FIFO>#2{ }
	}
	EC:<Id:2;Ev:2;H:1;W:1>{ SC: ( pid_4:o#0 , ( pid_28:cp0_init , pid_33:dp0 , pid_38:dp0 ) , ( pid_45:cp0_init , pid_50:dp0 , pid_55:dp0 ) , ( pid_62:cp0_init , pid_67:dp0 , pid_72:dp0 ) , ( pid_79:cp0_init , pid_84:dp0 , pid_89:dp0 ) )
		EXE: { |,| { |;| (:pid_78 , run) (:pid_78 , cp_init) } { |;| (:pid_61 , 
	run) (:pid_61 , cp_init) } { |;| (:pid_44 , run) (:pid_44 , cp_init) } { |;| 
	(:pid_27 , run) (:pid_27 , cp_init) } { |;| (:pid_3 , run) (:pid_3 , o_startup) }
	 }
		DATA{
			:pid_2:uncoveredExit = 0;
			:pid_26:e = 0;
			:pid_26:k = 2;
			:pid_26:c = 0;
			:pid_26:tau = 4;
			:pid_26:tau_l = 4;
			:pid_26:tau_h = 8;
			:pid_43:e = 0;
			:pid_43:k = 2;
			:pid_43:c = 0;
			:pid_43:tau = 4;
			:pid_43:tau_l = 4;
			:pid_43:tau_h = 8;
			:pid_60:e = 0;
			:pid_60:k = 2;
			:pid_60:c = 0;
			:pid_60:tau = 4;
			:pid_60:tau_l = 4;
			:pid_60:tau_h = 8;
			:pid_77:e = 0;
			:pid_77:k = 2;
			:pid_77:c = 0;
			:pid_77:tau = 4;
			:pid_77:tau_l = 4;
			:pid_77:tau_h = 8;
		}
		EC:<Id:7;Ev:3;H:2;W:5>{ SC: ( pid_4:o#0 , ( pid_28:cp0_init , pid_34:dp1 , pid_38:dp0 ) , ( pid_45:cp0_init , pid_50:dp0 , pid_55:dp0 ) , ( pid_62:cp0_init , pid_67:dp0 , pid_72:dp0 ) , ( pid_79:cp0_init , pid_84:dp0 , pid_89:dp0 ) )
			EXE: { |;| (:pid_25 , run) (:pid_32 , run) (:pid_33 , run) (:pid_33 
	, dp_init) (:pid_2 , run) }
			TRACE: { |;| (:pid_25 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_0 }) (:pid_33 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_8 }) }
			NC: ((t_8 < 4) && (0 <= (t_8 + -2)))
			PC: ((t_8 < 4) && (0 <= (t_8 + -2)))
			DATA{
				:pid_2:uncoveredExit = 1;
				:pid_25:$time = z_0;
				:pid_25:z = z_0;
				:pid_25:coverageProp1 = true;
				:pid_25:coverageProp2 = true;
				:pid_25:CM_one_one = true;
				:pid_25:reach_DATA_EXPIR_DM2 = (e_1 == 2);
				:pid_25:localTime = z_0;
				:pid_25:localPC = ((t_8 < 4) && (0 <= (t_8 + -2)));
				:pid_25:localPtC = ($delta#initial > 0);
				:pid_26:cl = z_0;
				:pid_32:e = 0;
				:pid_32:k = 2;
				:pid_32:c = 0;
				:pid_32:tau = 4;
				:pid_32:tau_l = 4;
				:pid_32:tau_h = 8;
				:pid_32:t = t_8;
				:pid_32:cl = 0;
				:pid_37:cl = z_0;
			}
			EC:<Id:12;Ev:7;H:3;W:9>{ SC: ( pid_4:o#0 , ( pid_29:cp1 , pid_34:dp1 , pid_38:dp0 ) , ( pid_45:cp0_init , pid_50:dp0 , pid_55:dp0 ) , ( pid_62:cp0_init , pid_67:dp0 , pid_72:dp0 ) , ( pid_79:cp0_init , pid_84:dp0 , pid_89:dp0 ) )
				EXE: { |;| (:pid_25 , run) (:pid_26 , run) (:pid_28 , run) 
	(:pid_28 , cp_init) (:pid_2 , run) }
				TRACE: { |;| (:pid_25 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_4 }) (:pid_28 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_8 }) 
	(:pid_28 , ${ output#env inst::Trickle.Node.Log 0 } @ (z_0 + z_4)) }
				NC: ((t_8 < 4) && (0 <= (t_8 + -2)))
				PC: ((t_8 < 4) && (t_8 < 4) && (0 <= (t_8 + -2)) && (0 <= (t_8 + -2)))
				DATA{
					:pid_2:uncoveredExit = 2;
					:pid_25:$time = (z_0 + z_4);
					:pid_25:z = z_4;
					:pid_25:reach_DATA_EXPIR_DM2 = (e_1 == 2);
					:pid_25:localTime = (z_0 + z_4);
					:pid_25:localPC = ((t_8 < 4) && (t_8 < 4) && (0 <= (t_8 + -2)) && (0 <= (t_8 + -2)));
					:pid_25:localPtC = (($delta#initial > 0) && (z_0 > 0));
					:pid_26:t = t_8;
					:pid_26:cl = 0;
					:pid_32:cl = z_4;
					:pid_37:cl = (z_0 + z_4);
				}
				EC:<Id:42;Ev:10;H:4;W:35>{ SC: ( pid_5:o#1 , ( pid_30:cp2 , pid_34:dp1 , pid_38:dp0 ) , ( pid_45:cp0_init , pid_50:dp0 , pid_55:dp0 ) , ( pid_62:cp0_init , pid_67:dp0 , pid_72:dp0 ) , ( pid_79:cp0_init , pid_84:dp0 , pid_89:dp0 ) )
					EXE: { |;| (:pid_25 , run) (:pid_26 , run) (:pid_29 , run) 
	(:pid_29 , cp_sendCM) (:pid_2 , run) (:pid_4 , run) (:pid_4 , n1_out_CM) }
					TRACE: { |;| (:pid_25 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_20 }) (:pid_29 , ${ output inst::Trickle.Node.ControlMsg [ 
	1 , 1 ] ${ + param::Trickle.Node.z_0 param::Trickle.Node.z_20 
	param::Trickle.Node.z_4 } } @ (z_0 + z_20 + z_4)) }
					/*FLAGS{ COVERAGE-ELEMENT }*/
					INFO{
						<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#1->run::pid_5:Trickle.Observer.o#1->prot::Trickle.Observer.o#1" as trace="tpid#1->run::pid_5:Trickle.Observer.o#1->prot::Trickle.Observer.o#1">
					}
					DATA{
						:pid_2:uncoveredExit = 0;
						:pid_2:seqBuff[0] = 1;
						:pid_2:seqBuff[1] = 1;
						:pid_2:emit_time = (z_0 + z_20 + z_4);
						:pid_25:$time = (z_0 + z_20 + z_4);
						:pid_25:z = z_20;
						:pid_25:reach_DATA_EXPIR_DM2 = (e_1 == 2);
						:pid_25:localTime = (z_0 + z_20 + z_4);
						:pid_25:localPC = ((t_8 < 4) && (t_8 < 4) && (0 <= (t_8 + -2)) && (0 <= (t_8 + -2)));
						:pid_25:localPtC = ((z_20 == t_8) && ($delta#initial > 0) && (z_0 > 0) && (z_4 > 0));
						:pid_26:cl = z_20;
						:pid_32:cl = (z_20 + z_4);
						:pid_37:cl = (z_0 + z_20 + z_4);
					}
					BUFFER{
						:pid_42:bufferCM:<FIFO>#0{
							:pid_25:ControlMsg([ 1 , 1 ] , (z_0 + z_20 + z_4));
						}
						:pid_59:bufferCM:<FIFO>#0{
							:pid_25:ControlMsg([ 1 , 1 ] , (z_0 + z_20 + z_4));
						}
					}
					EC:<Id:59;Ev:13;H:5;W:49>{ SC: ( pid_5:o#1 , ( pid_30:cp2 , pid_34:dp1 , pid_38:dp0 ) , ( pid_46:cp1 , pid_50:dp0 , pid_55:dp0 ) , ( pid_62:cp0_init , pid_67:dp0 , pid_72:dp0 ) , ( pid_79:cp0_init , pid_84:dp0 , pid_89:dp0 ) )
						EXE: { |;| (:pid_42 , run) (:pid_43 , run) (:pid_45 , 
	run) (:pid_45 , cp_init) (:pid_2 , run) }
						TRACE: { |;| (:pid_42 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_33 }) (:pid_45 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_33 }) 
	(:pid_45 , ${ output#env inst::Trickle.Node.Log 0 } @ z_33) }
						NC: ((t_33 < 4) && (0 <= (t_33 + -2)))
						PC: ((t_33 < 4) && (t_8 < 4) && (t_8 < 4) && (0 <= (t_33 + -2)) && (0 <= (t_8 + -2)) 
	&& (0 <= (t_8 + -2)))
						DATA{
							:pid_2:uncoveredExit = 1;
							:pid_42:$time = z_33;
							:pid_42:z = z_33;
							:pid_42:CM_zero_zero = true;
							:pid_42:reach_DATA_EXPIR_DM1 = (e_2 == 2);
							:pid_42:reach_DATA_EXPIR_DM2 = (e_3 == 2);
							:pid_42:localTime = z_33;
							:pid_42:localPC = ((t_33 < 4) && (0 <= (t_33 + -2)));
							:pid_42:localPtC = ($delta#initial > 0);
							:pid_43:t = t_33;
							:pid_43:cl = 0;
							:pid_49:cl = z_33;
							:pid_54:cl = z_33;
						}
						EC:<Id:92;Ev:17;H:6;W:79>{ SC: ( pid_6:o#2 , ( pid_30:cp2 , pid_34:dp1 , pid_38:dp0 ) , ( pid_46:cp1 , pid_50:dp0 , pid_55:dp0 ) , ( pid_62:cp0_init , pid_67:dp0 , pid_72:dp0 ) , ( pid_79:cp0_init , pid_84:dp0 , pid_89:dp0 ) )
							EXE: { |;| (:pid_42 , run) (:pid_43 , run) (:pid_46 
	, run) (:pid_46 , cp1_receiveCM_inconsistent) (:pid_2 , run) (:pid_5 , run) 
	(:pid_5 , n2_in_CM) }
							TRACE: { |;| (:pid_42 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_45 }) (:pid_46 , ${ input 
	inst::Trickle.Node.ControlMsg [ 1 , 1 ] ${ + param::Trickle.Node.z_0 
	param::Trickle.Node.z_20 param::Trickle.Node.z_4 } } @ (z_33 + z_45)) (:pid_46 , 
	${ newfresh inst::Trickle.Node.ControlProcess.t 
	param::Trickle.Node.ControlProcess.t_44 }) }
							/*FLAGS{ COVERAGE-ELEMENT }*/
							INFO{
								<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#2->run::pid_6:Trickle.Observer.o#2->prot::Trickle.Observer.o#2" as trace="tpid#2->run::pid_6:Trickle.Observer.o#2->prot::Trickle.Observer.o#2">
							}
							NC: ((t_44 < 4) && (0 <= (t_44 + -2)))
							PC: ((t_33 < 4) && (t_44 < 4) && (t_8 < 4) && (t_8 < 4) && (0 <= (t_33 + -2)) && (0 
	<= (t_44 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_8 + -2)))
							DATA{
								:pid_2:uncoveredExit = 0;
								:pid_42:mydp_run[0] = true;
								:pid_42:mydp_run[1] = true;
								:pid_42:$time = (z_33 + z_45);
								:pid_42:z = z_45;
								:pid_42:reach_DATA_EXPIR_DM1 = (e_2 == 2);
								:pid_42:reach_DATA_EXPIR_DM2 = (e_3 == 2);
								:pid_42:seq_buff[0] = 1;
								:pid_42:seq_buff[1] = 1;
								:pid_42:localTime = (z_33 + z_45);
								:pid_42:localPC = ((t_33 < 4) && (t_44 < 4) && (0 <= (t_33 + -2)) && (0 <= (t_44 + -2)));
								:pid_42:localPtC = ((z_45 < t_33) && ((z_0 + z_20 + z_4) <= (z_33 + z_45)) && ($delta#initial > 0) && (z_33 > 0));
								:pid_42:timeEmit = (z_0 + z_20 + z_4);
								:pid_43:e = 0;
								:pid_43:c = 0;
								:pid_43:i = 2;
								:pid_43:t = t_44;
								:pid_43:consistent = false;
								:pid_43:cl = 0;
								:pid_49:cl = (z_33 + z_45);
								:pid_54:cl = (z_33 + z_45);
							}
							BUFFER{
								:pid_42:bufferCM:<FIFO>#0{ }
							}
							EC:<Id:139;Ev:19;H:7;W:122>{ SC: ( pid_6:o#2 , ( pid_30:cp2 , pid_34:dp1 , pid_38:dp0 ) , ( pid_46:cp1 , pid_50:dp0 , pid_55:dp0 ) , ( pid_63:cp1 , pid_67:dp0 , pid_72:dp0 ) , ( pid_79:cp0_init , pid_84:dp0 , pid_89:dp0 ) )
								EXE: { |;| (:pid_59 , run) (:pid_60 , run) 
	(:pid_62 , run) (:pid_62 , cp_init) (:pid_2 , run) }
								TRACE: { |;| (:pid_59 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_62 }) (:pid_62 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_59 }) 
	(:pid_62 , ${ output#env inst::Trickle.Node.Log 0 } @ z_62) }
								NC: ((t_59 < 4) && (0 <= (t_59 + -2)))
								PC: ((t_33 < 4) && (t_44 < 4) && (t_59 < 4) && (t_8 < 4) && (t_8 < 4) && (0 <= (t_33 
	+ -2)) && (0 <= (t_44 + -2)) && (0 <= (t_59 + -2)) && (0 <= (t_8 + -2)) && (0 <= 
	(t_8 + -2)))
								DATA{
									:pid_2:uncoveredExit = 1;
									:pid_59:$time = z_62;
									:pid_59:z = z_62;
									:pid_59:CM_zero_zero = true;
									:pid_59:reach_DATA_EXPIR_DM1 = (e_4 == 2);
									:pid_59:reach_DATA_EXPIR_DM2 = (e_5 == 2);
									:pid_59:localTime = z_62;
									:pid_59:localPC = ((t_59 < 4) && (0 <= (t_59 + -2)));
									:pid_59:localPtC = ($delta#initial > 0);
									:pid_60:t = t_59;
									:pid_60:cl = 0;
									:pid_66:cl = z_62;
									:pid_71:cl = z_62;
								}
								EC:<Id:164;Ev:26;H:8;W:145>{ SC: ( pid_7:o#3 , ( pid_30:cp2 , pid_34:dp1 , pid_38:dp0 ) , ( pid_46:cp1 , pid_50:dp0 , pid_55:dp0 ) , ( pid_63:cp1 , pid_67:dp0 , pid_72:dp0 ) , ( pid_79:cp0_init , pid_84:dp0 , pid_89:dp0 ) )
									EXE: { |;| (:pid_59 , run) (:pid_60 , run) 
	(:pid_63 , run) (:pid_63 , cp1_receiveCM_inconsistent) (:pid_2 , run) (:pid_6 , 
	run) (:pid_6 , n3_in_CM) }
									TRACE: { |;| (:pid_59 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_70 }) (:pid_63 , ${ input 
	inst::Trickle.Node.ControlMsg [ 1 , 1 ] ${ + param::Trickle.Node.z_0 
	param::Trickle.Node.z_20 param::Trickle.Node.z_4 } } @ (z_62 + z_70)) (:pid_63 , 
	${ newfresh inst::Trickle.Node.ControlProcess.t 
	param::Trickle.Node.ControlProcess.t_64 }) }
									/*FLAGS{ COVERAGE-ELEMENT }*/
									INFO{
										<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#3->run::pid_7:Trickle.Observer.o#3->prot::Trickle.Observer.o#3" as trace="tpid#3->run::pid_7:Trickle.Observer.o#3->prot::Trickle.Observer.o#3">
									}
									NC: ((t_64 < 4) && (0 <= (t_64 + -2)))
									PC: ((t_33 < 4) && (t_44 < 4) && (t_59 < 4) && (t_64 < 4) && (t_8 < 4) && (t_8 < 4) 
	&& (0 <= (t_33 + -2)) && (0 <= (t_44 + -2)) && (0 <= (t_59 + -2)) && (0 <= (t_64 
	+ -2)) && (0 <= (t_8 + -2)) && (0 <= (t_8 + -2)))
									DATA{
										:pid_2:uncoveredExit = 0;
										:pid_59:mydp_run[0] = true;
										:pid_59:mydp_run[1] = true;
										:pid_59:$time = (z_62 + z_70);
										:pid_59:z = z_70;
										:pid_59:reach_DATA_EXPIR_DM1 = (e_4 == 2);
										:pid_59:reach_DATA_EXPIR_DM2 = (e_5 == 2);
										:pid_59:seq_buff[0] = 1;
										:pid_59:seq_buff[1] = 1;
										:pid_59:localTime = (z_62 + z_70);
										:pid_59:localPC = ((t_59 < 4) && (t_64 < 4) && (0 <= (t_59 + -2)) && (0 <= (t_64 + -2)));
										:pid_59:localPtC = ((z_70 < t_59) && ((z_0 + z_20 + z_4) <= (z_62 + z_70)) && ($delta#initial > 0) && (z_62 > 0));
										:pid_59:timeEmit = (z_0 + z_20 + z_4);
										:pid_60:e = 0;
										:pid_60:c = 0;
										:pid_60:i = 2;
										:pid_60:t = t_64;
										:pid_60:consistent = false;
										:pid_60:cl = 0;
										:pid_66:cl = (z_62 + z_70);
										:pid_71:cl = (z_62 + z_70);
									}
									BUFFER{
										:pid_59:bufferCM:<FIFO>#0{ }
									}
									EC:<Id:283;Ev:35;H:9;W:257>{ SC: ( pid_8:o#4 , ( pid_30:cp2 , pid_35:dp2 , pid_38:dp0 ) , ( pid_46:cp1 , pid_50:dp0 , pid_55:dp0 ) , ( pid_63:cp1 , pid_67:dp0 , pid_72:dp0 ) , ( pid_79:cp0_init , pid_84:dp0 , pid_89:dp0 ) )
										EXE: { |;| (:pid_25 , run) (:pid_32 , 
	run) (:pid_34 , run) (:pid_34 , dp_sendDM) (:pid_2 , run) (:pid_7 , run) (:pid_7 
	, n1_out_DM) }
										TRACE: { |;| (:pid_25 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_96 }) (:pid_34 , ${ output 
	inst::Trickle.Node.DataMsg1 [ 1 , 1 , 0 ] ${ + param::Trickle.Node.z_0 
	param::Trickle.Node.z_20 param::Trickle.Node.z_4 param::Trickle.Node.z_96 } } @ 
	(z_0 + z_20 + z_4 + z_96)) }
										/*FLAGS{ COVERAGE-ELEMENT }*/
										INFO{
											<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#4->run::pid_8:Trickle.Observer.o#4->prot::Trickle.Observer.o#4" as trace="tpid#4->run::pid_8:Trickle.Observer.o#4->prot::Trickle.Observer.o#4">
										}
										DATA{
											:pid_2:uncoveredExit = 0;
											:pid_2:dataMessage.seq = 1;
											:pid_2:dataMessage.fragment = FRAGMENT_0;
											:pid_2:dataMessage.offset = 0;
											:pid_2:emit_time = (z_0 + z_20 + z_4 + z_96);
											:pid_25:$time = (z_0 + z_20 + z_4 + z_96);
											:pid_25:z = z_96;
											:pid_25:reach_DATA_EXPIR_DM2 = (e_1 == 2);
											:pid_25:localTime = (z_0 + z_20 + z_4 + z_96);
											:pid_25:localPC = ((t_8 < 4) && (t_8 < 4) && (0 <= (t_8 + -2)) && (0 <= (t_8 + -2)));
											:pid_25:localPtC = (((z_20 + z_4 + z_96) == t_8) && (z_20 == t_8) && ($delta#initial > 0) && (z_0 > 0) && (z_20 > 0) && (z_4 > 0));
											:pid_26:cl = (z_20 + z_96);
											:pid_32:cl = (z_20 + z_4 + z_96);
											:pid_37:cl = (z_0 + z_20 + z_4 + z_96);
										}
										BUFFER{
											:pid_42:bufferDM1:<FIFO>#1{
												:pid_25:DataMsg1([ 1 , 1 , 0 ] , (z_0 + z_20 + z_4 + z_96));
											}
											:pid_42:bufferDM2:<FIFO>#2{
												:pid_25:DataMsg1([ 1 , 1 , 0 ] , (z_0 + z_20 + z_4 + z_96));
											}
											:pid_59:bufferDM1:<FIFO>#1{
												:pid_25:DataMsg1([ 1 , 1 , 0 ] , (z_0 + z_20 + z_4 + z_96));
											}
											:pid_59:bufferDM2:<FIFO>#2{
												:pid_25:DataMsg1([ 1 , 1 , 0 ] , (z_0 + z_20 + z_4 + z_96));
											}
										}
										EC:<Id:450;Ev:37;H:10;W:415>{ SC: ( pid_8:o#4 , ( pid_30:cp2 , pid_35:dp2 , pid_39:dp1 ) , ( pid_46:cp1 , pid_50:dp0 , pid_55:dp0 ) , ( pid_63:cp1 , pid_67:dp0 , pid_72:dp0 ) , ( pid_79:cp0_init , pid_84:dp0 , pid_89:dp0 ) )
											EXE: { |;| (:pid_25 , run) (:pid_37 
	, run) (:pid_38 , run) (:pid_38 , dp_init) (:pid_2 , run) }
											TRACE: { |;| (:pid_25 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_132 }) (:pid_38 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_235 }) }
											NC: ((t_235 < 4) && (0 <= (t_235 + 
	-2)))
											PC: ((t_33 < 4) && (t_44 < 4) && (t_59 < 4) && (t_64 < 4) && (t_8 < 4) && (t_235 < 4)
	 && (t_8 < 4) && (0 <= (t_33 + -2)) && (0 <= (t_44 + -2)) && (0 <= (t_59 + -2)) 
	&& (0 <= (t_64 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_235 + -2)) && (0 <= (t_8 
	+ -2)))
											DATA{
												:pid_2:uncoveredExit = 1;
												:pid_25:$time = (z_0 + z_132 + z_20 + z_4 + z_96);
												:pid_25:z = z_132;
												:pid_25:reach_DATA_EXPIR_DM2 = false;
												:pid_25:localTime = (z_0 + z_132 + z_20 + z_4 + z_96);
												:pid_25:localPC = ((t_8 < 4) && (t_235 < 4) && (t_8 < 4) && (0 <= (t_8 + -2)) && (0 <= (t_235 + -2)) && (0 <= (t_8 + -2)));
												:pid_25:localPtC = (((z_20 + z_4 + z_96) == t_8) && (z_20 == t_8) && ($delta#initial > 0) && (z_0 > 0) && (z_20 > 0) && (z_4 > 0) && (z_96 > 0));
												:pid_26:cl = (z_132 + z_20 + z_96);
												:pid_32:cl = (z_132 + z_20 + z_4 + z_96);
												:pid_37:e = 0;
												:pid_37:k = 2;
												:pid_37:c = 0;
												:pid_37:tau = 4;
												:pid_37:tau_l = 4;
												:pid_37:tau_h = 8;
												:pid_37:t = t_235;
												:pid_37:cl = 0;
											}
											EC:<Id:475;Ev:43;H:11;W:438>{ SC: ( pid_8:o#4 , ( pid_30:cp2 , pid_35:dp2 , pid_39:dp1 ) , ( pid_46:cp1 , pid_51:dp1 , pid_55:dp0 ) , ( pid_63:cp1 , pid_67:dp0 , pid_72:dp0 ) , ( pid_79:cp0_init , pid_84:dp0 , pid_89:dp0 ) )
												EXE: { |;| (:pid_42 , run) 
	(:pid_49 , run) (:pid_50 , run) (:pid_50 , dp_init) (:pid_2 , run) }
												TRACE: { |;| (:pid_42 , ${ 
	newfresh inst::Trickle.Node.z param::Trickle.Node.z_141 }) (:pid_50 , ${ 
	newfresh inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_249 }
	) }
												NC: ((t_249 < 4) && (0 <= (t_249 
	+ -2)))
												PC: ((t_33 < 4) && (t_44 < 4) && (t_59 < 4) && (t_64 < 4) && (t_8 < 4) && (t_235 < 4)
	 && (t_249 < 4) && (t_8 < 4) && (0 <= (t_33 + -2)) && (0 <= (t_44 + -2)) && (0 
	<= (t_59 + -2)) && (0 <= (t_64 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_235 + -2))
	 && (0 <= (t_249 + -2)) && (0 <= (t_8 + -2)))
												DATA{
													:pid_2:uncoveredExit = 2;
													:pid_42:$time = (z_141 + z_33 + z_45);
													:pid_42:z = z_141;
													:pid_42:reach_DATA_EXPIR_DM1 = false;
													:pid_42:reach_DATA_EXPIR_DM2 = (e_3 == 2);
													:pid_42:localTime = (z_141 + z_33 + z_45);
													:pid_42:localPC = ((t_33 < 4) && (t_44 < 4) && (t_249 < 4) && (0 <= (t_33 + -2)) && (0 <= (t_44 + -2)) && (0 <= (t_249 + -2)));
													:pid_42:localPtC = ((z_45 < t_33) && ((z_0 + z_20 + z_4) <= (z_33 + z_45)) && ($delta#initial > 0) && (z_33 > 0) && (z_45 > 0));
													:pid_43:cl = z_141;
													:pid_49:e = 0;
													:pid_49:k = 2;
													:pid_49:c = 0;
													:pid_49:tau = 4;
													:pid_49:tau_l = 4;
													:pid_49:tau_h = 8;
													:pid_49:t = t_249;
													:pid_49:cl = 0;
													:pid_54:cl = (z_141 + z_33 + z_45);
												}
												EC:<Id:549;Ev:48;H:12;W:506>{ SC: ( pid_9:o#5 , ( pid_30:cp2 , pid_35:dp2 , pid_39:dp1 ) , ( pid_46:cp1 , pid_51:dp1 , pid_55:dp0 ) , ( pid_63:cp1 , pid_67:dp0 , pid_72:dp0 ) , ( pid_79:cp0_init , pid_84:dp0 , pid_89:dp0 ) )
													EXE: { |;| (:pid_42 , run) 
	(:pid_49 , run) (:pid_51 , run) (:pid_51 , dp1_receiveDM_consistent) (:pid_2 , 
	run) (:pid_8 , run) (:pid_8 , n2_in_DM) }
													TRACE: { |;| (:pid_42 , ${ 
	newfresh inst::Trickle.Node.z param::Trickle.Node.z_165 }) (:pid_51 , ${ input 
	inst::Trickle.Node.DataMsg1 [ 1 , 1 , 0 ] ${ + param::Trickle.Node.z_0 
	param::Trickle.Node.z_20 param::Trickle.Node.z_4 param::Trickle.Node.z_96 } } @ 
	(z_141 + z_165 + z_33 + z_45)) }
													/*FLAGS{ COVERAGE-ELEMENT }*/
													INFO{
														<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#5->run::pid_9:Trickle.Observer.o#5->prot::Trickle.Observer.o#5" as trace="tpid#5->run::pid_9:Trickle.Observer.o#5->prot::Trickle.Observer.o#5">
													}
													DATA{
														:pid_2:uncoveredExit = 0;
														:pid_42:my_buff[0].seq = 1;
														:pid_42:my_buff[0].fragment = FRAGMENT_0;
														:pid_42:my_buff[0].offset = 0;
														:pid_42:firmware[0] = FRAGMENT_0;
														:pid_42:myseq_buff[0] = 1;
														:pid_42:$time = (z_141 + z_165 + z_33 + z_45);
														:pid_42:z = z_165;
														:pid_42:coverageProp1 = true;
														:pid_42:CM_zero_zero = false;
														:pid_42:reach_DATA_EXPIR_DM2 = (e_3 == 2);
														:pid_42:localTime = (z_141 + z_165 + z_33 + z_45);
														:pid_42:localPC = ((t_33 < 4) && (t_44 < 4) && (t_249 < 4) && (0 <= (t_33 + -2)) && (0 <= (t_44 + -2)) && (0 <= (t_249 + -2)));
														:pid_42:localPtC = ((z_165 < t_249) && (z_45 < t_33) && ((z_0 + z_20 + z_4) <= (z_33 + z_45)) && ((z_0 + z_20 + z_4 + z_96) <= (z_141 + z_165 + z_33 + z_45)) && ($delta#initial > 0) && (z_141 > 0) && (z_33 > 0) && (z_45 > 0));
														:pid_42:timeEmit = (z_0 + z_20 + z_4 + z_96);
														:pid_43:cl = (z_141 + z_165);
														:pid_49:c = 1;
														:pid_49:consistent = true;
														:pid_49:cl = z_165;
														:pid_49:d.seq = 1;
														:pid_49:d.fragment = FRAGMENT_0;
														:pid_49:d.offset = 0;
														:pid_54:cl = (z_141 + z_165 + z_33 + z_45);
													}
													BUFFER{
														:pid_42:bufferDM1:<FIFO>#1{ }
													}
													EC:<Id:598;Ev:51;H:13;W:550>{ SC: ( pid_9:o#5 , ( pid_30:cp2 , pid_35:dp2 , pid_39:dp1 ) , ( pid_46:cp1 , pid_51:dp1 , pid_55:dp0 ) , ( pid_63:cp1 , pid_68:dp1 , pid_72:dp0 ) , ( pid_79:cp0_init , pid_84:dp0 , pid_89:dp0 ) )
														EXE: { |;| (:pid_59 , 
	run) (:pid_66 , run) (:pid_67 , run) (:pid_67 , dp_init) (:pid_2 , run) }
														TRACE: { |;| (:pid_59 , 
	${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_186 }) (:pid_67 , ${ 
	newfresh inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_325 }
	) }
														NC: ((t_325 < 4) && (0 
	<= (t_325 + -2)))
														PC: ((t_33 < 4) && (t_44 < 4) && (t_59 < 4) && (t_64 < 4) && (t_8 < 4) && (t_235 < 4)
	 && (t_249 < 4) && (t_325 < 4) && (t_8 < 4) && (0 <= (t_33 + -2)) && (0 <= (t_44 
	+ -2)) && (0 <= (t_59 + -2)) && (0 <= (t_64 + -2)) && (0 <= (t_8 + -2)) && (0 <= 
	(t_235 + -2)) && (0 <= (t_249 + -2)) && (0 <= (t_325 + -2)) && (0 <= (t_8 + -2)))
														DATA{
															:pid_2:uncoveredExit = 1;
															:pid_59:$time = (z_186 + z_62 + z_70);
															:pid_59:z = z_186;
															:pid_59:reach_DATA_EXPIR_DM1 = false;
															:pid_59:reach_DATA_EXPIR_DM2 = (e_5 == 2);
															:pid_59:localTime = (z_186 + z_62 + z_70);
															:pid_59:localPC = ((t_59 < 4) && (t_64 < 4) && (t_325 < 4) && (0 <= (t_59 + -2)) && (0 <= (t_64 + -2)) && (0 <= (t_325 + -2)));
															:pid_59:localPtC = ((z_70 < t_59) && ((z_0 + z_20 + z_4) <= (z_62 + z_70)) && ($delta#initial > 0) && (z_62 > 0) && (z_70 > 0));
															:pid_60:cl = z_186;
															:pid_66:e = 0;
															:pid_66:k = 2;
															:pid_66:c = 0;
															:pid_66:tau = 4;
															:pid_66:tau_l = 4;
															:pid_66:tau_h = 8;
															:pid_66:t = t_325;
															:pid_66:cl = 0;
															:pid_71:cl = (z_186 + z_62 + z_70);
														}
														EC:<Id:650;Ev:59;H:14;W:599>{ SC: ( pid_10:o#6 , ( pid_30:cp2 , pid_35:dp2 , pid_39:dp1 ) , ( pid_46:cp1 , pid_51:dp1 , pid_55:dp0 ) , ( pid_63:cp1 , pid_68:dp1 , pid_72:dp0 ) , ( pid_79:cp0_init , pid_84:dp0 , pid_89:dp0 ) )
															EXE: { |;| (:pid_59 
	, run) (:pid_66 , run) (:pid_68 , run) (:pid_68 , dp1_receiveDM_consistent) 
	(:pid_2 , run) (:pid_9 , run) (:pid_9 , n3_in_DM) }
															TRACE: { |;| 
	(:pid_59 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_198 }) 
	(:pid_68 , ${ input inst::Trickle.Node.DataMsg1 [ 1 , 1 , 0 ] ${ + 
	param::Trickle.Node.z_0 param::Trickle.Node.z_20 param::Trickle.Node.z_4 
	param::Trickle.Node.z_96 } } @ (z_186 + z_198 + z_62 + z_70)) }
															/*FLAGS{ COVERAGE-ELEMENT }*/
															INFO{
																<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#6->run::pid_10:Trickle.Observer.o#6->prot::Trickle.Observer.o#6" as trace="tpid#6->run::pid_10:Trickle.Observer.o#6->prot::Trickle.Observer.o#6">
															}
															DATA{
																:pid_2:uncoveredExit = 0;
																:pid_59:my_buff[0].seq = 1;
																:pid_59:my_buff[0].fragment = FRAGMENT_0;
																:pid_59:my_buff[0].offset = 0;
																:pid_59:firmware[0] = FRAGMENT_0;
																:pid_59:myseq_buff[0] = 1;
																:pid_59:$time = (z_186 + z_198 + z_62 + z_70);
																:pid_59:z = z_198;
																:pid_59:coverageProp1 = true;
																:pid_59:CM_zero_zero = false;
																:pid_59:reach_DATA_EXPIR_DM2 = (e_5 == 2);
																:pid_59:localTime = (z_186 + z_198 + z_62 + z_70);
																:pid_59:localPC = ((t_59 < 4) && (t_64 < 4) && (t_325 < 4) && (0 <= (t_59 + -2)) && (0 <= (t_64 + -2)) && (0 <= (t_325 + -2)));
																:pid_59:localPtC = ((z_198 < t_325) && (z_70 < t_59) && ((z_0 + z_20 + z_4) <= (z_62 + z_70)) && ((z_0 + z_20 + z_4 + z_96) <= (z_186 + z_198 + z_62 + z_70)) && ($delta#initial > 0) && (z_186 > 0) && (z_62 > 0) && (z_70 > 0));
																:pid_59:timeEmit = (z_0 + z_20 + z_4 + z_96);
																:pid_60:cl = (z_186 + z_198);
																:pid_66:c = 1;
																:pid_66:consistent = true;
																:pid_66:cl = z_198;
																:pid_66:d.seq = 1;
																:pid_66:d.fragment = FRAGMENT_0;
																:pid_66:d.offset = 0;
																:pid_71:cl = (z_186 + z_198 + z_62 + z_70);
															}
															BUFFER{
																:pid_59:bufferDM1:<FIFO>#1{ }
															}
															EC:<Id:826;Ev:69;H:15;W:767>{ SC: ( pid_11:o#7 , ( pid_30:cp2 , pid_35:dp2 , pid_40:dp2 ) , ( pid_46:cp1 , pid_51:dp1 , pid_55:dp0 ) , ( pid_63:cp1 , pid_68:dp1 , pid_72:dp0 ) , ( pid_79:cp0_init , pid_84:dp0 , pid_89:dp0 ) )
																EXE: { |;| 
	(:pid_25 , run) (:pid_37 , run) (:pid_39 , run) (:pid_39 , dp_sendDM) (:pid_2 , 
	run) (:pid_10 , run) (:pid_10 , n1_out_DM) }
																TRACE: { |;| 
	(:pid_25 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_228 }) 
	(:pid_39 , ${ output inst::Trickle.Node.DataMsg2 [ 2 , 2 , 1 ] ${ + 
	param::Trickle.Node.z_0 param::Trickle.Node.z_132 param::Trickle.Node.z_20 
	param::Trickle.Node.z_228 param::Trickle.Node.z_4 param::Trickle.Node.z_96 } } @ 
	(z_0 + z_132 + z_20 + z_228 + z_4 + z_96)) }
																/*FLAGS{ COVERAGE-ELEMENT }*/
																INFO{
																	<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#7->run::pid_11:Trickle.Observer.o#7->prot::Trickle.Observer.o#7" as trace="tpid#7->run::pid_11:Trickle.Observer.o#7->prot::Trickle.Observer.o#7">
																}
																DATA{
																	:pid_2:uncoveredExit = 0;
																	:pid_2:dataMessage.seq = 2;
																	:pid_2:dataMessage.fragment = FRAGMENT_1;
																	:pid_2:dataMessage.offset = 1;
																	:pid_2:emit_time = (z_0 + z_132 + z_20 + z_228 + z_4 + z_96);
																	:pid_25:$time = (z_0 + z_132 + z_20 + z_228 + z_4 + z_96);
																	:pid_25:z = z_228;
																	:pid_25:localTime = (z_0 + z_132 + z_20 + z_228 + z_4 + z_96);
																	:pid_25:localPC = ((t_8 < 4) && (t_235 < 4) && (t_8 < 4) && (0 <= (t_8 + -2)) && (0 <= (t_235 + -2)) && (0 <= (t_8 + -2)));
																	:pid_25:localPtC = (((z_20 + z_4 + z_96) == t_8) && (z_20 == t_8) && (z_228 == t_235) && ($delta#initial > 0) && (z_0 > 0) && (z_132 > 0) && (z_20 > 0) && (z_4 > 0) && (z_96 > 0));
																	:pid_26:cl = (z_132 + z_20 + z_228 + z_96);
																	:pid_32:cl = (z_132 + z_20 + z_228 + z_4 + z_96);
																	:pid_37:cl = z_228;
																}
																BUFFER{
																	:pid_42:bufferDM1:<FIFO>#1{
																		:pid_25:DataMsg2([ 2 , 2 , 1 ] , (z_0 + z_132 + z_20 + z_228 + z_4 + z_96));
																	}
																	:pid_42:bufferDM2:<FIFO>#2{
																		:pid_25:DataMsg1([ 1 , 1 , 0 ] , (z_0 + z_20 + z_4 + z_96));
																		:pid_25:DataMsg2([ 2 , 2 , 1 ] , (z_0 + z_132 + z_20 + z_228 + z_4 + z_96));
																	}
																	:pid_59:bufferDM1:<FIFO>#1{
																		:pid_25:DataMsg2([ 2 , 2 , 1 ] , (z_0 + z_132 + z_20 + z_228 + z_4 + z_96));
																	}
																	:pid_59:bufferDM2:<FIFO>#2{
																		:pid_25:DataMsg1([ 1 , 1 , 0 ] , (z_0 + z_20 + z_4 + z_96));
																		:pid_25:DataMsg2([ 2 , 2 , 1 ] , (z_0 + z_132 + z_20 + z_228 + z_4 + z_96));
																	}
																}
																EC:<Id:1013;Ev:70;H:16;W:944>{ SC: ( pid_11:o#7 , ( pid_30:cp2 , pid_35:dp2 , pid_40:dp2 ) , ( pid_46:cp1 , pid_51:dp1 , pid_55:dp0 ) , ( pid_64:cp2 , pid_68:dp1 , pid_72:dp0 ) , ( pid_79:cp0_init , pid_84:dp0 , pid_89:dp0 ) )
																	EXE: { |;| 
	(:pid_59 , run) (:pid_60 , run) (:pid_63 , run) (:pid_63 , cp_sendCM) (:pid_2 , 
	run) }
																	TRACE: { |;| 
	(:pid_59 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_270 }) 
	(:pid_63 , ${ output inst::Trickle.Node.ControlMsg [ 1 , 0 ] ${ + 
	param::Trickle.Node.z_186 param::Trickle.Node.z_198 param::Trickle.Node.z_270 
	param::Trickle.Node.z_62 param::Trickle.Node.z_70 } } @ (z_186 + z_198 + z_270 + 
	z_62 + z_70)) }
																	DATA{
																		:pid_2:uncoveredExit = 1;
																		:pid_59:$time = (z_186 + z_198 + z_270 + z_62 + z_70);
																		:pid_59:z = z_270;
																		:pid_59:reach_DATA_EXPIR_DM2 = (e_5 == 2);
																		:pid_59:localTime = (z_186 + z_198 + z_270 + z_62 + z_70);
																		:pid_59:localPC = ((t_59 < 4) && (t_64 < 4) && (t_325 < 4) && (0 <= (t_59 + -2)) && (0 <= (t_64 + -2)) && (0 <= (t_325 + -2)));
																		:pid_59:localPtC = (((z_186 + z_198 + z_270) == t_64) && (z_198 < t_325) && (z_70 < t_59) && ((z_0 + z_20 + z_4) <= (z_62 + z_70)) && ((z_0 + z_20 + z_4 + z_96) <= (z_186 + z_198 + z_62 + z_70)) && ($delta#initial > 0) && (z_186 > 0) && (z_198 > 0) && (z_62 > 0) && (z_70 > 0));
																		:pid_60:cl = (z_186 + z_198 + z_270);
																		:pid_66:cl = (z_198 + z_270);
																		:pid_71:cl = (z_186 + z_198 + z_270 + z_62 + z_70);
																	}
																	BUFFER{
																		:pid_25:bufferCM:<FIFO>#0{
																			:pid_59:ControlMsg([ 1 , 0 ] , (z_186 + z_198 + z_270 + z_62 + z_70));
																		}
																		:pid_76:bufferCM:<FIFO>#0{
																			:pid_59:ControlMsg([ 1 , 0 ] , (z_186 + z_198 + z_270 + z_62 + z_70));
																		}
																	}
																	EC:<Id:1031;Ev:78;H:17;W:961>{ SC: ( pid_11:o#7 , ( pid_30:cp2 , pid_35:dp2 , pid_40:dp2 ) , ( pid_46:cp1 , pid_51:dp1 , pid_55:dp0 ) , ( pid_64:cp2 , pid_68:dp1 , pid_72:dp0 ) , ( pid_79:cp0_init , pid_84:dp0 , pid_89:dp0 ) )
																		EXE: { 
	|;| (:pid_42 , run) (:pid_49 , run) (:pid_51 , run) (:pid_51 , 
	dp1_receiveDM_inconsistent) (:pid_2 , run) }
																		TRACE: { 
	|;| (:pid_42 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_273 }) 
	(:pid_51 , ${ input inst::Trickle.Node.DataMsg1 [ 2 , 2 , 1 ] ${ + 
	param::Trickle.Node.z_0 param::Trickle.Node.z_132 param::Trickle.Node.z_20 
	param::Trickle.Node.z_228 param::Trickle.Node.z_4 param::Trickle.Node.z_96 } } @ 
	(z_141 + z_165 + z_273 + z_33 + z_45)) (:pid_51 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_452 }) }
																		NC: 
	((t_452 < 4) && (0 <= (t_452 + -2)))
																		PC: ((t_33 < 4) && (t_44 < 4) && (t_59 < 4) && (t_64 < 4) && (t_8 < 4) && (t_235 < 4)
	 && (t_249 < 4) && (t_325 < 4) && (t_452 < 4) && (t_8 < 4) && (0 <= (t_33 + -2)) 
	&& (0 <= (t_44 + -2)) && (0 <= (t_59 + -2)) && (0 <= (t_64 + -2)) && (0 <= (t_8 
	+ -2)) && (0 <= (t_235 + -2)) && (0 <= (t_249 + -2)) && (0 <= (t_325 + -2)) && 
	(0 <= (t_452 + -2)) && (0 <= (t_8 + -2)))
																		DATA{
																			:pid_2:uncoveredExit = 2;
																			:pid_42:$time = (z_141 + z_165 + z_273 + z_33 + z_45);
																			:pid_42:z = z_273;
																			:pid_42:reach_DATA_EXPIR_DM2 = (e_3 == 2);
																			:pid_42:localTime = (z_141 + z_165 + z_273 + z_33 + z_45);
																			:pid_42:localPC = ((t_33 < 4) && (t_44 < 4) && (t_249 < 4) && (t_452 < 4) && (0 <= (t_33 + -2)) && (0 <= (t_44 + -2)) && (0 <= (t_249 + -2)) && (0 <= (t_452 + -2)));
																			:pid_42:localPtC = (((z_165 + z_273) < t_249) && (z_165 < t_249) && (z_45 < t_33) && ((z_0 + z_132 + z_20 + z_228 + z_4 + z_96) <= (z_141 + z_165 + z_273 + z_33 + z_45)) && ((z_0 + z_20 + z_4) <= (z_33 + z_45)) && ((z_0 + z_20 + z_4 + z_96) <= (z_141 + z_165 + z_33 + z_45)) && ($delta#initial > 0) && (z_141 > 0) && (z_165 > 0) && (z_33 > 0) && (z_45 > 0));
																			:pid_42:timeEmit = (z_0 + z_132 + z_20 + z_228 + z_4 + z_96);
																			:pid_43:cl = (z_141 + z_165 + z_273);
																			:pid_49:e = 0;
																			:pid_49:c = 0;
																			:pid_49:t = t_452;
																			:pid_49:consistent = false;
																			:pid_49:cl = 0;
																			:pid_49:d.seq = 2;
																			:pid_49:d.fragment = FRAGMENT_1;
																			:pid_49:d.offset = 1;
																			:pid_54:cl = (z_141 + z_165 + z_273 + z_33 + z_45);
																		}
																		BUFFER{
																			:pid_42:bufferDM1:<FIFO>#1{ }
																		}
																		EC:<Id:1150;Ev:84;H:18;W:1072>{ SC: ( pid_11:o#7 , ( pid_30:cp2 , pid_35:dp2 , pid_40:dp2 ) , ( pid_47:cp2 , pid_51:dp1 , pid_55:dp0 ) , ( pid_64:cp2 , pid_68:dp1 , pid_72:dp0 ) , ( pid_79:cp0_init , pid_84:dp0 , pid_89:dp0 ) )
																			EXE: 
	{ |;| (:pid_42 , run) (:pid_43 , run) (:pid_46 , run) (:pid_46 , cp_sendCM) 
	(:pid_2 , run) }
																			
	TRACE: { |;| (:pid_42 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_305 }) (:pid_46 , ${ output inst::Trickle.Node.ControlMsg 
	[ 1 , 0 ] ${ + param::Trickle.Node.z_141 param::Trickle.Node.z_165 
	param::Trickle.Node.z_273 param::Trickle.Node.z_305 param::Trickle.Node.z_33 
	param::Trickle.Node.z_45 } } @ (z_141 + z_165 + z_273 + z_305 + z_33 + z_45)) }
																			DATA{
																				:pid_2:uncoveredExit = 3;
																				:pid_42:$time = (z_141 + z_165 + z_273 + z_305 + z_33 + z_45);
																				:pid_42:z = z_305;
																				:pid_42:reach_DATA_EXPIR_DM2 = (e_3 == 2);
																				:pid_42:localTime = (z_141 + z_165 + z_273 + z_305 + z_33 + z_45);
																				:pid_42:localPC = ((t_33 < 4) && (t_44 < 4) && (t_249 < 4) && (t_452 < 4) && (0 <= (t_33 + -2)) && (0 <= (t_44 + -2)) && (0 <= (t_249 + -2)) && (0 <= (t_452 + -2)));
																				:pid_42:localPtC = (((z_141 + z_165 + z_273 + z_305) == t_44) && ((z_165 + z_273) < t_249) && (z_165 < t_249) && (z_45 < t_33) && ((z_0 + z_132 + z_20 + z_228 + z_4 + z_96) <= (z_141 + z_165 + z_273 + z_33 + z_45)) && ((z_0 + z_20 + z_4) <= (z_33 + z_45)) && ((z_0 + z_20 + z_4 + z_96) <= (z_141 + z_165 + z_33 + z_45)) && ($delta#initial > 0) && (z_141 > 0) && (z_165 > 0) && (z_273 > 0) && (z_33 > 0) && (z_45 > 0));
																				:pid_43:cl = (z_141 + z_165 + z_273 + z_305);
																				:pid_49:cl = z_305;
																				:pid_54:cl = (z_141 + z_165 + z_273 + z_305 + z_33 + z_45);
																			}
																			BUFFER{
																				:pid_59:bufferCM:<FIFO>#0{
																					:pid_42:ControlMsg([ 1 , 0 ] , (z_141 + z_165 + z_273 + z_305 + z_33 + z_45));
																				}
																			}
																			EC:<Id:1223;Ev:86;H:19;W:1139>{ SC: ( pid_11:o#7 , ( pid_30:cp2 , pid_35:dp2 , pid_40:dp2 ) , ( pid_47:cp2 , pid_51:dp1 , pid_55:dp0 ) , ( pid_63:cp1 , pid_68:dp1 , pid_72:dp0 ) , ( pid_79:cp0_init , pid_84:dp0 , pid_89:dp0 ) )
																				
	EXE: { |;| (:pid_59 , run) (:pid_60 , run) (:pid_64 , run) (:pid_64 , 
	cp_resetTau) (:pid_2 , run) }
																				
	TRACE: { |;| (:pid_59 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_330 }) (:pid_64 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_233 }) }
																				
	NC: ((t_233 < 8) && (0 <= (t_233 + -4)))
																				PC: ((t_233 < 8) && (t_33 < 4) && (t_44 < 4) && (t_59 < 4) && (t_64 < 4) && (t_8 < 4)
	 && (t_235 < 4) && (t_249 < 4) && (t_325 < 4) && (t_452 < 4) && (t_8 < 4) && (0 
	<= (t_233 + -4)) && (0 <= (t_33 + -2)) && (0 <= (t_44 + -2)) && (0 <= (t_59 + -2)
	) && (0 <= (t_64 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_235 + -2)) && (0 <= 
	(t_249 + -2)) && (0 <= (t_325 + -2)) && (0 <= (t_452 + -2)) && (0 <= (t_8 + -2)))
																				DATA{
																					:pid_2:uncoveredExit = 4;
																					:pid_59:$time = (z_186 + z_198 + z_270 + z_330 + z_62 + z_70);
																					:pid_59:z = z_330;
																					:pid_59:reach_DATA_EXPIR_DM2 = (e_5 == 2);
																					:pid_59:localTime = (z_186 + z_198 + z_270 + z_330 + z_62 + z_70);
																					:pid_59:localPC = ((t_233 < 8) && (t_59 < 4) && (t_64 < 4) && (t_325 < 4) && (0 <= (t_233 + -4)) && (0 <= (t_59 + -2)) && (0 <= (t_64 + -2)) && (0 <= (t_325 + -2)));
																					:pid_59:localPtC = (((z_186 + z_198 + z_270) == t_64) && ((z_186 + z_198 + z_270 + z_330) == 4) && (z_198 < t_325) && (z_70 < t_59) && ((z_0 + z_20 + z_4) <= (z_62 + z_70)) && ((z_0 + z_20 + z_4 + z_96) <= (z_186 + z_198 + z_62 + z_70)) && ((z_186 + z_198 + z_270 + z_330) > t_64) && ($delta#initial > 0) && (z_186 > 0) && (z_198 > 0) && (z_270 > 0) && (z_62 > 0) && (z_70 > 0));
																					:pid_60:e = 1;
																					:pid_60:c = 0;
																					:pid_60:tau = 8;
																					:pid_60:t = t_233;
																					:pid_60:cl = 0;
																					:pid_66:cl = (z_198 + z_270 + z_330);
																					:pid_71:cl = (z_186 + z_198 + z_270 + z_330 + z_62 + z_70);
																				}
																				EC:<Id:1255;Ev:98;H:20;W:1169>{ SC: ( pid_11:o#7 , ( pid_30:cp2 , pid_35:dp2 , pid_40:dp2 ) , ( pid_46:cp1 , pid_51:dp1 , pid_55:dp0 ) , ( pid_63:cp1 , pid_68:dp1 , pid_72:dp0 ) , ( pid_79:cp0_init , pid_84:dp0 , pid_89:dp0 ) )
																					
	EXE: { |;| (:pid_42 , run) (:pid_43 , run) (:pid_47 , run) (:pid_47 , 
	cp_resetTau) (:pid_2 , run) }
																					
	TRACE: { |;| (:pid_42 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_337 }) (:pid_47 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_242 }) }
																					
	NC: ((t_242 < 8) && (0 <= (t_242 + -4)))
																					PC: ((t_233 < 8) && (t_242 < 8) && (t_33 < 4) && (t_44 < 4) && (t_59 < 4) && (t_64 < 
	4) && (t_8 < 4) && (t_235 < 4) && (t_249 < 4) && (t_325 < 4) && (t_452 < 4) && 
	(t_8 < 4) && (0 <= (t_233 + -4)) && (0 <= (t_242 + -4)) && (0 <= (t_33 + -2)) && 
	(0 <= (t_44 + -2)) && (0 <= (t_59 + -2)) && (0 <= (t_64 + -2)) && (0 <= (t_8 + 
	-2)) && (0 <= (t_235 + -2)) && (0 <= (t_249 + -2)) && (0 <= (t_325 + -2)) && (0 
	<= (t_452 + -2)) && (0 <= (t_8 + -2)))
																					DATA{
																						:pid_2:uncoveredExit = 5;
																						:pid_42:$time = (z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_45);
																						:pid_42:z = z_337;
																						:pid_42:reach_DATA_EXPIR_DM2 = (e_3 == 2);
																						:pid_42:localTime = (z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_45);
																						:pid_42:localPC = ((t_242 < 8) && (t_33 < 4) && (t_44 < 4) && (t_249 < 4) && (t_452 < 4) && (0 <= (t_242 + -4)) && (0 <= (t_33 + -2)) && (0 <= (t_44 + -2)) && (0 <= (t_249 + -2)) && (0 <= (t_452 + -2)));
																						:pid_42:localPtC = (((z_141 + z_165 + z_273 + z_305) == t_44) && ((z_141 + z_165 + z_273 + z_305 + z_337) == 4) && ((z_165 + z_273) < t_249) && (z_165 < t_249) && (z_45 < t_33) && ((z_0 + z_132 + z_20 + z_228 + z_4 + z_96) <= (z_141 + z_165 + z_273 + z_33 + z_45)) && ((z_0 + z_20 + z_4) <= (z_33 + z_45)) && ((z_0 + z_20 + z_4 + z_96) <= (z_141 + z_165 + z_33 + z_45)) && ((z_141 + z_165 + z_273 + z_305 + z_337) > t_44) && ($delta#initial > 0) && (z_141 > 0) && (z_165 > 0) && (z_273 > 0) && (z_305 > 0) && (z_33 > 0) && (z_45 > 0));
																						:pid_43:e = 1;
																						:pid_43:c = 0;
																						:pid_43:tau = 8;
																						:pid_43:t = t_242;
																						:pid_43:cl = 0;
																						:pid_49:cl = (z_305 + z_337);
																						:pid_54:cl = (z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_45);
																					}
																					EC:<Id:1410;Ev:103;H:21;W:1312>{ SC: ( pid_11:o#7 , ( pid_30:cp2 , pid_35:dp2 , pid_40:dp2 ) , ( pid_46:cp1 , pid_51:dp1 , pid_55:dp0 ) , ( pid_63:cp1 , pid_68:dp1 , pid_72:dp0 ) , ( pid_79:cp0_init , pid_84:dp0 , pid_89:dp0 ) )
																					
		EXE: { |;| (:pid_59 , run) (:pid_66 , run) (:pid_68 , run) (:pid_68 , 
	dp1_receiveDM_inconsistent) (:pid_2 , run) }
																					
		TRACE: { |;| (:pid_59 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_386 }) (:pid_68 , ${ input inst::Trickle.Node.DataMsg1 [ 2 
	, 2 , 1 ] ${ + param::Trickle.Node.z_0 param::Trickle.Node.z_132 
	param::Trickle.Node.z_20 param::Trickle.Node.z_228 param::Trickle.Node.z_4 
	param::Trickle.Node.z_96 } } @ (z_186 + z_198 + z_270 + z_330 + z_386 + z_62 + 
	z_70)) (:pid_68 , ${ newfresh inst::Trickle.Node.DataProcess.t 
	param::Trickle.Node.DataProcess.t_662 }) }
																					
		NC: ((t_662 < 4) && (0 <= (t_662 + -2)))
																						PC: ((t_233 < 8) && (t_242 < 8) && (t_33 < 4) && (t_44 < 4) && (t_59 < 4) && (t_64 < 
	4) && (t_8 < 4) && (t_235 < 4) && (t_249 < 4) && (t_325 < 4) && (t_452 < 4) && 
	(t_662 < 4) && (t_8 < 4) && (0 <= (t_233 + -4)) && (0 <= (t_242 + -4)) && (0 <= 
	(t_33 + -2)) && (0 <= (t_44 + -2)) && (0 <= (t_59 + -2)) && (0 <= (t_64 + -2)) 
	&& (0 <= (t_8 + -2)) && (0 <= (t_235 + -2)) && (0 <= (t_249 + -2)) && (0 <= 
	(t_325 + -2)) && (0 <= (t_452 + -2)) && (0 <= (t_662 + -2)) && (0 <= (t_8 + -2)))
																						DATA{
																							:pid_2:uncoveredExit = 6;
																							:pid_59:$time = (z_186 + z_198 + z_270 + z_330 + z_386 + z_62 + z_70);
																							:pid_59:z = z_386;
																							:pid_59:reach_DATA_EXPIR_DM2 = (e_5 == 2);
																							:pid_59:localTime = (z_186 + z_198 + z_270 + z_330 + z_386 + z_62 + z_70);
																							:pid_59:localPC = ((t_233 < 8) && (t_59 < 4) && (t_64 < 4) && (t_325 < 4) && (t_662 < 4) && (0 <= (t_233 + -4)) && (0 <= (t_59 + -2)) && (0 <= (t_64 + -2)) && (0 <= (t_325 + -2)) && (0 <= (t_662 + -2)));
																							:pid_59:localPtC = (((z_186 + z_198 + z_270) == t_64) && ((z_186 + z_198 + z_270 + z_330) == 4) && ((z_198 + z_270 + z_330 + z_386) < t_325) && (z_198 < t_325) && (z_70 < t_59) && ((z_0 + z_132 + z_20 + z_228 + z_4 + z_96) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_62 + z_70)) && ((z_0 + z_20 + z_4) <= (z_62 + z_70)) && ((z_0 + z_20 + z_4 + z_96) <= (z_186 + z_198 + z_62 + z_70)) && ((z_186 + z_198 + z_270 + z_330) > t_64) && ($delta#initial > 0) && (z_186 > 0) && (z_198 > 0) && (z_270 > 0) && (z_330 > 0) && (z_62 > 0) && (z_70 > 0));
																							:pid_59:timeEmit = (z_0 + z_132 + z_20 + z_228 + z_4 + z_96);
																							:pid_60:cl = z_386;
																							:pid_66:e = 0;
																							:pid_66:c = 0;
																							:pid_66:t = t_662;
																							:pid_66:consistent = false;
																							:pid_66:cl = 0;
																							:pid_66:d.seq = 2;
																							:pid_66:d.fragment = FRAGMENT_1;
																							:pid_66:d.offset = 1;
																							:pid_71:cl = (z_186 + z_198 + z_270 + z_330 + z_386 + z_62 + z_70);
																						}
																						BUFFER{
																							:pid_59:bufferDM1:<FIFO>#1{ }
																						}
																						EC:<Id:1478;Ev:112;H:22;W:1375>{ SC: ( pid_11:o#7 , ( pid_30:cp2 , pid_35:dp2 , pid_40:dp2 ) , ( pid_47:cp2 , pid_51:dp1 , pid_55:dp0 ) , ( pid_63:cp1 , pid_68:dp1 , pid_72:dp0 ) , ( pid_79:cp0_init , pid_84:dp0 , pid_89:dp0 ) )
																					
			EXE: { |;| (:pid_42 , run) (:pid_43 , run) (:pid_46 , run) (:pid_46 , 
	cp_sendCM) (:pid_2 , run) }
																					
			TRACE: { |;| (:pid_42 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_405 }) (:pid_46 , ${ output inst::Trickle.Node.ControlMsg 
	[ 1 , 0 ] ${ + param::Trickle.Node.z_141 param::Trickle.Node.z_165 
	param::Trickle.Node.z_273 param::Trickle.Node.z_305 param::Trickle.Node.z_33 
	param::Trickle.Node.z_337 param::Trickle.Node.z_405 param::Trickle.Node.z_45 } } 
	@ (z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_45)) }
																							DATA{
																								:pid_2:uncoveredExit = 7;
																								:pid_42:$time = (z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_45);
																								:pid_42:z = z_405;
																								:pid_42:reach_DATA_EXPIR_DM2 = (e_3 == 2);
																								:pid_42:localTime = (z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_45);
																								:pid_42:localPC = ((t_242 < 8) && (t_33 < 4) && (t_44 < 4) && (t_249 < 4) && (t_452 < 4) && (0 <= (t_242 + -4)) && (0 <= (t_33 + -2)) && (0 <= (t_44 + -2)) && (0 <= (t_249 + -2)) && (0 <= (t_452 + -2)));
																								:pid_42:localPtC = (((z_141 + z_165 + z_273 + z_305) == t_44) && ((z_141 + z_165 + z_273 + z_305 + z_337) == 4) && (z_405 == t_242) && ((z_165 + z_273) < t_249) && (z_165 < t_249) && (z_45 < t_33) && ((z_0 + z_132 + z_20 + z_228 + z_4 + z_96) <= (z_141 + z_165 + z_273 + z_33 + z_45)) && ((z_0 + z_20 + z_4) <= (z_33 + z_45)) && ((z_0 + z_20 + z_4 + z_96) <= (z_141 + z_165 + z_33 + z_45)) && ((z_141 + z_165 + z_273 + z_305 + z_337) > t_44) && ($delta#initial > 0) && (z_141 > 0) && (z_165 > 0) && (z_273 > 0) && (z_305 > 0) && (z_33 > 0) && (z_337 > 0) && (z_45 > 0));
																								:pid_43:cl = z_405;
																								:pid_49:cl = (z_305 + z_337 + z_405);
																								:pid_54:cl = (z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_45);
																							}
																							BUFFER{
																								:pid_59:bufferCM:<FIFO>#0{
																									:pid_42:ControlMsg([ 1 , 0 ] , (z_141 + z_165 + z_273 + z_305 + z_33 + z_45));
																									:pid_42:ControlMsg([ 1 , 0 ] , (z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_45));
																								}
																							}
																							EC:<Id:1597;Ev:120;H:23;W:1485>{ SC: ( pid_11:o#7 , ( pid_30:cp2 , pid_35:dp2 , pid_40:dp2 ) , ( pid_47:cp2 , pid_51:dp1 , pid_56:dp1 ) , ( pid_63:cp1 , pid_68:dp1 , pid_72:dp0 ) , ( pid_79:cp0_init , pid_84:dp0 , pid_89:dp0 ) )
																					
				EXE: { |;| (:pid_42 , run) (:pid_54 , run) (:pid_55 , run) (:pid_55 
	, dp_init) (:pid_2 , run) }
																					
				TRACE: { |;| (:pid_42 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_441 }) (:pid_55 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_759 }) }
																					
				NC: ((t_759 < 4) && (0 <= (t_759 + -2)))
																								PC: ((t_233 < 8) && (t_242 < 8) && (t_33 < 4) && (t_44 < 4) && (t_59 < 4) && (t_64 < 
	4) && (t_8 < 4) && (t_235 < 4) && (t_249 < 4) && (t_325 < 4) && (t_452 < 4) && 
	(t_662 < 4) && (t_759 < 4) && (t_8 < 4) && (0 <= (t_233 + -4)) && (0 <= (t_242 + 
	-4)) && (0 <= (t_33 + -2)) && (0 <= (t_44 + -2)) && (0 <= (t_59 + -2)) && (0 <= 
	(t_64 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_235 + -2)) && (0 <= (t_249 + -2)) 
	&& (0 <= (t_325 + -2)) && (0 <= (t_452 + -2)) && (0 <= (t_662 + -2)) && (0 <= 
	(t_759 + -2)) && (0 <= (t_8 + -2)))
																								DATA{
																									:pid_2:uncoveredExit = 8;
																									:pid_42:$time = (z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45);
																									:pid_42:z = z_441;
																									:pid_42:reach_DATA_EXPIR_DM2 = false;
																									:pid_42:localTime = (z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45);
																									:pid_42:localPC = ((t_242 < 8) && (t_33 < 4) && (t_44 < 4) && (t_249 < 4) && (t_452 < 4) && (t_759 < 4) && (0 <= (t_242 + -4)) && (0 <= (t_33 + -2)) && (0 <= (t_44 + -2)) && (0 <= (t_249 + -2)) && (0 <= (t_452 + -2)) && (0 <= (t_759 + -2)));
																									:pid_42:localPtC = (((z_141 + z_165 + z_273 + z_305) == t_44) && ((z_141 + z_165 + z_273 + z_305 + z_337) == 4) && (z_405 == t_242) && ((z_165 + z_273) < t_249) && (z_165 < t_249) && (z_45 < t_33) && ((z_0 + z_132 + z_20 + z_228 + z_4 + z_96) <= (z_141 + z_165 + z_273 + z_33 + z_45)) && ((z_0 + z_20 + z_4) <= (z_33 + z_45)) && ((z_0 + z_20 + z_4 + z_96) <= (z_141 + z_165 + z_33 + z_45)) && ((z_141 + z_165 + z_273 + z_305 + z_337) > t_44) && ($delta#initial > 0) && (z_141 > 0) && (z_165 > 0) && (z_273 > 0) && (z_305 > 0) && (z_33 > 0) && (z_337 > 0) && (z_405 > 0) && (z_45 > 0));
																									:pid_43:cl = (z_405 + z_441);
																									:pid_49:cl = (z_305 + z_337 + z_405 + z_441);
																									:pid_54:e = 0;
																									:pid_54:k = 2;
																									:pid_54:c = 0;
																									:pid_54:tau = 4;
																									:pid_54:tau_l = 4;
																									:pid_54:tau_h = 8;
																									:pid_54:t = t_759;
																									:pid_54:cl = 0;
																								}
																								EC:<Id:1699;Ev:125;H:24;W:1579>{ SC: ( pid_11:o#7 , ( pid_30:cp2 , pid_35:dp2 , pid_40:dp2 ) , ( pid_47:cp2 , pid_51:dp1 , pid_57:dp2 ) , ( pid_63:cp1 , pid_68:dp1 , pid_72:dp0 ) , ( pid_79:cp0_init , pid_84:dp0 , pid_89:dp0 ) )
																					
					EXE: { |;| (:pid_42 , run) (:pid_54 , run) (:pid_56 , run) 
	(:pid_56 , dp1_reach_k) (:pid_2 , run) }
																					
					TRACE: (:pid_42 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_473 })
																									DATA{
																										:pid_2:uncoveredExit = 9;
																										:pid_42:$time = (z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473);
																										:pid_42:z = z_473;
																										:pid_42:localTime = (z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473);
																										:pid_42:localPC = ((t_242 < 8) && (t_33 < 4) && (t_44 < 4) && (t_249 < 4) && (t_452 < 4) && (t_759 < 4) && (0 <= (t_242 + -4)) && (0 <= (t_33 + -2)) && (0 <= (t_44 + -2)) && (0 <= (t_249 + -2)) && (0 <= (t_452 + -2)) && (0 <= (t_759 + -2)));
																										:pid_42:localPtC = (((z_141 + z_165 + z_273 + z_305) == t_44) && ((z_141 + z_165 + z_273 + z_305 + z_337) == 4) && (z_405 == t_242) && (z_473 == t_759) && ((z_165 + z_273) < t_249) && (z_165 < t_249) && (z_45 < t_33) && ((z_0 + z_132 + z_20 + z_228 + z_4 + z_96) <= (z_141 + z_165 + z_273 + z_33 + z_45)) && ((z_0 + z_20 + z_4) <= (z_33 + z_45)) && ((z_0 + z_20 + z_4 + z_96) <= (z_141 + z_165 + z_33 + z_45)) && ((z_141 + z_165 + z_273 + z_305 + z_337) > t_44) && ($delta#initial > 0) && (z_141 > 0) && (z_165 > 0) && (z_273 > 0) && (z_305 > 0) && (z_33 > 0) && (z_337 > 0) && (z_405 > 0) && (z_441 > 0) && (z_45 > 0));
																										:pid_43:cl = (z_405 + z_441 + z_473);
																										:pid_49:cl = (z_305 + z_337 + z_405 + z_441 + z_473);
																										:pid_54:cl = z_473;
																									}
																									EC:<Id:1759;Ev:134;H:25;W:1634>{ SC: ( pid_11:o#7 , ( pid_30:cp2 , pid_35:dp2 , pid_40:dp2 ) , ( pid_47:cp2 , pid_51:dp1 , pid_56:dp1 ) , ( pid_63:cp1 , pid_68:dp1 , pid_72:dp0 ) , ( pid_79:cp0_init , pid_84:dp0 , pid_89:dp0 ) )
																					
						EXE: { |;| (:pid_42 , run) (:pid_54 , run) (:pid_57 , run) 
	(:pid_57 , dp2_receiveDM_inconsistent) (:pid_2 , run) }
																					
						TRACE: { |;| (:pid_42 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_493 }) (:pid_57 , ${ input inst::Trickle.Node.DataMsg2 [ 1 
	, 1 , 0 ] ${ + param::Trickle.Node.z_0 param::Trickle.Node.z_20 
	param::Trickle.Node.z_4 param::Trickle.Node.z_96 } } @ (z_141 + z_165 + z_273 + 
	z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493)) (:pid_57 , ${ 
	newfresh inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_839 }
	) }
																					
						NC: ((t_839 < 4) && (0 <= (t_839 + -2)))
																										PC: ((t_233 < 8) && (t_242 < 8) && (t_33 < 4) && (t_44 < 4) && (t_59 < 4) && (t_64 < 
	4) && (t_8 < 4) && (t_235 < 4) && (t_249 < 4) && (t_325 < 4) && (t_452 < 4) && 
	(t_662 < 4) && (t_759 < 4) && (t_8 < 4) && (t_839 < 4) && (0 <= (t_233 + -4)) && 
	(0 <= (t_242 + -4)) && (0 <= (t_33 + -2)) && (0 <= (t_44 + -2)) && (0 <= (t_59 + 
	-2)) && (0 <= (t_64 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_235 + -2)) && (0 <= 
	(t_249 + -2)) && (0 <= (t_325 + -2)) && (0 <= (t_452 + -2)) && (0 <= (t_662 + -2)
	) && (0 <= (t_759 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_839 + -2)))
																										DATA{
																											:pid_2:uncoveredExit = 10;
																											:pid_42:$time = (z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493);
																											:pid_42:z = z_493;
																											:pid_42:localTime = (z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493);
																											:pid_42:localPC = ((t_242 < 8) && (t_33 < 4) && (t_44 < 4) && (t_249 < 4) && (t_452 < 4) && (t_759 < 4) && (t_839 < 4) && (0 <= (t_242 + -4)) && (0 <= (t_33 + -2)) && (0 <= (t_44 + -2)) && (0 <= (t_249 + -2)) && (0 <= (t_452 + -2)) && (0 <= (t_759 + -2)) && (0 <= (t_839 + -2)));
																											:pid_42:localPtC = (((z_141 + z_165 + z_273 + z_305) == t_44) && ((z_141 + z_165 + z_273 + z_305 + z_337) == 4) && (z_405 == t_242) && (z_473 == t_759) && ((z_165 + z_273) < t_249) && ((z_473 + z_493) < 4) && (z_165 < t_249) && (z_45 < t_33) && ((z_0 + z_132 + z_20 + z_228 + z_4 + z_96) <= (z_141 + z_165 + z_273 + z_33 + z_45)) && ((z_0 + z_20 + z_4) <= (z_33 + z_45)) && ((z_0 + z_20 + z_4 + z_96) <= (z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493)) && ((z_0 + z_20 + z_4 + z_96) <= (z_141 + z_165 + z_33 + z_45)) && ((z_141 + z_165 + z_273 + z_305 + z_337) > t_44) && ($delta#initial > 0) && (z_141 > 0) && (z_165 > 0) && (z_273 > 0) && (z_305 > 0) && (z_33 > 0) && (z_337 > 0) && (z_405 > 0) && (z_441 > 0) && (z_45 > 0) && (z_473 > 0));
																											:pid_42:timeEmit = (z_0 + z_20 + z_4 + z_96);
																											:pid_43:cl = (z_405 + z_441 + z_473 + z_493);
																											:pid_49:cl = (z_305 + z_337 + z_405 + z_441 + z_473 + z_493);
																											:pid_54:e = 0;
																											:pid_54:c = 0;
																											:pid_54:t = t_839;
																											:pid_54:consistent = false;
																											:pid_54:cl = 0;
																											:pid_54:d.seq = 1;
																											:pid_54:d.fragment = FRAGMENT_0;
																											:pid_54:d.offset = 0;
																										}
																										BUFFER{
																											:pid_42:bufferDM2:<FIFO>#2{
																												:pid_25:DataMsg2([ 2 , 2 , 1 ] , (z_0 + z_132 + z_20 + z_228 + z_4 + z_96));
																											}
																										}
																										EC:<Id:1880;Ev:139;H:26;W:1746>{ SC: ( pid_12:o#8 , ( pid_30:cp2 , pid_35:dp2 , pid_40:dp2 ) , ( pid_47:cp2 , pid_51:dp1 , pid_56:dp1 ) , ( pid_63:cp1 , pid_68:dp1 , pid_72:dp0 ) , ( pid_79:cp0_init , pid_84:dp0 , pid_89:dp0 ) )
																					
							EXE: { |;| (:pid_42 , run) (:pid_54 , run) (:pid_56 , 
	run) (:pid_56 , dp1_receiveDM_consistent) (:pid_2 , run) (:pid_11 , run) 
	(:pid_11 , n2_in_DM) }
																					
							TRACE: { |;| (:pid_42 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_529 }) (:pid_56 , ${ input inst::Trickle.Node.DataMsg2 [ 2 
	, 2 , 1 ] ${ + param::Trickle.Node.z_0 param::Trickle.Node.z_132 
	param::Trickle.Node.z_20 param::Trickle.Node.z_228 param::Trickle.Node.z_4 
	param::Trickle.Node.z_96 } } @ (z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + 
	z_405 + z_441 + z_45 + z_473 + z_493 + z_529)) }
																											/*FLAGS{ COVERAGE-ELEMENT }*/
																											INFO{
																												<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#8->run::pid_12:Trickle.Observer.o#8->prot::Trickle.Observer.o#8" as trace="tpid#8->run::pid_12:Trickle.Observer.o#8->prot::Trickle.Observer.o#8">
																											}
																											DATA{
																												:pid_2:uncoveredExit = 0;
																												:pid_42:my_buff[1].seq = 2;
																												:pid_42:my_buff[1].fragment = FRAGMENT_1;
																												:pid_42:my_buff[1].offset = 1;
																												:pid_42:firmware[1] = FRAGMENT_1;
																												:pid_42:myseq_buff[1] = 1;
																												:pid_42:$time = (z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529);
																												:pid_42:z = z_529;
																												:pid_42:coverageProp2 = true;
																												:pid_42:CM_one_one = true;
																												:pid_42:localTime = (z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529);
																												:pid_42:localPC = ((t_242 < 8) && (t_33 < 4) && (t_44 < 4) && (t_249 < 4) && (t_452 < 4) && (t_759 < 4) && (t_839 < 4) && (0 <= (t_242 + -4)) && (0 <= (t_33 + -2)) && (0 <= (t_44 + -2)) && (0 <= (t_249 + -2)) && (0 <= (t_452 + -2)) && (0 <= (t_759 + -2)) && (0 <= (t_839 + -2)));
																												:pid_42:localPtC = (((z_141 + z_165 + z_273 + z_305) == t_44) && ((z_141 + z_165 + z_273 + z_305 + z_337) == 4) && (z_405 == t_242) && (z_473 == t_759) && ((z_165 + z_273) < t_249) && ((z_473 + z_493) < 4) && (z_165 < t_249) && (z_45 < t_33) && (z_529 < t_839) && ((z_0 + z_132 + z_20 + z_228 + z_4 + z_96) <= (z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529)) && ((z_0 + z_132 + z_20 + z_228 + z_4 + z_96) <= (z_141 + z_165 + z_273 + z_33 + z_45)) && ((z_0 + z_20 + z_4) <= (z_33 + z_45)) && ((z_0 + z_20 + z_4 + z_96) <= (z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493)) && ((z_0 + z_20 + z_4 + z_96) <= (z_141 + z_165 + z_33 + z_45)) && ((z_141 + z_165 + z_273 + z_305 + z_337) > t_44) && ($delta#initial > 0) && (z_141 > 0) && (z_165 > 0) && (z_273 > 0) && (z_305 > 0) && (z_33 > 0) && (z_337 > 0) && (z_405 > 0) && (z_441 > 0) && (z_45 > 0) && (z_473 > 0) && (z_493 > 0));
																												:pid_42:timeEmit = (z_0 + z_132 + z_20 + z_228 + z_4 + z_96);
																												:pid_43:cl = (z_405 + z_441 + z_473 + z_493 + z_529);
																												:pid_49:cl = (z_305 + z_337 + z_405 + z_441 + z_473 + z_493 + z_529);
																												:pid_54:c = 1;
																												:pid_54:consistent = true;
																												:pid_54:cl = z_529;
																												:pid_54:d.seq = 2;
																												:pid_54:d.fragment = FRAGMENT_1;
																												:pid_54:d.offset = 1;
																											}
																											BUFFER{
																												:pid_42:bufferDM2:<FIFO>#2{ }
																											}
																											EC:<Id:1941;Ev:144;H:27;W:1802>{ SC: ( pid_12:o#8 , ( pid_30:cp2 , pid_35:dp2 , pid_40:dp2 ) , ( pid_47:cp2 , pid_51:dp1 , pid_56:dp1 ) , ( pid_63:cp1 , pid_68:dp1 , pid_73:dp1 ) , ( pid_79:cp0_init , pid_84:dp0 , pid_89:dp0 ) )
																					
								EXE: { |;| (:pid_59 , run) (:pid_71 , run) (:pid_72 
	, run) (:pid_72 , dp_init) (:pid_2 , run) }
																					
								TRACE: { |;| (:pid_59 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_550 }) (:pid_72 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_934 }) }
																					
								NC: ((t_934 < 4) && (0 <= (t_934 + -2)))
																												PC: ((t_233 < 8) && (t_242 < 8) && (t_33 < 4) && (t_44 < 4) && (t_59 < 4) && (t_64 < 
	4) && (t_8 < 4) && (t_235 < 4) && (t_249 < 4) && (t_325 < 4) && (t_452 < 4) && 
	(t_662 < 4) && (t_759 < 4) && (t_8 < 4) && (t_839 < 4) && (t_934 < 4) && (0 <= 
	(t_233 + -4)) && (0 <= (t_242 + -4)) && (0 <= (t_33 + -2)) && (0 <= (t_44 + -2)) 
	&& (0 <= (t_59 + -2)) && (0 <= (t_64 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_235 
	+ -2)) && (0 <= (t_249 + -2)) && (0 <= (t_325 + -2)) && (0 <= (t_452 + -2)) && 
	(0 <= (t_662 + -2)) && (0 <= (t_759 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_839 
	+ -2)) && (0 <= (t_934 + -2)))
																												DATA{
																													:pid_2:uncoveredExit = 1;
																													:pid_59:$time = (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_62 + z_70);
																													:pid_59:z = z_550;
																													:pid_59:reach_DATA_EXPIR_DM2 = false;
																													:pid_59:localTime = (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_62 + z_70);
																													:pid_59:localPC = ((t_233 < 8) && (t_59 < 4) && (t_64 < 4) && (t_325 < 4) && (t_662 < 4) && (t_934 < 4) && (0 <= (t_233 + -4)) && (0 <= (t_59 + -2)) && (0 <= (t_64 + -2)) && (0 <= (t_325 + -2)) && (0 <= (t_662 + -2)) && (0 <= (t_934 + -2)));
																													:pid_59:localPtC = (((z_186 + z_198 + z_270) == t_64) && ((z_186 + z_198 + z_270 + z_330) == 4) && ((z_198 + z_270 + z_330 + z_386) < t_325) && (z_198 < t_325) && (z_70 < t_59) && ((z_0 + z_132 + z_20 + z_228 + z_4 + z_96) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_62 + z_70)) && ((z_0 + z_20 + z_4) <= (z_62 + z_70)) && ((z_0 + z_20 + z_4 + z_96) <= (z_186 + z_198 + z_62 + z_70)) && ((z_186 + z_198 + z_270 + z_330) > t_64) && ($delta#initial > 0) && (z_186 > 0) && (z_198 > 0) && (z_270 > 0) && (z_330 > 0) && (z_386 > 0) && (z_62 > 0) && (z_70 > 0));
																													:pid_60:cl = (z_386 + z_550);
																													:pid_66:cl = z_550;
																													:pid_71:e = 0;
																													:pid_71:k = 2;
																													:pid_71:c = 0;
																													:pid_71:tau = 4;
																													:pid_71:tau_l = 4;
																													:pid_71:tau_h = 8;
																													:pid_71:t = t_934;
																													:pid_71:cl = 0;
																												}
																												EC:<Id:2052;Ev:152;H:28;W:1908>{ SC: ( pid_12:o#8 , ( pid_30:cp2 , pid_35:dp2 , pid_40:dp2 ) , ( pid_47:cp2 , pid_51:dp1 , pid_56:dp1 ) , ( pid_64:cp2 , pid_68:dp1 , pid_73:dp1 ) , ( pid_79:cp0_init , pid_84:dp0 , pid_89:dp0 ) )
																					
									EXE: { |;| (:pid_59 , run) (:pid_60 , run) 
	(:pid_63 , run) (:pid_63 , cp_sendCM) (:pid_2 , run) }
																					
									TRACE: { |;| (:pid_59 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_570 }) (:pid_63 , ${ output 
	inst::Trickle.Node.ControlMsg [ 1 , 0 ] ${ + param::Trickle.Node.z_186 
	param::Trickle.Node.z_198 param::Trickle.Node.z_270 param::Trickle.Node.z_330 
	param::Trickle.Node.z_386 param::Trickle.Node.z_550 param::Trickle.Node.z_570 
	param::Trickle.Node.z_62 param::Trickle.Node.z_70 } } @ (z_186 + z_198 + z_270 + 
	z_330 + z_386 + z_550 + z_570 + z_62 + z_70)) }
																													DATA{
																														:pid_2:uncoveredExit = 2;
																														:pid_59:$time = (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_62 + z_70);
																														:pid_59:z = z_570;
																														:pid_59:localTime = (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_62 + z_70);
																														:pid_59:localPC = ((t_233 < 8) && (t_59 < 4) && (t_64 < 4) && (t_325 < 4) && (t_662 < 4) && (t_934 < 4) && (0 <= (t_233 + -4)) && (0 <= (t_59 + -2)) && (0 <= (t_64 + -2)) && (0 <= (t_325 + -2)) && (0 <= (t_662 + -2)) && (0 <= (t_934 + -2)));
																														:pid_59:localPtC = (((z_186 + z_198 + z_270) == t_64) && ((z_186 + z_198 + z_270 + z_330) == 4) && ((z_386 + z_550 + z_570) == t_233) && ((z_198 + z_270 + z_330 + z_386) < t_325) && (z_198 < t_325) && (z_70 < t_59) && ((z_0 + z_132 + z_20 + z_228 + z_4 + z_96) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_62 + z_70)) && ((z_0 + z_20 + z_4) <= (z_62 + z_70)) && ((z_0 + z_20 + z_4 + z_96) <= (z_186 + z_198 + z_62 + z_70)) && ((z_186 + z_198 + z_270 + z_330) > t_64) && ($delta#initial > 0) && (z_186 > 0) && (z_198 > 0) && (z_270 > 0) && (z_330 > 0) && (z_386 > 0) && (z_550 > 0) && (z_62 > 0) && (z_70 > 0));
																														:pid_60:cl = (z_386 + z_550 + z_570);
																														:pid_66:cl = (z_550 + z_570);
																														:pid_71:cl = z_570;
																													}
																													BUFFER{
																														:pid_25:bufferCM:<FIFO>#0{
																															:pid_59:ControlMsg([ 1 , 0 ] , (z_186 + z_198 + z_270 + z_62 + z_70));
																															:pid_59:ControlMsg([ 1 , 0 ] , (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_62 + z_70));
																														}
																														:pid_76:bufferCM:<FIFO>#0{
																															:pid_59:ControlMsg([ 1 , 0 ] , (z_186 + z_198 + z_270 + z_62 + z_70));
																															:pid_59:ControlMsg([ 1 , 0 ] , (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_62 + z_70));
																														}
																													}
																													EC:<Id:2251;Ev:157;H:29;W:2099>{ SC: ( pid_12:o#8 , ( pid_30:cp2 , pid_35:dp2 , pid_40:dp2 ) , ( pid_47:cp2 , pid_51:dp1 , pid_56:dp1 ) , ( pid_64:cp2 , pid_68:dp1 , pid_73:dp1 ) , ( pid_79:cp0_init , pid_84:dp0 , pid_89:dp0 ) )
																					
										EXE: { |;| (:pid_59 , run) (:pid_71 , run) 
	(:pid_73 , run) (:pid_73 , dp1_receiveDM_inconsistent) (:pid_2 , run) }
																					
										TRACE: { |;| (:pid_59 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_602 }) (:pid_73 , ${ input 
	inst::Trickle.Node.DataMsg2 [ 1 , 1 , 0 ] ${ + param::Trickle.Node.z_0 
	param::Trickle.Node.z_20 param::Trickle.Node.z_4 param::Trickle.Node.z_96 } } @ 
	(z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_70)) 
	(:pid_73 , ${ newfresh inst::Trickle.Node.DataProcess.t 
	param::Trickle.Node.DataProcess.t_1002 }) }
																					
										NC: ((t_1002 < 4) && (0 <= (t_1002 + -2)))
																														PC: ((t_233 < 8) && (t_242 < 8) && (t_33 < 4) && (t_44 < 4) && (t_59 < 4) && (t_64 < 
	4) && (t_8 < 4) && (t_1002 < 4) && (t_235 < 4) && (t_249 < 4) && (t_325 < 4) && 
	(t_452 < 4) && (t_662 < 4) && (t_759 < 4) && (t_8 < 4) && (t_839 < 4) && (t_934 
	< 4) && (0 <= (t_233 + -4)) && (0 <= (t_242 + -4)) && (0 <= (t_33 + -2)) && (0 
	<= (t_44 + -2)) && (0 <= (t_59 + -2)) && (0 <= (t_64 + -2)) && (0 <= (t_8 + -2)) 
	&& (0 <= (t_1002 + -2)) && (0 <= (t_235 + -2)) && (0 <= (t_249 + -2)) && (0 <= 
	(t_325 + -2)) && (0 <= (t_452 + -2)) && (0 <= (t_662 + -2)) && (0 <= (t_759 + -2)
	) && (0 <= (t_8 + -2)) && (0 <= (t_839 + -2)) && (0 <= (t_934 + -2)))
																														DATA{
																															:pid_2:uncoveredExit = 3;
																															:pid_59:$time = (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_70);
																															:pid_59:z = z_602;
																															:pid_59:localTime = (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_70);
																															:pid_59:localPC = ((t_233 < 8) && (t_59 < 4) && (t_64 < 4) && (t_1002 < 4) && (t_325 < 4) && (t_662 < 4) && (t_934 < 4) && (0 <= (t_233 + -4)) && (0 <= (t_59 + -2)) && (0 <= (t_64 + -2)) && (0 <= (t_1002 + -2)) && (0 <= (t_325 + -2)) && (0 <= (t_662 + -2)) && (0 <= (t_934 + -2)));
																															:pid_59:localPtC = (((z_186 + z_198 + z_270) == t_64) && ((z_186 + z_198 + z_270 + z_330) == 4) && ((z_386 + z_550 + z_570) == t_233) && ((z_198 + z_270 + z_330 + z_386) < t_325) && ((z_570 + z_602) < t_934) && (z_198 < t_325) && (z_70 < t_59) && ((z_0 + z_132 + z_20 + z_228 + z_4 + z_96) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_62 + z_70)) && ((z_0 + z_20 + z_4) <= (z_62 + z_70)) && ((z_0 + z_20 + z_4 + z_96) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_70)) && ((z_0 + z_20 + z_4 + z_96) <= (z_186 + z_198 + z_62 + z_70)) && ((z_186 + z_198 + z_270 + z_330) > t_64) && ($delta#initial > 0) && (z_186 > 0) && (z_198 > 0) && (z_270 > 0) && (z_330 > 0) && (z_386 > 0) && (z_550 > 0) && (z_570 > 0) && (z_62 > 0) && (z_70 > 0));
																															:pid_59:timeEmit = (z_0 + z_20 + z_4 + z_96);
																															:pid_60:cl = (z_386 + z_550 + z_570 + z_602);
																															:pid_66:cl = (z_550 + z_570 + z_602);
																															:pid_71:e = 0;
																															:pid_71:c = 0;
																															:pid_71:t = t_1002;
																															:pid_71:consistent = false;
																															:pid_71:cl = 0;
																															:pid_71:d.seq = 1;
																															:pid_71:d.fragment = FRAGMENT_0;
																															:pid_71:d.offset = 0;
																														}
																														BUFFER{
																															:pid_59:bufferDM2:<FIFO>#2{
																																:pid_25:DataMsg2([ 2 , 2 , 1 ] , (z_0 + z_132 + z_20 + z_228 + z_4 + z_96));
																															}
																														}
																														EC:<Id:2318;Ev:166;H:30;W:2161>{ SC: ( pid_13:o#9 , ( pid_30:cp2 , pid_35:dp2 , pid_40:dp2 ) , ( pid_47:cp2 , pid_51:dp1 , pid_56:dp1 ) , ( pid_64:cp2 , pid_68:dp1 , pid_73:dp1 ) , ( pid_79:cp0_init , pid_84:dp0 , pid_89:dp0 ) )
																					
											EXE: { |;| (:pid_59 , run) (:pid_71 , 
	run) (:pid_73 , run) (:pid_73 , dp1_receiveDM_consistent) (:pid_2 , run) 
	(:pid_12 , run) (:pid_12 , n3_in_DM) }
																					
											TRACE: { |;| (:pid_59 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_622 }) (:pid_73 , ${ input 
	inst::Trickle.Node.DataMsg2 [ 2 , 2 , 1 ] ${ + param::Trickle.Node.z_0 
	param::Trickle.Node.z_132 param::Trickle.Node.z_20 param::Trickle.Node.z_228 
	param::Trickle.Node.z_4 param::Trickle.Node.z_96 } } @ (z_186 + z_198 + z_270 + 
	z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_70)) }
																															/*FLAGS{ COVERAGE-ELEMENT }*/
																															INFO{
																																<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#9->run::pid_13:Trickle.Observer.o#9->prot::Trickle.Observer.o#9" as trace="tpid#9->run::pid_13:Trickle.Observer.o#9->prot::Trickle.Observer.o#9">
																															}
																															DATA{
																																:pid_2:uncoveredExit = 0;
																																:pid_59:my_buff[1].seq = 2;
																																:pid_59:my_buff[1].fragment = FRAGMENT_1;
																																:pid_59:my_buff[1].offset = 1;
																																:pid_59:firmware[1] = FRAGMENT_1;
																																:pid_59:myseq_buff[1] = 1;
																																:pid_59:$time = (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_70);
																																:pid_59:z = z_622;
																																:pid_59:coverageProp2 = true;
																																:pid_59:CM_one_one = true;
																																:pid_59:localTime = (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_70);
																																:pid_59:localPC = ((t_233 < 8) && (t_59 < 4) && (t_64 < 4) && (t_1002 < 4) && (t_325 < 4) && (t_662 < 4) && (t_934 < 4) && (0 <= (t_233 + -4)) && (0 <= (t_59 + -2)) && (0 <= (t_64 + -2)) && (0 <= (t_1002 + -2)) && (0 <= (t_325 + -2)) && (0 <= (t_662 + -2)) && (0 <= (t_934 + -2)));
																																:pid_59:localPtC = (((z_186 + z_198 + z_270) == t_64) && ((z_186 + z_198 + z_270 + z_330) == 4) && ((z_386 + z_550 + z_570) == t_233) && ((z_198 + z_270 + z_330 + z_386) < t_325) && ((z_570 + z_602) < t_934) && (z_198 < t_325) && (z_622 < t_1002) && (z_70 < t_59) && ((z_0 + z_132 + z_20 + z_228 + z_4 + z_96) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_70)) && ((z_0 + z_132 + z_20 + z_228 + z_4 + z_96) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_62 + z_70)) && ((z_0 + z_20 + z_4) <= (z_62 + z_70)) && ((z_0 + z_20 + z_4 + z_96) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_70)) && ((z_0 + z_20 + z_4 + z_96) <= (z_186 + z_198 + z_62 + z_70)) && ((z_186 + z_198 + z_270 + z_330) > t_64) && ($delta#initial > 0) && (z_186 > 0) && (z_198 > 0) && (z_270 > 0) && (z_330 > 0) && (z_386 > 0) && (z_550 > 0) && (z_570 > 0) && (z_602 > 0) && (z_62 > 0) && (z_70 > 0));
																																:pid_59:timeEmit = (z_0 + z_132 + z_20 + z_228 + z_4 + z_96);
																																:pid_60:cl = (z_386 + z_550 + z_570 + z_602 + z_622);
																																:pid_66:cl = (z_550 + z_570 + z_602 + z_622);
																																:pid_71:c = 1;
																																:pid_71:consistent = true;
																																:pid_71:cl = z_622;
																																:pid_71:d.seq = 2;
																																:pid_71:d.fragment = FRAGMENT_1;
																																:pid_71:d.offset = 1;
																															}
																															BUFFER{
																																:pid_59:bufferDM2:<FIFO>#2{ }
																															}
																															EC:<Id:2435;Ev:169;H:31;W:2269>{ SC: ( pid_13:o#9 , ( pid_30:cp2 , pid_35:dp2 , pid_40:dp2 ) , ( pid_47:cp2 , pid_51:dp1 , pid_56:dp1 ) , ( pid_63:cp1 , pid_68:dp1 , pid_73:dp1 ) , ( pid_79:cp0_init , pid_84:dp0 , pid_89:dp0 ) )
																					
												EXE: { |;| (:pid_59 , run) (:pid_60 
	, run) (:pid_64 , run) (:pid_64 , cp2_receiveCM_inconsistent) (:pid_2 , run) }
																					
												TRACE: { |;| (:pid_59 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_658 }) (:pid_64 , ${ input 
	inst::Trickle.Node.ControlMsg [ 1 , 0 ] ${ + param::Trickle.Node.z_141 
	param::Trickle.Node.z_165 param::Trickle.Node.z_273 param::Trickle.Node.z_305 
	param::Trickle.Node.z_33 param::Trickle.Node.z_45 } } @ (z_186 + z_198 + z_270 + 
	z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_70)) (:pid_64 , 
	${ newfresh inst::Trickle.Node.ControlProcess.t 
	param::Trickle.Node.ControlProcess.t_557 }) }
																					
												NC: ((t_557 < 4) && (0 <= (t_557 + 
	-2)))
																																PC: ((t_233 < 8) && (t_242 < 8) && (t_33 < 4) && (t_44 < 4) && (t_557 < 4) && (t_59 
	< 4) && (t_64 < 4) && (t_8 < 4) && (t_1002 < 4) && (t_235 < 4) && (t_249 < 4) && 
	(t_325 < 4) && (t_452 < 4) && (t_662 < 4) && (t_759 < 4) && (t_8 < 4) && (t_839 
	< 4) && (t_934 < 4) && (0 <= (t_233 + -4)) && (0 <= (t_242 + -4)) && (0 <= (t_33 
	+ -2)) && (0 <= (t_44 + -2)) && (0 <= (t_557 + -2)) && (0 <= (t_59 + -2)) && (0 
	<= (t_64 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_1002 + -2)) && (0 <= (t_235 + 
	-2)) && (0 <= (t_249 + -2)) && (0 <= (t_325 + -2)) && (0 <= (t_452 + -2)) && (0 
	<= (t_662 + -2)) && (0 <= (t_759 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_839 + 
	-2)) && (0 <= (t_934 + -2)))
																																DATA{
																																	:pid_2:uncoveredExit = 1;
																																	:pid_59:$time = (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_70);
																																	:pid_59:z = z_658;
																																	:pid_59:seq_buff[0] = 1;
																																	:pid_59:seq_buff[1] = 0;
																																	:pid_59:localTime = (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_70);
																																	:pid_59:localPC = ((t_233 < 8) && (t_557 < 4) && (t_59 < 4) && (t_64 < 4) && (t_1002 < 4) && (t_325 < 4) && (t_662 < 4) && (t_934 < 4) && (0 <= (t_233 + -4)) && (0 <= (t_557 + -2)) && (0 <= (t_59 + -2)) && (0 <= (t_64 + -2)) && (0 <= (t_1002 + -2)) && (0 <= (t_325 + -2)) && (0 <= (t_662 + -2)) && (0 <= (t_934 + -2)));
																																	:pid_59:localPtC = (((z_186 + z_198 + z_270) == t_64) && ((z_186 + z_198 + z_270 + z_330) == 4) && ((z_386 + z_550 + z_570) == t_233) && ((z_198 + z_270 + z_330 + z_386) < t_325) && ((z_386 + z_550 + z_570 + z_602 + z_622 + z_658) < 8) && ((z_570 + z_602) < t_934) && (z_198 < t_325) && (z_622 < t_1002) && (z_70 < t_59) && ((z_0 + z_132 + z_20 + z_228 + z_4 + z_96) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_70)) && ((z_0 + z_132 + z_20 + z_228 + z_4 + z_96) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_62 + z_70)) && ((z_0 + z_20 + z_4) <= (z_62 + z_70)) && ((z_0 + z_20 + z_4 + z_96) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_70)) && ((z_0 + z_20 + z_4 + z_96) <= (z_186 + z_198 + z_62 + z_70)) && ((z_141 + z_165 + z_273 + z_305 + z_33 + z_45) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_70)) && ((z_186 + z_198 + z_270 + z_330) > t_64) && ($delta#initial > 0) && (z_186 > 0) && (z_198 > 0) && (z_270 > 0) && (z_330 > 0) && (z_386 > 0) && (z_550 > 0) && (z_570 > 0) && (z_602 > 0) && (z_62 > 0) && (z_622 > 0) && (z_70 > 0));
																																	:pid_59:timeEmit = (z_141 + z_165 + z_273 + z_305 + z_33 + z_45);
																																	:pid_60:e = 0;
																																	:pid_60:c = 0;
																																	:pid_60:tau = 4;
																																	:pid_60:i = 2;
																																	:pid_60:t = t_557;
																																	:pid_60:cl = 0;
																																	:pid_66:cl = (z_550 + z_570 + z_602 + z_622 + z_658);
																																	:pid_71:cl = (z_622 + z_658);
																																}
																																BUFFER{
																																	:pid_59:bufferCM:<FIFO>#0{
																																		:pid_42:ControlMsg([ 1 , 0 ] , (z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_45));
																																	}
																																}
																																EC:<Id:2494;Ev:179;H:32;W:2325>{ SC: ( pid_14:o#10 , ( pid_30:cp2 , pid_35:dp2 , pid_40:dp2 ) , ( pid_47:cp2 , pid_51:dp1 , pid_56:dp1 ) , ( pid_64:cp2 , pid_68:dp1 , pid_73:dp1 ) , ( pid_79:cp0_init , pid_84:dp0 , pid_89:dp0 ) )
																					
													EXE: { |;| (:pid_59 , run) 
	(:pid_60 , run) (:pid_63 , run) (:pid_63 , cp_sendCM) (:pid_2 , run) (:pid_13 , 
	run) (:pid_13 , n3_out_CM) }
																					
													TRACE: { |;| (:pid_59 , ${ 
	newfresh inst::Trickle.Node.z param::Trickle.Node.z_670 }) (:pid_63 , ${ output 
	inst::Trickle.Node.ControlMsg [ 1 , 1 ] ${ + param::Trickle.Node.z_186 
	param::Trickle.Node.z_198 param::Trickle.Node.z_270 param::Trickle.Node.z_330 
	param::Trickle.Node.z_386 param::Trickle.Node.z_550 param::Trickle.Node.z_570 
	param::Trickle.Node.z_602 param::Trickle.Node.z_62 param::Trickle.Node.z_622 
	param::Trickle.Node.z_658 param::Trickle.Node.z_670 param::Trickle.Node.z_70 } } 
	@ (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 
	+ z_658 + z_670 + z_70)) }
																																	/*FLAGS{ COVERAGE-ELEMENT }*/
																																	INFO{
																																		<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#10->run::pid_14:Trickle.Observer.o#10->prot::Trickle.Observer.o#10" as trace="tpid#10->run::pid_14:Trickle.Observer.o#10->prot::Trickle.Observer.o#10">
																																	}
																																	DATA{
																																		:pid_2:uncoveredExit = 0;
																																		:pid_2:seqBuff[0] = 1;
																																		:pid_2:seqBuff[1] = 1;
																																		:pid_2:emit_time = (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70);
																																		:pid_59:$time = (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70);
																																		:pid_59:z = z_670;
																																		:pid_59:localTime = (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70);
																																		:pid_59:localPC = ((t_233 < 8) && (t_557 < 4) && (t_59 < 4) && (t_64 < 4) && (t_1002 < 4) && (t_325 < 4) && (t_662 < 4) && (t_934 < 4) && (0 <= (t_233 + -4)) && (0 <= (t_557 + -2)) && (0 <= (t_59 + -2)) && (0 <= (t_64 + -2)) && (0 <= (t_1002 + -2)) && (0 <= (t_325 + -2)) && (0 <= (t_662 + -2)) && (0 <= (t_934 + -2)));
																																		:pid_59:localPtC = (((z_186 + z_198 + z_270) == t_64) && ((z_186 + z_198 + z_270 + z_330) == 4) && ((z_386 + z_550 + z_570) == t_233) && (z_670 == t_557) && ((z_198 + z_270 + z_330 + z_386) < t_325) && ((z_386 + z_550 + z_570 + z_602 + z_622 + z_658) < 8) && ((z_570 + z_602) < t_934) && (z_198 < t_325) && (z_622 < t_1002) && (z_70 < t_59) && ((z_0 + z_132 + z_20 + z_228 + z_4 + z_96) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_70)) && ((z_0 + z_132 + z_20 + z_228 + z_4 + z_96) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_62 + z_70)) && ((z_0 + z_20 + z_4) <= (z_62 + z_70)) && ((z_0 + z_20 + z_4 + z_96) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_70)) && ((z_0 + z_20 + z_4 + z_96) <= (z_186 + z_198 + z_62 + z_70)) && ((z_141 + z_165 + z_273 + z_305 + z_33 + z_45) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_70)) && ((z_186 + z_198 + z_270 + z_330) > t_64) && ($delta#initial > 0) && (z_186 > 0) && (z_198 > 0) && (z_270 > 0) && (z_330 > 0) && (z_386 > 0) && (z_550 > 0) && (z_570 > 0) && (z_602 > 0) && (z_62 > 0) && (z_622 > 0) && (z_658 > 0) && (z_70 > 0));
																																		:pid_60:cl = z_670;
																																		:pid_66:cl = (z_550 + z_570 + z_602 + z_622 + z_658 + z_670);
																																		:pid_71:cl = (z_622 + z_658 + z_670);
																																	}
																																	BUFFER{
																																		:pid_25:bufferCM:<FIFO>#0{
																																			:pid_59:ControlMsg([ 1 , 0 ] , (z_186 + z_198 + z_270 + z_62 + z_70));
																																			:pid_59:ControlMsg([ 1 , 0 ] , (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_62 + z_70));
																																			:pid_59:ControlMsg([ 1 , 1 ] , (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70));
																																		}
																																		:pid_76:bufferCM:<FIFO>#0{
																																			:pid_59:ControlMsg([ 1 , 0 ] , (z_186 + z_198 + z_270 + z_62 + z_70));
																																			:pid_59:ControlMsg([ 1 , 0 ] , (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_62 + z_70));
																																			:pid_59:ControlMsg([ 1 , 1 ] , (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70));
																																		}
																																	}
																																	EC:<Id:2748;Ev:180;H:33;W:2325>{ SC: ( pid_14:o#10 , ( pid_30:cp2 , pid_35:dp2 , pid_40:dp2 ) , ( pid_47:cp2 , pid_51:dp1 , pid_56:dp1 ) , ( pid_64:cp2 , pid_68:dp1 , pid_73:dp1 ) , ( pid_80:cp1 , pid_84:dp0 , pid_89:dp0 ) )
																					
														EXE: { |;| (:pid_76 , run) 
	(:pid_77 , run) (:pid_79 , run) (:pid_79 , cp_init) (:pid_2 , run) }
																					
														TRACE: { |;| (:pid_76 , ${ 
	newfresh inst::Trickle.Node.z param::Trickle.Node.z_711 }) (:pid_79 , ${ 
	newfresh inst::Trickle.Node.ControlProcess.t 
	param::Trickle.Node.ControlProcess.t_630 }) (:pid_79 , ${ output#env 
	inst::Trickle.Node.Log 0 } @ z_711) }
																					
														NC: ((t_630 < 4) && (0 <= 
	(t_630 + -2)))
																																		PC: ((t_233 < 8) && (t_242 < 8) && (t_33 < 4) && (t_44 < 4) && (t_557 < 4) && (t_59 
	< 4) && (t_630 < 4) && (t_64 < 4) && (t_8 < 4) && (t_1002 < 4) && (t_235 < 4) && 
	(t_249 < 4) && (t_325 < 4) && (t_452 < 4) && (t_662 < 4) && (t_759 < 4) && (t_8 
	< 4) && (t_839 < 4) && (t_934 < 4) && (0 <= (t_233 + -4)) && (0 <= (t_242 + -4)) 
	&& (0 <= (t_33 + -2)) && (0 <= (t_44 + -2)) && (0 <= (t_557 + -2)) && (0 <= 
	(t_59 + -2)) && (0 <= (t_630 + -2)) && (0 <= (t_64 + -2)) && (0 <= (t_8 + -2)) 
	&& (0 <= (t_1002 + -2)) && (0 <= (t_235 + -2)) && (0 <= (t_249 + -2)) && (0 <= 
	(t_325 + -2)) && (0 <= (t_452 + -2)) && (0 <= (t_662 + -2)) && (0 <= (t_759 + -2)
	) && (0 <= (t_8 + -2)) && (0 <= (t_839 + -2)) && (0 <= (t_934 + -2)))
																																		DATA{
																																			:pid_2:uncoveredExit = 1;
																																			:pid_76:$time = z_711;
																																			:pid_76:z = z_711;
																																			:pid_76:CM_zero_zero = true;
																																			:pid_76:reach_DATA_EXPIR_DM1 = (e_6 == 2);
																																			:pid_76:reach_DATA_EXPIR_DM2 = (e_7 == 2);
																																			:pid_76:localTime = z_711;
																																			:pid_76:localPC = ((t_630 < 4) && (0 <= (t_630 + -2)));
																																			:pid_76:localPtC = ($delta#initial > 0);
																																			:pid_77:t = t_630;
																																			:pid_77:cl = 0;
																																			:pid_83:cl = z_711;
																																			:pid_88:cl = z_711;
																																		}
																																		EC:<Id:2761;Ev:192;H:34;W:2581>{ SC: ( pid_15:o#11 , ( pid_30:cp2 , pid_35:dp2 , pid_40:dp2 ) , ( pid_47:cp2 , pid_51:dp1 , pid_56:dp1 ) , ( pid_64:cp2 , pid_68:dp1 , pid_73:dp1 ) , ( pid_80:cp1 , pid_84:dp0 , pid_89:dp0 ) )
																					
															EXE: { |;| (:pid_76 , 
	run) (:pid_77 , run) (:pid_80 , run) (:pid_80 , cp1_receiveCM_inconsistent) 
	(:pid_2 , run) (:pid_14 , run) (:pid_14 , n4_in_CM) }
																					
															TRACE: { |;| (:pid_76 , 
	${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_715 }) (:pid_80 , ${ 
	input inst::Trickle.Node.ControlMsg [ 1 , 0 ] ${ + param::Trickle.Node.z_186 
	param::Trickle.Node.z_198 param::Trickle.Node.z_270 param::Trickle.Node.z_62 
	param::Trickle.Node.z_70 } } @ (z_711 + z_715)) (:pid_80 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_636 }) }
																																			/*FLAGS{ COVERAGE-ELEMENT }*/
																																			INFO{
																																				<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#11->run::pid_15:Trickle.Observer.o#11->prot::Trickle.Observer.o#11" as trace="tpid#11->run::pid_15:Trickle.Observer.o#11->prot::Trickle.Observer.o#11">
																																			}
																					
															NC: ((t_636 < 4) && (0 
	<= (t_636 + -2)))
																																			PC: ((t_233 < 8) && (t_242 < 8) && (t_33 < 4) && (t_44 < 4) && (t_557 < 4) && (t_59 
	< 4) && (t_630 < 4) && (t_636 < 4) && (t_64 < 4) && (t_8 < 4) && (t_1002 < 4) && 
	(t_235 < 4) && (t_249 < 4) && (t_325 < 4) && (t_452 < 4) && (t_662 < 4) && 
	(t_759 < 4) && (t_8 < 4) && (t_839 < 4) && (t_934 < 4) && (0 <= (t_233 + -4)) && 
	(0 <= (t_242 + -4)) && (0 <= (t_33 + -2)) && (0 <= (t_44 + -2)) && (0 <= (t_557 
	+ -2)) && (0 <= (t_59 + -2)) && (0 <= (t_630 + -2)) && (0 <= (t_636 + -2)) && (0 
	<= (t_64 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_1002 + -2)) && (0 <= (t_235 + 
	-2)) && (0 <= (t_249 + -2)) && (0 <= (t_325 + -2)) && (0 <= (t_452 + -2)) && (0 
	<= (t_662 + -2)) && (0 <= (t_759 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_839 + 
	-2)) && (0 <= (t_934 + -2)))
																																			DATA{
																																				:pid_2:uncoveredExit = 0;
																																				:pid_2:seqBuff[1] = 0;
																																				:pid_2:emit_time = (z_186 + z_198 + z_270 + z_62 + z_70);
																																				:pid_76:mydp_run[0] = true;
																																				:pid_76:$time = (z_711 + z_715);
																																				:pid_76:z = z_715;
																																				:pid_76:reach_DATA_EXPIR_DM1 = (e_6 == 2);
																																				:pid_76:reach_DATA_EXPIR_DM2 = (e_7 == 2);
																																				:pid_76:seq_buff[0] = 1;
																																				:pid_76:seq_buff[1] = 0;
																																				:pid_76:localTime = (z_711 + z_715);
																																				:pid_76:localPC = ((t_630 < 4) && (t_636 < 4) && (0 <= (t_630 + -2)) && (0 <= (t_636 + -2)));
																																				:pid_76:localPtC = ((z_715 < t_630) && ((z_186 + z_198 + z_270 + z_62 + z_70) <= (z_711 + z_715)) && ($delta#initial > 0) && (z_711 > 0));
																																				:pid_76:timeEmit = (z_186 + z_198 + z_270 + z_62 + z_70);
																																				:pid_77:e = 0;
																																				:pid_77:c = 0;
																																				:pid_77:i = 2;
																																				:pid_77:t = t_636;
																																				:pid_77:consistent = false;
																																				:pid_77:cl = 0;
																																				:pid_83:cl = (z_711 + z_715);
																																				:pid_88:cl = (z_711 + z_715);
																																			}
																																			BUFFER{
																																				:pid_76:bufferCM:<FIFO>#0{
																																					:pid_59:ControlMsg([ 1 , 0 ] , (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_62 + z_70));
																																					:pid_59:ControlMsg([ 1 , 1 ] , (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70));
																																				}
																																			}
																																			EC:<Id:3065;Ev:195;H:35;W:2873>{ SC: ( pid_15:o#11 , ( pid_30:cp2 , pid_35:dp2 , pid_40:dp2 ) , ( pid_47:cp2 , pid_51:dp1 , pid_56:dp1 ) , ( pid_64:cp2 , pid_68:dp1 , pid_73:dp1 ) , ( pid_80:cp1 , pid_85:dp1 , pid_89:dp0 ) )
																					
																EXE: { |;| (:pid_76 
	, run) (:pid_83 , run) (:pid_84 , run) (:pid_84 , dp_init) (:pid_2 , run) }
																					
																TRACE: { |;| 
	(:pid_76 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_763 }) 
	(:pid_84 , ${ newfresh inst::Trickle.Node.DataProcess.t 
	param::Trickle.Node.DataProcess.t_1191 }) }
																																				/*FLAGS{ COVERAGE-ELEMENT }*/
																																				INFO{
																																					<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#12->Node.DataProcess1->dp0.dp_init" as trace="tpid#12->Node.DataProcess1->dp0.dp_init">
																																				}
																					
																NC: ((t_1191 < 4) && 
	(0 <= (t_1191 + -2)))
																																				PC: ((t_233 < 8) && (t_242 < 8) && (t_33 < 4) && (t_44 < 4) && (t_557 < 4) && (t_59 
	< 4) && (t_630 < 4) && (t_636 < 4) && (t_64 < 4) && (t_8 < 4) && (t_1002 < 4) && 
	(t_1191 < 4) && (t_235 < 4) && (t_249 < 4) && (t_325 < 4) && (t_452 < 4) && 
	(t_662 < 4) && (t_759 < 4) && (t_8 < 4) && (t_839 < 4) && (t_934 < 4) && (0 <= 
	(t_233 + -4)) && (0 <= (t_242 + -4)) && (0 <= (t_33 + -2)) && (0 <= (t_44 + -2)) 
	&& (0 <= (t_557 + -2)) && (0 <= (t_59 + -2)) && (0 <= (t_630 + -2)) && (0 <= 
	(t_636 + -2)) && (0 <= (t_64 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_1002 + -2)) 
	&& (0 <= (t_1191 + -2)) && (0 <= (t_235 + -2)) && (0 <= (t_249 + -2)) && (0 <= 
	(t_325 + -2)) && (0 <= (t_452 + -2)) && (0 <= (t_662 + -2)) && (0 <= (t_759 + -2)
	) && (0 <= (t_8 + -2)) && (0 <= (t_839 + -2)) && (0 <= (t_934 + -2)))
																																				DATA{
																																					:pid_2:uncoveredExit = 1;
																																					:pid_76:$time = (z_711 + z_715 + z_763);
																																					:pid_76:z = z_763;
																																					:pid_76:reach_DATA_EXPIR_DM1 = false;
																																					:pid_76:reach_DATA_EXPIR_DM2 = (e_7 == 2);
																																					:pid_76:localTime = (z_711 + z_715 + z_763);
																																					:pid_76:localPC = ((t_630 < 4) && (t_636 < 4) && (t_1191 < 4) && (0 <= (t_630 + -2)) && (0 <= (t_636 + -2)) && (0 <= (t_1191 + -2)));
																																					:pid_76:localPtC = ((z_715 < t_630) && ((z_186 + z_198 + z_270 + z_62 + z_70) <= (z_711 + z_715)) && ($delta#initial > 0) && (z_711 > 0) && (z_715 > 0));
																																					:pid_77:cl = z_763;
																																					:pid_83:e = 0;
																																					:pid_83:k = 2;
																																					:pid_83:c = 0;
																																					:pid_83:tau = 4;
																																					:pid_83:tau_l = 4;
																																					:pid_83:tau_h = 8;
																																					:pid_83:t = t_1191;
																																					:pid_83:cl = 0;
																																					:pid_88:cl = (z_711 + z_715 + z_763);
																																				}
																																				EC:<Id:3119;Ev:207;H:36;W:2873>{ SC: ( pid_16:o#12 , ( pid_30:cp2 , pid_35:dp2 , pid_40:dp2 ) , ( pid_47:cp2 , pid_51:dp1 , pid_56:dp1 ) , ( pid_64:cp2 , pid_68:dp1 , pid_73:dp1 ) , ( pid_81:cp2 , pid_85:dp1 , pid_89:dp0 ) )
																					
																	EXE: { |;| 
	(:pid_76 , run) (:pid_77 , run) (:pid_80 , run) (:pid_80 , cp_sendCM) (:pid_2 , 
	run) (:pid_15 , run) (:pid_15 , n4_out_CM) }
																					
																	TRACE: { |;| 
	(:pid_76 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_775 }) 
	(:pid_80 , ${ output inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + 
	param::Trickle.Node.z_711 param::Trickle.Node.z_715 param::Trickle.Node.z_763 
	param::Trickle.Node.z_775 } } @ (z_711 + z_715 + z_763 + z_775)) }
																																					/*FLAGS{ COVERAGE-ELEMENT }*/
																																					INFO{
																																						<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#13->run::pid_16:Trickle.Observer.o#12->prot::Trickle.Observer.o#12" as trace="tpid#13->run::pid_16:Trickle.Observer.o#12->prot::Trickle.Observer.o#12">
																																					}
																																					DATA{
																																						:pid_2:uncoveredExit = 0;
																																						:pid_2:seqBuff[0] = 0;
																																						:pid_2:seqBuff[1] = 0;
																																						:pid_2:emit_time = (z_711 + z_715 + z_763 + z_775);
																																						:pid_76:$time = (z_711 + z_715 + z_763 + z_775);
																																						:pid_76:z = z_775;
																																						:pid_76:reach_DATA_EXPIR_DM2 = (e_7 == 2);
																																						:pid_76:localTime = (z_711 + z_715 + z_763 + z_775);
																																						:pid_76:localPC = ((t_630 < 4) && (t_636 < 4) && (t_1191 < 4) && (0 <= (t_630 + -2)) && (0 <= (t_636 + -2)) && (0 <= (t_1191 + -2)));
																																						:pid_76:localPtC = (((z_763 + z_775) == t_636) && (z_715 < t_630) && ((z_186 + z_198 + z_270 + z_62 + z_70) <= (z_711 + z_715)) && ($delta#initial > 0) && (z_711 > 0) && (z_715 > 0) && (z_763 > 0));
																																						:pid_77:cl = (z_763 + z_775);
																																						:pid_83:cl = z_775;
																																						:pid_88:cl = (z_711 + z_715 + z_763 + z_775);
																																					}
																																					BUFFER{
																																						:pid_42:bufferCM:<FIFO>#0{
																																							:pid_76:ControlMsg([ 0 , 0 ] , (z_711 + z_715 + z_763 + z_775));
																																						}
																																					}
																																					EC:<Id:3466;Ev:217;H:37;W:3259>{ SC: ( pid_17:o#13 , ( pid_30:cp2 , pid_35:dp2 , pid_40:dp2 ) , ( pid_47:cp2 , pid_52:dp2 , pid_56:dp1 ) , ( pid_64:cp2 , pid_68:dp1 , pid_73:dp1 ) , ( pid_81:cp2 , pid_85:dp1 , pid_89:dp0 ) )
																					
																		EXE: { |;| 
	(:pid_42 , run) (:pid_49 , run) (:pid_51 , run) (:pid_51 , dp_sendDM) (:pid_2 , 
	run) (:pid_16 , run) (:pid_16 , n2_out_DM) }
																					
																		TRACE: { |;| 
	(:pid_42 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_821 }) 
	(:pid_51 , ${ output inst::Trickle.Node.DataMsg1 [ 1 , 1 , 0 ] ${ + 
	param::Trickle.Node.z_141 param::Trickle.Node.z_165 param::Trickle.Node.z_273 
	param::Trickle.Node.z_305 param::Trickle.Node.z_33 param::Trickle.Node.z_337 
	param::Trickle.Node.z_405 param::Trickle.Node.z_441 param::Trickle.Node.z_45 
	param::Trickle.Node.z_473 param::Trickle.Node.z_493 param::Trickle.Node.z_529 
	param::Trickle.Node.z_821 } } @ (z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + 
	z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821)) }
																																						/*FLAGS{ COVERAGE-ELEMENT }*/
																																						INFO{
																																							<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#14->run::pid_17:Trickle.Observer.o#13->prot::Trickle.Observer.o#13" as trace="tpid#14->run::pid_17:Trickle.Observer.o#13->prot::Trickle.Observer.o#13">
																																						}
																																						DATA{
																																							:pid_2:uncoveredExit = 0;
																																							:pid_2:dataMessage.seq = 1;
																																							:pid_2:dataMessage.fragment = FRAGMENT_0;
																																							:pid_2:dataMessage.offset = 0;
																																							:pid_2:emit_time = (z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821);
																																							:pid_42:$time = (z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821);
																																							:pid_42:z = z_821;
																																							:pid_42:localTime = (z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821);
																																							:pid_42:localPC = ((t_242 < 8) && (t_33 < 4) && (t_44 < 4) && (t_249 < 4) && (t_452 < 4) && (t_759 < 4) && (t_839 < 4) && (0 <= (t_242 + -4)) && (0 <= (t_33 + -2)) && (0 <= (t_44 + -2)) && (0 <= (t_249 + -2)) && (0 <= (t_452 + -2)) && (0 <= (t_759 + -2)) && (0 <= (t_839 + -2)));
																																							:pid_42:localPtC = (((z_141 + z_165 + z_273 + z_305) == t_44) && ((z_141 + z_165 + z_273 + z_305 + z_337) == 4) && ((z_305 + z_337 + z_405 + z_441 + z_473 + z_493 + z_529 + z_821) == t_452) && (z_405 == t_242) && (z_473 == t_759) && ((z_165 + z_273) < t_249) && ((z_473 + z_493) < 4) && (z_165 < t_249) && (z_45 < t_33) && (z_529 < t_839) && ((z_0 + z_132 + z_20 + z_228 + z_4 + z_96) <= (z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529)) && ((z_0 + z_132 + z_20 + z_228 + z_4 + z_96) <= (z_141 + z_165 + z_273 + z_33 + z_45)) && ((z_0 + z_20 + z_4) <= (z_33 + z_45)) && ((z_0 + z_20 + z_4 + z_96) <= (z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493)) && ((z_0 + z_20 + z_4 + z_96) <= (z_141 + z_165 + z_33 + z_45)) && ((z_141 + z_165 + z_273 + z_305 + z_337) > t_44) && ($delta#initial > 0) && (z_141 > 0) && (z_165 > 0) && (z_273 > 0) && (z_305 > 0) && (z_33 > 0) && (z_337 > 0) && (z_405 > 0) && (z_441 > 0) && (z_45 > 0) && (z_473 > 0) && (z_493 > 0) && (z_529 > 0));
																																							:pid_43:cl = (z_405 + z_441 + z_473 + z_493 + z_529 + z_821);
																																							:pid_49:cl = (z_305 + z_337 + z_405 + z_441 + z_473 + z_493 + z_529 + z_821);
																																							:pid_54:cl = (z_529 + z_821);
																																						}
																																						BUFFER{
																																							:pid_59:bufferDM1:<FIFO>#1{
																																								:pid_42:DataMsg1([ 1 , 1 , 0 ] , (z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821));
																																							}
																																							:pid_59:bufferDM2:<FIFO>#2{
																																								:pid_42:DataMsg1([ 1 , 1 , 0 ] , (z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821));
																																							}
																																						}
																																						EC:<Id:3743;Ev:223;H:38;W:3526>{ SC: ( pid_18:o#14 , ( pid_30:cp2 , pid_35:dp2 , pid_40:dp2 ) , ( pid_47:cp2 , pid_52:dp2 , pid_56:dp1 ) , ( pid_64:cp2 , pid_68:dp1 , pid_73:dp1 ) , ( pid_81:cp2 , pid_85:dp1 , pid_89:dp0 ) )
																					
																			EXE: { 
	|;| (:pid_59 , run) (:pid_66 , run) (:pid_68 , run) (:pid_68 , 
	dp1_receiveDM_consistent) (:pid_2 , run) (:pid_17 , run) (:pid_17 , n3_in_DM) }
																					
																			TRACE: { 
	|;| (:pid_59 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_862 }) 
	(:pid_68 , ${ input inst::Trickle.Node.DataMsg1 [ 1 , 1 , 0 ] ${ + 
	param::Trickle.Node.z_141 param::Trickle.Node.z_165 param::Trickle.Node.z_273 
	param::Trickle.Node.z_305 param::Trickle.Node.z_33 param::Trickle.Node.z_337 
	param::Trickle.Node.z_405 param::Trickle.Node.z_441 param::Trickle.Node.z_45 
	param::Trickle.Node.z_473 param::Trickle.Node.z_493 param::Trickle.Node.z_529 
	param::Trickle.Node.z_821 } } @ (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + 
	z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862)) }
																																							/*FLAGS{ COVERAGE-ELEMENT }*/
																																							INFO{
																																								<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#15->run::pid_18:Trickle.Observer.o#14->prot::Trickle.Observer.o#14" as trace="tpid#15->run::pid_18:Trickle.Observer.o#14->prot::Trickle.Observer.o#14">
																																							}
																																							DATA{
																																								:pid_2:uncoveredExit = 0;
																																								:pid_59:$time = (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862);
																																								:pid_59:z = z_862;
																																								:pid_59:localTime = (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862);
																																								:pid_59:localPC = ((t_233 < 8) && (t_557 < 4) && (t_59 < 4) && (t_64 < 4) && (t_1002 < 4) && (t_325 < 4) && (t_662 < 4) && (t_934 < 4) && (0 <= (t_233 + -4)) && (0 <= (t_557 + -2)) && (0 <= (t_59 + -2)) && (0 <= (t_64 + -2)) && (0 <= (t_1002 + -2)) && (0 <= (t_325 + -2)) && (0 <= (t_662 + -2)) && (0 <= (t_934 + -2)));
																																								:pid_59:localPtC = (((z_186 + z_198 + z_270) == t_64) && ((z_186 + z_198 + z_270 + z_330) == 4) && ((z_386 + z_550 + z_570) == t_233) && (z_670 == t_557) && ((z_198 + z_270 + z_330 + z_386) < t_325) && ((z_386 + z_550 + z_570 + z_602 + z_622 + z_658) < 8) && ((z_550 + z_570 + z_602 + z_622 + z_658 + z_670 + z_862) < t_662) && ((z_570 + z_602) < t_934) && (z_198 < t_325) && (z_622 < t_1002) && (z_70 < t_59) && ((z_0 + z_132 + z_20 + z_228 + z_4 + z_96) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_70)) && ((z_0 + z_132 + z_20 + z_228 + z_4 + z_96) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_62 + z_70)) && ((z_0 + z_20 + z_4) <= (z_62 + z_70)) && ((z_0 + z_20 + z_4 + z_96) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_70)) && ((z_0 + z_20 + z_4 + z_96) <= (z_186 + z_198 + z_62 + z_70)) && ((z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862)) && ((z_141 + z_165 + z_273 + z_305 + z_33 + z_45) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_70)) && ((z_186 + z_198 + z_270 + z_330) > t_64) && ($delta#initial > 0) && (z_186 > 0) && (z_198 > 0) && (z_270 > 0) && (z_330 > 0) && (z_386 > 0) && (z_550 > 0) && (z_570 > 0) && (z_602 > 0) && (z_62 > 0) && (z_622 > 0) && (z_658 > 0) && (z_670 > 0) && (z_70 > 0));
																																								:pid_59:timeEmit = (z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821);
																																								:pid_60:cl = (z_670 + z_862);
																																								:pid_66:c = 1;
																																								:pid_66:consistent = true;
																																								:pid_66:cl = (z_550 + z_570 + z_602 + z_622 + z_658 + z_670 + z_862);
																																								:pid_66:d.seq = 1;
																																								:pid_66:d.fragment = FRAGMENT_0;
																																								:pid_66:d.offset = 0;
																																								:pid_71:cl = (z_622 + z_658 + z_670 + z_862);
																																							}
																																							BUFFER{
																																								:pid_59:bufferDM1:<FIFO>#1{ }
																																							}
																																							EC:<Id:3904;Ev:225;H:39;W:3681>{ SC: ( pid_18:o#14 , ( pid_30:cp2 , pid_35:dp2 , pid_40:dp2 ) , ( pid_47:cp2 , pid_52:dp2 , pid_56:dp1 ) , ( pid_64:cp2 , pid_68:dp1 , pid_73:dp1 ) , ( pid_80:cp1 , pid_85:dp1 , pid_89:dp0 ) )
																					
																				EXE: 
	{ |;| (:pid_76 , run) (:pid_77 , run) (:pid_81 , run) (:pid_81 , 
	cp2_receiveCM_inconsistent) (:pid_2 , run) }
																					
																				
	TRACE: { |;| (:pid_76 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_887 }) (:pid_81 , ${ input inst::Trickle.Node.ControlMsg [ 
	1 , 0 ] ${ + param::Trickle.Node.z_186 param::Trickle.Node.z_198 
	param::Trickle.Node.z_270 param::Trickle.Node.z_330 param::Trickle.Node.z_386 
	param::Trickle.Node.z_550 param::Trickle.Node.z_570 param::Trickle.Node.z_62 
	param::Trickle.Node.z_70 } } @ (z_711 + z_715 + z_763 + z_775 + z_887)) (:pid_81 
	, ${ newfresh inst::Trickle.Node.ControlProcess.t 
	param::Trickle.Node.ControlProcess.t_907 }) }
																					
																				NC: 
	((t_907 < 4) && (0 <= (t_907 + -2)))
																																								PC: ((t_233 < 8) && (t_242 < 8) && (t_33 < 4) && (t_44 < 4) && (t_557 < 4) && (t_59 
	< 4) && (t_630 < 4) && (t_636 < 4) && (t_64 < 4) && (t_8 < 4) && (t_907 < 4) && 
	(t_1002 < 4) && (t_1191 < 4) && (t_235 < 4) && (t_249 < 4) && (t_325 < 4) && 
	(t_452 < 4) && (t_662 < 4) && (t_759 < 4) && (t_8 < 4) && (t_839 < 4) && (t_934 
	< 4) && (0 <= (t_233 + -4)) && (0 <= (t_242 + -4)) && (0 <= (t_33 + -2)) && (0 
	<= (t_44 + -2)) && (0 <= (t_557 + -2)) && (0 <= (t_59 + -2)) && (0 <= (t_630 + 
	-2)) && (0 <= (t_636 + -2)) && (0 <= (t_64 + -2)) && (0 <= (t_8 + -2)) && (0 <= 
	(t_907 + -2)) && (0 <= (t_1002 + -2)) && (0 <= (t_1191 + -2)) && (0 <= (t_235 + 
	-2)) && (0 <= (t_249 + -2)) && (0 <= (t_325 + -2)) && (0 <= (t_452 + -2)) && (0 
	<= (t_662 + -2)) && (0 <= (t_759 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_839 + 
	-2)) && (0 <= (t_934 + -2)))
																																								DATA{
																																									:pid_2:uncoveredExit = 1;
																																									:pid_76:$time = (z_711 + z_715 + z_763 + z_775 + z_887);
																																									:pid_76:z = z_887;
																																									:pid_76:reach_DATA_EXPIR_DM2 = (e_7 == 2);
																																									:pid_76:localTime = (z_711 + z_715 + z_763 + z_775 + z_887);
																																									:pid_76:localPC = ((t_630 < 4) && (t_636 < 4) && (t_907 < 4) && (t_1191 < 4) && (0 <= (t_630 + -2)) && (0 <= (t_636 + -2)) && (0 <= (t_907 + -2)) && (0 <= (t_1191 + -2)));
																																									:pid_76:localPtC = (((z_763 + z_775) == t_636) && ((z_763 + z_775 + z_887) < 4) && (z_715 < t_630) && ((z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_62 + z_70) <= (z_711 + z_715 + z_763 + z_775 + z_887)) && ((z_186 + z_198 + z_270 + z_62 + z_70) <= (z_711 + z_715)) && ($delta#initial > 0) && (z_711 > 0) && (z_715 > 0) && (z_763 > 0) && (z_775 > 0));
																																									:pid_76:timeEmit = (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_62 + z_70);
																																									:pid_77:e = 0;
																																									:pid_77:c = 0;
																																									:pid_77:i = 2;
																																									:pid_77:t = t_907;
																																									:pid_77:cl = 0;
																																									:pid_83:cl = (z_775 + z_887);
																																									:pid_88:cl = (z_711 + z_715 + z_763 + z_775 + z_887);
																																								}
																																								BUFFER{
																																									:pid_76:bufferCM:<FIFO>#0{
																																										:pid_59:ControlMsg([ 1 , 1 ] , (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70));
																																									}
																																								}
																																								EC:<Id:3950;Ev:240;H:40;W:3681>{ SC: ( pid_19:o#15 , ( pid_30:cp2 , pid_35:dp2 , pid_40:dp2 ) , ( pid_47:cp2 , pid_52:dp2 , pid_56:dp1 ) , ( pid_64:cp2 , pid_68:dp1 , pid_73:dp1 ) , ( pid_81:cp2 , pid_85:dp1 , pid_89:dp0 ) )
																					
																					
	EXE: { |;| (:pid_76 , run) (:pid_77 , run) (:pid_80 , run) (:pid_80 , cp_sendCM) 
	(:pid_2 , run) (:pid_18 , run) (:pid_18 , n4_out_CM) }
																					
																					
	TRACE: { |;| (:pid_76 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_895 }) (:pid_80 , ${ output inst::Trickle.Node.ControlMsg 
	[ 0 , 0 ] ${ + param::Trickle.Node.z_711 param::Trickle.Node.z_715 
	param::Trickle.Node.z_763 param::Trickle.Node.z_775 param::Trickle.Node.z_887 
	param::Trickle.Node.z_895 } } @ (z_711 + z_715 + z_763 + z_775 + z_887 + z_895)) 
	}
																																									/*FLAGS{ COVERAGE-ELEMENT }*/
																																									INFO{
																																										<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#16->run::pid_19:Trickle.Observer.o#15->prot::Trickle.Observer.o#15" as trace="tpid#16->run::pid_19:Trickle.Observer.o#15->prot::Trickle.Observer.o#15">
																																									}
																																									DATA{
																																										:pid_2:uncoveredExit = 0;
																																										:pid_2:emit_time = (z_711 + z_715 + z_763 + z_775 + z_887 + z_895);
																																										:pid_76:$time = (z_711 + z_715 + z_763 + z_775 + z_887 + z_895);
																																										:pid_76:z = z_895;
																																										:pid_76:reach_DATA_EXPIR_DM2 = (e_7 == 2);
																																										:pid_76:localTime = (z_711 + z_715 + z_763 + z_775 + z_887 + z_895);
																																										:pid_76:localPC = ((t_630 < 4) && (t_636 < 4) && (t_907 < 4) && (t_1191 < 4) && (0 <= (t_630 + -2)) && (0 <= (t_636 + -2)) && (0 <= (t_907 + -2)) && (0 <= (t_1191 + -2)));
																																										:pid_76:localPtC = (((z_763 + z_775) == t_636) && (z_895 == t_907) && ((z_763 + z_775 + z_887) < 4) && (z_715 < t_630) && ((z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_62 + z_70) <= (z_711 + z_715 + z_763 + z_775 + z_887)) && ((z_186 + z_198 + z_270 + z_62 + z_70) <= (z_711 + z_715)) && ($delta#initial > 0) && (z_711 > 0) && (z_715 > 0) && (z_763 > 0) && (z_775 > 0) && (z_887 > 0));
																																										:pid_77:cl = z_895;
																																										:pid_83:cl = (z_775 + z_887 + z_895);
																																										:pid_88:cl = (z_711 + z_715 + z_763 + z_775 + z_887 + z_895);
																																									}
																																									BUFFER{
																																										:pid_42:bufferCM:<FIFO>#0{
																																											:pid_76:ControlMsg([ 0 , 0 ] , (z_711 + z_715 + z_763 + z_775));
																																											:pid_76:ControlMsg([ 0 , 0 ] , (z_711 + z_715 + z_763 + z_775 + z_887 + z_895));
																																										}
																																									}
																																									EC:<Id:4443;Ev:251;H:41;W:4203>{ SC: ( pid_19:o#15 , ( pid_30:cp2 , pid_35:dp2 , pid_40:dp2 ) , ( pid_47:cp2 , pid_51:dp1 , pid_56:dp1 ) , ( pid_64:cp2 , pid_68:dp1 , pid_73:dp1 ) , ( pid_81:cp2 , pid_85:dp1 , pid_89:dp0 ) )
																					
																						
	EXE: { |;| (:pid_42 , run) (:pid_49 , run) (:pid_52 , run) (:pid_52 , 
	dp_resetTau) (:pid_2 , run) }
																					
																						
	TRACE: { |;| (:pid_42 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_953 }) (:pid_52 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_1399 }) }
																					
																						
	NC: ((t_1399 < 8) && (0 <= (t_1399 + -4)))
																																										PC: ((t_233 < 8) && (t_242 < 8) && (t_33 < 4) && (t_44 < 4) && (t_557 < 4) && (t_59 
	< 4) && (t_630 < 4) && (t_636 < 4) && (t_64 < 4) && (t_8 < 4) && (t_907 < 4) && 
	(t_1002 < 4) && (t_1191 < 4) && (t_1399 < 8) && (t_235 < 4) && (t_249 < 4) && 
	(t_325 < 4) && (t_452 < 4) && (t_662 < 4) && (t_759 < 4) && (t_8 < 4) && (t_839 
	< 4) && (t_934 < 4) && (0 <= (t_233 + -4)) && (0 <= (t_242 + -4)) && (0 <= (t_33 
	+ -2)) && (0 <= (t_44 + -2)) && (0 <= (t_557 + -2)) && (0 <= (t_59 + -2)) && (0 
	<= (t_630 + -2)) && (0 <= (t_636 + -2)) && (0 <= (t_64 + -2)) && (0 <= (t_8 + -2)
	) && (0 <= (t_907 + -2)) && (0 <= (t_1002 + -2)) && (0 <= (t_1191 + -2)) && (0 
	<= (t_1399 + -4)) && (0 <= (t_235 + -2)) && (0 <= (t_249 + -2)) && (0 <= (t_325 
	+ -2)) && (0 <= (t_452 + -2)) && (0 <= (t_662 + -2)) && (0 <= (t_759 + -2)) && 
	(0 <= (t_8 + -2)) && (0 <= (t_839 + -2)) && (0 <= (t_934 + -2)))
																																										DATA{
																																											:pid_2:uncoveredExit = 1;
																																											:pid_42:$time = (z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821 + z_953);
																																											:pid_42:z = z_953;
																																											:pid_42:localTime = (z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821 + z_953);
																																											:pid_42:localPC = ((t_242 < 8) && (t_33 < 4) && (t_44 < 4) && (t_1399 < 8) && (t_249 < 4) && (t_452 < 4) && (t_759 < 4) && (t_839 < 4) && (0 <= (t_242 + -4)) && (0 <= (t_33 + -2)) && (0 <= (t_44 + -2)) && (0 <= (t_1399 + -4)) && (0 <= (t_249 + -2)) && (0 <= (t_452 + -2)) && (0 <= (t_759 + -2)) && (0 <= (t_839 + -2)));
																																											:pid_42:localPtC = (((z_141 + z_165 + z_273 + z_305) == t_44) && ((z_141 + z_165 + z_273 + z_305 + z_337) == 4) && ((z_305 + z_337 + z_405 + z_441 + z_473 + z_493 + z_529 + z_821) == t_452) && ((z_305 + z_337 + z_405 + z_441 + z_473 + z_493 + z_529 + z_821 + z_953) == 4) && (z_405 == t_242) && (z_473 == t_759) && ((z_165 + z_273) < t_249) && ((z_473 + z_493) < 4) && (z_165 < t_249) && (z_45 < t_33) && (z_529 < t_839) && ((z_0 + z_132 + z_20 + z_228 + z_4 + z_96) <= (z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529)) && ((z_0 + z_132 + z_20 + z_228 + z_4 + z_96) <= (z_141 + z_165 + z_273 + z_33 + z_45)) && ((z_0 + z_20 + z_4) <= (z_33 + z_45)) && ((z_0 + z_20 + z_4 + z_96) <= (z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493)) && ((z_0 + z_20 + z_4 + z_96) <= (z_141 + z_165 + z_33 + z_45)) && ((z_141 + z_165 + z_273 + z_305 + z_337) > t_44) && ((z_305 + z_337 + z_405 + z_441 + z_473 + z_493 + z_529 + z_821 + z_953) > t_452) && ($delta#initial > 0) && (z_141 > 0) && (z_165 > 0) && (z_273 > 0) && (z_305 > 0) && (z_33 > 0) && (z_337 > 0) && (z_405 > 0) && (z_441 > 0) && (z_45 > 0) && (z_473 > 0) && (z_493 > 0) && (z_529 > 0) && (z_821 > 0));
																																											:pid_43:cl = (z_405 + z_441 + z_473 + z_493 + z_529 + z_821 + z_953);
																																											:pid_49:e = 1;
																																											:pid_49:c = 0;
																																											:pid_49:tau = 8;
																																											:pid_49:t = t_1399;
																																											:pid_49:cl = 0;
																																											:pid_54:cl = (z_529 + z_821 + z_953);
																																										}
																																										EC:<Id:4783;Ev:257;H:42;W:4532>{ SC: ( pid_20:o#16 , ( pid_30:cp2 , pid_35:dp2 , pid_40:dp2 ) , ( pid_47:cp2 , pid_52:dp2 , pid_56:dp1 ) , ( pid_64:cp2 , pid_68:dp1 , pid_73:dp1 ) , ( pid_81:cp2 , pid_85:dp1 , pid_89:dp0 ) )
																					
																						
		EXE: { |;| (:pid_42 , run) (:pid_49 , run) (:pid_51 , run) (:pid_51 , 
	dp_sendDM) (:pid_2 , run) (:pid_19 , run) (:pid_19 , n2_out_DM) }
																					
																						
		TRACE: { |;| (:pid_42 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_997 }) (:pid_51 , ${ output inst::Trickle.Node.DataMsg1 [ 
	1 , 1 , 0 ] ${ + param::Trickle.Node.z_141 param::Trickle.Node.z_165 
	param::Trickle.Node.z_273 param::Trickle.Node.z_305 param::Trickle.Node.z_33 
	param::Trickle.Node.z_337 param::Trickle.Node.z_405 param::Trickle.Node.z_441 
	param::Trickle.Node.z_45 param::Trickle.Node.z_473 param::Trickle.Node.z_493 
	param::Trickle.Node.z_529 param::Trickle.Node.z_821 param::Trickle.Node.z_953 
	param::Trickle.Node.z_997 } } @ (z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + 
	z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821 + z_953 + z_997)) }
																																											/*FLAGS{ COVERAGE-ELEMENT }*/
																																											INFO{
																																												<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#17->run::pid_20:Trickle.Observer.o#16->prot::Trickle.Observer.o#16" as trace="tpid#17->run::pid_20:Trickle.Observer.o#16->prot::Trickle.Observer.o#16">
																																											}
																																											DATA{
																																												:pid_2:uncoveredExit = 0;
																																												:pid_2:emit_time = (z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821 + z_953 + z_997);
																																												:pid_42:$time = (z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821 + z_953 + z_997);
																																												:pid_42:z = z_997;
																																												:pid_42:localTime = (z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821 + z_953 + z_997);
																																												:pid_42:localPC = ((t_242 < 8) && (t_33 < 4) && (t_44 < 4) && (t_1399 < 8) && (t_249 < 4) && (t_452 < 4) && (t_759 < 4) && (t_839 < 4) && (0 <= (t_242 + -4)) && (0 <= (t_33 + -2)) && (0 <= (t_44 + -2)) && (0 <= (t_1399 + -4)) && (0 <= (t_249 + -2)) && (0 <= (t_452 + -2)) && (0 <= (t_759 + -2)) && (0 <= (t_839 + -2)));
																																												:pid_42:localPtC = (((z_141 + z_165 + z_273 + z_305) == t_44) && ((z_141 + z_165 + z_273 + z_305 + z_337) == 4) && ((z_305 + z_337 + z_405 + z_441 + z_473 + z_493 + z_529 + z_821) == t_452) && ((z_305 + z_337 + z_405 + z_441 + z_473 + z_493 + z_529 + z_821 + z_953) == 4) && (z_405 == t_242) && (z_473 == t_759) && (z_997 == t_1399) && ((z_165 + z_273) < t_249) && ((z_473 + z_493) < 4) && (z_165 < t_249) && (z_45 < t_33) && (z_529 < t_839) && ((z_0 + z_132 + z_20 + z_228 + z_4 + z_96) <= (z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529)) && ((z_0 + z_132 + z_20 + z_228 + z_4 + z_96) <= (z_141 + z_165 + z_273 + z_33 + z_45)) && ((z_0 + z_20 + z_4) <= (z_33 + z_45)) && ((z_0 + z_20 + z_4 + z_96) <= (z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493)) && ((z_0 + z_20 + z_4 + z_96) <= (z_141 + z_165 + z_33 + z_45)) && ((z_141 + z_165 + z_273 + z_305 + z_337) > t_44) && ((z_305 + z_337 + z_405 + z_441 + z_473 + z_493 + z_529 + z_821 + z_953) > t_452) && ($delta#initial > 0) && (z_141 > 0) && (z_165 > 0) && (z_273 > 0) && (z_305 > 0) && (z_33 > 0) && (z_337 > 0) && (z_405 > 0) && (z_441 > 0) && (z_45 > 0) && (z_473 > 0) && (z_493 > 0) && (z_529 > 0) && (z_821 > 0) && (z_953 > 0));
																																												:pid_43:cl = (z_405 + z_441 + z_473 + z_493 + z_529 + z_821 + z_953 + z_997);
																																												:pid_49:cl = z_997;
																																												:pid_54:cl = (z_529 + z_821 + z_953 + z_997);
																																											}
																																											BUFFER{
																																												:pid_59:bufferDM1:<FIFO>#1{
																																													:pid_42:DataMsg1([ 1 , 1 , 0 ] , (z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821 + z_953 + z_997));
																																												}
																																												:pid_59:bufferDM2:<FIFO>#2{
																																													:pid_42:DataMsg1([ 1 , 1 , 0 ] , (z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821));
																																													:pid_42:DataMsg1([ 1 , 1 , 0 ] , (z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821 + z_953 + z_997));
																																												}
																																											}
																																											EC:<Id:4972;Ev:264;H:43;W:4715>{ SC: ( pid_21:o#17 , ( pid_30:cp2 , pid_35:dp2 , pid_40:dp2 ) , ( pid_47:cp2 , pid_52:dp2 , pid_56:dp1 ) , ( pid_64:cp2 , pid_68:dp1 , pid_73:dp1 ) , ( pid_81:cp2 , pid_85:dp1 , pid_89:dp0 ) )
																					
																						
			EXE: { |;| (:pid_59 , run) (:pid_66 , run) (:pid_68 , run) (:pid_68 , 
	dp1_receiveDM_consistent) (:pid_2 , run) (:pid_20 , run) (:pid_20 , n3_in_DM) }
																					
																						
			TRACE: { |;| (:pid_59 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_1022 }) (:pid_68 , ${ input inst::Trickle.Node.DataMsg1 [ 
	1 , 1 , 0 ] ${ + param::Trickle.Node.z_141 param::Trickle.Node.z_165 
	param::Trickle.Node.z_273 param::Trickle.Node.z_305 param::Trickle.Node.z_33 
	param::Trickle.Node.z_337 param::Trickle.Node.z_405 param::Trickle.Node.z_441 
	param::Trickle.Node.z_45 param::Trickle.Node.z_473 param::Trickle.Node.z_493 
	param::Trickle.Node.z_529 param::Trickle.Node.z_821 param::Trickle.Node.z_953 
	param::Trickle.Node.z_997 } } @ (z_1022 + z_186 + z_198 + z_270 + z_330 + z_386 
	+ z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862)) }
																																												/*FLAGS{ COVERAGE-ELEMENT }*/
																																												INFO{
																																													<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#18->run::pid_21:Trickle.Observer.o#17->prot::Trickle.Observer.o#17" as trace="tpid#18->run::pid_21:Trickle.Observer.o#17->prot::Trickle.Observer.o#17">
																																												}
																																												DATA{
																																													:pid_2:uncoveredExit = 0;
																																													:pid_59:$time = (z_1022 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862);
																																													:pid_59:z = z_1022;
																																													:pid_59:localTime = (z_1022 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862);
																																													:pid_59:localPC = ((t_233 < 8) && (t_557 < 4) && (t_59 < 4) && (t_64 < 4) && (t_1002 < 4) && (t_325 < 4) && (t_662 < 4) && (t_934 < 4) && (0 <= (t_233 + -4)) && (0 <= (t_557 + -2)) && (0 <= (t_59 + -2)) && (0 <= (t_64 + -2)) && (0 <= (t_1002 + -2)) && (0 <= (t_325 + -2)) && (0 <= (t_662 + -2)) && (0 <= (t_934 + -2)));
																																													:pid_59:localPtC = (((z_186 + z_198 + z_270) == t_64) && ((z_186 + z_198 + z_270 + z_330) == 4) && ((z_386 + z_550 + z_570) == t_233) && (z_670 == t_557) && ((z_1022 + z_550 + z_570 + z_602 + z_622 + z_658 + z_670 + z_862) < t_662) && ((z_198 + z_270 + z_330 + z_386) < t_325) && ((z_386 + z_550 + z_570 + z_602 + z_622 + z_658) < 8) && ((z_550 + z_570 + z_602 + z_622 + z_658 + z_670 + z_862) < t_662) && ((z_570 + z_602) < t_934) && (z_198 < t_325) && (z_622 < t_1002) && (z_70 < t_59) && ((z_0 + z_132 + z_20 + z_228 + z_4 + z_96) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_70)) && ((z_0 + z_132 + z_20 + z_228 + z_4 + z_96) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_62 + z_70)) && ((z_0 + z_20 + z_4) <= (z_62 + z_70)) && ((z_0 + z_20 + z_4 + z_96) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_70)) && ((z_0 + z_20 + z_4 + z_96) <= (z_186 + z_198 + z_62 + z_70)) && ((z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862)) && ((z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821 + z_953 + z_997) <= (z_1022 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862)) && ((z_141 + z_165 + z_273 + z_305 + z_33 + z_45) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_70)) && ((z_186 + z_198 + z_270 + z_330) > t_64) && ($delta#initial > 0) && (z_186 > 0) && (z_198 > 0) && (z_270 > 0) && (z_330 > 0) && (z_386 > 0) && (z_550 > 0) && (z_570 > 0) && (z_602 > 0) && (z_62 > 0) && (z_622 > 0) && (z_658 > 0) && (z_670 > 0) && (z_70 > 0) && (z_862 > 0));
																																													:pid_59:timeEmit = (z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821 + z_953 + z_997);
																																													:pid_60:cl = (z_1022 + z_670 + z_862);
																																													:pid_66:c = 2;
																																													:pid_66:cl = (z_1022 + z_550 + z_570 + z_602 + z_622 + z_658 + z_670 + z_862);
																																													:pid_71:cl = (z_1022 + z_622 + z_658 + z_670 + z_862);
																																												}
																																												BUFFER{
																																													:pid_59:bufferDM1:<FIFO>#1{ }
																																												}
																																												EC:<Id:5185;Ev:275;H:44;W:4715>{ SC: ( pid_21:o#17 , ( pid_30:cp2 , pid_35:dp2 , pid_40:dp2 ) , ( pid_47:cp2 , pid_52:dp2 , pid_56:dp1 ) , ( pid_64:cp2 , pid_68:dp1 , pid_73:dp1 ) , ( pid_80:cp1 , pid_85:dp1 , pid_89:dp0 ) )
																					
																						
				EXE: { |;| (:pid_76 , run) (:pid_77 , run) (:pid_81 , run) (:pid_81 
	, cp_resetTau) (:pid_2 , run) }
																					
																						
				TRACE: { |;| (:pid_76 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_1051 }) (:pid_81 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_1206 }) 
	}
																					
																						
				NC: ((t_1206 < 8) && (0 <= (t_1206 + -4)))
																																													PC: ((t_1206 < 8) && (t_233 < 8) && (t_242 < 8) && (t_33 < 4) && (t_44 < 4) && 
	(t_557 < 4) && (t_59 < 4) && (t_630 < 4) && (t_636 < 4) && (t_64 < 4) && (t_8 < 
	4) && (t_907 < 4) && (t_1002 < 4) && (t_1191 < 4) && (t_1399 < 8) && (t_235 < 4) 
	&& (t_249 < 4) && (t_325 < 4) && (t_452 < 4) && (t_662 < 4) && (t_759 < 4) && 
	(t_8 < 4) && (t_839 < 4) && (t_934 < 4) && (0 <= (t_1206 + -4)) && (0 <= (t_233 
	+ -4)) && (0 <= (t_242 + -4)) && (0 <= (t_33 + -2)) && (0 <= (t_44 + -2)) && (0 
	<= (t_557 + -2)) && (0 <= (t_59 + -2)) && (0 <= (t_630 + -2)) && (0 <= (t_636 + 
	-2)) && (0 <= (t_64 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_907 + -2)) && (0 <= 
	(t_1002 + -2)) && (0 <= (t_1191 + -2)) && (0 <= (t_1399 + -4)) && (0 <= (t_235 + 
	-2)) && (0 <= (t_249 + -2)) && (0 <= (t_325 + -2)) && (0 <= (t_452 + -2)) && (0 
	<= (t_662 + -2)) && (0 <= (t_759 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_839 + 
	-2)) && (0 <= (t_934 + -2)))
																																													DATA{
																																														:pid_2:uncoveredExit = 1;
																																														:pid_76:$time = (z_1051 + z_711 + z_715 + z_763 + z_775 + z_887 + z_895);
																																														:pid_76:z = z_1051;
																																														:pid_76:reach_DATA_EXPIR_DM2 = (e_7 == 2);
																																														:pid_76:localTime = (z_1051 + z_711 + z_715 + z_763 + z_775 + z_887 + z_895);
																																														:pid_76:localPC = ((t_1206 < 8) && (t_630 < 4) && (t_636 < 4) && (t_907 < 4) && (t_1191 < 4) && (0 <= (t_1206 + -4)) && (0 <= (t_630 + -2)) && (0 <= (t_636 + -2)) && (0 <= (t_907 + -2)) && (0 <= (t_1191 + -2)));
																																														:pid_76:localPtC = (((z_1051 + z_895) == 4) && ((z_763 + z_775) == t_636) && (z_895 == t_907) && ((z_763 + z_775 + z_887) < 4) && (z_715 < t_630) && ((z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_62 + z_70) <= (z_711 + z_715 + z_763 + z_775 + z_887)) && ((z_186 + z_198 + z_270 + z_62 + z_70) <= (z_711 + z_715)) && ((z_1051 + z_895) > t_907) && ($delta#initial > 0) && (z_711 > 0) && (z_715 > 0) && (z_763 > 0) && (z_775 > 0) && (z_887 > 0) && (z_895 > 0));
																																														:pid_77:e = 1;
																																														:pid_77:c = 0;
																																														:pid_77:tau = 8;
																																														:pid_77:t = t_1206;
																																														:pid_77:cl = 0;
																																														:pid_83:cl = (z_1051 + z_775 + z_887 + z_895);
																																														:pid_88:cl = (z_1051 + z_711 + z_715 + z_763 + z_775 + z_887 + z_895);
																																													}
																																													EC:<Id:5548;Ev:291;H:45;W:5273>{ SC: ( pid_21:o#17 , ( pid_30:cp2 , pid_35:dp2 , pid_39:dp1 ) , ( pid_47:cp2 , pid_52:dp2 , pid_56:dp1 ) , ( pid_64:cp2 , pid_68:dp1 , pid_73:dp1 ) , ( pid_80:cp1 , pid_85:dp1 , pid_89:dp0 ) )
																					
																						
					EXE: { |;| (:pid_25 , run) (:pid_37 , run) (:pid_40 , run) 
	(:pid_40 , dp_resetTau) (:pid_2 , run) }
																					
																						
					TRACE: { |;| (:pid_25 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_1092 }) (:pid_40 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_1579 }) }
																					
																						
					NC: ((t_1579 < 8) && (0 <= (t_1579 + -4)))
																																														PC: ((t_1206 < 8) && (t_233 < 8) && (t_242 < 8) && (t_33 < 4) && (t_44 < 4) && 
	(t_557 < 4) && (t_59 < 4) && (t_630 < 4) && (t_636 < 4) && (t_64 < 4) && (t_8 < 
	4) && (t_907 < 4) && (t_1002 < 4) && (t_1191 < 4) && (t_1399 < 8) && (t_1579 < 8)
	 && (t_235 < 4) && (t_249 < 4) && (t_325 < 4) && (t_452 < 4) && (t_662 < 4) && 
	(t_759 < 4) && (t_8 < 4) && (t_839 < 4) && (t_934 < 4) && (0 <= (t_1206 + -4)) 
	&& (0 <= (t_233 + -4)) && (0 <= (t_242 + -4)) && (0 <= (t_33 + -2)) && (0 <= 
	(t_44 + -2)) && (0 <= (t_557 + -2)) && (0 <= (t_59 + -2)) && (0 <= (t_630 + -2)) 
	&& (0 <= (t_636 + -2)) && (0 <= (t_64 + -2)) && (0 <= (t_8 + -2)) && (0 <= 
	(t_907 + -2)) && (0 <= (t_1002 + -2)) && (0 <= (t_1191 + -2)) && (0 <= (t_1399 + 
	-4)) && (0 <= (t_1579 + -4)) && (0 <= (t_235 + -2)) && (0 <= (t_249 + -2)) && (0 
	<= (t_325 + -2)) && (0 <= (t_452 + -2)) && (0 <= (t_662 + -2)) && (0 <= (t_759 + 
	-2)) && (0 <= (t_8 + -2)) && (0 <= (t_839 + -2)) && (0 <= (t_934 + -2)))
																																														DATA{
																																															:pid_2:uncoveredExit = 2;
																																															:pid_25:$time = (z_0 + z_1092 + z_132 + z_20 + z_228 + z_4 + z_96);
																																															:pid_25:z = z_1092;
																																															:pid_25:localTime = (z_0 + z_1092 + z_132 + z_20 + z_228 + z_4 + z_96);
																																															:pid_25:localPC = ((t_8 < 4) && (t_1579 < 8) && (t_235 < 4) && (t_8 < 4) && (0 <= (t_8 + -2)) && (0 <= (t_1579 + -4)) && (0 <= (t_235 + -2)) && (0 <= (t_8 + -2)));
																																															:pid_25:localPtC = (((z_1092 + z_228) == 4) && ((z_20 + z_4 + z_96) == t_8) && (z_20 == t_8) && (z_228 == t_235) && ((z_1092 + z_228) > t_235) && ($delta#initial > 0) && (z_0 > 0) && (z_132 > 0) && (z_20 > 0) && (z_228 > 0) && (z_4 > 0) && (z_96 > 0));
																																															:pid_26:cl = (z_1092 + z_132 + z_20 + z_228 + z_96);
																																															:pid_32:cl = (z_1092 + z_132 + z_20 + z_228 + z_4 + z_96);
																																															:pid_37:e = 1;
																																															:pid_37:c = 0;
																																															:pid_37:tau = 8;
																																															:pid_37:t = t_1579;
																																															:pid_37:cl = 0;
																																														}
																																														EC:<Id:5808;Ev:292;H:46;W:5517>{ SC: ( pid_21:o#17 , ( pid_30:cp2 , pid_35:dp2 , pid_39:dp1 ) , ( pid_47:cp2 , pid_52:dp2 , pid_56:dp1 ) , ( pid_64:cp2 , pid_68:dp1 , pid_73:dp1 ) , ( pid_80:cp1 , pid_86:dp2 , pid_89:dp0 ) )
																					
																						
						EXE: { |;| (:pid_76 , run) (:pid_83 , run) (:pid_85 , run) 
	(:pid_85 , dp1_reach_k) (:pid_2 , run) }
																					
																						
						TRACE: (:pid_76 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_1159 })
																																															DATA{
																																																:pid_2:uncoveredExit = 3;
																																																:pid_76:$time = (z_1051 + z_1159 + z_711 + z_715 + z_763 + z_775 + z_887 + z_895);
																																																:pid_76:z = z_1159;
																																																:pid_76:reach_DATA_EXPIR_DM2 = (e_7 == 2);
																																																:pid_76:localTime = (z_1051 + z_1159 + z_711 + z_715 + z_763 + z_775 + z_887 + z_895);
																																																:pid_76:localPC = ((t_1206 < 8) && (t_630 < 4) && (t_636 < 4) && (t_907 < 4) && (t_1191 < 4) && (0 <= (t_1206 + -4)) && (0 <= (t_630 + -2)) && (0 <= (t_636 + -2)) && (0 <= (t_907 + -2)) && (0 <= (t_1191 + -2)));
																																																:pid_76:localPtC = (((z_1051 + z_1159 + z_775 + z_887 + z_895) == t_1191) && ((z_1051 + z_895) == 4) && ((z_763 + z_775) == t_636) && (z_895 == t_907) && ((z_763 + z_775 + z_887) < 4) && (z_715 < t_630) && ((z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_62 + z_70) <= (z_711 + z_715 + z_763 + z_775 + z_887)) && ((z_186 + z_198 + z_270 + z_62 + z_70) <= (z_711 + z_715)) && ((z_1051 + z_895) > t_907) && ($delta#initial > 0) && (z_1051 > 0) && (z_711 > 0) && (z_715 > 0) && (z_763 > 0) && (z_775 > 0) && (z_887 > 0) && (z_895 > 0));
																																																:pid_77:cl = z_1159;
																																																:pid_83:cl = (z_1051 + z_1159 + z_775 + z_887 + z_895);
																																																:pid_88:cl = (z_1051 + z_1159 + z_711 + z_715 + z_763 + z_775 + z_887 + z_895);
																																															}
																																															EC:<Id:5832;Ev:303;H:47;W:5540>{ SC: ( pid_21:o#17 , ( pid_30:cp2 , pid_35:dp2 , pid_39:dp1 ) , ( pid_47:cp2 , pid_51:dp1 , pid_56:dp1 ) , ( pid_64:cp2 , pid_68:dp1 , pid_73:dp1 ) , ( pid_80:cp1 , pid_86:dp2 , pid_89:dp0 ) )
																					
																						
							EXE: { |;| (:pid_42 , run) (:pid_49 , run) (:pid_52 , 
	run) (:pid_52 , dp_resetTau) (:pid_2 , run) }
																					
																						
							TRACE: { |;| (:pid_42 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_1161 }) (:pid_52 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_1667 }) }
																					
																						
							NC: ((t_1667 < 8) && (0 <= (t_1667 + -4)))
																																																PC: ((t_1206 < 8) && (t_233 < 8) && (t_242 < 8) && (t_33 < 4) && (t_44 < 4) && 
	(t_557 < 4) && (t_59 < 4) && (t_630 < 4) && (t_636 < 4) && (t_64 < 4) && (t_8 < 
	4) && (t_907 < 4) && (t_1002 < 4) && (t_1191 < 4) && (t_1399 < 8) && (t_1579 < 8)
	 && (t_1667 < 8) && (t_235 < 4) && (t_249 < 4) && (t_325 < 4) && (t_452 < 4) && 
	(t_662 < 4) && (t_759 < 4) && (t_8 < 4) && (t_839 < 4) && (t_934 < 4) && (0 <= 
	(t_1206 + -4)) && (0 <= (t_233 + -4)) && (0 <= (t_242 + -4)) && (0 <= (t_33 + -2)
	) && (0 <= (t_44 + -2)) && (0 <= (t_557 + -2)) && (0 <= (t_59 + -2)) && (0 <= 
	(t_630 + -2)) && (0 <= (t_636 + -2)) && (0 <= (t_64 + -2)) && (0 <= (t_8 + -2)) 
	&& (0 <= (t_907 + -2)) && (0 <= (t_1002 + -2)) && (0 <= (t_1191 + -2)) && (0 <= 
	(t_1399 + -4)) && (0 <= (t_1579 + -4)) && (0 <= (t_1667 + -4)) && (0 <= (t_235 + 
	-2)) && (0 <= (t_249 + -2)) && (0 <= (t_325 + -2)) && (0 <= (t_452 + -2)) && (0 
	<= (t_662 + -2)) && (0 <= (t_759 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_839 + 
	-2)) && (0 <= (t_934 + -2)))
																																																DATA{
																																																	:pid_2:uncoveredExit = 4;
																																																	:pid_42:$time = (z_1161 + z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821 + z_953 + z_997);
																																																	:pid_42:z = z_1161;
																																																	:pid_42:reach_DATA_EXPIR_DM1 = true;
																																																	:pid_42:localTime = (z_1161 + z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821 + z_953 + z_997);
																																																	:pid_42:localPC = ((t_242 < 8) && (t_33 < 4) && (t_44 < 4) && (t_1399 < 8) && (t_1667 < 8) && (t_249 < 4) && (t_452 < 4) && (t_759 < 4) && (t_839 < 4) && (0 <= (t_242 + -4)) && (0 <= (t_33 + -2)) && (0 <= (t_44 + -2)) && (0 <= (t_1399 + -4)) && (0 <= (t_1667 + -4)) && (0 <= (t_249 + -2)) && (0 <= (t_452 + -2)) && (0 <= (t_759 + -2)) && (0 <= (t_839 + -2)));
																																																	:pid_42:localPtC = (((z_1161 + z_997) == 8) && ((z_141 + z_165 + z_273 + z_305) == t_44) && ((z_141 + z_165 + z_273 + z_305 + z_337) == 4) && ((z_305 + z_337 + z_405 + z_441 + z_473 + z_493 + z_529 + z_821) == t_452) && ((z_305 + z_337 + z_405 + z_441 + z_473 + z_493 + z_529 + z_821 + z_953) == 4) && (z_405 == t_242) && (z_473 == t_759) && (z_997 == t_1399) && ((z_165 + z_273) < t_249) && ((z_473 + z_493) < 4) && (z_165 < t_249) && (z_45 < t_33) && (z_529 < t_839) && ((z_0 + z_132 + z_20 + z_228 + z_4 + z_96) <= (z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529)) && ((z_0 + z_132 + z_20 + z_228 + z_4 + z_96) <= (z_141 + z_165 + z_273 + z_33 + z_45)) && ((z_0 + z_20 + z_4) <= (z_33 + z_45)) && ((z_0 + z_20 + z_4 + z_96) <= (z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493)) && ((z_0 + z_20 + z_4 + z_96) <= (z_141 + z_165 + z_33 + z_45)) && ((z_1161 + z_997) > t_1399) && ((z_141 + z_165 + z_273 + z_305 + z_337) > t_44) && ((z_305 + z_337 + z_405 + z_441 + z_473 + z_493 + z_529 + z_821 + z_953) > t_452) && ($delta#initial > 0) && (z_141 > 0) && (z_165 > 0) && (z_273 > 0) && (z_305 > 0) && (z_33 > 0) && (z_337 > 0) && (z_405 > 0) && (z_441 > 0) && (z_45 > 0) && (z_473 > 0) && (z_493 > 0) && (z_529 > 0) && (z_821 > 0) && (z_953 > 0) && (z_997 > 0));
																																																	:pid_43:cl = (z_1161 + z_405 + z_441 + z_473 + z_493 + z_529 + z_821 + z_953 + z_997);
																																																	:pid_49:e = 2;
																																																	:pid_49:tau = 8;
																																																	:pid_49:t = t_1667;
																																																	:pid_49:cl = 0;
																																																	:pid_54:cl = (z_1161 + z_529 + z_821 + z_953 + z_997);
																																																}
																																																EC:<Id:6010;Ev:309;H:48;W:5707>{ SC: ( pid_21:o#17 , ( pid_29:cp1 , pid_35:dp2 , pid_39:dp1 ) , ( pid_47:cp2 , pid_51:dp1 , pid_56:dp1 ) , ( pid_64:cp2 , pid_68:dp1 , pid_73:dp1 ) , ( pid_80:cp1 , pid_86:dp2 , pid_89:dp0 ) )
																					
																						
								EXE: { |;| (:pid_25 , run) (:pid_26 , run) (:pid_30 
	, run) (:pid_30 , cp_resetTau) (:pid_2 , run) }
																					
																						
								TRACE: { |;| (:pid_25 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1204 }) (:pid_30 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_1465 }) 
	}
																					
																						
								NC: ((t_1465 < 8) && (0 <= (t_1465 + -4)))
																																																	PC: ((t_1206 < 8) && (t_1465 < 8) && (t_233 < 8) && (t_242 < 8) && (t_33 < 4) && 
	(t_44 < 4) && (t_557 < 4) && (t_59 < 4) && (t_630 < 4) && (t_636 < 4) && (t_64 < 
	4) && (t_8 < 4) && (t_907 < 4) && (t_1002 < 4) && (t_1191 < 4) && (t_1399 < 8) 
	&& (t_1579 < 8) && (t_1667 < 8) && (t_235 < 4) && (t_249 < 4) && (t_325 < 4) && 
	(t_452 < 4) && (t_662 < 4) && (t_759 < 4) && (t_8 < 4) && (t_839 < 4) && (t_934 
	< 4) && (0 <= (t_1206 + -4)) && (0 <= (t_1465 + -4)) && (0 <= (t_233 + -4)) && 
	(0 <= (t_242 + -4)) && (0 <= (t_33 + -2)) && (0 <= (t_44 + -2)) && (0 <= (t_557 
	+ -2)) && (0 <= (t_59 + -2)) && (0 <= (t_630 + -2)) && (0 <= (t_636 + -2)) && (0 
	<= (t_64 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_907 + -2)) && (0 <= (t_1002 + 
	-2)) && (0 <= (t_1191 + -2)) && (0 <= (t_1399 + -4)) && (0 <= (t_1579 + -4)) && 
	(0 <= (t_1667 + -4)) && (0 <= (t_235 + -2)) && (0 <= (t_249 + -2)) && (0 <= 
	(t_325 + -2)) && (0 <= (t_452 + -2)) && (0 <= (t_662 + -2)) && (0 <= (t_759 + -2)
	) && (0 <= (t_8 + -2)) && (0 <= (t_839 + -2)) && (0 <= (t_934 + -2)))
																																																	DATA{
																																																		:pid_2:uncoveredExit = 5;
																																																		:pid_25:$time = (z_0 + z_1092 + z_1204 + z_132 + z_20 + z_228 + z_4 + z_96);
																																																		:pid_25:z = z_1204;
																																																		:pid_25:localTime = (z_0 + z_1092 + z_1204 + z_132 + z_20 + z_228 + z_4 + z_96);
																																																		:pid_25:localPC = ((t_1465 < 8) && (t_8 < 4) && (t_1579 < 8) && (t_235 < 4) && (t_8 < 4) && (0 <= (t_1465 + -4)) && (0 <= (t_8 + -2)) && (0 <= (t_1579 + -4)) && (0 <= (t_235 + -2)) && (0 <= (t_8 + -2)));
																																																		:pid_25:localPtC = (((z_1092 + z_1204 + z_132 + z_20 + z_228 + z_96) == 4) && ((z_1092 + z_228) == 4) && ((z_20 + z_4 + z_96) == t_8) && (z_20 == t_8) && (z_228 == t_235) && ((z_1092 + z_1204 + z_132 + z_20 + z_228 + z_96) > t_8) && ((z_1092 + z_228) > t_235) && ($delta#initial > 0) && (z_0 > 0) && (z_1092 > 0) && (z_132 > 0) && (z_20 > 0) && (z_228 > 0) && (z_4 > 0) && (z_96 > 0));
																																																		:pid_26:e = 1;
																																																		:pid_26:c = 0;
																																																		:pid_26:tau = 8;
																																																		:pid_26:t = t_1465;
																																																		:pid_26:cl = 0;
																																																		:pid_32:cl = (z_1092 + z_1204 + z_132 + z_20 + z_228 + z_4 + z_96);
																																																		:pid_37:cl = z_1204;
																																																	}
																																																	EC:<Id:6106;Ev:318;H:49;W:5797>{ SC: ( pid_21:o#17 , ( pid_29:cp1 , pid_35:dp2 , pid_39:dp1 ) , ( pid_46:cp1 , pid_51:dp1 , pid_56:dp1 ) , ( pid_64:cp2 , pid_68:dp1 , pid_73:dp1 ) , ( pid_80:cp1 , pid_86:dp2 , pid_89:dp0 ) )
																					
																						
									EXE: { |;| (:pid_42 , run) (:pid_43 , run) 
	(:pid_47 , run) (:pid_47 , cp_resetTau) (:pid_2 , run) }
																					
																						
									TRACE: { |;| (:pid_42 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1229 }) (:pid_47 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_1506 }) 
	}
																					
																						
									NC: ((t_1506 < 8) && (0 <= (t_1506 + -4)))
																																																		PC: ((t_1206 < 8) && (t_1465 < 8) && (t_1506 < 8) && (t_233 < 8) && (t_242 < 8) && 
	(t_33 < 4) && (t_44 < 4) && (t_557 < 4) && (t_59 < 4) && (t_630 < 4) && (t_636 < 
	4) && (t_64 < 4) && (t_8 < 4) && (t_907 < 4) && (t_1002 < 4) && (t_1191 < 4) && 
	(t_1399 < 8) && (t_1579 < 8) && (t_1667 < 8) && (t_235 < 4) && (t_249 < 4) && 
	(t_325 < 4) && (t_452 < 4) && (t_662 < 4) && (t_759 < 4) && (t_8 < 4) && (t_839 
	< 4) && (t_934 < 4) && (0 <= (t_1206 + -4)) && (0 <= (t_1465 + -4)) && (0 <= 
	(t_1506 + -4)) && (0 <= (t_233 + -4)) && (0 <= (t_242 + -4)) && (0 <= (t_33 + -2)
	) && (0 <= (t_44 + -2)) && (0 <= (t_557 + -2)) && (0 <= (t_59 + -2)) && (0 <= 
	(t_630 + -2)) && (0 <= (t_636 + -2)) && (0 <= (t_64 + -2)) && (0 <= (t_8 + -2)) 
	&& (0 <= (t_907 + -2)) && (0 <= (t_1002 + -2)) && (0 <= (t_1191 + -2)) && (0 <= 
	(t_1399 + -4)) && (0 <= (t_1579 + -4)) && (0 <= (t_1667 + -4)) && (0 <= (t_235 + 
	-2)) && (0 <= (t_249 + -2)) && (0 <= (t_325 + -2)) && (0 <= (t_452 + -2)) && (0 
	<= (t_662 + -2)) && (0 <= (t_759 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_839 + 
	-2)) && (0 <= (t_934 + -2)))
																																																		DATA{
																																																			:pid_2:uncoveredExit = 6;
																																																			:pid_42:$time = (z_1161 + z_1229 + z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821 + z_953 + z_997);
																																																			:pid_42:z = z_1229;
																																																			:pid_42:reach_CTRL_EXPIR = true;
																																																			:pid_42:localTime = (z_1161 + z_1229 + z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821 + z_953 + z_997);
																																																			:pid_42:localPC = ((t_1506 < 8) && (t_242 < 8) && (t_33 < 4) && (t_44 < 4) && (t_1399 < 8) && (t_1667 < 8) && (t_249 < 4) && (t_452 < 4) && (t_759 < 4) && (t_839 < 4) && (0 <= (t_1506 + -4)) && (0 <= (t_242 + -4)) && (0 <= (t_33 + -2)) && (0 <= (t_44 + -2)) && (0 <= (t_1399 + -4)) && (0 <= (t_1667 + -4)) && (0 <= (t_249 + -2)) && (0 <= (t_452 + -2)) && (0 <= (t_759 + -2)) && (0 <= (t_839 + -2)));
																																																			:pid_42:localPtC = (((z_1161 + z_1229 + z_405 + z_441 + z_473 + z_493 + z_529 + z_821 + z_953 + z_997) == 8) && ((z_1161 + z_997) == 8) && ((z_141 + z_165 + z_273 + z_305) == t_44) && ((z_141 + z_165 + z_273 + z_305 + z_337) == 4) && ((z_305 + z_337 + z_405 + z_441 + z_473 + z_493 + z_529 + z_821) == t_452) && ((z_305 + z_337 + z_405 + z_441 + z_473 + z_493 + z_529 + z_821 + z_953) == 4) && (z_405 == t_242) && (z_473 == t_759) && (z_997 == t_1399) && ((z_165 + z_273) < t_249) && ((z_473 + z_493) < 4) && (z_165 < t_249) && (z_45 < t_33) && (z_529 < t_839) && ((z_0 + z_132 + z_20 + z_228 + z_4 + z_96) <= (z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529)) && ((z_0 + z_132 + z_20 + z_228 + z_4 + z_96) <= (z_141 + z_165 + z_273 + z_33 + z_45)) && ((z_0 + z_20 + z_4) <= (z_33 + z_45)) && ((z_0 + z_20 + z_4 + z_96) <= (z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493)) && ((z_0 + z_20 + z_4 + z_96) <= (z_141 + z_165 + z_33 + z_45)) && ((z_1161 + z_1229 + z_405 + z_441 + z_473 + z_493 + z_529 + z_821 + z_953 + z_997) > t_242) && ((z_1161 + z_997) > t_1399) && ((z_141 + z_165 + z_273 + z_305 + z_337) > t_44) && ((z_305 + z_337 + z_405 + z_441 + z_473 + z_493 + z_529 + z_821 + z_953) > t_452) && ($delta#initial > 0) && (z_1161 > 0) && (z_141 > 0) && (z_165 > 0) && (z_273 > 0) && (z_305 > 0) && (z_33 > 0) && (z_337 > 0) && (z_405 > 0) && (z_441 > 0) && (z_45 > 0) && (z_473 > 0) && (z_493 > 0) && (z_529 > 0) && (z_821 > 0) && (z_953 > 0) && (z_997 > 0));
																																																			:pid_43:e = 2;
																																																			:pid_43:tau = 8;
																																																			:pid_43:t = t_1506;
																																																			:pid_43:cl = 0;
																																																			:pid_49:cl = z_1229;
																																																			:pid_54:cl = (z_1161 + z_1229 + z_529 + z_821 + z_953 + z_997);
																																																		}
																																																		EC:<Id:6255;Ev:326;H:50;W:5937>{ SC: ( pid_21:o#17 , ( pid_29:cp1 , pid_35:dp2 , pid_39:dp1 ) , ( pid_46:cp1 , pid_51:dp1 , pid_56:dp1 ) , ( pid_64:cp2 , pid_68:dp1 , pid_73:dp1 ) , ( pid_80:cp1 , pid_86:dp2 , pid_89:dp0 ) )
																					
																						
										EXE: { |;| (:pid_25 , run) (:pid_26 , run) 
	(:pid_29 , run) (:pid_29 , cp1_receiveCM_inconsistent) (:pid_2 , run) }
																					
																						
										TRACE: { |;| (:pid_25 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1264 }) (:pid_29 , ${ input 
	inst::Trickle.Node.ControlMsg [ 1 , 0 ] ${ + param::Trickle.Node.z_186 
	param::Trickle.Node.z_198 param::Trickle.Node.z_270 param::Trickle.Node.z_62 
	param::Trickle.Node.z_70 } } @ (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_20 + 
	z_228 + z_4 + z_96)) (:pid_29 , ${ newfresh inst::Trickle.Node.ControlProcess.t 
	param::Trickle.Node.ControlProcess.t_1556 }) }
																					
																						
										NC: ((t_1556 < 4) && (0 <= (t_1556 + -2)))
																																																			PC: ((t_1206 < 8) && (t_1465 < 8) && (t_1506 < 8) && (t_1556 < 4) && (t_233 < 8) && 
	(t_242 < 8) && (t_33 < 4) && (t_44 < 4) && (t_557 < 4) && (t_59 < 4) && (t_630 < 
	4) && (t_636 < 4) && (t_64 < 4) && (t_8 < 4) && (t_907 < 4) && (t_1002 < 4) && 
	(t_1191 < 4) && (t_1399 < 8) && (t_1579 < 8) && (t_1667 < 8) && (t_235 < 4) && 
	(t_249 < 4) && (t_325 < 4) && (t_452 < 4) && (t_662 < 4) && (t_759 < 4) && (t_8 
	< 4) && (t_839 < 4) && (t_934 < 4) && (0 <= (t_1206 + -4)) && (0 <= (t_1465 + -4)
	) && (0 <= (t_1506 + -4)) && (0 <= (t_1556 + -2)) && (0 <= (t_233 + -4)) && (0 
	<= (t_242 + -4)) && (0 <= (t_33 + -2)) && (0 <= (t_44 + -2)) && (0 <= (t_557 + 
	-2)) && (0 <= (t_59 + -2)) && (0 <= (t_630 + -2)) && (0 <= (t_636 + -2)) && (0 
	<= (t_64 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_907 + -2)) && (0 <= (t_1002 + 
	-2)) && (0 <= (t_1191 + -2)) && (0 <= (t_1399 + -4)) && (0 <= (t_1579 + -4)) && 
	(0 <= (t_1667 + -4)) && (0 <= (t_235 + -2)) && (0 <= (t_249 + -2)) && (0 <= 
	(t_325 + -2)) && (0 <= (t_452 + -2)) && (0 <= (t_662 + -2)) && (0 <= (t_759 + -2)
	) && (0 <= (t_8 + -2)) && (0 <= (t_839 + -2)) && (0 <= (t_934 + -2)))
																																																			DATA{
																																																				:pid_2:uncoveredExit = 7;
																																																				:pid_25:$time = (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_20 + z_228 + z_4 + z_96);
																																																				:pid_25:z = z_1264;
																																																				:pid_25:seq_buff[0] = 1;
																																																				:pid_25:seq_buff[1] = 0;
																																																				:pid_25:localTime = (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_20 + z_228 + z_4 + z_96);
																																																				:pid_25:localPC = ((t_1465 < 8) && (t_1556 < 4) && (t_8 < 4) && (t_1579 < 8) && (t_235 < 4) && (t_8 < 4) && (0 <= (t_1465 + -4)) && (0 <= (t_1556 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_1579 + -4)) && (0 <= (t_235 + -2)) && (0 <= (t_8 + -2)));
																																																				:pid_25:localPtC = (((z_1092 + z_1204 + z_132 + z_20 + z_228 + z_96) == 4) && ((z_1092 + z_228) == 4) && ((z_20 + z_4 + z_96) == t_8) && (z_20 == t_8) && (z_228 == t_235) && (z_1264 < t_1465) && ((z_186 + z_198 + z_270 + z_62 + z_70) <= (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_20 + z_228 + z_4 + z_96)) && ((z_1092 + z_1204 + z_132 + z_20 + z_228 + z_96) > t_8) && ((z_1092 + z_228) > t_235) && ($delta#initial > 0) && (z_0 > 0) && (z_1092 > 0) && (z_1204 > 0) && (z_132 > 0) && (z_20 > 0) && (z_228 > 0) && (z_4 > 0) && (z_96 > 0));
																																																				:pid_25:timeEmit = (z_186 + z_198 + z_270 + z_62 + z_70);
																																																				:pid_26:e = 0;
																																																				:pid_26:c = 0;
																																																				:pid_26:tau = 4;
																																																				:pid_26:i = 2;
																																																				:pid_26:t = t_1556;
																																																				:pid_26:consistent = false;
																																																				:pid_26:cl = 0;
																																																				:pid_32:cl = (z_1092 + z_1204 + z_1264 + z_132 + z_20 + z_228 + z_4 + z_96);
																																																				:pid_37:cl = (z_1204 + z_1264);
																																																			}
																																																			BUFFER{
																																																				:pid_25:bufferCM:<FIFO>#0{
																																																					:pid_59:ControlMsg([ 1 , 0 ] , (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_62 + z_70));
																																																					:pid_59:ControlMsg([ 1 , 1 ] , (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70));
																																																				}
																																																			}
																																																			EC:<Id:6377;Ev:332;H:51;W:6051>{ SC: ( pid_21:o#17 , ( pid_29:cp1 , pid_35:dp2 , pid_39:dp1 ) , ( pid_46:cp1 , pid_51:dp1 , pid_56:dp1 ) , ( pid_64:cp2 , pid_69:dp2 , pid_73:dp1 ) , ( pid_80:cp1 , pid_86:dp2 , pid_89:dp0 ) )
																					
																						
											EXE: { |;| (:pid_59 , run) (:pid_66 , 
	run) (:pid_68 , run) (:pid_68 , dp1_reach_k) (:pid_2 , run) }
																					
																						
											TRACE: (:pid_59 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1298 })
																																																				DATA{
																																																					:pid_2:uncoveredExit = 8;
																																																					:pid_59:$time = (z_1022 + z_1298 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862);
																																																					:pid_59:z = z_1298;
																																																					:pid_59:localTime = (z_1022 + z_1298 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862);
																																																					:pid_59:localPC = ((t_233 < 8) && (t_557 < 4) && (t_59 < 4) && (t_64 < 4) && (t_1002 < 4) && (t_325 < 4) && (t_662 < 4) && (t_934 < 4) && (0 <= (t_233 + -4)) && (0 <= (t_557 + -2)) && (0 <= (t_59 + -2)) && (0 <= (t_64 + -2)) && (0 <= (t_1002 + -2)) && (0 <= (t_325 + -2)) && (0 <= (t_662 + -2)) && (0 <= (t_934 + -2)));
																																																					:pid_59:localPtC = (((z_1022 + z_1298 + z_550 + z_570 + z_602 + z_622 + z_658 + z_670 + z_862) == t_662) && ((z_186 + z_198 + z_270) == t_64) && ((z_186 + z_198 + z_270 + z_330) == 4) && ((z_386 + z_550 + z_570) == t_233) && (z_670 == t_557) && ((z_1022 + z_550 + z_570 + z_602 + z_622 + z_658 + z_670 + z_862) < t_662) && ((z_198 + z_270 + z_330 + z_386) < t_325) && ((z_386 + z_550 + z_570 + z_602 + z_622 + z_658) < 8) && ((z_550 + z_570 + z_602 + z_622 + z_658 + z_670 + z_862) < t_662) && ((z_570 + z_602) < t_934) && (z_198 < t_325) && (z_622 < t_1002) && (z_70 < t_59) && ((z_0 + z_132 + z_20 + z_228 + z_4 + z_96) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_70)) && ((z_0 + z_132 + z_20 + z_228 + z_4 + z_96) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_62 + z_70)) && ((z_0 + z_20 + z_4) <= (z_62 + z_70)) && ((z_0 + z_20 + z_4 + z_96) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_70)) && ((z_0 + z_20 + z_4 + z_96) <= (z_186 + z_198 + z_62 + z_70)) && ((z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862)) && ((z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821 + z_953 + z_997) <= (z_1022 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862)) && ((z_141 + z_165 + z_273 + z_305 + z_33 + z_45) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_70)) && ((z_186 + z_198 + z_270 + z_330) > t_64) && ($delta#initial > 0) && (z_1022 > 0) && (z_186 > 0) && (z_198 > 0) && (z_270 > 0) && (z_330 > 0) && (z_386 > 0) && (z_550 > 0) && (z_570 > 0) && (z_602 > 0) && (z_62 > 0) && (z_622 > 0) && (z_658 > 0) && (z_670 > 0) && (z_70 > 0) && (z_862 > 0));
																																																					:pid_60:cl = (z_1022 + z_1298 + z_670 + z_862);
																																																					:pid_66:cl = (z_1022 + z_1298 + z_550 + z_570 + z_602 + z_622 + z_658 + z_670 + z_862);
																																																					:pid_71:cl = (z_1022 + z_1298 + z_622 + z_658 + z_670 + z_862);
																																																				}
																																																				EC:<Id:6469;Ev:342;H:52;W:6137>{ SC: ( pid_21:o#17 , ( pid_29:cp1 , pid_35:dp2 , pid_39:dp1 ) , ( pid_48:cp3 , pid_51:dp1 , pid_56:dp1 ) , ( pid_64:cp2 , pid_69:dp2 , pid_73:dp1 ) , ( pid_80:cp1 , pid_86:dp2 , pid_89:dp0 ) )
																					
																						
												EXE: { |;| (:pid_42 , run) (:pid_43 
	, run) (:pid_46 , run) (:pid_46 , cp_CTRL_EXPIR) (:pid_2 , run) }
																					
																						
												TRACE: { |;| (:pid_42 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1321 }) (:pid_46 , ${ output#env 
	inst::Trickle.Node.Log 1 } @ (z_1161 + z_1229 + z_1321 + z_141 + z_165 + z_273 + 
	z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821 + 
	z_953 + z_997)) }
																																																					DATA{
																																																						:pid_2:uncoveredExit = 9;
																																																						:pid_42:$time = (z_1161 + z_1229 + z_1321 + z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821 + z_953 + z_997);
																																																						:pid_42:z = z_1321;
																																																						:pid_42:localTime = (z_1161 + z_1229 + z_1321 + z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821 + z_953 + z_997);
																																																						:pid_42:localPC = ((t_1506 < 8) && (t_242 < 8) && (t_33 < 4) && (t_44 < 4) && (t_1399 < 8) && (t_1667 < 8) && (t_249 < 4) && (t_452 < 4) && (t_759 < 4) && (t_839 < 4) && (0 <= (t_1506 + -4)) && (0 <= (t_242 + -4)) && (0 <= (t_33 + -2)) && (0 <= (t_44 + -2)) && (0 <= (t_1399 + -4)) && (0 <= (t_1667 + -4)) && (0 <= (t_249 + -2)) && (0 <= (t_452 + -2)) && (0 <= (t_759 + -2)) && (0 <= (t_839 + -2)));
																																																						:pid_42:localPtC = (((z_1161 + z_1229 + z_405 + z_441 + z_473 + z_493 + z_529 + z_821 + z_953 + z_997) == 8) && ((z_1161 + z_997) == 8) && ((z_141 + z_165 + z_273 + z_305) == t_44) && ((z_141 + z_165 + z_273 + z_305 + z_337) == 4) && ((z_305 + z_337 + z_405 + z_441 + z_473 + z_493 + z_529 + z_821) == t_452) && ((z_305 + z_337 + z_405 + z_441 + z_473 + z_493 + z_529 + z_821 + z_953) == 4) && (z_405 == t_242) && (z_473 == t_759) && (z_997 == t_1399) && ((z_165 + z_273) < t_249) && ((z_473 + z_493) < 4) && (z_165 < t_249) && (z_45 < t_33) && (z_529 < t_839) && ((z_0 + z_132 + z_20 + z_228 + z_4 + z_96) <= (z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529)) && ((z_0 + z_132 + z_20 + z_228 + z_4 + z_96) <= (z_141 + z_165 + z_273 + z_33 + z_45)) && ((z_0 + z_20 + z_4) <= (z_33 + z_45)) && ((z_0 + z_20 + z_4 + z_96) <= (z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493)) && ((z_0 + z_20 + z_4 + z_96) <= (z_141 + z_165 + z_33 + z_45)) && ((z_1161 + z_1229 + z_405 + z_441 + z_473 + z_493 + z_529 + z_821 + z_953 + z_997) > t_242) && ((z_1161 + z_997) > t_1399) && ((z_141 + z_165 + z_273 + z_305 + z_337) > t_44) && ((z_305 + z_337 + z_405 + z_441 + z_473 + z_493 + z_529 + z_821 + z_953) > t_452) && ($delta#initial > 0) && (z_1161 > 0) && (z_1229 > 0) && (z_141 > 0) && (z_165 > 0) && (z_273 > 0) && (z_305 > 0) && (z_33 > 0) && (z_337 > 0) && (z_405 > 0) && (z_441 > 0) && (z_45 > 0) && (z_473 > 0) && (z_493 > 0) && (z_529 > 0) && (z_821 > 0) && (z_953 > 0) && (z_997 > 0));
																																																						:pid_43:e = 2;
																																																						:pid_43:cl = z_1321;
																																																						:pid_49:cl = (z_1229 + z_1321);
																																																						:pid_54:cl = (z_1161 + z_1229 + z_1321 + z_529 + z_821 + z_953 + z_997);
																																																					}
																																																					EC:<Id:6622;Ev:351;H:53;W:6280>{ SC: ( pid_21:o#17 , ( pid_29:cp1 , pid_35:dp2 , pid_39:dp1 ) , ( pid_48:cp3 , pid_53:dp3 , pid_56:dp1 ) , ( pid_64:cp2 , pid_69:dp2 , pid_73:dp1 ) , ( pid_80:cp1 , pid_86:dp2 , pid_89:dp0 ) )
																					
																						
													EXE: { |;| (:pid_42 , run) 
	(:pid_49 , run) (:pid_51 , run) (:pid_51 , dp_DATA_EXPIR) (:pid_2 , run) }
																					
																						
													TRACE: (:pid_42 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1361 })
																																																						DATA{
																																																							:pid_2:uncoveredExit = 10;
																																																							:pid_42:$time = (z_1161 + z_1229 + z_1321 + z_1361 + z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821 + z_953 + z_997);
																																																							:pid_42:z = z_1361;
																																																							:pid_42:localTime = (z_1161 + z_1229 + z_1321 + z_1361 + z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821 + z_953 + z_997);
																																																							:pid_42:localPC = ((t_1506 < 8) && (t_242 < 8) && (t_33 < 4) && (t_44 < 4) && (t_1399 < 8) && (t_1667 < 8) && (t_249 < 4) && (t_452 < 4) && (t_759 < 4) && (t_839 < 4) && (0 <= (t_1506 + -4)) && (0 <= (t_242 + -4)) && (0 <= (t_33 + -2)) && (0 <= (t_44 + -2)) && (0 <= (t_1399 + -4)) && (0 <= (t_1667 + -4)) && (0 <= (t_249 + -2)) && (0 <= (t_452 + -2)) && (0 <= (t_759 + -2)) && (0 <= (t_839 + -2)));
																																																							:pid_42:localPtC = (((z_1161 + z_1229 + z_405 + z_441 + z_473 + z_493 + z_529 + z_821 + z_953 + z_997) == 8) && ((z_1161 + z_997) == 8) && ((z_141 + z_165 + z_273 + z_305) == t_44) && ((z_141 + z_165 + z_273 + z_305 + z_337) == 4) && ((z_305 + z_337 + z_405 + z_441 + z_473 + z_493 + z_529 + z_821) == t_452) && ((z_305 + z_337 + z_405 + z_441 + z_473 + z_493 + z_529 + z_821 + z_953) == 4) && (z_405 == t_242) && (z_473 == t_759) && (z_997 == t_1399) && ((z_165 + z_273) < t_249) && ((z_473 + z_493) < 4) && (z_165 < t_249) && (z_45 < t_33) && (z_529 < t_839) && ((z_0 + z_132 + z_20 + z_228 + z_4 + z_96) <= (z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529)) && ((z_0 + z_132 + z_20 + z_228 + z_4 + z_96) <= (z_141 + z_165 + z_273 + z_33 + z_45)) && ((z_0 + z_20 + z_4) <= (z_33 + z_45)) && ((z_0 + z_20 + z_4 + z_96) <= (z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493)) && ((z_0 + z_20 + z_4 + z_96) <= (z_141 + z_165 + z_33 + z_45)) && ((z_1161 + z_1229 + z_405 + z_441 + z_473 + z_493 + z_529 + z_821 + z_953 + z_997) > t_242) && ((z_1161 + z_997) > t_1399) && ((z_141 + z_165 + z_273 + z_305 + z_337) > t_44) && ((z_305 + z_337 + z_405 + z_441 + z_473 + z_493 + z_529 + z_821 + z_953) > t_452) && ($delta#initial > 0) && (z_1161 > 0) && (z_1229 > 0) && (z_1321 > 0) && (z_141 > 0) && (z_165 > 0) && (z_273 > 0) && (z_305 > 0) && (z_33 > 0) && (z_337 > 0) && (z_405 > 0) && (z_441 > 0) && (z_45 > 0) && (z_473 > 0) && (z_493 > 0) && (z_529 > 0) && (z_821 > 0) && (z_953 > 0) && (z_997 > 0));
																																																							:pid_49:e = 2;
																																																							:pid_49:cl = (z_1229 + z_1321 + z_1361);
																																																							:pid_54:cl = (z_1161 + z_1229 + z_1321 + z_1361 + z_529 + z_821 + z_953 + z_997);
																																																						}
																																																						EC:<Id:6749;Ev:357;H:54;W:6398>{ SC: ( pid_21:o#17 , ( pid_29:cp1 , pid_35:dp2 , pid_39:dp1 ) , ( pid_48:cp3 , pid_53:dp3 , pid_57:dp2 ) , ( pid_64:cp2 , pid_69:dp2 , pid_73:dp1 ) , ( pid_80:cp1 , pid_86:dp2 , pid_89:dp0 ) )
																					
																						
														EXE: { |;| (:pid_42 , run) 
	(:pid_54 , run) (:pid_56 , run) (:pid_56 , dp_sendDM) (:pid_2 , run) }
																					
																						
														TRACE: { |;| (:pid_42 , ${ 
	newfresh inst::Trickle.Node.z param::Trickle.Node.z_1397 }) (:pid_56 , ${ output 
	inst::Trickle.Node.DataMsg2 [ 2 , 2 , 1 ] ${ + param::Trickle.Node.z_1161 
	param::Trickle.Node.z_1229 param::Trickle.Node.z_1321 param::Trickle.Node.z_1361 
	param::Trickle.Node.z_1397 param::Trickle.Node.z_141 param::Trickle.Node.z_165 
	param::Trickle.Node.z_273 param::Trickle.Node.z_305 param::Trickle.Node.z_33 
	param::Trickle.Node.z_337 param::Trickle.Node.z_405 param::Trickle.Node.z_441 
	param::Trickle.Node.z_45 param::Trickle.Node.z_473 param::Trickle.Node.z_493 
	param::Trickle.Node.z_529 param::Trickle.Node.z_821 param::Trickle.Node.z_953 
	param::Trickle.Node.z_997 } } @ (z_1161 + z_1229 + z_1321 + z_1361 + z_1397 + 
	z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + 
	z_493 + z_529 + z_821 + z_953 + z_997)) }
																																																							DATA{
																																																								:pid_2:uncoveredExit = 11;
																																																								:pid_42:$time = (z_1161 + z_1229 + z_1321 + z_1361 + z_1397 + z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821 + z_953 + z_997);
																																																								:pid_42:z = z_1397;
																																																								:pid_42:localTime = (z_1161 + z_1229 + z_1321 + z_1361 + z_1397 + z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821 + z_953 + z_997);
																																																								:pid_42:localPC = ((t_1506 < 8) && (t_242 < 8) && (t_33 < 4) && (t_44 < 4) && (t_1399 < 8) && (t_1667 < 8) && (t_249 < 4) && (t_452 < 4) && (t_759 < 4) && (t_839 < 4) && (0 <= (t_1506 + -4)) && (0 <= (t_242 + -4)) && (0 <= (t_33 + -2)) && (0 <= (t_44 + -2)) && (0 <= (t_1399 + -4)) && (0 <= (t_1667 + -4)) && (0 <= (t_249 + -2)) && (0 <= (t_452 + -2)) && (0 <= (t_759 + -2)) && (0 <= (t_839 + -2)));
																																																								:pid_42:localPtC = (((z_1161 + z_1229 + z_1321 + z_1361 + z_1397 + z_529 + z_821 + z_953 + z_997) == t_839) && ((z_1161 + z_1229 + z_405 + z_441 + z_473 + z_493 + z_529 + z_821 + z_953 + z_997) == 8) && ((z_1161 + z_997) == 8) && ((z_141 + z_165 + z_273 + z_305) == t_44) && ((z_141 + z_165 + z_273 + z_305 + z_337) == 4) && ((z_305 + z_337 + z_405 + z_441 + z_473 + z_493 + z_529 + z_821) == t_452) && ((z_305 + z_337 + z_405 + z_441 + z_473 + z_493 + z_529 + z_821 + z_953) == 4) && (z_405 == t_242) && (z_473 == t_759) && (z_997 == t_1399) && ((z_165 + z_273) < t_249) && ((z_473 + z_493) < 4) && (z_165 < t_249) && (z_45 < t_33) && (z_529 < t_839) && ((z_0 + z_132 + z_20 + z_228 + z_4 + z_96) <= (z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529)) && ((z_0 + z_132 + z_20 + z_228 + z_4 + z_96) <= (z_141 + z_165 + z_273 + z_33 + z_45)) && ((z_0 + z_20 + z_4) <= (z_33 + z_45)) && ((z_0 + z_20 + z_4 + z_96) <= (z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493)) && ((z_0 + z_20 + z_4 + z_96) <= (z_141 + z_165 + z_33 + z_45)) && ((z_1161 + z_1229 + z_405 + z_441 + z_473 + z_493 + z_529 + z_821 + z_953 + z_997) > t_242) && ((z_1161 + z_997) > t_1399) && ((z_141 + z_165 + z_273 + z_305 + z_337) > t_44) && ((z_305 + z_337 + z_405 + z_441 + z_473 + z_493 + z_529 + z_821 + z_953) > t_452) && ($delta#initial > 0) && (z_1161 > 0) && (z_1229 > 0) && (z_1321 > 0) && (z_1361 > 0) && (z_141 > 0) && (z_165 > 0) && (z_273 > 0) && (z_305 > 0) && (z_33 > 0) && (z_337 > 0) && (z_405 > 0) && (z_441 > 0) && (z_45 > 0) && (z_473 > 0) && (z_493 > 0) && (z_529 > 0) && (z_821 > 0) && (z_953 > 0) && (z_997 > 0));
																																																								:pid_54:cl = (z_1161 + z_1229 + z_1321 + z_1361 + z_1397 + z_529 + z_821 + z_953 + z_997);
																																																							}
																																																							BUFFER{
																																																								:pid_59:bufferDM1:<FIFO>#1{
																																																									:pid_42:DataMsg2([ 2 , 2 , 1 ] , (z_1161 + z_1229 + z_1321 + z_1361 + z_1397 + z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821 + z_953 + z_997));
																																																								}
																																																								:pid_59:bufferDM2:<FIFO>#2{
																																																									:pid_42:DataMsg1([ 1 , 1 , 0 ] , (z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821));
																																																									:pid_42:DataMsg1([ 1 , 1 , 0 ] , (z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821 + z_953 + z_997));
																																																									:pid_42:DataMsg2([ 2 , 2 , 1 ] , (z_1161 + z_1229 + z_1321 + z_1361 + z_1397 + z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821 + z_953 + z_997));
																																																								}
																																																							}
																																																							EC:<Id:6831;Ev:362;H:55;W:6474>{ SC: ( pid_21:o#17 , ( pid_29:cp1 , pid_35:dp2 , pid_39:dp1 ) , ( pid_48:cp3 , pid_53:dp3 , pid_57:dp2 ) , ( pid_63:cp1 , pid_69:dp2 , pid_73:dp1 ) , ( pid_80:cp1 , pid_86:dp2 , pid_89:dp0 ) )
																					
																						
															EXE: { |;| (:pid_59 , 
	run) (:pid_60 , run) (:pid_64 , run) (:pid_64 , cp2_receiveCM_inconsistent) 
	(:pid_2 , run) }
																					
																						
															TRACE: { |;| (:pid_59 , 
	${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1422 }) (:pid_64 , ${ 
	input inst::Trickle.Node.ControlMsg [ 1 , 0 ] ${ + param::Trickle.Node.z_141 
	param::Trickle.Node.z_165 param::Trickle.Node.z_273 param::Trickle.Node.z_305 
	param::Trickle.Node.z_33 param::Trickle.Node.z_337 param::Trickle.Node.z_405 
	param::Trickle.Node.z_45 } } @ (z_1022 + z_1298 + z_1422 + z_186 + z_198 + z_270 
	+ z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + 
	z_862)) (:pid_64 , ${ newfresh inst::Trickle.Node.ControlProcess.t 
	param::Trickle.Node.ControlProcess.t_1722 }) }
																					
																						
															NC: ((t_1722 < 4) && (0 
	<= (t_1722 + -2)))
																																																								PC: ((t_1206 < 8) && (t_1465 < 8) && (t_1506 < 8) && (t_1556 < 4) && (t_1722 < 4) && 
	(t_233 < 8) && (t_242 < 8) && (t_33 < 4) && (t_44 < 4) && (t_557 < 4) && (t_59 < 
	4) && (t_630 < 4) && (t_636 < 4) && (t_64 < 4) && (t_8 < 4) && (t_907 < 4) && 
	(t_1002 < 4) && (t_1191 < 4) && (t_1399 < 8) && (t_1579 < 8) && (t_1667 < 8) && 
	(t_235 < 4) && (t_249 < 4) && (t_325 < 4) && (t_452 < 4) && (t_662 < 4) && 
	(t_759 < 4) && (t_8 < 4) && (t_839 < 4) && (t_934 < 4) && (0 <= (t_1206 + -4)) 
	&& (0 <= (t_1465 + -4)) && (0 <= (t_1506 + -4)) && (0 <= (t_1556 + -2)) && (0 <= 
	(t_1722 + -2)) && (0 <= (t_233 + -4)) && (0 <= (t_242 + -4)) && (0 <= (t_33 + -2)
	) && (0 <= (t_44 + -2)) && (0 <= (t_557 + -2)) && (0 <= (t_59 + -2)) && (0 <= 
	(t_630 + -2)) && (0 <= (t_636 + -2)) && (0 <= (t_64 + -2)) && (0 <= (t_8 + -2)) 
	&& (0 <= (t_907 + -2)) && (0 <= (t_1002 + -2)) && (0 <= (t_1191 + -2)) && (0 <= 
	(t_1399 + -4)) && (0 <= (t_1579 + -4)) && (0 <= (t_1667 + -4)) && (0 <= (t_235 + 
	-2)) && (0 <= (t_249 + -2)) && (0 <= (t_325 + -2)) && (0 <= (t_452 + -2)) && (0 
	<= (t_662 + -2)) && (0 <= (t_759 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_839 + 
	-2)) && (0 <= (t_934 + -2)))
																																																								DATA{
																																																									:pid_2:uncoveredExit = 12;
																																																									:pid_59:$time = (z_1022 + z_1298 + z_1422 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862);
																																																									:pid_59:z = z_1422;
																																																									:pid_59:localTime = (z_1022 + z_1298 + z_1422 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862);
																																																									:pid_59:localPC = ((t_1722 < 4) && (t_233 < 8) && (t_557 < 4) && (t_59 < 4) && (t_64 < 4) && (t_1002 < 4) && (t_325 < 4) && (t_662 < 4) && (t_934 < 4) && (0 <= (t_1722 + -2)) && (0 <= (t_233 + -4)) && (0 <= (t_557 + -2)) && (0 <= (t_59 + -2)) && (0 <= (t_64 + -2)) && (0 <= (t_1002 + -2)) && (0 <= (t_325 + -2)) && (0 <= (t_662 + -2)) && (0 <= (t_934 + -2)));
																																																									:pid_59:localPtC = (((z_1022 + z_1298 + z_550 + z_570 + z_602 + z_622 + z_658 + z_670 + z_862) == t_662) && ((z_186 + z_198 + z_270) == t_64) && ((z_186 + z_198 + z_270 + z_330) == 4) && ((z_386 + z_550 + z_570) == t_233) && (z_670 == t_557) && ((z_1022 + z_1298 + z_1422 + z_670 + z_862) < 4) && ((z_1022 + z_550 + z_570 + z_602 + z_622 + z_658 + z_670 + z_862) < t_662) && ((z_198 + z_270 + z_330 + z_386) < t_325) && ((z_386 + z_550 + z_570 + z_602 + z_622 + z_658) < 8) && ((z_550 + z_570 + z_602 + z_622 + z_658 + z_670 + z_862) < t_662) && ((z_570 + z_602) < t_934) && (z_198 < t_325) && (z_622 < t_1002) && (z_70 < t_59) && ((z_0 + z_132 + z_20 + z_228 + z_4 + z_96) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_70)) && ((z_0 + z_132 + z_20 + z_228 + z_4 + z_96) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_62 + z_70)) && ((z_0 + z_20 + z_4) <= (z_62 + z_70)) && ((z_0 + z_20 + z_4 + z_96) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_70)) && ((z_0 + z_20 + z_4 + z_96) <= (z_186 + z_198 + z_62 + z_70)) && ((z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862)) && ((z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821 + z_953 + z_997) <= (z_1022 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862)) && ((z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_45) <= (z_1022 + z_1298 + z_1422 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862)) && ((z_141 + z_165 + z_273 + z_305 + z_33 + z_45) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_70)) && ((z_186 + z_198 + z_270 + z_330) > t_64) && ($delta#initial > 0) && (z_1022 > 0) && (z_1298 > 0) && (z_186 > 0) && (z_198 > 0) && (z_270 > 0) && (z_330 > 0) && (z_386 > 0) && (z_550 > 0) && (z_570 > 0) && (z_602 > 0) && (z_62 > 0) && (z_622 > 0) && (z_658 > 0) && (z_670 > 0) && (z_70 > 0) && (z_862 > 0));
																																																									:pid_59:timeEmit = (z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_45);
																																																									:pid_60:i = 2;
																																																									:pid_60:t = t_1722;
																																																									:pid_60:cl = 0;
																																																									:pid_66:cl = (z_1022 + z_1298 + z_1422 + z_550 + z_570 + z_602 + z_622 + z_658 + z_670 + z_862);
																																																									:pid_71:cl = (z_1022 + z_1298 + z_1422 + z_622 + z_658 + z_670 + z_862);
																																																								}
																																																								BUFFER{
																																																									:pid_59:bufferCM:<FIFO>#0{ }
																																																								}
																																																								EC:<Id:6900;Ev:372;H:56;W:6538>{ SC: ( pid_21:o#17 , ( pid_29:cp1 , pid_35:dp2 , pid_39:dp1 ) , ( pid_48:cp3 , pid_53:dp3 , pid_57:dp2 ) , ( pid_64:cp2 , pid_69:dp2 , pid_73:dp1 ) , ( pid_80:cp1 , pid_86:dp2 , pid_89:dp0 ) )
																					
																						
																EXE: { |;| (:pid_59 
	, run) (:pid_60 , run) (:pid_63 , run) (:pid_63 , cp_sendCM) (:pid_2 , run) }
																					
																						
																TRACE: { |;| 
	(:pid_59 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1442 }) 
	(:pid_63 , ${ output inst::Trickle.Node.ControlMsg [ 1 , 1 ] ${ + 
	param::Trickle.Node.z_1022 param::Trickle.Node.z_1298 param::Trickle.Node.z_1422 
	param::Trickle.Node.z_1442 param::Trickle.Node.z_186 param::Trickle.Node.z_198 
	param::Trickle.Node.z_270 param::Trickle.Node.z_330 param::Trickle.Node.z_386 
	param::Trickle.Node.z_550 param::Trickle.Node.z_570 param::Trickle.Node.z_602 
	param::Trickle.Node.z_62 param::Trickle.Node.z_622 param::Trickle.Node.z_658 
	param::Trickle.Node.z_670 param::Trickle.Node.z_70 param::Trickle.Node.z_862 } } 
	@ (z_1022 + z_1298 + z_1422 + z_1442 + z_186 + z_198 + z_270 + z_330 + z_386 + 
	z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862)) }
																																																									DATA{
																																																										:pid_2:uncoveredExit = 13;
																																																										:pid_59:$time = (z_1022 + z_1298 + z_1422 + z_1442 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862);
																																																										:pid_59:z = z_1442;
																																																										:pid_59:localTime = (z_1022 + z_1298 + z_1422 + z_1442 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862);
																																																										:pid_59:localPC = ((t_1722 < 4) && (t_233 < 8) && (t_557 < 4) && (t_59 < 4) && (t_64 < 4) && (t_1002 < 4) && (t_325 < 4) && (t_662 < 4) && (t_934 < 4) && (0 <= (t_1722 + -2)) && (0 <= (t_233 + -4)) && (0 <= (t_557 + -2)) && (0 <= (t_59 + -2)) && (0 <= (t_64 + -2)) && (0 <= (t_1002 + -2)) && (0 <= (t_325 + -2)) && (0 <= (t_662 + -2)) && (0 <= (t_934 + -2)));
																																																										:pid_59:localPtC = (((z_1022 + z_1298 + z_550 + z_570 + z_602 + z_622 + z_658 + z_670 + z_862) == t_662) && ((z_186 + z_198 + z_270) == t_64) && ((z_186 + z_198 + z_270 + z_330) == 4) && ((z_386 + z_550 + z_570) == t_233) && (z_1442 == t_1722) && (z_670 == t_557) && ((z_1022 + z_1298 + z_1422 + z_670 + z_862) < 4) && ((z_1022 + z_550 + z_570 + z_602 + z_622 + z_658 + z_670 + z_862) < t_662) && ((z_198 + z_270 + z_330 + z_386) < t_325) && ((z_386 + z_550 + z_570 + z_602 + z_622 + z_658) < 8) && ((z_550 + z_570 + z_602 + z_622 + z_658 + z_670 + z_862) < t_662) && ((z_570 + z_602) < t_934) && (z_198 < t_325) && (z_622 < t_1002) && (z_70 < t_59) && ((z_0 + z_132 + z_20 + z_228 + z_4 + z_96) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_70)) && ((z_0 + z_132 + z_20 + z_228 + z_4 + z_96) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_62 + z_70)) && ((z_0 + z_20 + z_4) <= (z_62 + z_70)) && ((z_0 + z_20 + z_4 + z_96) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_70)) && ((z_0 + z_20 + z_4 + z_96) <= (z_186 + z_198 + z_62 + z_70)) && ((z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862)) && ((z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821 + z_953 + z_997) <= (z_1022 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862)) && ((z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_45) <= (z_1022 + z_1298 + z_1422 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862)) && ((z_141 + z_165 + z_273 + z_305 + z_33 + z_45) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_70)) && ((z_186 + z_198 + z_270 + z_330) > t_64) && ($delta#initial > 0) && (z_1022 > 0) && (z_1298 > 0) && (z_1422 > 0) && (z_186 > 0) && (z_198 > 0) && (z_270 > 0) && (z_330 > 0) && (z_386 > 0) && (z_550 > 0) && (z_570 > 0) && (z_602 > 0) && (z_62 > 0) && (z_622 > 0) && (z_658 > 0) && (z_670 > 0) && (z_70 > 0) && (z_862 > 0));
																																																										:pid_60:cl = z_1442;
																																																										:pid_66:cl = (z_1022 + z_1298 + z_1422 + z_1442 + z_550 + z_570 + z_602 + z_622 + z_658 + z_670 + z_862);
																																																										:pid_71:cl = (z_1022 + z_1298 + z_1422 + z_1442 + z_622 + z_658 + z_670 + z_862);
																																																									}
																																																									BUFFER{
																																																										:pid_25:bufferCM:<FIFO>#0{
																																																											:pid_59:ControlMsg([ 1 , 0 ] , (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_62 + z_70));
																																																											:pid_59:ControlMsg([ 1 , 1 ] , (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70));
																																																											:pid_59:ControlMsg([ 1 , 1 ] , (z_1022 + z_1298 + z_1422 + z_1442 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862));
																																																										}
																																																										:pid_76:bufferCM:<FIFO>#0{
																																																											:pid_59:ControlMsg([ 1 , 1 ] , (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70));
																																																											:pid_59:ControlMsg([ 1 , 1 ] , (z_1022 + z_1298 + z_1422 + z_1442 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862));
																																																										}
																																																									}
																																																									EC:<Id:7049;Ev:384;H:57;W:6677>{ SC: ( pid_21:o#17 , ( pid_29:cp1 , pid_34:dp1 , pid_39:dp1 ) , ( pid_48:cp3 , pid_53:dp3 , pid_57:dp2 ) , ( pid_64:cp2 , pid_69:dp2 , pid_73:dp1 ) , ( pid_80:cp1 , pid_86:dp2 , pid_89:dp0 ) )
																					
																						
																	EXE: { |;| 
	(:pid_25 , run) (:pid_32 , run) (:pid_35 , run) (:pid_35 , dp_resetTau) (:pid_2 
	, run) }
																					
																						
																	TRACE: { |;| 
	(:pid_25 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1480 }) 
	(:pid_35 , ${ newfresh inst::Trickle.Node.DataProcess.t 
	param::Trickle.Node.DataProcess.t_2078 }) }
																					
																						
																	NC: ((t_2078 < 8)
	 && (0 <= (t_2078 + -4)))
																																																										PC: ((t_1206 < 8) && (t_1465 < 8) && (t_1506 < 8) && (t_1556 < 4) && (t_1722 < 4) && 
	(t_233 < 8) && (t_242 < 8) && (t_33 < 4) && (t_44 < 4) && (t_557 < 4) && (t_59 < 
	4) && (t_630 < 4) && (t_636 < 4) && (t_64 < 4) && (t_8 < 4) && (t_907 < 4) && 
	(t_1002 < 4) && (t_1191 < 4) && (t_1399 < 8) && (t_1579 < 8) && (t_1667 < 8) && 
	(t_2078 < 8) && (t_235 < 4) && (t_249 < 4) && (t_325 < 4) && (t_452 < 4) && 
	(t_662 < 4) && (t_759 < 4) && (t_8 < 4) && (t_839 < 4) && (t_934 < 4) && (0 <= 
	(t_1206 + -4)) && (0 <= (t_1465 + -4)) && (0 <= (t_1506 + -4)) && (0 <= (t_1556 
	+ -2)) && (0 <= (t_1722 + -2)) && (0 <= (t_233 + -4)) && (0 <= (t_242 + -4)) && 
	(0 <= (t_33 + -2)) && (0 <= (t_44 + -2)) && (0 <= (t_557 + -2)) && (0 <= (t_59 + 
	-2)) && (0 <= (t_630 + -2)) && (0 <= (t_636 + -2)) && (0 <= (t_64 + -2)) && (0 
	<= (t_8 + -2)) && (0 <= (t_907 + -2)) && (0 <= (t_1002 + -2)) && (0 <= (t_1191 + 
	-2)) && (0 <= (t_1399 + -4)) && (0 <= (t_1579 + -4)) && (0 <= (t_1667 + -4)) && 
	(0 <= (t_2078 + -4)) && (0 <= (t_235 + -2)) && (0 <= (t_249 + -2)) && (0 <= 
	(t_325 + -2)) && (0 <= (t_452 + -2)) && (0 <= (t_662 + -2)) && (0 <= (t_759 + -2)
	) && (0 <= (t_8 + -2)) && (0 <= (t_839 + -2)) && (0 <= (t_934 + -2)))
																																																										DATA{
																																																											:pid_2:uncoveredExit = 14;
																																																											:pid_25:$time = (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_20 + z_228 + z_4 + z_96);
																																																											:pid_25:z = z_1480;
																																																											:pid_25:localTime = (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_20 + z_228 + z_4 + z_96);
																																																											:pid_25:localPC = ((t_1465 < 8) && (t_1556 < 4) && (t_8 < 4) && (t_1579 < 8) && (t_2078 < 8) && (t_235 < 4) && (t_8 < 4) && (0 <= (t_1465 + -4)) && (0 <= (t_1556 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_1579 + -4)) && (0 <= (t_2078 + -4)) && (0 <= (t_235 + -2)) && (0 <= (t_8 + -2)));
																																																											:pid_25:localPtC = (((z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_20 + z_228 + z_4 + z_96) == 4) && ((z_1092 + z_1204 + z_132 + z_20 + z_228 + z_96) == 4) && ((z_1092 + z_228) == 4) && ((z_20 + z_4 + z_96) == t_8) && (z_20 == t_8) && (z_228 == t_235) && (z_1264 < t_1465) && ((z_186 + z_198 + z_270 + z_62 + z_70) <= (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_20 + z_228 + z_4 + z_96)) && ((z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_20 + z_228 + z_4 + z_96) > t_8) && ((z_1092 + z_1204 + z_132 + z_20 + z_228 + z_96) > t_8) && ((z_1092 + z_228) > t_235) && ($delta#initial > 0) && (z_0 > 0) && (z_1092 > 0) && (z_1204 > 0) && (z_1264 > 0) && (z_132 > 0) && (z_20 > 0) && (z_228 > 0) && (z_4 > 0) && (z_96 > 0));
																																																											:pid_26:cl = z_1480;
																																																											:pid_32:e = 1;
																																																											:pid_32:c = 0;
																																																											:pid_32:tau = 8;
																																																											:pid_32:t = t_2078;
																																																											:pid_32:cl = 0;
																																																											:pid_37:cl = (z_1204 + z_1264 + z_1480);
																																																										}
																																																										EC:<Id:7202;Ev:386;H:58;W:6818>{ SC: ( pid_21:o#17 , ( pid_29:cp1 , pid_34:dp1 , pid_39:dp1 ) , ( pid_48:cp3 , pid_53:dp3 , pid_57:dp2 ) , ( pid_64:cp2 , pid_68:dp1 , pid_73:dp1 ) , ( pid_80:cp1 , pid_86:dp2 , pid_89:dp0 ) )
																					
																						
																		EXE: { |;| 
	(:pid_59 , run) (:pid_66 , run) (:pid_69 , run) (:pid_69 , 
	dp2_receiveDM_inconsistent) (:pid_2 , run) }
																					
																						
																		TRACE: { |;| 
	(:pid_59 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1530 }) 
	(:pid_69 , ${ input inst::Trickle.Node.DataMsg1 [ 2 , 2 , 1 ] ${ + 
	param::Trickle.Node.z_1161 param::Trickle.Node.z_1229 param::Trickle.Node.z_1321 
	param::Trickle.Node.z_1361 param::Trickle.Node.z_1397 param::Trickle.Node.z_141 
	param::Trickle.Node.z_165 param::Trickle.Node.z_273 param::Trickle.Node.z_305 
	param::Trickle.Node.z_33 param::Trickle.Node.z_337 param::Trickle.Node.z_405 
	param::Trickle.Node.z_441 param::Trickle.Node.z_45 param::Trickle.Node.z_473 
	param::Trickle.Node.z_493 param::Trickle.Node.z_529 param::Trickle.Node.z_821 
	param::Trickle.Node.z_953 param::Trickle.Node.z_997 } } @ (z_1022 + z_1298 + 
	z_1422 + z_1442 + z_1530 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 
	+ z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862)) (:pid_69 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_2161 }) }
																					
																						
																		NC: ((t_2161 
	< 4) && (0 <= (t_2161 + -2)))
																																																											PC: ((t_1206 < 8) && (t_1465 < 8) && (t_1506 < 8) && (t_1556 < 4) && (t_1722 < 4) && 
	(t_233 < 8) && (t_242 < 8) && (t_33 < 4) && (t_44 < 4) && (t_557 < 4) && (t_59 < 
	4) && (t_630 < 4) && (t_636 < 4) && (t_64 < 4) && (t_8 < 4) && (t_907 < 4) && 
	(t_1002 < 4) && (t_1191 < 4) && (t_1399 < 8) && (t_1579 < 8) && (t_1667 < 8) && 
	(t_2078 < 8) && (t_2161 < 4) && (t_235 < 4) && (t_249 < 4) && (t_325 < 4) && 
	(t_452 < 4) && (t_662 < 4) && (t_759 < 4) && (t_8 < 4) && (t_839 < 4) && (t_934 
	< 4) && (0 <= (t_1206 + -4)) && (0 <= (t_1465 + -4)) && (0 <= (t_1506 + -4)) && 
	(0 <= (t_1556 + -2)) && (0 <= (t_1722 + -2)) && (0 <= (t_233 + -4)) && (0 <= 
	(t_242 + -4)) && (0 <= (t_33 + -2)) && (0 <= (t_44 + -2)) && (0 <= (t_557 + -2)) 
	&& (0 <= (t_59 + -2)) && (0 <= (t_630 + -2)) && (0 <= (t_636 + -2)) && (0 <= 
	(t_64 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_907 + -2)) && (0 <= (t_1002 + -2)) 
	&& (0 <= (t_1191 + -2)) && (0 <= (t_1399 + -4)) && (0 <= (t_1579 + -4)) && (0 <= 
	(t_1667 + -4)) && (0 <= (t_2078 + -4)) && (0 <= (t_2161 + -2)) && (0 <= (t_235 + 
	-2)) && (0 <= (t_249 + -2)) && (0 <= (t_325 + -2)) && (0 <= (t_452 + -2)) && (0 
	<= (t_662 + -2)) && (0 <= (t_759 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_839 + 
	-2)) && (0 <= (t_934 + -2)))
																																																											DATA{
																																																												:pid_2:uncoveredExit = 15;
																																																												:pid_59:$time = (z_1022 + z_1298 + z_1422 + z_1442 + z_1530 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862);
																																																												:pid_59:z = z_1530;
																																																												:pid_59:localTime = (z_1022 + z_1298 + z_1422 + z_1442 + z_1530 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862);
																																																												:pid_59:localPC = ((t_1722 < 4) && (t_233 < 8) && (t_557 < 4) && (t_59 < 4) && (t_64 < 4) && (t_1002 < 4) && (t_2161 < 4) && (t_325 < 4) && (t_662 < 4) && (t_934 < 4) && (0 <= (t_1722 + -2)) && (0 <= (t_233 + -4)) && (0 <= (t_557 + -2)) && (0 <= (t_59 + -2)) && (0 <= (t_64 + -2)) && (0 <= (t_1002 + -2)) && (0 <= (t_2161 + -2)) && (0 <= (t_325 + -2)) && (0 <= (t_662 + -2)) && (0 <= (t_934 + -2)));
																																																												:pid_59:localPtC = (((z_1022 + z_1298 + z_550 + z_570 + z_602 + z_622 + z_658 + z_670 + z_862) == t_662) && ((z_186 + z_198 + z_270) == t_64) && ((z_186 + z_198 + z_270 + z_330) == 4) && ((z_386 + z_550 + z_570) == t_233) && (z_1442 == t_1722) && (z_670 == t_557) && ((z_1022 + z_1298 + z_1422 + z_1442 + z_1530 + z_550 + z_570 + z_602 + z_622 + z_658 + z_670 + z_862) < 4) && ((z_1022 + z_1298 + z_1422 + z_670 + z_862) < 4) && ((z_1022 + z_550 + z_570 + z_602 + z_622 + z_658 + z_670 + z_862) < t_662) && ((z_198 + z_270 + z_330 + z_386) < t_325) && ((z_386 + z_550 + z_570 + z_602 + z_622 + z_658) < 8) && ((z_550 + z_570 + z_602 + z_622 + z_658 + z_670 + z_862) < t_662) && ((z_570 + z_602) < t_934) && (z_198 < t_325) && (z_622 < t_1002) && (z_70 < t_59) && ((z_0 + z_132 + z_20 + z_228 + z_4 + z_96) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_70)) && ((z_0 + z_132 + z_20 + z_228 + z_4 + z_96) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_62 + z_70)) && ((z_0 + z_20 + z_4) <= (z_62 + z_70)) && ((z_0 + z_20 + z_4 + z_96) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_70)) && ((z_0 + z_20 + z_4 + z_96) <= (z_186 + z_198 + z_62 + z_70)) && ((z_1161 + z_1229 + z_1321 + z_1361 + z_1397 + z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821 + z_953 + z_997) <= (z_1022 + z_1298 + z_1422 + z_1442 + z_1530 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862)) && ((z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862)) && ((z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821 + z_953 + z_997) <= (z_1022 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862)) && ((z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_45) <= (z_1022 + z_1298 + z_1422 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862)) && ((z_141 + z_165 + z_273 + z_305 + z_33 + z_45) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_70)) && ((z_186 + z_198 + z_270 + z_330) > t_64) && ($delta#initial > 0) && (z_1022 > 0) && (z_1298 > 0) && (z_1422 > 0) && (z_1442 > 0) && (z_186 > 0) && (z_198 > 0) && (z_270 > 0) && (z_330 > 0) && (z_386 > 0) && (z_550 > 0) && (z_570 > 0) && (z_602 > 0) && (z_62 > 0) && (z_622 > 0) && (z_658 > 0) && (z_670 > 0) && (z_70 > 0) && (z_862 > 0));
																																																												:pid_59:timeEmit = (z_1161 + z_1229 + z_1321 + z_1361 + z_1397 + z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821 + z_953 + z_997);
																																																												:pid_60:cl = (z_1442 + z_1530);
																																																												:pid_66:e = 0;
																																																												:pid_66:c = 0;
																																																												:pid_66:t = t_2161;
																																																												:pid_66:consistent = false;
																																																												:pid_66:cl = 0;
																																																												:pid_66:d.seq = 2;
																																																												:pid_66:d.fragment = FRAGMENT_1;
																																																												:pid_66:d.offset = 1;
																																																												:pid_71:cl = (z_1022 + z_1298 + z_1422 + z_1442 + z_1530 + z_622 + z_658 + z_670 + z_862);
																																																											}
																																																											BUFFER{
																																																												:pid_59:bufferDM1:<FIFO>#1{ }
																																																											}
																																																											EC:<Id:7230;Ev:393;H:59;W:6844>{ SC: ( pid_21:o#17 , ( pid_29:cp1 , pid_34:dp1 , pid_39:dp1 ) , ( pid_48:cp3 , pid_53:dp3 , pid_57:dp2 ) , ( pid_64:cp2 , pid_68:dp1 , pid_73:dp1 ) , ( pid_80:cp1 , pid_86:dp2 , pid_89:dp0 ) )
																					
																						
																			EXE: { 
	|;| (:pid_59 , run) (:pid_71 , run) (:pid_73 , run) (:pid_73 , 
	dp1_receiveDM_inconsistent) (:pid_2 , run) }
																					
																						
																			TRACE: { 
	|;| (:pid_59 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_1538 }) 
	(:pid_73 , ${ input inst::Trickle.Node.DataMsg2 [ 1 , 1 , 0 ] ${ + 
	param::Trickle.Node.z_141 param::Trickle.Node.z_165 param::Trickle.Node.z_273 
	param::Trickle.Node.z_305 param::Trickle.Node.z_33 param::Trickle.Node.z_337 
	param::Trickle.Node.z_405 param::Trickle.Node.z_441 param::Trickle.Node.z_45 
	param::Trickle.Node.z_473 param::Trickle.Node.z_493 param::Trickle.Node.z_529 
	param::Trickle.Node.z_821 } } @ (z_1022 + z_1298 + z_1422 + z_1442 + z_1530 + 
	z_1538 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + 
	z_622 + z_658 + z_670 + z_70 + z_862)) (:pid_73 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_2174 }) }
																					
																						
																			NC: 
	((t_2174 < 4) && (0 <= (t_2174 + -2)))
																																																												PC: ((t_1206 < 8) && (t_1465 < 8) && (t_1506 < 8) && (t_1556 < 4) && (t_1722 < 4) && 
	(t_233 < 8) && (t_242 < 8) && (t_33 < 4) && (t_44 < 4) && (t_557 < 4) && (t_59 < 
	4) && (t_630 < 4) && (t_636 < 4) && (t_64 < 4) && (t_8 < 4) && (t_907 < 4) && 
	(t_1002 < 4) && (t_1191 < 4) && (t_1399 < 8) && (t_1579 < 8) && (t_1667 < 8) && 
	(t_2078 < 8) && (t_2161 < 4) && (t_2174 < 4) && (t_235 < 4) && (t_249 < 4) && 
	(t_325 < 4) && (t_452 < 4) && (t_662 < 4) && (t_759 < 4) && (t_8 < 4) && (t_839 
	< 4) && (t_934 < 4) && (0 <= (t_1206 + -4)) && (0 <= (t_1465 + -4)) && (0 <= 
	(t_1506 + -4)) && (0 <= (t_1556 + -2)) && (0 <= (t_1722 + -2)) && (0 <= (t_233 + 
	-4)) && (0 <= (t_242 + -4)) && (0 <= (t_33 + -2)) && (0 <= (t_44 + -2)) && (0 <= 
	(t_557 + -2)) && (0 <= (t_59 + -2)) && (0 <= (t_630 + -2)) && (0 <= (t_636 + -2))
	 && (0 <= (t_64 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_907 + -2)) && (0 <= 
	(t_1002 + -2)) && (0 <= (t_1191 + -2)) && (0 <= (t_1399 + -4)) && (0 <= (t_1579 
	+ -4)) && (0 <= (t_1667 + -4)) && (0 <= (t_2078 + -4)) && (0 <= (t_2161 + -2)) 
	&& (0 <= (t_2174 + -2)) && (0 <= (t_235 + -2)) && (0 <= (t_249 + -2)) && (0 <= 
	(t_325 + -2)) && (0 <= (t_452 + -2)) && (0 <= (t_662 + -2)) && (0 <= (t_759 + -2)
	) && (0 <= (t_8 + -2)) && (0 <= (t_839 + -2)) && (0 <= (t_934 + -2)))
																																																												DATA{
																																																													:pid_2:uncoveredExit = 16;
																																																													:pid_59:$time = (z_1022 + z_1298 + z_1422 + z_1442 + z_1530 + z_1538 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862);
																																																													:pid_59:z = z_1538;
																																																													:pid_59:localTime = (z_1022 + z_1298 + z_1422 + z_1442 + z_1530 + z_1538 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862);
																																																													:pid_59:localPC = ((t_1722 < 4) && (t_233 < 8) && (t_557 < 4) && (t_59 < 4) && (t_64 < 4) && (t_1002 < 4) && (t_2161 < 4) && (t_2174 < 4) && (t_325 < 4) && (t_662 < 4) && (t_934 < 4) && (0 <= (t_1722 + -2)) && (0 <= (t_233 + -4)) && (0 <= (t_557 + -2)) && (0 <= (t_59 + -2)) && (0 <= (t_64 + -2)) && (0 <= (t_1002 + -2)) && (0 <= (t_2161 + -2)) && (0 <= (t_2174 + -2)) && (0 <= (t_325 + -2)) && (0 <= (t_662 + -2)) && (0 <= (t_934 + -2)));
																																																													:pid_59:localPtC = (((z_1022 + z_1298 + z_550 + z_570 + z_602 + z_622 + z_658 + z_670 + z_862) == t_662) && ((z_186 + z_198 + z_270) == t_64) && ((z_186 + z_198 + z_270 + z_330) == 4) && ((z_386 + z_550 + z_570) == t_233) && (z_1442 == t_1722) && (z_670 == t_557) && ((z_1022 + z_1298 + z_1422 + z_1442 + z_1530 + z_1538 + z_622 + z_658 + z_670 + z_862) < t_1002) && ((z_1022 + z_1298 + z_1422 + z_1442 + z_1530 + z_550 + z_570 + z_602 + z_622 + z_658 + z_670 + z_862) < 4) && ((z_1022 + z_1298 + z_1422 + z_670 + z_862) < 4) && ((z_1022 + z_550 + z_570 + z_602 + z_622 + z_658 + z_670 + z_862) < t_662) && ((z_198 + z_270 + z_330 + z_386) < t_325) && ((z_386 + z_550 + z_570 + z_602 + z_622 + z_658) < 8) && ((z_550 + z_570 + z_602 + z_622 + z_658 + z_670 + z_862) < t_662) && ((z_570 + z_602) < t_934) && (z_198 < t_325) && (z_622 < t_1002) && (z_70 < t_59) && ((z_0 + z_132 + z_20 + z_228 + z_4 + z_96) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_70)) && ((z_0 + z_132 + z_20 + z_228 + z_4 + z_96) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_62 + z_70)) && ((z_0 + z_20 + z_4) <= (z_62 + z_70)) && ((z_0 + z_20 + z_4 + z_96) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_70)) && ((z_0 + z_20 + z_4 + z_96) <= (z_186 + z_198 + z_62 + z_70)) && ((z_1161 + z_1229 + z_1321 + z_1361 + z_1397 + z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821 + z_953 + z_997) <= (z_1022 + z_1298 + z_1422 + z_1442 + z_1530 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862)) && ((z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821) <= (z_1022 + z_1298 + z_1422 + z_1442 + z_1530 + z_1538 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862)) && ((z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862)) && ((z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821 + z_953 + z_997) <= (z_1022 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862)) && ((z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_45) <= (z_1022 + z_1298 + z_1422 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862)) && ((z_141 + z_165 + z_273 + z_305 + z_33 + z_45) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_70)) && ((z_186 + z_198 + z_270 + z_330) > t_64) && ($delta#initial > 0) && (z_1022 > 0) && (z_1298 > 0) && (z_1422 > 0) && (z_1442 > 0) && (z_1530 > 0) && (z_186 > 0) && (z_198 > 0) && (z_270 > 0) && (z_330 > 0) && (z_386 > 0) && (z_550 > 0) && (z_570 > 0) && (z_602 > 0) && (z_62 > 0) && (z_622 > 0) && (z_658 > 0) && (z_670 > 0) && (z_70 > 0) && (z_862 > 0));
																																																													:pid_59:timeEmit = (z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821);
																																																													:pid_60:cl = (z_1442 + z_1530 + z_1538);
																																																													:pid_66:cl = z_1538;
																																																													:pid_71:c = 0;
																																																													:pid_71:t = t_2174;
																																																													:pid_71:consistent = false;
																																																													:pid_71:cl = 0;
																																																													:pid_71:d.seq = 1;
																																																													:pid_71:d.fragment = FRAGMENT_0;
																																																													:pid_71:d.offset = 0;
																																																												}
																																																												BUFFER{
																																																													:pid_59:bufferDM2:<FIFO>#2{
																																																														:pid_42:DataMsg1([ 1 , 1 , 0 ] , (z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821 + z_953 + z_997));
																																																														:pid_42:DataMsg2([ 2 , 2 , 1 ] , (z_1161 + z_1229 + z_1321 + z_1361 + z_1397 + z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821 + z_953 + z_997));
																																																													}
																																																												}
																																																												EC:<Id:7316;Ev:399;H:60;W:6923>{ SC: ( pid_21:o#17 , ( pid_29:cp1 , pid_34:dp1 , pid_39:dp1 ) , ( pid_48:cp3 , pid_53:dp3 , pid_57:dp2 ) , ( pid_64:cp2 , pid_68:dp1 , pid_73:dp1 ) , ( pid_80:cp1 , pid_85:dp1 , pid_89:dp0 ) )
																					
																						
																				EXE: 
	{ |;| (:pid_76 , run) (:pid_83 , run) (:pid_86 , run) (:pid_86 , dp_resetTau) 
	(:pid_2 , run) }
																					
																						
																				
	TRACE: { |;| (:pid_76 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_1567 }) (:pid_86 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_2206 }) }
																					
																						
																				NC: 
	((t_2206 < 8) && (0 <= (t_2206 + -4)))
																																																													PC: ((t_1206 < 8) && (t_1465 < 8) && (t_1506 < 8) && (t_1556 < 4) && (t_1722 < 4) && 
	(t_233 < 8) && (t_242 < 8) && (t_33 < 4) && (t_44 < 4) && (t_557 < 4) && (t_59 < 
	4) && (t_630 < 4) && (t_636 < 4) && (t_64 < 4) && (t_8 < 4) && (t_907 < 4) && 
	(t_1002 < 4) && (t_1191 < 4) && (t_1399 < 8) && (t_1579 < 8) && (t_1667 < 8) && 
	(t_2078 < 8) && (t_2161 < 4) && (t_2174 < 4) && (t_2206 < 8) && (t_235 < 4) && 
	(t_249 < 4) && (t_325 < 4) && (t_452 < 4) && (t_662 < 4) && (t_759 < 4) && (t_8 
	< 4) && (t_839 < 4) && (t_934 < 4) && (0 <= (t_1206 + -4)) && (0 <= (t_1465 + -4)
	) && (0 <= (t_1506 + -4)) && (0 <= (t_1556 + -2)) && (0 <= (t_1722 + -2)) && (0 
	<= (t_233 + -4)) && (0 <= (t_242 + -4)) && (0 <= (t_33 + -2)) && (0 <= (t_44 + 
	-2)) && (0 <= (t_557 + -2)) && (0 <= (t_59 + -2)) && (0 <= (t_630 + -2)) && (0 
	<= (t_636 + -2)) && (0 <= (t_64 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_907 + -2)
	) && (0 <= (t_1002 + -2)) && (0 <= (t_1191 + -2)) && (0 <= (t_1399 + -4)) && (0 
	<= (t_1579 + -4)) && (0 <= (t_1667 + -4)) && (0 <= (t_2078 + -4)) && (0 <= 
	(t_2161 + -2)) && (0 <= (t_2174 + -2)) && (0 <= (t_2206 + -4)) && (0 <= (t_235 + 
	-2)) && (0 <= (t_249 + -2)) && (0 <= (t_325 + -2)) && (0 <= (t_452 + -2)) && (0 
	<= (t_662 + -2)) && (0 <= (t_759 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_839 + 
	-2)) && (0 <= (t_934 + -2)))
																																																													DATA{
																																																														:pid_2:uncoveredExit = 17;
																																																														:pid_76:$time = (z_1051 + z_1159 + z_1567 + z_711 + z_715 + z_763 + z_775 + z_887 + z_895);
																																																														:pid_76:z = z_1567;
																																																														:pid_76:reach_DATA_EXPIR_DM2 = (e_7 == 2);
																																																														:pid_76:localTime = (z_1051 + z_1159 + z_1567 + z_711 + z_715 + z_763 + z_775 + z_887 + z_895);
																																																														:pid_76:localPC = ((t_1206 < 8) && (t_630 < 4) && (t_636 < 4) && (t_907 < 4) && (t_1191 < 4) && (t_2206 < 8) && (0 <= (t_1206 + -4)) && (0 <= (t_630 + -2)) && (0 <= (t_636 + -2)) && (0 <= (t_907 + -2)) && (0 <= (t_1191 + -2)) && (0 <= (t_2206 + -4)));
																																																														:pid_76:localPtC = (((z_1051 + z_1159 + z_1567 + z_775 + z_887 + z_895) == 4) && ((z_1051 + z_1159 + z_775 + z_887 + z_895) == t_1191) && ((z_1051 + z_895) == 4) && ((z_763 + z_775) == t_636) && (z_895 == t_907) && ((z_763 + z_775 + z_887) < 4) && (z_715 < t_630) && ((z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_62 + z_70) <= (z_711 + z_715 + z_763 + z_775 + z_887)) && ((z_186 + z_198 + z_270 + z_62 + z_70) <= (z_711 + z_715)) && ((z_1051 + z_1159 + z_1567 + z_775 + z_887 + z_895) > t_1191) && ((z_1051 + z_895) > t_907) && ($delta#initial > 0) && (z_1051 > 0) && (z_1159 > 0) && (z_711 > 0) && (z_715 > 0) && (z_763 > 0) && (z_775 > 0) && (z_887 > 0) && (z_895 > 0));
																																																														:pid_77:cl = (z_1159 + z_1567);
																																																														:pid_83:e = 1;
																																																														:pid_83:c = 0;
																																																														:pid_83:tau = 8;
																																																														:pid_83:t = t_2206;
																																																														:pid_83:cl = 0;
																																																														:pid_88:cl = (z_1051 + z_1159 + z_1567 + z_711 + z_715 + z_763 + z_775 + z_887 + z_895);
																																																													}
																																																													EC:<Id:7392;Ev:401;H:61;W:6993>{ SC: ( pid_21:o#17 , ( pid_29:cp1 , pid_34:dp1 , pid_39:dp1 ) , ( pid_48:cp3 , pid_53:dp3 , pid_57:dp2 ) , ( pid_64:cp2 , pid_68:dp1 , pid_73:dp1 ) , ( pid_80:cp1 , pid_85:dp1 , pid_89:dp0 ) )
																					
																						
																					
	EXE: { |;| (:pid_76 , run) (:pid_77 , run) (:pid_80 , run) (:pid_80 , 
	cp1_receiveCM_inconsistent) (:pid_2 , run) }
																					
																						
																					
	TRACE: { |;| (:pid_76 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_1591 }) (:pid_80 , ${ input inst::Trickle.Node.ControlMsg 
	[ 1 , 1 ] ${ + param::Trickle.Node.z_186 param::Trickle.Node.z_198 
	param::Trickle.Node.z_270 param::Trickle.Node.z_330 param::Trickle.Node.z_386 
	param::Trickle.Node.z_550 param::Trickle.Node.z_570 param::Trickle.Node.z_602 
	param::Trickle.Node.z_62 param::Trickle.Node.z_622 param::Trickle.Node.z_658 
	param::Trickle.Node.z_670 param::Trickle.Node.z_70 } } @ (z_1051 + z_1159 + 
	z_1567 + z_1591 + z_711 + z_715 + z_763 + z_775 + z_887 + z_895)) (:pid_80 , ${ 
	newfresh inst::Trickle.Node.ControlProcess.t 
	param::Trickle.Node.ControlProcess.t_1860 }) }
																					
																						
																					
	NC: ((t_1860 < 4) && (0 <= (t_1860 + -2)))
																																																														PC: ((t_1206 < 8) && (t_1465 < 8) && (t_1506 < 8) && (t_1556 < 4) && (t_1722 < 4) && 
	(t_1860 < 4) && (t_233 < 8) && (t_242 < 8) && (t_33 < 4) && (t_44 < 4) && (t_557 
	< 4) && (t_59 < 4) && (t_630 < 4) && (t_636 < 4) && (t_64 < 4) && (t_8 < 4) && 
	(t_907 < 4) && (t_1002 < 4) && (t_1191 < 4) && (t_1399 < 8) && (t_1579 < 8) && 
	(t_1667 < 8) && (t_2078 < 8) && (t_2161 < 4) && (t_2174 < 4) && (t_2206 < 8) && 
	(t_235 < 4) && (t_249 < 4) && (t_325 < 4) && (t_452 < 4) && (t_662 < 4) && 
	(t_759 < 4) && (t_8 < 4) && (t_839 < 4) && (t_934 < 4) && (0 <= (t_1206 + -4)) 
	&& (0 <= (t_1465 + -4)) && (0 <= (t_1506 + -4)) && (0 <= (t_1556 + -2)) && (0 <= 
	(t_1722 + -2)) && (0 <= (t_1860 + -2)) && (0 <= (t_233 + -4)) && (0 <= (t_242 + 
	-4)) && (0 <= (t_33 + -2)) && (0 <= (t_44 + -2)) && (0 <= (t_557 + -2)) && (0 <= 
	(t_59 + -2)) && (0 <= (t_630 + -2)) && (0 <= (t_636 + -2)) && (0 <= (t_64 + -2)) 
	&& (0 <= (t_8 + -2)) && (0 <= (t_907 + -2)) && (0 <= (t_1002 + -2)) && (0 <= 
	(t_1191 + -2)) && (0 <= (t_1399 + -4)) && (0 <= (t_1579 + -4)) && (0 <= (t_1667 
	+ -4)) && (0 <= (t_2078 + -4)) && (0 <= (t_2161 + -2)) && (0 <= (t_2174 + -2)) 
	&& (0 <= (t_2206 + -4)) && (0 <= (t_235 + -2)) && (0 <= (t_249 + -2)) && (0 <= 
	(t_325 + -2)) && (0 <= (t_452 + -2)) && (0 <= (t_662 + -2)) && (0 <= (t_759 + -2)
	) && (0 <= (t_8 + -2)) && (0 <= (t_839 + -2)) && (0 <= (t_934 + -2)))
																																																														DATA{
																																																															:pid_2:uncoveredExit = 18;
																																																															:pid_76:mydp_run[1] = true;
																																																															:pid_76:$time = (z_1051 + z_1159 + z_1567 + z_1591 + z_711 + z_715 + z_763 + z_775 + z_887 + z_895);
																																																															:pid_76:z = z_1591;
																																																															:pid_76:reach_DATA_EXPIR_DM2 = (e_7 == 2);
																																																															:pid_76:seq_buff[1] = 1;
																																																															:pid_76:localTime = (z_1051 + z_1159 + z_1567 + z_1591 + z_711 + z_715 + z_763 + z_775 + z_887 + z_895);
																																																															:pid_76:localPC = ((t_1206 < 8) && (t_1860 < 4) && (t_630 < 4) && (t_636 < 4) && (t_907 < 4) && (t_1191 < 4) && (t_2206 < 8) && (0 <= (t_1206 + -4)) && (0 <= (t_1860 + -2)) && (0 <= (t_630 + -2)) && (0 <= (t_636 + -2)) && (0 <= (t_907 + -2)) && (0 <= (t_1191 + -2)) && (0 <= (t_2206 + -4)));
																																																															:pid_76:localPtC = (((z_1051 + z_1159 + z_1567 + z_775 + z_887 + z_895) == 4) && ((z_1051 + z_1159 + z_775 + z_887 + z_895) == t_1191) && ((z_1051 + z_895) == 4) && ((z_763 + z_775) == t_636) && (z_895 == t_907) && ((z_1159 + z_1567 + z_1591) < t_1206) && ((z_763 + z_775 + z_887) < 4) && (z_715 < t_630) && ((z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70) <= (z_1051 + z_1159 + z_1567 + z_1591 + z_711 + z_715 + z_763 + z_775 + z_887 + z_895)) && ((z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_62 + z_70) <= (z_711 + z_715 + z_763 + z_775 + z_887)) && ((z_186 + z_198 + z_270 + z_62 + z_70) <= (z_711 + z_715)) && ((z_1051 + z_1159 + z_1567 + z_775 + z_887 + z_895) > t_1191) && ((z_1051 + z_895) > t_907) && ($delta#initial > 0) && (z_1051 > 0) && (z_1159 > 0) && (z_1567 > 0) && (z_711 > 0) && (z_715 > 0) && (z_763 > 0) && (z_775 > 0) && (z_887 > 0) && (z_895 > 0));
																																																															:pid_76:timeEmit = (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70);
																																																															:pid_77:e = 0;
																																																															:pid_77:c = 0;
																																																															:pid_77:tau = 4;
																																																															:pid_77:i = 2;
																																																															:pid_77:t = t_1860;
																																																															:pid_77:cl = 0;
																																																															:pid_83:cl = z_1591;
																																																															:pid_88:cl = (z_1051 + z_1159 + z_1567 + z_1591 + z_711 + z_715 + z_763 + z_775 + z_887 + z_895);
																																																														}
																																																														BUFFER{
																																																															:pid_76:bufferCM:<FIFO>#0{
																																																																:pid_59:ControlMsg([ 1 , 1 ] , (z_1022 + z_1298 + z_1422 + z_1442 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862));
																																																															}
																																																														}
																																																														EC:<Id:7425;Ev:412;H:62;W:7024>{ SC: ( pid_21:o#17 , ( pid_29:cp1 , pid_34:dp1 , pid_39:dp1 ) , ( pid_48:cp3 , pid_53:dp3 , pid_57:dp2 ) , ( pid_64:cp2 , pid_68:dp1 , pid_73:dp1 ) , ( pid_80:cp1 , pid_85:dp1 , pid_89:dp0 ) )
																					
																						
																						
	EXE: { |;| (:pid_25 , run) (:pid_26 , run) (:pid_29 , run) (:pid_29 , 
	cp1_receiveCM_inconsistent) (:pid_2 , run) }
																					
																						
																						
	TRACE: { |;| (:pid_25 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_1596 }) (:pid_29 , ${ input inst::Trickle.Node.ControlMsg 
	[ 1 , 0 ] ${ + param::Trickle.Node.z_186 param::Trickle.Node.z_198 
	param::Trickle.Node.z_270 param::Trickle.Node.z_330 param::Trickle.Node.z_386 
	param::Trickle.Node.z_550 param::Trickle.Node.z_570 param::Trickle.Node.z_62 
	param::Trickle.Node.z_70 } } @ (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 
	+ z_1596 + z_20 + z_228 + z_4 + z_96)) (:pid_29 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_1865 }) 
	}
																					
																						
																						
	NC: ((t_1865 < 4) && (0 <= (t_1865 + -2)))
																																																															PC: ((t_1206 < 8) && (t_1465 < 8) && (t_1506 < 8) && (t_1556 < 4) && (t_1722 < 4) && 
	(t_1860 < 4) && (t_1865 < 4) && (t_233 < 8) && (t_242 < 8) && (t_33 < 4) && 
	(t_44 < 4) && (t_557 < 4) && (t_59 < 4) && (t_630 < 4) && (t_636 < 4) && (t_64 < 
	4) && (t_8 < 4) && (t_907 < 4) && (t_1002 < 4) && (t_1191 < 4) && (t_1399 < 8) 
	&& (t_1579 < 8) && (t_1667 < 8) && (t_2078 < 8) && (t_2161 < 4) && (t_2174 < 4) 
	&& (t_2206 < 8) && (t_235 < 4) && (t_249 < 4) && (t_325 < 4) && (t_452 < 4) && 
	(t_662 < 4) && (t_759 < 4) && (t_8 < 4) && (t_839 < 4) && (t_934 < 4) && (0 <= 
	(t_1206 + -4)) && (0 <= (t_1465 + -4)) && (0 <= (t_1506 + -4)) && (0 <= (t_1556 
	+ -2)) && (0 <= (t_1722 + -2)) && (0 <= (t_1860 + -2)) && (0 <= (t_1865 + -2)) 
	&& (0 <= (t_233 + -4)) && (0 <= (t_242 + -4)) && (0 <= (t_33 + -2)) && (0 <= 
	(t_44 + -2)) && (0 <= (t_557 + -2)) && (0 <= (t_59 + -2)) && (0 <= (t_630 + -2)) 
	&& (0 <= (t_636 + -2)) && (0 <= (t_64 + -2)) && (0 <= (t_8 + -2)) && (0 <= 
	(t_907 + -2)) && (0 <= (t_1002 + -2)) && (0 <= (t_1191 + -2)) && (0 <= (t_1399 + 
	-4)) && (0 <= (t_1579 + -4)) && (0 <= (t_1667 + -4)) && (0 <= (t_2078 + -4)) && 
	(0 <= (t_2161 + -2)) && (0 <= (t_2174 + -2)) && (0 <= (t_2206 + -4)) && (0 <= 
	(t_235 + -2)) && (0 <= (t_249 + -2)) && (0 <= (t_325 + -2)) && (0 <= (t_452 + -2)
	) && (0 <= (t_662 + -2)) && (0 <= (t_759 + -2)) && (0 <= (t_8 + -2)) && (0 <= 
	(t_839 + -2)) && (0 <= (t_934 + -2)))
																																																															DATA{
																																																																:pid_2:uncoveredExit = 19;
																																																																:pid_25:$time = (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_1596 + z_20 + z_228 + z_4 + z_96);
																																																																:pid_25:z = z_1596;
																																																																:pid_25:localTime = (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_1596 + z_20 + z_228 + z_4 + z_96);
																																																																:pid_25:localPC = ((t_1465 < 8) && (t_1556 < 4) && (t_1865 < 4) && (t_8 < 4) && (t_1579 < 8) && (t_2078 < 8) && (t_235 < 4) && (t_8 < 4) && (0 <= (t_1465 + -4)) && (0 <= (t_1556 + -2)) && (0 <= (t_1865 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_1579 + -4)) && (0 <= (t_2078 + -4)) && (0 <= (t_235 + -2)) && (0 <= (t_8 + -2)));
																																																																:pid_25:localPtC = (((z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_20 + z_228 + z_4 + z_96) == 4) && ((z_1092 + z_1204 + z_132 + z_20 + z_228 + z_96) == 4) && ((z_1092 + z_228) == 4) && ((z_20 + z_4 + z_96) == t_8) && (z_20 == t_8) && (z_228 == t_235) && ((z_1480 + z_1596) < t_1556) && (z_1264 < t_1465) && ((z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_62 + z_70) <= (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_1596 + z_20 + z_228 + z_4 + z_96)) && ((z_186 + z_198 + z_270 + z_62 + z_70) <= (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_20 + z_228 + z_4 + z_96)) && ((z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_20 + z_228 + z_4 + z_96) > t_8) && ((z_1092 + z_1204 + z_132 + z_20 + z_228 + z_96) > t_8) && ((z_1092 + z_228) > t_235) && ($delta#initial > 0) && (z_0 > 0) && (z_1092 > 0) && (z_1204 > 0) && (z_1264 > 0) && (z_132 > 0) && (z_1480 > 0) && (z_20 > 0) && (z_228 > 0) && (z_4 > 0) && (z_96 > 0));
																																																																:pid_25:timeEmit = (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_62 + z_70);
																																																																:pid_26:i = 2;
																																																																:pid_26:t = t_1865;
																																																																:pid_26:cl = 0;
																																																																:pid_32:cl = z_1596;
																																																																:pid_37:cl = (z_1204 + z_1264 + z_1480 + z_1596);
																																																															}
																																																															BUFFER{
																																																																:pid_25:bufferCM:<FIFO>#0{
																																																																	:pid_59:ControlMsg([ 1 , 1 ] , (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70));
																																																																	:pid_59:ControlMsg([ 1 , 1 ] , (z_1022 + z_1298 + z_1422 + z_1442 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862));
																																																																}
																																																															}
																																																															EC:<Id:7567;Ev:422;H:63;W:7155>{ SC: ( pid_21:o#17 , ( pid_30:cp2 , pid_34:dp1 , pid_39:dp1 ) , ( pid_48:cp3 , pid_53:dp3 , pid_57:dp2 ) , ( pid_64:cp2 , pid_68:dp1 , pid_73:dp1 ) , ( pid_80:cp1 , pid_85:dp1 , pid_89:dp0 ) )
																					
																						
																						
		EXE: { |;| (:pid_25 , run) (:pid_26 , run) (:pid_29 , run) (:pid_29 , 
	cp_sendCM) (:pid_2 , run) }
																					
																						
																						
		TRACE: { |;| (:pid_25 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_1640 }) (:pid_29 , ${ output inst::Trickle.Node.ControlMsg 
	[ 1 , 1 ] ${ + param::Trickle.Node.z_0 param::Trickle.Node.z_1092 
	param::Trickle.Node.z_1204 param::Trickle.Node.z_1264 param::Trickle.Node.z_132 
	param::Trickle.Node.z_1480 param::Trickle.Node.z_1596 param::Trickle.Node.z_1640 
	param::Trickle.Node.z_20 param::Trickle.Node.z_228 param::Trickle.Node.z_4 
	param::Trickle.Node.z_96 } } @ (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 
	+ z_1596 + z_1640 + z_20 + z_228 + z_4 + z_96)) }
																																																																DATA{
																																																																	:pid_2:uncoveredExit = 20;
																																																																	:pid_25:$time = (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_1596 + z_1640 + z_20 + z_228 + z_4 + z_96);
																																																																	:pid_25:z = z_1640;
																																																																	:pid_25:localTime = (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_1596 + z_1640 + z_20 + z_228 + z_4 + z_96);
																																																																	:pid_25:localPC = ((t_1465 < 8) && (t_1556 < 4) && (t_1865 < 4) && (t_8 < 4) && (t_1579 < 8) && (t_2078 < 8) && (t_235 < 4) && (t_8 < 4) && (0 <= (t_1465 + -4)) && (0 <= (t_1556 + -2)) && (0 <= (t_1865 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_1579 + -4)) && (0 <= (t_2078 + -4)) && (0 <= (t_235 + -2)) && (0 <= (t_8 + -2)));
																																																																	:pid_25:localPtC = (((z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_20 + z_228 + z_4 + z_96) == 4) && ((z_1092 + z_1204 + z_132 + z_20 + z_228 + z_96) == 4) && ((z_1092 + z_228) == 4) && ((z_20 + z_4 + z_96) == t_8) && (z_1640 == t_1865) && (z_20 == t_8) && (z_228 == t_235) && ((z_1480 + z_1596) < t_1556) && (z_1264 < t_1465) && ((z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_62 + z_70) <= (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_1596 + z_20 + z_228 + z_4 + z_96)) && ((z_186 + z_198 + z_270 + z_62 + z_70) <= (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_20 + z_228 + z_4 + z_96)) && ((z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_20 + z_228 + z_4 + z_96) > t_8) && ((z_1092 + z_1204 + z_132 + z_20 + z_228 + z_96) > t_8) && ((z_1092 + z_228) > t_235) && ($delta#initial > 0) && (z_0 > 0) && (z_1092 > 0) && (z_1204 > 0) && (z_1264 > 0) && (z_132 > 0) && (z_1480 > 0) && (z_1596 > 0) && (z_20 > 0) && (z_228 > 0) && (z_4 > 0) && (z_96 > 0));
																																																																	:pid_26:cl = z_1640;
																																																																	:pid_32:cl = (z_1596 + z_1640);
																																																																	:pid_37:cl = (z_1204 + z_1264 + z_1480 + z_1596 + z_1640);
																																																																}
																																																																BUFFER{
																																																																	:pid_42:bufferCM:<FIFO>#0{
																																																																		:pid_76:ControlMsg([ 0 , 0 ] , (z_711 + z_715 + z_763 + z_775));
																																																																		:pid_76:ControlMsg([ 0 , 0 ] , (z_711 + z_715 + z_763 + z_775 + z_887 + z_895));
																																																																		:pid_25:ControlMsg([ 1 , 1 ] , (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_1596 + z_1640 + z_20 + z_228 + z_4 + z_96));
																																																																	}
																																																																	:pid_59:bufferCM:<FIFO>#0{
																																																																		:pid_25:ControlMsg([ 1 , 1 ] , (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_1596 + z_1640 + z_20 + z_228 + z_4 + z_96));
																																																																	}
																																																																}
																																																																EC:<Id:7698;Ev:426;H:64;W:7276>{ SC: ( pid_21:o#17 , ( pid_30:cp2 , pid_34:dp1 , pid_39:dp1 ) , ( pid_48:cp3 , pid_53:dp3 , pid_57:dp2 ) , ( pid_64:cp2 , pid_69:dp2 , pid_73:dp1 ) , ( pid_80:cp1 , pid_85:dp1 , pid_89:dp0 ) )
																					
																						
																						
			EXE: { |;| (:pid_59 , run) (:pid_66 , run) (:pid_68 , run) (:pid_68 , 
	dp_sendDM) (:pid_2 , run) }
																					
																						
																						
			TRACE: { |;| (:pid_59 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_1682 }) (:pid_68 , ${ output inst::Trickle.Node.DataMsg1 [ 
	1 , 1 , 0 ] ${ + param::Trickle.Node.z_1022 param::Trickle.Node.z_1298 
	param::Trickle.Node.z_1422 param::Trickle.Node.z_1442 param::Trickle.Node.z_1530 
	param::Trickle.Node.z_1538 param::Trickle.Node.z_1682 param::Trickle.Node.z_186 
	param::Trickle.Node.z_198 param::Trickle.Node.z_270 param::Trickle.Node.z_330 
	param::Trickle.Node.z_386 param::Trickle.Node.z_550 param::Trickle.Node.z_570 
	param::Trickle.Node.z_602 param::Trickle.Node.z_62 param::Trickle.Node.z_622 
	param::Trickle.Node.z_658 param::Trickle.Node.z_670 param::Trickle.Node.z_70 
	param::Trickle.Node.z_862 } } @ (z_1022 + z_1298 + z_1422 + z_1442 + z_1530 + 
	z_1538 + z_1682 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 
	+ z_62 + z_622 + z_658 + z_670 + z_70 + z_862)) }
																																																																	DATA{
																																																																		:pid_2:uncoveredExit = 21;
																																																																		:pid_59:$time = (z_1022 + z_1298 + z_1422 + z_1442 + z_1530 + z_1538 + z_1682 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862);
																																																																		:pid_59:z = z_1682;
																																																																		:pid_59:localTime = (z_1022 + z_1298 + z_1422 + z_1442 + z_1530 + z_1538 + z_1682 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862);
																																																																		:pid_59:localPC = ((t_1722 < 4) && (t_233 < 8) && (t_557 < 4) && (t_59 < 4) && (t_64 < 4) && (t_1002 < 4) && (t_2161 < 4) && (t_2174 < 4) && (t_325 < 4) && (t_662 < 4) && (t_934 < 4) && (0 <= (t_1722 + -2)) && (0 <= (t_233 + -4)) && (0 <= (t_557 + -2)) && (0 <= (t_59 + -2)) && (0 <= (t_64 + -2)) && (0 <= (t_1002 + -2)) && (0 <= (t_2161 + -2)) && (0 <= (t_2174 + -2)) && (0 <= (t_325 + -2)) && (0 <= (t_662 + -2)) && (0 <= (t_934 + -2)));
																																																																		:pid_59:localPtC = (((z_1022 + z_1298 + z_550 + z_570 + z_602 + z_622 + z_658 + z_670 + z_862) == t_662) && ((z_1538 + z_1682) == t_2161) && ((z_186 + z_198 + z_270) == t_64) && ((z_186 + z_198 + z_270 + z_330) == 4) && ((z_386 + z_550 + z_570) == t_233) && (z_1442 == t_1722) && (z_670 == t_557) && ((z_1022 + z_1298 + z_1422 + z_1442 + z_1530 + z_1538 + z_622 + z_658 + z_670 + z_862) < t_1002) && ((z_1022 + z_1298 + z_1422 + z_1442 + z_1530 + z_550 + z_570 + z_602 + z_622 + z_658 + z_670 + z_862) < 4) && ((z_1022 + z_1298 + z_1422 + z_670 + z_862) < 4) && ((z_1022 + z_550 + z_570 + z_602 + z_622 + z_658 + z_670 + z_862) < t_662) && ((z_198 + z_270 + z_330 + z_386) < t_325) && ((z_386 + z_550 + z_570 + z_602 + z_622 + z_658) < 8) && ((z_550 + z_570 + z_602 + z_622 + z_658 + z_670 + z_862) < t_662) && ((z_570 + z_602) < t_934) && (z_198 < t_325) && (z_622 < t_1002) && (z_70 < t_59) && ((z_0 + z_132 + z_20 + z_228 + z_4 + z_96) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_70)) && ((z_0 + z_132 + z_20 + z_228 + z_4 + z_96) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_62 + z_70)) && ((z_0 + z_20 + z_4) <= (z_62 + z_70)) && ((z_0 + z_20 + z_4 + z_96) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_70)) && ((z_0 + z_20 + z_4 + z_96) <= (z_186 + z_198 + z_62 + z_70)) && ((z_1161 + z_1229 + z_1321 + z_1361 + z_1397 + z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821 + z_953 + z_997) <= (z_1022 + z_1298 + z_1422 + z_1442 + z_1530 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862)) && ((z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821) <= (z_1022 + z_1298 + z_1422 + z_1442 + z_1530 + z_1538 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862)) && ((z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862)) && ((z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821 + z_953 + z_997) <= (z_1022 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862)) && ((z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_45) <= (z_1022 + z_1298 + z_1422 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862)) && ((z_141 + z_165 + z_273 + z_305 + z_33 + z_45) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_70)) && ((z_186 + z_198 + z_270 + z_330) > t_64) && ($delta#initial > 0) && (z_1022 > 0) && (z_1298 > 0) && (z_1422 > 0) && (z_1442 > 0) && (z_1530 > 0) && (z_1538 > 0) && (z_186 > 0) && (z_198 > 0) && (z_270 > 0) && (z_330 > 0) && (z_386 > 0) && (z_550 > 0) && (z_570 > 0) && (z_602 > 0) && (z_62 > 0) && (z_622 > 0) && (z_658 > 0) && (z_670 > 0) && (z_70 > 0) && (z_862 > 0));
																																																																		:pid_60:cl = (z_1442 + z_1530 + z_1538 + z_1682);
																																																																		:pid_66:cl = (z_1538 + z_1682);
																																																																		:pid_71:cl = z_1682;
																																																																	}
																																																																	BUFFER{
																																																																		:pid_25:bufferDM1:<FIFO>#1{
																																																																			:pid_59:DataMsg1([ 1 , 1 , 0 ] , (z_1022 + z_1298 + z_1422 + z_1442 + z_1530 + z_1538 + z_1682 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862));
																																																																		}
																																																																		:pid_25:bufferDM2:<FIFO>#2{
																																																																			:pid_59:DataMsg1([ 1 , 1 , 0 ] , (z_1022 + z_1298 + z_1422 + z_1442 + z_1530 + z_1538 + z_1682 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862));
																																																																		}
																																																																		:pid_76:bufferDM1:<FIFO>#1{
																																																																			:pid_59:DataMsg1([ 1 , 1 , 0 ] , (z_1022 + z_1298 + z_1422 + z_1442 + z_1530 + z_1538 + z_1682 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862));
																																																																		}
																																																																		:pid_76:bufferDM2:<FIFO>#2{
																																																																			:pid_59:DataMsg1([ 1 , 1 , 0 ] , (z_1022 + z_1298 + z_1422 + z_1442 + z_1530 + z_1538 + z_1682 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862));
																																																																		}
																																																																	}
																																																																	EC:<Id:7749;Ev:427;H:65;W:7276>{ SC: ( pid_21:o#17 , ( pid_30:cp2 , pid_34:dp1 , pid_39:dp1 ) , ( pid_48:cp3 , pid_53:dp3 , pid_57:dp2 ) , ( pid_64:cp2 , pid_69:dp2 , pid_73:dp1 ) , ( pid_81:cp2 , pid_85:dp1 , pid_89:dp0 ) )
																					
																						
																						
				EXE: { |;| (:pid_76 , run) (:pid_77 , run) (:pid_80 , run) (:pid_80 
	, cp_sendCM) (:pid_2 , run) }
																					
																						
																						
				TRACE: { |;| (:pid_76 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_1699 }) (:pid_80 , ${ output inst::Trickle.Node.ControlMsg 
	[ 0 , 0 ] ${ + param::Trickle.Node.z_1051 param::Trickle.Node.z_1159 
	param::Trickle.Node.z_1567 param::Trickle.Node.z_1591 param::Trickle.Node.z_1699 
	param::Trickle.Node.z_711 param::Trickle.Node.z_715 param::Trickle.Node.z_763 
	param::Trickle.Node.z_775 param::Trickle.Node.z_887 param::Trickle.Node.z_895 } }
	 @ (z_1051 + z_1159 + z_1567 + z_1591 + z_1699 + z_711 + z_715 + z_763 + z_775 + 
	z_887 + z_895)) }
																																																																		DATA{
																																																																			:pid_2:uncoveredExit = 22;
																																																																			:pid_76:$time = (z_1051 + z_1159 + z_1567 + z_1591 + z_1699 + z_711 + z_715 + z_763 + z_775 + z_887 + z_895);
																																																																			:pid_76:z = z_1699;
																																																																			:pid_76:reach_DATA_EXPIR_DM2 = (e_7 == 2);
																																																																			:pid_76:localTime = (z_1051 + z_1159 + z_1567 + z_1591 + z_1699 + z_711 + z_715 + z_763 + z_775 + z_887 + z_895);
																																																																			:pid_76:localPC = ((t_1206 < 8) && (t_1860 < 4) && (t_630 < 4) && (t_636 < 4) && (t_907 < 4) && (t_1191 < 4) && (t_2206 < 8) && (0 <= (t_1206 + -4)) && (0 <= (t_1860 + -2)) && (0 <= (t_630 + -2)) && (0 <= (t_636 + -2)) && (0 <= (t_907 + -2)) && (0 <= (t_1191 + -2)) && (0 <= (t_2206 + -4)));
																																																																			:pid_76:localPtC = (((z_1051 + z_1159 + z_1567 + z_775 + z_887 + z_895) == 4) && ((z_1051 + z_1159 + z_775 + z_887 + z_895) == t_1191) && ((z_1051 + z_895) == 4) && ((z_763 + z_775) == t_636) && (z_1699 == t_1860) && (z_895 == t_907) && ((z_1159 + z_1567 + z_1591) < t_1206) && ((z_763 + z_775 + z_887) < 4) && (z_715 < t_630) && ((z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70) <= (z_1051 + z_1159 + z_1567 + z_1591 + z_711 + z_715 + z_763 + z_775 + z_887 + z_895)) && ((z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_62 + z_70) <= (z_711 + z_715 + z_763 + z_775 + z_887)) && ((z_186 + z_198 + z_270 + z_62 + z_70) <= (z_711 + z_715)) && ((z_1051 + z_1159 + z_1567 + z_775 + z_887 + z_895) > t_1191) && ((z_1051 + z_895) > t_907) && ($delta#initial > 0) && (z_1051 > 0) && (z_1159 > 0) && (z_1567 > 0) && (z_1591 > 0) && (z_711 > 0) && (z_715 > 0) && (z_763 > 0) && (z_775 > 0) && (z_887 > 0) && (z_895 > 0));
																																																																			:pid_77:cl = z_1699;
																																																																			:pid_83:cl = (z_1591 + z_1699);
																																																																			:pid_88:cl = (z_1051 + z_1159 + z_1567 + z_1591 + z_1699 + z_711 + z_715 + z_763 + z_775 + z_887 + z_895);
																																																																		}
																																																																		BUFFER{
																																																																			:pid_42:bufferCM:<FIFO>#0{
																																																																				:pid_76:ControlMsg([ 0 , 0 ] , (z_711 + z_715 + z_763 + z_775));
																																																																				:pid_76:ControlMsg([ 0 , 0 ] , (z_711 + z_715 + z_763 + z_775 + z_887 + z_895));
																																																																				:pid_25:ControlMsg([ 1 , 1 ] , (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_1596 + z_1640 + z_20 + z_228 + z_4 + z_96));
																																																																				:pid_76:ControlMsg([ 0 , 0 ] , (z_1051 + z_1159 + z_1567 + z_1591 + z_1699 + z_711 + z_715 + z_763 + z_775 + z_887 + z_895));
																																																																			}
																																																																		}
																																																																		EC:<Id:7772;Ev:444;H:66;W:7345>{ SC: ( pid_21:o#17 , ( pid_30:cp2 , pid_34:dp1 , pid_39:dp1 ) , ( pid_48:cp3 , pid_53:dp3 , pid_57:dp2 ) , ( pid_64:cp2 , pid_69:dp2 , pid_73:dp1 ) , ( pid_81:cp2 , pid_85:dp1 , pid_89:dp0 ) )
																					
																						
																						
					EXE: { |;| (:pid_59 , run) (:pid_60 , run) (:pid_64 , run) 
	(:pid_64 , cp2_receiveCM_consistent) (:pid_2 , run) }
																					
																						
																						
					TRACE: { |;| (:pid_59 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_1702 }) (:pid_64 , ${ input inst::Trickle.Node.ControlMsg 
	[ 1 , 1 ] ${ + param::Trickle.Node.z_0 param::Trickle.Node.z_1092 
	param::Trickle.Node.z_1204 param::Trickle.Node.z_1264 param::Trickle.Node.z_132 
	param::Trickle.Node.z_1480 param::Trickle.Node.z_1596 param::Trickle.Node.z_1640 
	param::Trickle.Node.z_20 param::Trickle.Node.z_228 param::Trickle.Node.z_4 
	param::Trickle.Node.z_96 } } @ (z_1022 + z_1298 + z_1422 + z_1442 + z_1530 + 
	z_1538 + z_1682 + z_1702 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 
	+ z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862)) }
																																																																			DATA{
																																																																				:pid_2:uncoveredExit = 23;
																																																																				:pid_59:$time = (z_1022 + z_1298 + z_1422 + z_1442 + z_1530 + z_1538 + z_1682 + z_1702 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862);
																																																																				:pid_59:z = z_1702;
																																																																				:pid_59:seq_buff[0] = 1;
																																																																				:pid_59:seq_buff[1] = 1;
																																																																				:pid_59:localTime = (z_1022 + z_1298 + z_1422 + z_1442 + z_1530 + z_1538 + z_1682 + z_1702 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862);
																																																																				:pid_59:localPC = ((t_1722 < 4) && (t_233 < 8) && (t_557 < 4) && (t_59 < 4) && (t_64 < 4) && (t_1002 < 4) && (t_2161 < 4) && (t_2174 < 4) && (t_325 < 4) && (t_662 < 4) && (t_934 < 4) && (0 <= (t_1722 + -2)) && (0 <= (t_233 + -4)) && (0 <= (t_557 + -2)) && (0 <= (t_59 + -2)) && (0 <= (t_64 + -2)) && (0 <= (t_1002 + -2)) && (0 <= (t_2161 + -2)) && (0 <= (t_2174 + -2)) && (0 <= (t_325 + -2)) && (0 <= (t_662 + -2)) && (0 <= (t_934 + -2)));
																																																																				:pid_59:localPtC = (((z_1022 + z_1298 + z_550 + z_570 + z_602 + z_622 + z_658 + z_670 + z_862) == t_662) && ((z_1538 + z_1682) == t_2161) && ((z_186 + z_198 + z_270) == t_64) && ((z_186 + z_198 + z_270 + z_330) == 4) && ((z_386 + z_550 + z_570) == t_233) && (z_1442 == t_1722) && (z_670 == t_557) && ((z_1022 + z_1298 + z_1422 + z_1442 + z_1530 + z_1538 + z_622 + z_658 + z_670 + z_862) < t_1002) && ((z_1022 + z_1298 + z_1422 + z_1442 + z_1530 + z_550 + z_570 + z_602 + z_622 + z_658 + z_670 + z_862) < 4) && ((z_1022 + z_1298 + z_1422 + z_670 + z_862) < 4) && ((z_1022 + z_550 + z_570 + z_602 + z_622 + z_658 + z_670 + z_862) < t_662) && ((z_1442 + z_1530 + z_1538 + z_1682 + z_1702) < 4) && ((z_198 + z_270 + z_330 + z_386) < t_325) && ((z_386 + z_550 + z_570 + z_602 + z_622 + z_658) < 8) && ((z_550 + z_570 + z_602 + z_622 + z_658 + z_670 + z_862) < t_662) && ((z_570 + z_602) < t_934) && (z_198 < t_325) && (z_622 < t_1002) && (z_70 < t_59) && ((z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_1596 + z_1640 + z_20 + z_228 + z_4 + z_96) <= (z_1022 + z_1298 + z_1422 + z_1442 + z_1530 + z_1538 + z_1682 + z_1702 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862)) && ((z_0 + z_132 + z_20 + z_228 + z_4 + z_96) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_70)) && ((z_0 + z_132 + z_20 + z_228 + z_4 + z_96) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_62 + z_70)) && ((z_0 + z_20 + z_4) <= (z_62 + z_70)) && ((z_0 + z_20 + z_4 + z_96) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_70)) && ((z_0 + z_20 + z_4 + z_96) <= (z_186 + z_198 + z_62 + z_70)) && ((z_1161 + z_1229 + z_1321 + z_1361 + z_1397 + z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821 + z_953 + z_997) <= (z_1022 + z_1298 + z_1422 + z_1442 + z_1530 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862)) && ((z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821) <= (z_1022 + z_1298 + z_1422 + z_1442 + z_1530 + z_1538 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862)) && ((z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862)) && ((z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821 + z_953 + z_997) <= (z_1022 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862)) && ((z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_45) <= (z_1022 + z_1298 + z_1422 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862)) && ((z_141 + z_165 + z_273 + z_305 + z_33 + z_45) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_70)) && ((z_186 + z_198 + z_270 + z_330) > t_64) && ($delta#initial > 0) && (z_1022 > 0) && (z_1298 > 0) && (z_1422 > 0) && (z_1442 > 0) && (z_1530 > 0) && (z_1538 > 0) && (z_1682 > 0) && (z_186 > 0) && (z_198 > 0) && (z_270 > 0) && (z_330 > 0) && (z_386 > 0) && (z_550 > 0) && (z_570 > 0) && (z_602 > 0) && (z_62 > 0) && (z_622 > 0) && (z_658 > 0) && (z_670 > 0) && (z_70 > 0) && (z_862 > 0));
																																																																				:pid_59:timeEmit = (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_1596 + z_1640 + z_20 + z_228 + z_4 + z_96);
																																																																				:pid_60:c = 1;
																																																																				:pid_60:i = 2;
																																																																				:pid_60:consistent = true;
																																																																				:pid_60:cl = (z_1442 + z_1530 + z_1538 + z_1682 + z_1702);
																																																																				:pid_66:cl = (z_1538 + z_1682 + z_1702);
																																																																				:pid_71:cl = (z_1682 + z_1702);
																																																																			}
																																																																			BUFFER{
																																																																				:pid_59:bufferCM:<FIFO>#0{ }
																																																																			}
																																																																			EC:<Id:8063;Ev:453;H:67;W:7619>{ SC: ( pid_21:o#17 , ( pid_30:cp2 , pid_34:dp1 , pid_39:dp1 ) , ( pid_48:cp3 , pid_53:dp3 , pid_57:dp2 ) , ( pid_64:cp2 , pid_69:dp2 , pid_73:dp1 ) , ( pid_81:cp2 , pid_85:dp1 , pid_89:dp0 ) )
																					
																						
																						
						EXE: { |;| (:pid_59 , run) (:pid_71 , run) (:pid_73 , run) 
	(:pid_73 , dp1_receiveDM_inconsistent) (:pid_2 , run) }
																					
																						
																						
						TRACE: { |;| (:pid_59 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_1770 }) (:pid_73 , ${ input inst::Trickle.Node.DataMsg2 [ 
	1 , 1 , 0 ] ${ + param::Trickle.Node.z_141 param::Trickle.Node.z_165 
	param::Trickle.Node.z_273 param::Trickle.Node.z_305 param::Trickle.Node.z_33 
	param::Trickle.Node.z_337 param::Trickle.Node.z_405 param::Trickle.Node.z_441 
	param::Trickle.Node.z_45 param::Trickle.Node.z_473 param::Trickle.Node.z_493 
	param::Trickle.Node.z_529 param::Trickle.Node.z_821 param::Trickle.Node.z_953 
	param::Trickle.Node.z_997 } } @ (z_1022 + z_1298 + z_1422 + z_1442 + z_1530 + 
	z_1538 + z_1682 + z_1702 + z_1770 + z_186 + z_198 + z_270 + z_330 + z_386 + 
	z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862)) (:pid_73 , 
	${ newfresh inst::Trickle.Node.DataProcess.t 
	param::Trickle.Node.DataProcess.t_2420 }) }
																					
																						
																						
						NC: ((t_2420 < 4) && (0 <= (t_2420 + -2)))
																																																																				PC: ((t_1206 < 8) && (t_1465 < 8) && (t_1506 < 8) && (t_1556 < 4) && (t_1722 < 4) && 
	(t_1860 < 4) && (t_1865 < 4) && (t_233 < 8) && (t_242 < 8) && (t_33 < 4) && 
	(t_44 < 4) && (t_557 < 4) && (t_59 < 4) && (t_630 < 4) && (t_636 < 4) && (t_64 < 
	4) && (t_8 < 4) && (t_907 < 4) && (t_1002 < 4) && (t_1191 < 4) && (t_1399 < 8) 
	&& (t_1579 < 8) && (t_1667 < 8) && (t_2078 < 8) && (t_2161 < 4) && (t_2174 < 4) 
	&& (t_2206 < 8) && (t_235 < 4) && (t_2420 < 4) && (t_249 < 4) && (t_325 < 4) && 
	(t_452 < 4) && (t_662 < 4) && (t_759 < 4) && (t_8 < 4) && (t_839 < 4) && (t_934 
	< 4) && (0 <= (t_1206 + -4)) && (0 <= (t_1465 + -4)) && (0 <= (t_1506 + -4)) && 
	(0 <= (t_1556 + -2)) && (0 <= (t_1722 + -2)) && (0 <= (t_1860 + -2)) && (0 <= 
	(t_1865 + -2)) && (0 <= (t_233 + -4)) && (0 <= (t_242 + -4)) && (0 <= (t_33 + -2)
	) && (0 <= (t_44 + -2)) && (0 <= (t_557 + -2)) && (0 <= (t_59 + -2)) && (0 <= 
	(t_630 + -2)) && (0 <= (t_636 + -2)) && (0 <= (t_64 + -2)) && (0 <= (t_8 + -2)) 
	&& (0 <= (t_907 + -2)) && (0 <= (t_1002 + -2)) && (0 <= (t_1191 + -2)) && (0 <= 
	(t_1399 + -4)) && (0 <= (t_1579 + -4)) && (0 <= (t_1667 + -4)) && (0 <= (t_2078 
	+ -4)) && (0 <= (t_2161 + -2)) && (0 <= (t_2174 + -2)) && (0 <= (t_2206 + -4)) 
	&& (0 <= (t_235 + -2)) && (0 <= (t_2420 + -2)) && (0 <= (t_249 + -2)) && (0 <= 
	(t_325 + -2)) && (0 <= (t_452 + -2)) && (0 <= (t_662 + -2)) && (0 <= (t_759 + -2)
	) && (0 <= (t_8 + -2)) && (0 <= (t_839 + -2)) && (0 <= (t_934 + -2)))
																																																																				DATA{
																																																																					:pid_2:uncoveredExit = 24;
																																																																					:pid_59:$time = (z_1022 + z_1298 + z_1422 + z_1442 + z_1530 + z_1538 + z_1682 + z_1702 + z_1770 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862);
																																																																					:pid_59:z = z_1770;
																																																																					:pid_59:localTime = (z_1022 + z_1298 + z_1422 + z_1442 + z_1530 + z_1538 + z_1682 + z_1702 + z_1770 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862);
																																																																					:pid_59:localPC = ((t_1722 < 4) && (t_233 < 8) && (t_557 < 4) && (t_59 < 4) && (t_64 < 4) && (t_1002 < 4) && (t_2161 < 4) && (t_2174 < 4) && (t_2420 < 4) && (t_325 < 4) && (t_662 < 4) && (t_934 < 4) && (0 <= (t_1722 + -2)) && (0 <= (t_233 + -4)) && (0 <= (t_557 + -2)) && (0 <= (t_59 + -2)) && (0 <= (t_64 + -2)) && (0 <= (t_1002 + -2)) && (0 <= (t_2161 + -2)) && (0 <= (t_2174 + -2)) && (0 <= (t_2420 + -2)) && (0 <= (t_325 + -2)) && (0 <= (t_662 + -2)) && (0 <= (t_934 + -2)));
																																																																					:pid_59:localPtC = (((z_1022 + z_1298 + z_550 + z_570 + z_602 + z_622 + z_658 + z_670 + z_862) == t_662) && ((z_1538 + z_1682) == t_2161) && ((z_186 + z_198 + z_270) == t_64) && ((z_186 + z_198 + z_270 + z_330) == 4) && ((z_386 + z_550 + z_570) == t_233) && (z_1442 == t_1722) && (z_670 == t_557) && ((z_1022 + z_1298 + z_1422 + z_1442 + z_1530 + z_1538 + z_622 + z_658 + z_670 + z_862) < t_1002) && ((z_1022 + z_1298 + z_1422 + z_1442 + z_1530 + z_550 + z_570 + z_602 + z_622 + z_658 + z_670 + z_862) < 4) && ((z_1022 + z_1298 + z_1422 + z_670 + z_862) < 4) && ((z_1022 + z_550 + z_570 + z_602 + z_622 + z_658 + z_670 + z_862) < t_662) && ((z_1442 + z_1530 + z_1538 + z_1682 + z_1702) < 4) && ((z_1682 + z_1702 + z_1770) < t_2174) && ((z_198 + z_270 + z_330 + z_386) < t_325) && ((z_386 + z_550 + z_570 + z_602 + z_622 + z_658) < 8) && ((z_550 + z_570 + z_602 + z_622 + z_658 + z_670 + z_862) < t_662) && ((z_570 + z_602) < t_934) && (z_198 < t_325) && (z_622 < t_1002) && (z_70 < t_59) && ((z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_1596 + z_1640 + z_20 + z_228 + z_4 + z_96) <= (z_1022 + z_1298 + z_1422 + z_1442 + z_1530 + z_1538 + z_1682 + z_1702 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862)) && ((z_0 + z_132 + z_20 + z_228 + z_4 + z_96) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_70)) && ((z_0 + z_132 + z_20 + z_228 + z_4 + z_96) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_62 + z_70)) && ((z_0 + z_20 + z_4) <= (z_62 + z_70)) && ((z_0 + z_20 + z_4 + z_96) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_70)) && ((z_0 + z_20 + z_4 + z_96) <= (z_186 + z_198 + z_62 + z_70)) && ((z_1161 + z_1229 + z_1321 + z_1361 + z_1397 + z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821 + z_953 + z_997) <= (z_1022 + z_1298 + z_1422 + z_1442 + z_1530 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862)) && ((z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821) <= (z_1022 + z_1298 + z_1422 + z_1442 + z_1530 + z_1538 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862)) && ((z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862)) && ((z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821 + z_953 + z_997) <= (z_1022 + z_1298 + z_1422 + z_1442 + z_1530 + z_1538 + z_1682 + z_1702 + z_1770 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862)) && ((z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821 + z_953 + z_997) <= (z_1022 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862)) && ((z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_45) <= (z_1022 + z_1298 + z_1422 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862)) && ((z_141 + z_165 + z_273 + z_305 + z_33 + z_45) <= (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_70)) && ((z_186 + z_198 + z_270 + z_330) > t_64) && ($delta#initial > 0) && (z_1022 > 0) && (z_1298 > 0) && (z_1422 > 0) && (z_1442 > 0) && (z_1530 > 0) && (z_1538 > 0) && (z_1682 > 0) && (z_1702 > 0) && (z_186 > 0) && (z_198 > 0) && (z_270 > 0) && (z_330 > 0) && (z_386 > 0) && (z_550 > 0) && (z_570 > 0) && (z_602 > 0) && (z_62 > 0) && (z_622 > 0) && (z_658 > 0) && (z_670 > 0) && (z_70 > 0) && (z_862 > 0));
																																																																					:pid_59:timeEmit = (z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821 + z_953 + z_997);
																																																																					:pid_60:cl = (z_1442 + z_1530 + z_1538 + z_1682 + z_1702 + z_1770);
																																																																					:pid_66:cl = (z_1538 + z_1682 + z_1702 + z_1770);
																																																																					:pid_71:t = t_2420;
																																																																					:pid_71:cl = 0;
																																																																				}
																																																																				BUFFER{
																																																																					:pid_59:bufferDM2:<FIFO>#2{
																																																																						:pid_42:DataMsg2([ 2 , 2 , 1 ] , (z_1161 + z_1229 + z_1321 + z_1361 + z_1397 + z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821 + z_953 + z_997));
																																																																					}
																																																																				}
																																																																				EC:<Id:8213;Ev:461;H:68;W:7760>{ SC: ( pid_21:o#17 , ( pid_30:cp2 , pid_34:dp1 , pid_39:dp1 ) , ( pid_48:cp3 , pid_53:dp3 , pid_57:dp2 ) , ( pid_64:cp2 , pid_69:dp2 , pid_73:dp1 ) , ( pid_81:cp2 , pid_85:dp1 , pid_89:dp0 ) )
																					
																						
																						
							EXE: { |;| (:pid_25 , run) (:pid_37 , run) (:pid_39 , 
	run) (:pid_39 , dp1_receiveDM_inconsistent) (:pid_2 , run) }
																					
																						
																						
							TRACE: { |;| (:pid_25 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_1804 }) (:pid_39 , ${ input inst::Trickle.Node.DataMsg2 [ 
	1 , 1 , 0 ] ${ + param::Trickle.Node.z_1022 param::Trickle.Node.z_1298 
	param::Trickle.Node.z_1422 param::Trickle.Node.z_1442 param::Trickle.Node.z_1530 
	param::Trickle.Node.z_1538 param::Trickle.Node.z_1682 param::Trickle.Node.z_186 
	param::Trickle.Node.z_198 param::Trickle.Node.z_270 param::Trickle.Node.z_330 
	param::Trickle.Node.z_386 param::Trickle.Node.z_550 param::Trickle.Node.z_570 
	param::Trickle.Node.z_602 param::Trickle.Node.z_62 param::Trickle.Node.z_622 
	param::Trickle.Node.z_658 param::Trickle.Node.z_670 param::Trickle.Node.z_70 
	param::Trickle.Node.z_862 } } @ (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 
	+ z_1596 + z_1640 + z_1804 + z_20 + z_228 + z_4 + z_96)) (:pid_39 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_2463 }) }
																					
																						
																						
							NC: ((t_2463 < 4) && (0 <= (t_2463 + -2)))
																																																																					PC: ((t_1206 < 8) && (t_1465 < 8) && (t_1506 < 8) && (t_1556 < 4) && (t_1722 < 4) && 
	(t_1860 < 4) && (t_1865 < 4) && (t_233 < 8) && (t_242 < 8) && (t_33 < 4) && 
	(t_44 < 4) && (t_557 < 4) && (t_59 < 4) && (t_630 < 4) && (t_636 < 4) && (t_64 < 
	4) && (t_8 < 4) && (t_907 < 4) && (t_1002 < 4) && (t_1191 < 4) && (t_1399 < 8) 
	&& (t_1579 < 8) && (t_1667 < 8) && (t_2078 < 8) && (t_2161 < 4) && (t_2174 < 4) 
	&& (t_2206 < 8) && (t_235 < 4) && (t_2420 < 4) && (t_2463 < 4) && (t_249 < 4) && 
	(t_325 < 4) && (t_452 < 4) && (t_662 < 4) && (t_759 < 4) && (t_8 < 4) && (t_839 
	< 4) && (t_934 < 4) && (0 <= (t_1206 + -4)) && (0 <= (t_1465 + -4)) && (0 <= 
	(t_1506 + -4)) && (0 <= (t_1556 + -2)) && (0 <= (t_1722 + -2)) && (0 <= (t_1860 
	+ -2)) && (0 <= (t_1865 + -2)) && (0 <= (t_233 + -4)) && (0 <= (t_242 + -4)) && 
	(0 <= (t_33 + -2)) && (0 <= (t_44 + -2)) && (0 <= (t_557 + -2)) && (0 <= (t_59 + 
	-2)) && (0 <= (t_630 + -2)) && (0 <= (t_636 + -2)) && (0 <= (t_64 + -2)) && (0 
	<= (t_8 + -2)) && (0 <= (t_907 + -2)) && (0 <= (t_1002 + -2)) && (0 <= (t_1191 + 
	-2)) && (0 <= (t_1399 + -4)) && (0 <= (t_1579 + -4)) && (0 <= (t_1667 + -4)) && 
	(0 <= (t_2078 + -4)) && (0 <= (t_2161 + -2)) && (0 <= (t_2174 + -2)) && (0 <= 
	(t_2206 + -4)) && (0 <= (t_235 + -2)) && (0 <= (t_2420 + -2)) && (0 <= (t_2463 + 
	-2)) && (0 <= (t_249 + -2)) && (0 <= (t_325 + -2)) && (0 <= (t_452 + -2)) && (0 
	<= (t_662 + -2)) && (0 <= (t_759 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_839 + 
	-2)) && (0 <= (t_934 + -2)))
																																																																					DATA{
																																																																						:pid_2:uncoveredExit = 25;
																																																																						:pid_25:$time = (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_1596 + z_1640 + z_1804 + z_20 + z_228 + z_4 + z_96);
																																																																						:pid_25:z = z_1804;
																																																																						:pid_25:localTime = (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_1596 + z_1640 + z_1804 + z_20 + z_228 + z_4 + z_96);
																																																																						:pid_25:localPC = ((t_1465 < 8) && (t_1556 < 4) && (t_1865 < 4) && (t_8 < 4) && (t_1579 < 8) && (t_2078 < 8) && (t_235 < 4) && (t_2463 < 4) && (t_8 < 4) && (0 <= (t_1465 + -4)) && (0 <= (t_1556 + -2)) && (0 <= (t_1865 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_1579 + -4)) && (0 <= (t_2078 + -4)) && (0 <= (t_235 + -2)) && (0 <= (t_2463 + -2)) && (0 <= (t_8 + -2)));
																																																																						:pid_25:localPtC = (((z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_20 + z_228 + z_4 + z_96) == 4) && ((z_1092 + z_1204 + z_132 + z_20 + z_228 + z_96) == 4) && ((z_1092 + z_228) == 4) && ((z_20 + z_4 + z_96) == t_8) && (z_1640 == t_1865) && (z_20 == t_8) && (z_228 == t_235) && ((z_1204 + z_1264 + z_1480 + z_1596 + z_1640 + z_1804) < t_1579) && ((z_1480 + z_1596) < t_1556) && (z_1264 < t_1465) && ((z_1022 + z_1298 + z_1422 + z_1442 + z_1530 + z_1538 + z_1682 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862) <= (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_1596 + z_1640 + z_1804 + z_20 + z_228 + z_4 + z_96)) && ((z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_62 + z_70) <= (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_1596 + z_20 + z_228 + z_4 + z_96)) && ((z_186 + z_198 + z_270 + z_62 + z_70) <= (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_20 + z_228 + z_4 + z_96)) && ((z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_20 + z_228 + z_4 + z_96) > t_8) && ((z_1092 + z_1204 + z_132 + z_20 + z_228 + z_96) > t_8) && ((z_1092 + z_228) > t_235) && ($delta#initial > 0) && (z_0 > 0) && (z_1092 > 0) && (z_1204 > 0) && (z_1264 > 0) && (z_132 > 0) && (z_1480 > 0) && (z_1596 > 0) && (z_1640 > 0) && (z_20 > 0) && (z_228 > 0) && (z_4 > 0) && (z_96 > 0));
																																																																						:pid_25:timeEmit = (z_1022 + z_1298 + z_1422 + z_1442 + z_1530 + z_1538 + z_1682 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862);
																																																																						:pid_26:cl = (z_1640 + z_1804);
																																																																						:pid_32:cl = (z_1596 + z_1640 + z_1804);
																																																																						:pid_37:e = 0;
																																																																						:pid_37:c = 0;
																																																																						:pid_37:tau = 4;
																																																																						:pid_37:t = t_2463;
																																																																						:pid_37:consistent = false;
																																																																						:pid_37:cl = 0;
																																																																						:pid_37:d.seq = 1;
																																																																						:pid_37:d.fragment = FRAGMENT_0;
																																																																						:pid_37:d.offset = 0;
																																																																					}
																																																																					BUFFER{
																																																																						:pid_25:bufferDM2:<FIFO>#2{ }
																																																																					}
																																																																					EC:<Id:8340;Ev:474;H:69;W:7879>{ SC: ( pid_21:o#17 , ( pid_30:cp2 , pid_35:dp2 , pid_39:dp1 ) , ( pid_48:cp3 , pid_53:dp3 , pid_57:dp2 ) , ( pid_64:cp2 , pid_69:dp2 , pid_73:dp1 ) , ( pid_81:cp2 , pid_85:dp1 , pid_89:dp0 ) )
																					
																						
																						
								EXE: { |;| (:pid_25 , run) (:pid_32 , run) (:pid_34 
	, run) (:pid_34 , dp_sendDM) (:pid_2 , run) }
																					
																						
																						
								TRACE: { |;| (:pid_25 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1836 }) (:pid_34 , ${ output 
	inst::Trickle.Node.DataMsg1 [ 1 , 1 , 0 ] ${ + param::Trickle.Node.z_0 
	param::Trickle.Node.z_1092 param::Trickle.Node.z_1204 param::Trickle.Node.z_1264 
	param::Trickle.Node.z_132 param::Trickle.Node.z_1480 param::Trickle.Node.z_1596 
	param::Trickle.Node.z_1640 param::Trickle.Node.z_1804 param::Trickle.Node.z_1836 
	param::Trickle.Node.z_20 param::Trickle.Node.z_228 param::Trickle.Node.z_4 
	param::Trickle.Node.z_96 } } @ (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 
	+ z_1596 + z_1640 + z_1804 + z_1836 + z_20 + z_228 + z_4 + z_96)) }
																																																																						DATA{
																																																																							:pid_2:uncoveredExit = 26;
																																																																							:pid_25:$time = (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_1596 + z_1640 + z_1804 + z_1836 + z_20 + z_228 + z_4 + z_96);
																																																																							:pid_25:z = z_1836;
																																																																							:pid_25:localTime = (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_1596 + z_1640 + z_1804 + z_1836 + z_20 + z_228 + z_4 + z_96);
																																																																							:pid_25:localPC = ((t_1465 < 8) && (t_1556 < 4) && (t_1865 < 4) && (t_8 < 4) && (t_1579 < 8) && (t_2078 < 8) && (t_235 < 4) && (t_2463 < 4) && (t_8 < 4) && (0 <= (t_1465 + -4)) && (0 <= (t_1556 + -2)) && (0 <= (t_1865 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_1579 + -4)) && (0 <= (t_2078 + -4)) && (0 <= (t_235 + -2)) && (0 <= (t_2463 + -2)) && (0 <= (t_8 + -2)));
																																																																							:pid_25:localPtC = (((z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_20 + z_228 + z_4 + z_96) == 4) && ((z_1092 + z_1204 + z_132 + z_20 + z_228 + z_96) == 4) && ((z_1092 + z_228) == 4) && ((z_1596 + z_1640 + z_1804 + z_1836) == t_2078) && ((z_20 + z_4 + z_96) == t_8) && (z_1640 == t_1865) && (z_20 == t_8) && (z_228 == t_235) && ((z_1204 + z_1264 + z_1480 + z_1596 + z_1640 + z_1804) < t_1579) && ((z_1480 + z_1596) < t_1556) && (z_1264 < t_1465) && ((z_1022 + z_1298 + z_1422 + z_1442 + z_1530 + z_1538 + z_1682 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862) <= (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_1596 + z_1640 + z_1804 + z_20 + z_228 + z_4 + z_96)) && ((z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_62 + z_70) <= (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_1596 + z_20 + z_228 + z_4 + z_96)) && ((z_186 + z_198 + z_270 + z_62 + z_70) <= (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_20 + z_228 + z_4 + z_96)) && ((z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_20 + z_228 + z_4 + z_96) > t_8) && ((z_1092 + z_1204 + z_132 + z_20 + z_228 + z_96) > t_8) && ((z_1092 + z_228) > t_235) && ($delta#initial > 0) && (z_0 > 0) && (z_1092 > 0) && (z_1204 > 0) && (z_1264 > 0) && (z_132 > 0) && (z_1480 > 0) && (z_1596 > 0) && (z_1640 > 0) && (z_1804 > 0) && (z_20 > 0) && (z_228 > 0) && (z_4 > 0) && (z_96 > 0));
																																																																							:pid_26:cl = (z_1640 + z_1804 + z_1836);
																																																																							:pid_32:cl = (z_1596 + z_1640 + z_1804 + z_1836);
																																																																							:pid_37:cl = z_1836;
																																																																						}
																																																																						BUFFER{
																																																																							:pid_42:bufferDM1:<FIFO>#1{
																																																																								:pid_25:DataMsg1([ 1 , 1 , 0 ] , (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_1596 + z_1640 + z_1804 + z_1836 + z_20 + z_228 + z_4 + z_96));
																																																																							}
																																																																							:pid_42:bufferDM2:<FIFO>#2{
																																																																								:pid_25:DataMsg1([ 1 , 1 , 0 ] , (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_1596 + z_1640 + z_1804 + z_1836 + z_20 + z_228 + z_4 + z_96));
																																																																							}
																																																																							:pid_59:bufferDM1:<FIFO>#1{
																																																																								:pid_25:DataMsg1([ 1 , 1 , 0 ] , (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_1596 + z_1640 + z_1804 + z_1836 + z_20 + z_228 + z_4 + z_96));
																																																																							}
																																																																							:pid_59:bufferDM2:<FIFO>#2{
																																																																								:pid_42:DataMsg2([ 2 , 2 , 1 ] , (z_1161 + z_1229 + z_1321 + z_1361 + z_1397 + z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821 + z_953 + z_997));
																																																																								:pid_25:DataMsg1([ 1 , 1 , 0 ] , (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_1596 + z_1640 + z_1804 + z_1836 + z_20 + z_228 + z_4 + z_96));
																																																																							}
																																																																						}
																																																																						EC:<Id:8532;Ev:477;H:70;W:8058>{ SC: ( pid_21:o#17 , ( pid_30:cp2 , pid_35:dp2 , pid_39:dp1 ) , ( pid_48:cp3 , pid_53:dp3 , pid_56:dp1 ) , ( pid_64:cp2 , pid_69:dp2 , pid_73:dp1 ) , ( pid_81:cp2 , pid_85:dp1 , pid_89:dp0 ) )
																					
																						
																						
									EXE: { |;| (:pid_42 , run) (:pid_54 , run) 
	(:pid_57 , run) (:pid_57 , dp_resetTau) (:pid_2 , run) }
																					
																						
																						
									TRACE: { |;| (:pid_42 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1889 }) (:pid_57 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_2544 }) }
																					
																						
																						
									NC: ((t_2544 < 8) && (0 <= (t_2544 + -4)))
																																																																							PC: ((t_1206 < 8) && (t_1465 < 8) && (t_1506 < 8) && (t_1556 < 4) && (t_1722 < 4) && 
	(t_1860 < 4) && (t_1865 < 4) && (t_233 < 8) && (t_242 < 8) && (t_33 < 4) && 
	(t_44 < 4) && (t_557 < 4) && (t_59 < 4) && (t_630 < 4) && (t_636 < 4) && (t_64 < 
	4) && (t_8 < 4) && (t_907 < 4) && (t_1002 < 4) && (t_1191 < 4) && (t_1399 < 8) 
	&& (t_1579 < 8) && (t_1667 < 8) && (t_2078 < 8) && (t_2161 < 4) && (t_2174 < 4) 
	&& (t_2206 < 8) && (t_235 < 4) && (t_2420 < 4) && (t_2463 < 4) && (t_249 < 4) && 
	(t_2544 < 8) && (t_325 < 4) && (t_452 < 4) && (t_662 < 4) && (t_759 < 4) && (t_8 
	< 4) && (t_839 < 4) && (t_934 < 4) && (0 <= (t_1206 + -4)) && (0 <= (t_1465 + -4)
	) && (0 <= (t_1506 + -4)) && (0 <= (t_1556 + -2)) && (0 <= (t_1722 + -2)) && (0 
	<= (t_1860 + -2)) && (0 <= (t_1865 + -2)) && (0 <= (t_233 + -4)) && (0 <= (t_242 
	+ -4)) && (0 <= (t_33 + -2)) && (0 <= (t_44 + -2)) && (0 <= (t_557 + -2)) && (0 
	<= (t_59 + -2)) && (0 <= (t_630 + -2)) && (0 <= (t_636 + -2)) && (0 <= (t_64 + 
	-2)) && (0 <= (t_8 + -2)) && (0 <= (t_907 + -2)) && (0 <= (t_1002 + -2)) && (0 
	<= (t_1191 + -2)) && (0 <= (t_1399 + -4)) && (0 <= (t_1579 + -4)) && (0 <= 
	(t_1667 + -4)) && (0 <= (t_2078 + -4)) && (0 <= (t_2161 + -2)) && (0 <= (t_2174 
	+ -2)) && (0 <= (t_2206 + -4)) && (0 <= (t_235 + -2)) && (0 <= (t_2420 + -2)) && 
	(0 <= (t_2463 + -2)) && (0 <= (t_249 + -2)) && (0 <= (t_2544 + -4)) && (0 <= 
	(t_325 + -2)) && (0 <= (t_452 + -2)) && (0 <= (t_662 + -2)) && (0 <= (t_759 + -2)
	) && (0 <= (t_8 + -2)) && (0 <= (t_839 + -2)) && (0 <= (t_934 + -2)))
																																																																							DATA{
																																																																								:pid_2:uncoveredExit = 27;
																																																																								:pid_42:$time = (z_1161 + z_1229 + z_1321 + z_1361 + z_1397 + z_141 + z_165 + z_1889 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821 + z_953 + z_997);
																																																																								:pid_42:z = z_1889;
																																																																								:pid_42:localTime = (z_1161 + z_1229 + z_1321 + z_1361 + z_1397 + z_141 + z_165 + z_1889 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821 + z_953 + z_997);
																																																																								:pid_42:localPC = ((t_1506 < 8) && (t_242 < 8) && (t_33 < 4) && (t_44 < 4) && (t_1399 < 8) && (t_1667 < 8) && (t_249 < 4) && (t_2544 < 8) && (t_452 < 4) && (t_759 < 4) && (t_839 < 4) && (0 <= (t_1506 + -4)) && (0 <= (t_242 + -4)) && (0 <= (t_33 + -2)) && (0 <= (t_44 + -2)) && (0 <= (t_1399 + -4)) && (0 <= (t_1667 + -4)) && (0 <= (t_249 + -2)) && (0 <= (t_2544 + -4)) && (0 <= (t_452 + -2)) && (0 <= (t_759 + -2)) && (0 <= (t_839 + -2)));
																																																																								:pid_42:localPtC = (((z_1161 + z_1229 + z_1321 + z_1361 + z_1397 + z_1889 + z_529 + z_821 + z_953 + z_997) == 4) && ((z_1161 + z_1229 + z_1321 + z_1361 + z_1397 + z_529 + z_821 + z_953 + z_997) == t_839) && ((z_1161 + z_1229 + z_405 + z_441 + z_473 + z_493 + z_529 + z_821 + z_953 + z_997) == 8) && ((z_1161 + z_997) == 8) && ((z_141 + z_165 + z_273 + z_305) == t_44) && ((z_141 + z_165 + z_273 + z_305 + z_337) == 4) && ((z_305 + z_337 + z_405 + z_441 + z_473 + z_493 + z_529 + z_821) == t_452) && ((z_305 + z_337 + z_405 + z_441 + z_473 + z_493 + z_529 + z_821 + z_953) == 4) && (z_405 == t_242) && (z_473 == t_759) && (z_997 == t_1399) && ((z_165 + z_273) < t_249) && ((z_473 + z_493) < 4) && (z_165 < t_249) && (z_45 < t_33) && (z_529 < t_839) && ((z_0 + z_132 + z_20 + z_228 + z_4 + z_96) <= (z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529)) && ((z_0 + z_132 + z_20 + z_228 + z_4 + z_96) <= (z_141 + z_165 + z_273 + z_33 + z_45)) && ((z_0 + z_20 + z_4) <= (z_33 + z_45)) && ((z_0 + z_20 + z_4 + z_96) <= (z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493)) && ((z_0 + z_20 + z_4 + z_96) <= (z_141 + z_165 + z_33 + z_45)) && ((z_1161 + z_1229 + z_1321 + z_1361 + z_1397 + z_1889 + z_529 + z_821 + z_953 + z_997) > t_839) && ((z_1161 + z_1229 + z_405 + z_441 + z_473 + z_493 + z_529 + z_821 + z_953 + z_997) > t_242) && ((z_1161 + z_997) > t_1399) && ((z_141 + z_165 + z_273 + z_305 + z_337) > t_44) && ((z_305 + z_337 + z_405 + z_441 + z_473 + z_493 + z_529 + z_821 + z_953) > t_452) && ($delta#initial > 0) && (z_1161 > 0) && (z_1229 > 0) && (z_1321 > 0) && (z_1361 > 0) && (z_1397 > 0) && (z_141 > 0) && (z_165 > 0) && (z_273 > 0) && (z_305 > 0) && (z_33 > 0) && (z_337 > 0) && (z_405 > 0) && (z_441 > 0) && (z_45 > 0) && (z_473 > 0) && (z_493 > 0) && (z_529 > 0) && (z_821 > 0) && (z_953 > 0) && (z_997 > 0));
																																																																								:pid_54:e = 1;
																																																																								:pid_54:c = 0;
																																																																								:pid_54:tau = 8;
																																																																								:pid_54:t = t_2544;
																																																																								:pid_54:cl = 0;
																																																																							}
																																																																							EC:<Id:8585;Ev:493;H:71;W:8108>{ SC: ( pid_21:o#17 , ( pid_30:cp2 , pid_35:dp2 , pid_39:dp1 ) , ( pid_48:cp3 , pid_53:dp3 , pid_56:dp1 ) , ( pid_64:cp2 , pid_69:dp2 , pid_73:dp1 ) , ( pid_81:cp2 , pid_85:dp1 , pid_89:dp0 ) )
																					
																						
																						
										EXE: { |;| (:pid_25 , run) (:pid_32 , run) 
	(:pid_35 , run) (:pid_35 , dp2_receiveDM_consistent) (:pid_2 , run) }
																					
																						
																						
										TRACE: { |;| (:pid_25 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1900 }) (:pid_35 , ${ input 
	inst::Trickle.Node.DataMsg1 [ 1 , 1 , 0 ] ${ + param::Trickle.Node.z_1022 
	param::Trickle.Node.z_1298 param::Trickle.Node.z_1422 param::Trickle.Node.z_1442 
	param::Trickle.Node.z_1530 param::Trickle.Node.z_1538 param::Trickle.Node.z_1682 
	param::Trickle.Node.z_186 param::Trickle.Node.z_198 param::Trickle.Node.z_270 
	param::Trickle.Node.z_330 param::Trickle.Node.z_386 param::Trickle.Node.z_550 
	param::Trickle.Node.z_570 param::Trickle.Node.z_602 param::Trickle.Node.z_62 
	param::Trickle.Node.z_622 param::Trickle.Node.z_658 param::Trickle.Node.z_670 
	param::Trickle.Node.z_70 param::Trickle.Node.z_862 } } @ (z_0 + z_1092 + z_1204 
	+ z_1264 + z_132 + z_1480 + z_1596 + z_1640 + z_1804 + z_1836 + z_1900 + z_20 + 
	z_228 + z_4 + z_96)) }
																																																																								DATA{
																																																																									:pid_2:uncoveredExit = 28;
																																																																									:pid_25:myseq_buff[0] = 1;
																																																																									:pid_25:$time = (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_1596 + z_1640 + z_1804 + z_1836 + z_1900 + z_20 + z_228 + z_4 + z_96);
																																																																									:pid_25:z = z_1900;
																																																																									:pid_25:localTime = (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_1596 + z_1640 + z_1804 + z_1836 + z_1900 + z_20 + z_228 + z_4 + z_96);
																																																																									:pid_25:localPC = ((t_1465 < 8) && (t_1556 < 4) && (t_1865 < 4) && (t_8 < 4) && (t_1579 < 8) && (t_2078 < 8) && (t_235 < 4) && (t_2463 < 4) && (t_8 < 4) && (0 <= (t_1465 + -4)) && (0 <= (t_1556 + -2)) && (0 <= (t_1865 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_1579 + -4)) && (0 <= (t_2078 + -4)) && (0 <= (t_235 + -2)) && (0 <= (t_2463 + -2)) && (0 <= (t_8 + -2)));
																																																																									:pid_25:localPtC = (((z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_20 + z_228 + z_4 + z_96) == 4) && ((z_1092 + z_1204 + z_132 + z_20 + z_228 + z_96) == 4) && ((z_1092 + z_228) == 4) && ((z_1596 + z_1640 + z_1804 + z_1836) == t_2078) && ((z_20 + z_4 + z_96) == t_8) && (z_1640 == t_1865) && (z_20 == t_8) && (z_228 == t_235) && ((z_1204 + z_1264 + z_1480 + z_1596 + z_1640 + z_1804) < t_1579) && ((z_1480 + z_1596) < t_1556) && ((z_1596 + z_1640 + z_1804 + z_1836 + z_1900) < 8) && (z_1264 < t_1465) && ((z_1022 + z_1298 + z_1422 + z_1442 + z_1530 + z_1538 + z_1682 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862) <= (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_1596 + z_1640 + z_1804 + z_1836 + z_1900 + z_20 + z_228 + z_4 + z_96)) && ((z_1022 + z_1298 + z_1422 + z_1442 + z_1530 + z_1538 + z_1682 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862) <= (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_1596 + z_1640 + z_1804 + z_20 + z_228 + z_4 + z_96)) && ((z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_62 + z_70) <= (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_1596 + z_20 + z_228 + z_4 + z_96)) && ((z_186 + z_198 + z_270 + z_62 + z_70) <= (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_20 + z_228 + z_4 + z_96)) && ((z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_20 + z_228 + z_4 + z_96) > t_8) && ((z_1092 + z_1204 + z_132 + z_20 + z_228 + z_96) > t_8) && ((z_1092 + z_228) > t_235) && ($delta#initial > 0) && (z_0 > 0) && (z_1092 > 0) && (z_1204 > 0) && (z_1264 > 0) && (z_132 > 0) && (z_1480 > 0) && (z_1596 > 0) && (z_1640 > 0) && (z_1804 > 0) && (z_1836 > 0) && (z_20 > 0) && (z_228 > 0) && (z_4 > 0) && (z_96 > 0));
																																																																									:pid_26:cl = (z_1640 + z_1804 + z_1836 + z_1900);
																																																																									:pid_32:c = 1;
																																																																									:pid_32:consistent = true;
																																																																									:pid_32:cl = (z_1596 + z_1640 + z_1804 + z_1836 + z_1900);
																																																																									:pid_32:d.seq = 1;
																																																																									:pid_32:d.fragment = FRAGMENT_0;
																																																																									:pid_32:d.offset = 0;
																																																																									:pid_37:cl = (z_1836 + z_1900);
																																																																								}
																																																																								BUFFER{
																																																																									:pid_25:bufferDM1:<FIFO>#1{ }
																																																																								}
																																																																								EC:<Id:8842;Ev:495;H:72;W:8349>{ SC: ( pid_21:o#17 , ( pid_30:cp2 , pid_35:dp2 , pid_39:dp1 ) , ( pid_48:cp3 , pid_53:dp3 , pid_56:dp1 ) , ( pid_64:cp2 , pid_69:dp2 , pid_73:dp1 ) , ( pid_81:cp2 , pid_86:dp2 , pid_89:dp0 ) )
																					
																						
																						
											EXE: { |;| (:pid_76 , run) (:pid_83 , 
	run) (:pid_85 , run) (:pid_85 , dp1_reach_k) (:pid_2 , run) }
																					
																						
																						
											TRACE: (:pid_76 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1967 })
																																																																									DATA{
																																																																										:pid_2:uncoveredExit = 29;
																																																																										:pid_76:$time = (z_1051 + z_1159 + z_1567 + z_1591 + z_1699 + z_1967 + z_711 + z_715 + z_763 + z_775 + z_887 + z_895);
																																																																										:pid_76:z = z_1967;
																																																																										:pid_76:reach_DATA_EXPIR_DM2 = (e_7 == 2);
																																																																										:pid_76:localTime = (z_1051 + z_1159 + z_1567 + z_1591 + z_1699 + z_1967 + z_711 + z_715 + z_763 + z_775 + z_887 + z_895);
																																																																										:pid_76:localPC = ((t_1206 < 8) && (t_1860 < 4) && (t_630 < 4) && (t_636 < 4) && (t_907 < 4) && (t_1191 < 4) && (t_2206 < 8) && (0 <= (t_1206 + -4)) && (0 <= (t_1860 + -2)) && (0 <= (t_630 + -2)) && (0 <= (t_636 + -2)) && (0 <= (t_907 + -2)) && (0 <= (t_1191 + -2)) && (0 <= (t_2206 + -4)));
																																																																										:pid_76:localPtC = (((z_1051 + z_1159 + z_1567 + z_775 + z_887 + z_895) == 4) && ((z_1051 + z_1159 + z_775 + z_887 + z_895) == t_1191) && ((z_1051 + z_895) == 4) && ((z_1591 + z_1699 + z_1967) == t_2206) && ((z_763 + z_775) == t_636) && (z_1699 == t_1860) && (z_895 == t_907) && ((z_1159 + z_1567 + z_1591) < t_1206) && ((z_763 + z_775 + z_887) < 4) && (z_715 < t_630) && ((z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70) <= (z_1051 + z_1159 + z_1567 + z_1591 + z_711 + z_715 + z_763 + z_775 + z_887 + z_895)) && ((z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_62 + z_70) <= (z_711 + z_715 + z_763 + z_775 + z_887)) && ((z_186 + z_198 + z_270 + z_62 + z_70) <= (z_711 + z_715)) && ((z_1051 + z_1159 + z_1567 + z_775 + z_887 + z_895) > t_1191) && ((z_1051 + z_895) > t_907) && ($delta#initial > 0) && (z_1051 > 0) && (z_1159 > 0) && (z_1567 > 0) && (z_1591 > 0) && (z_1699 > 0) && (z_711 > 0) && (z_715 > 0) && (z_763 > 0) && (z_775 > 0) && (z_887 > 0) && (z_895 > 0));
																																																																										:pid_77:cl = (z_1699 + z_1967);
																																																																										:pid_83:cl = (z_1591 + z_1699 + z_1967);
																																																																										:pid_88:cl = (z_1051 + z_1159 + z_1567 + z_1591 + z_1699 + z_1967 + z_711 + z_715 + z_763 + z_775 + z_887 + z_895);
																																																																									}
																																																																									EC:<Id:8887;Ev:511;H:73;W:8392>{ SC: ( pid_21:o#17 , ( pid_30:cp2 , pid_35:dp2 , pid_40:dp2 ) , ( pid_48:cp3 , pid_53:dp3 , pid_56:dp1 ) , ( pid_64:cp2 , pid_69:dp2 , pid_73:dp1 ) , ( pid_81:cp2 , pid_86:dp2 , pid_89:dp0 ) )
																					
																						
																						
												EXE: { |;| (:pid_25 , run) (:pid_37 
	, run) (:pid_39 , run) (:pid_39 , dp_sendDM) (:pid_2 , run) }
																					
																						
																						
												TRACE: { |;| (:pid_25 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_1972 }) (:pid_39 , ${ output 
	inst::Trickle.Node.DataMsg2 [ 2 , 2 , 1 ] ${ + param::Trickle.Node.z_0 
	param::Trickle.Node.z_1092 param::Trickle.Node.z_1204 param::Trickle.Node.z_1264 
	param::Trickle.Node.z_132 param::Trickle.Node.z_1480 param::Trickle.Node.z_1596 
	param::Trickle.Node.z_1640 param::Trickle.Node.z_1804 param::Trickle.Node.z_1836 
	param::Trickle.Node.z_1900 param::Trickle.Node.z_1972 param::Trickle.Node.z_20 
	param::Trickle.Node.z_228 param::Trickle.Node.z_4 param::Trickle.Node.z_96 } } @ 
	(z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_1596 + z_1640 + z_1804 + 
	z_1836 + z_1900 + z_1972 + z_20 + z_228 + z_4 + z_96)) }
																																																																										DATA{
																																																																											:pid_2:uncoveredExit = 30;
																																																																											:pid_25:$time = (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_1596 + z_1640 + z_1804 + z_1836 + z_1900 + z_1972 + z_20 + z_228 + z_4 + z_96);
																																																																											:pid_25:z = z_1972;
																																																																											:pid_25:localTime = (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_1596 + z_1640 + z_1804 + z_1836 + z_1900 + z_1972 + z_20 + z_228 + z_4 + z_96);
																																																																											:pid_25:localPC = ((t_1465 < 8) && (t_1556 < 4) && (t_1865 < 4) && (t_8 < 4) && (t_1579 < 8) && (t_2078 < 8) && (t_235 < 4) && (t_2463 < 4) && (t_8 < 4) && (0 <= (t_1465 + -4)) && (0 <= (t_1556 + -2)) && (0 <= (t_1865 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_1579 + -4)) && (0 <= (t_2078 + -4)) && (0 <= (t_235 + -2)) && (0 <= (t_2463 + -2)) && (0 <= (t_8 + -2)));
																																																																											:pid_25:localPtC = (((z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_20 + z_228 + z_4 + z_96) == 4) && ((z_1092 + z_1204 + z_132 + z_20 + z_228 + z_96) == 4) && ((z_1092 + z_228) == 4) && ((z_1596 + z_1640 + z_1804 + z_1836) == t_2078) && ((z_1836 + z_1900 + z_1972) == t_2463) && ((z_20 + z_4 + z_96) == t_8) && (z_1640 == t_1865) && (z_20 == t_8) && (z_228 == t_235) && ((z_1204 + z_1264 + z_1480 + z_1596 + z_1640 + z_1804) < t_1579) && ((z_1480 + z_1596) < t_1556) && ((z_1596 + z_1640 + z_1804 + z_1836 + z_1900) < 8) && (z_1264 < t_1465) && ((z_1022 + z_1298 + z_1422 + z_1442 + z_1530 + z_1538 + z_1682 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862) <= (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_1596 + z_1640 + z_1804 + z_1836 + z_1900 + z_20 + z_228 + z_4 + z_96)) && ((z_1022 + z_1298 + z_1422 + z_1442 + z_1530 + z_1538 + z_1682 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862) <= (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_1596 + z_1640 + z_1804 + z_20 + z_228 + z_4 + z_96)) && ((z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_62 + z_70) <= (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_1596 + z_20 + z_228 + z_4 + z_96)) && ((z_186 + z_198 + z_270 + z_62 + z_70) <= (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_20 + z_228 + z_4 + z_96)) && ((z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_20 + z_228 + z_4 + z_96) > t_8) && ((z_1092 + z_1204 + z_132 + z_20 + z_228 + z_96) > t_8) && ((z_1092 + z_228) > t_235) && ($delta#initial > 0) && (z_0 > 0) && (z_1092 > 0) && (z_1204 > 0) && (z_1264 > 0) && (z_132 > 0) && (z_1480 > 0) && (z_1596 > 0) && (z_1640 > 0) && (z_1804 > 0) && (z_1836 > 0) && (z_1900 > 0) && (z_20 > 0) && (z_228 > 0) && (z_4 > 0) && (z_96 > 0));
																																																																											:pid_26:cl = (z_1640 + z_1804 + z_1836 + z_1900 + z_1972);
																																																																											:pid_32:cl = (z_1596 + z_1640 + z_1804 + z_1836 + z_1900 + z_1972);
																																																																											:pid_37:cl = (z_1836 + z_1900 + z_1972);
																																																																										}
																																																																										BUFFER{
																																																																											:pid_42:bufferDM1:<FIFO>#1{
																																																																												:pid_25:DataMsg1([ 1 , 1 , 0 ] , (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_1596 + z_1640 + z_1804 + z_1836 + z_20 + z_228 + z_4 + z_96));
																																																																												:pid_25:DataMsg2([ 2 , 2 , 1 ] , (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_1596 + z_1640 + z_1804 + z_1836 + z_1900 + z_1972 + z_20 + z_228 + z_4 + z_96));
																																																																											}
																																																																											:pid_42:bufferDM2:<FIFO>#2{
																																																																												:pid_25:DataMsg1([ 1 , 1 , 0 ] , (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_1596 + z_1640 + z_1804 + z_1836 + z_20 + z_228 + z_4 + z_96));
																																																																												:pid_25:DataMsg2([ 2 , 2 , 1 ] , (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_1596 + z_1640 + z_1804 + z_1836 + z_1900 + z_1972 + z_20 + z_228 + z_4 + z_96));
																																																																											}
																																																																											:pid_59:bufferDM1:<FIFO>#1{
																																																																												:pid_25:DataMsg1([ 1 , 1 , 0 ] , (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_1596 + z_1640 + z_1804 + z_1836 + z_20 + z_228 + z_4 + z_96));
																																																																												:pid_25:DataMsg2([ 2 , 2 , 1 ] , (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_1596 + z_1640 + z_1804 + z_1836 + z_1900 + z_1972 + z_20 + z_228 + z_4 + z_96));
																																																																											}
																																																																											:pid_59:bufferDM2:<FIFO>#2{
																																																																												:pid_42:DataMsg2([ 2 , 2 , 1 ] , (z_1161 + z_1229 + z_1321 + z_1361 + z_1397 + z_141 + z_165 + z_273 + z_305 + z_33 + z_337 + z_405 + z_441 + z_45 + z_473 + z_493 + z_529 + z_821 + z_953 + z_997));
																																																																												:pid_25:DataMsg1([ 1 , 1 , 0 ] , (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_1596 + z_1640 + z_1804 + z_1836 + z_20 + z_228 + z_4 + z_96));
																																																																												:pid_25:DataMsg2([ 2 , 2 , 1 ] , (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_1596 + z_1640 + z_1804 + z_1836 + z_1900 + z_1972 + z_20 + z_228 + z_4 + z_96));
																																																																											}
																																																																										}
																																																																										EC:<Id:9140;Ev:512;H:74;W:8629>{ SC: ( pid_21:o#17 , ( pid_30:cp2 , pid_34:dp1 , pid_40:dp2 ) , ( pid_48:cp3 , pid_53:dp3 , pid_56:dp1 ) , ( pid_64:cp2 , pid_69:dp2 , pid_73:dp1 ) , ( pid_81:cp2 , pid_86:dp2 , pid_89:dp0 ) )
																					
																						
																						
													EXE: { |;| (:pid_25 , run) 
	(:pid_32 , run) (:pid_35 , run) (:pid_35 , dp_resetTau) (:pid_2 , run) }
																					
																						
																						
													TRACE: { |;| (:pid_25 , ${ 
	newfresh inst::Trickle.Node.z param::Trickle.Node.z_2036 }) (:pid_35 , ${ 
	newfresh inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_2710 
	}) }
																					
																						
																						
													NC: ((t_2710 < 8) && (0 <= 
	(t_2710 + -4)))
																																																																											PC: ((t_1206 < 8) && (t_1465 < 8) && (t_1506 < 8) && (t_1556 < 4) && (t_1722 < 4) && 
	(t_1860 < 4) && (t_1865 < 4) && (t_233 < 8) && (t_242 < 8) && (t_33 < 4) && 
	(t_44 < 4) && (t_557 < 4) && (t_59 < 4) && (t_630 < 4) && (t_636 < 4) && (t_64 < 
	4) && (t_8 < 4) && (t_907 < 4) && (t_1002 < 4) && (t_1191 < 4) && (t_1399 < 8) 
	&& (t_1579 < 8) && (t_1667 < 8) && (t_2078 < 8) && (t_2161 < 4) && (t_2174 < 4) 
	&& (t_2206 < 8) && (t_235 < 4) && (t_2420 < 4) && (t_2463 < 4) && (t_249 < 4) && 
	(t_2544 < 8) && (t_2710 < 8) && (t_325 < 4) && (t_452 < 4) && (t_662 < 4) && 
	(t_759 < 4) && (t_8 < 4) && (t_839 < 4) && (t_934 < 4) && (0 <= (t_1206 + -4)) 
	&& (0 <= (t_1465 + -4)) && (0 <= (t_1506 + -4)) && (0 <= (t_1556 + -2)) && (0 <= 
	(t_1722 + -2)) && (0 <= (t_1860 + -2)) && (0 <= (t_1865 + -2)) && (0 <= (t_233 + 
	-4)) && (0 <= (t_242 + -4)) && (0 <= (t_33 + -2)) && (0 <= (t_44 + -2)) && (0 <= 
	(t_557 + -2)) && (0 <= (t_59 + -2)) && (0 <= (t_630 + -2)) && (0 <= (t_636 + -2))
	 && (0 <= (t_64 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_907 + -2)) && (0 <= 
	(t_1002 + -2)) && (0 <= (t_1191 + -2)) && (0 <= (t_1399 + -4)) && (0 <= (t_1579 
	+ -4)) && (0 <= (t_1667 + -4)) && (0 <= (t_2078 + -4)) && (0 <= (t_2161 + -2)) 
	&& (0 <= (t_2174 + -2)) && (0 <= (t_2206 + -4)) && (0 <= (t_235 + -2)) && (0 <= 
	(t_2420 + -2)) && (0 <= (t_2463 + -2)) && (0 <= (t_249 + -2)) && (0 <= (t_2544 + 
	-4)) && (0 <= (t_2710 + -4)) && (0 <= (t_325 + -2)) && (0 <= (t_452 + -2)) && (0 
	<= (t_662 + -2)) && (0 <= (t_759 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_839 + 
	-2)) && (0 <= (t_934 + -2)))
																																																																											DATA{
																																																																												:pid_2:uncoveredExit = 31;
																																																																												:pid_25:$time = (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_1596 + z_1640 + z_1804 + z_1836 + z_1900 + z_1972 + z_20 + z_2036 + z_228 + z_4 + z_96);
																																																																												:pid_25:z = z_2036;
																																																																												:pid_25:reach_DATA_EXPIR_DM1 = true;
																																																																												:pid_25:localTime = (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_1596 + z_1640 + z_1804 + z_1836 + z_1900 + z_1972 + z_20 + z_2036 + z_228 + z_4 + z_96);
																																																																												:pid_25:localPC = ((t_1465 < 8) && (t_1556 < 4) && (t_1865 < 4) && (t_8 < 4) && (t_1579 < 8) && (t_2078 < 8) && (t_235 < 4) && (t_2463 < 4) && (t_2710 < 8) && (t_8 < 4) && (0 <= (t_1465 + -4)) && (0 <= (t_1556 + -2)) && (0 <= (t_1865 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_1579 + -4)) && (0 <= (t_2078 + -4)) && (0 <= (t_235 + -2)) && (0 <= (t_2463 + -2)) && (0 <= (t_2710 + -4)) && (0 <= (t_8 + -2)));
																																																																												:pid_25:localPtC = (((z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_20 + z_228 + z_4 + z_96) == 4) && ((z_1092 + z_1204 + z_132 + z_20 + z_228 + z_96) == 4) && ((z_1092 + z_228) == 4) && ((z_1596 + z_1640 + z_1804 + z_1836) == t_2078) && ((z_1596 + z_1640 + z_1804 + z_1836 + z_1900 + z_1972 + z_2036) == 8) && ((z_1836 + z_1900 + z_1972) == t_2463) && ((z_20 + z_4 + z_96) == t_8) && (z_1640 == t_1865) && (z_20 == t_8) && (z_228 == t_235) && ((z_1204 + z_1264 + z_1480 + z_1596 + z_1640 + z_1804) < t_1579) && ((z_1480 + z_1596) < t_1556) && ((z_1596 + z_1640 + z_1804 + z_1836 + z_1900) < 8) && (z_1264 < t_1465) && ((z_1022 + z_1298 + z_1422 + z_1442 + z_1530 + z_1538 + z_1682 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862) <= (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_1596 + z_1640 + z_1804 + z_1836 + z_1900 + z_20 + z_228 + z_4 + z_96)) && ((z_1022 + z_1298 + z_1422 + z_1442 + z_1530 + z_1538 + z_1682 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862) <= (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_1596 + z_1640 + z_1804 + z_20 + z_228 + z_4 + z_96)) && ((z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_62 + z_70) <= (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_1596 + z_20 + z_228 + z_4 + z_96)) && ((z_186 + z_198 + z_270 + z_62 + z_70) <= (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_20 + z_228 + z_4 + z_96)) && ((z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_20 + z_228 + z_4 + z_96) > t_8) && ((z_1092 + z_1204 + z_132 + z_20 + z_228 + z_96) > t_8) && ((z_1092 + z_228) > t_235) && ((z_1596 + z_1640 + z_1804 + z_1836 + z_1900 + z_1972 + z_2036) > t_2078) && ($delta#initial > 0) && (z_0 > 0) && (z_1092 > 0) && (z_1204 > 0) && (z_1264 > 0) && (z_132 > 0) && (z_1480 > 0) && (z_1596 > 0) && (z_1640 > 0) && (z_1804 > 0) && (z_1836 > 0) && (z_1900 > 0) && (z_1972 > 0) && (z_20 > 0) && (z_228 > 0) && (z_4 > 0) && (z_96 > 0));
																																																																												:pid_26:cl = (z_1640 + z_1804 + z_1836 + z_1900 + z_1972 + z_2036);
																																																																												:pid_32:e = 2;
																																																																												:pid_32:c = 0;
																																																																												:pid_32:tau = 8;
																																																																												:pid_32:t = t_2710;
																																																																												:pid_32:cl = 0;
																																																																												:pid_37:cl = (z_1836 + z_1900 + z_1972 + z_2036);
																																																																											}
																																																																											EC:<Id:9144;Ev:515;H:75;W:8632>{ SC: ( pid_21:o#17 , ( pid_30:cp2 , pid_34:dp1 , pid_40:dp2 ) , ( pid_48:cp3 , pid_53:dp3 , pid_56:dp1 ) , ( pid_64:cp2 , pid_69:dp2 , pid_73:dp1 ) , ( pid_81:cp2 , pid_85:dp1 , pid_89:dp0 ) )
																					
																						
																						
														EXE: { |;| (:pid_76 , run) 
	(:pid_83 , run) (:pid_86 , run) (:pid_86 , dp_resetTau) (:pid_2 , run) }
																					
																						
																						
														TRACE: { |;| (:pid_76 , ${ 
	newfresh inst::Trickle.Node.z param::Trickle.Node.z_2043 }) (:pid_86 , ${ 
	newfresh inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_2719 
	}) }
																					
																						
																						
														NC: ((t_2719 < 8) && (0 <= 
	(t_2719 + -4)))
																																																																												PC: ((t_1206 < 8) && (t_1465 < 8) && (t_1506 < 8) && (t_1556 < 4) && (t_1722 < 4) && 
	(t_1860 < 4) && (t_1865 < 4) && (t_233 < 8) && (t_242 < 8) && (t_33 < 4) && 
	(t_44 < 4) && (t_557 < 4) && (t_59 < 4) && (t_630 < 4) && (t_636 < 4) && (t_64 < 
	4) && (t_8 < 4) && (t_907 < 4) && (t_1002 < 4) && (t_1191 < 4) && (t_1399 < 8) 
	&& (t_1579 < 8) && (t_1667 < 8) && (t_2078 < 8) && (t_2161 < 4) && (t_2174 < 4) 
	&& (t_2206 < 8) && (t_235 < 4) && (t_2420 < 4) && (t_2463 < 4) && (t_249 < 4) && 
	(t_2544 < 8) && (t_2710 < 8) && (t_2719 < 8) && (t_325 < 4) && (t_452 < 4) && 
	(t_662 < 4) && (t_759 < 4) && (t_8 < 4) && (t_839 < 4) && (t_934 < 4) && (0 <= 
	(t_1206 + -4)) && (0 <= (t_1465 + -4)) && (0 <= (t_1506 + -4)) && (0 <= (t_1556 
	+ -2)) && (0 <= (t_1722 + -2)) && (0 <= (t_1860 + -2)) && (0 <= (t_1865 + -2)) 
	&& (0 <= (t_233 + -4)) && (0 <= (t_242 + -4)) && (0 <= (t_33 + -2)) && (0 <= 
	(t_44 + -2)) && (0 <= (t_557 + -2)) && (0 <= (t_59 + -2)) && (0 <= (t_630 + -2)) 
	&& (0 <= (t_636 + -2)) && (0 <= (t_64 + -2)) && (0 <= (t_8 + -2)) && (0 <= 
	(t_907 + -2)) && (0 <= (t_1002 + -2)) && (0 <= (t_1191 + -2)) && (0 <= (t_1399 + 
	-4)) && (0 <= (t_1579 + -4)) && (0 <= (t_1667 + -4)) && (0 <= (t_2078 + -4)) && 
	(0 <= (t_2161 + -2)) && (0 <= (t_2174 + -2)) && (0 <= (t_2206 + -4)) && (0 <= 
	(t_235 + -2)) && (0 <= (t_2420 + -2)) && (0 <= (t_2463 + -2)) && (0 <= (t_249 + 
	-2)) && (0 <= (t_2544 + -4)) && (0 <= (t_2710 + -4)) && (0 <= (t_2719 + -4)) && 
	(0 <= (t_325 + -2)) && (0 <= (t_452 + -2)) && (0 <= (t_662 + -2)) && (0 <= 
	(t_759 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_839 + -2)) && (0 <= (t_934 + -2)))
																																																																												DATA{
																																																																													:pid_2:uncoveredExit = 32;
																																																																													:pid_76:$time = (z_1051 + z_1159 + z_1567 + z_1591 + z_1699 + z_1967 + z_2043 + z_711 + z_715 + z_763 + z_775 + z_887 + z_895);
																																																																													:pid_76:z = z_2043;
																																																																													:pid_76:reach_DATA_EXPIR_DM1 = true;
																																																																													:pid_76:reach_DATA_EXPIR_DM2 = (e_7 == 2);
																																																																													:pid_76:localTime = (z_1051 + z_1159 + z_1567 + z_1591 + z_1699 + z_1967 + z_2043 + z_711 + z_715 + z_763 + z_775 + z_887 + z_895);
																																																																													:pid_76:localPC = ((t_1206 < 8) && (t_1860 < 4) && (t_630 < 4) && (t_636 < 4) && (t_907 < 4) && (t_1191 < 4) && (t_2206 < 8) && (t_2719 < 8) && (0 <= (t_1206 + -4)) && (0 <= (t_1860 + -2)) && (0 <= (t_630 + -2)) && (0 <= (t_636 + -2)) && (0 <= (t_907 + -2)) && (0 <= (t_1191 + -2)) && (0 <= (t_2206 + -4)) && (0 <= (t_2719 + -4)));
																																																																													:pid_76:localPtC = (((z_1051 + z_1159 + z_1567 + z_775 + z_887 + z_895) == 4) && ((z_1051 + z_1159 + z_775 + z_887 + z_895) == t_1191) && ((z_1051 + z_895) == 4) && ((z_1591 + z_1699 + z_1967) == t_2206) && ((z_1591 + z_1699 + z_1967 + z_2043) == 8) && ((z_763 + z_775) == t_636) && (z_1699 == t_1860) && (z_895 == t_907) && ((z_1159 + z_1567 + z_1591) < t_1206) && ((z_763 + z_775 + z_887) < 4) && (z_715 < t_630) && ((z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70) <= (z_1051 + z_1159 + z_1567 + z_1591 + z_711 + z_715 + z_763 + z_775 + z_887 + z_895)) && ((z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_62 + z_70) <= (z_711 + z_715 + z_763 + z_775 + z_887)) && ((z_186 + z_198 + z_270 + z_62 + z_70) <= (z_711 + z_715)) && ((z_1051 + z_1159 + z_1567 + z_775 + z_887 + z_895) > t_1191) && ((z_1051 + z_895) > t_907) && ((z_1591 + z_1699 + z_1967 + z_2043) > t_2206) && ($delta#initial > 0) && (z_1051 > 0) && (z_1159 > 0) && (z_1567 > 0) && (z_1591 > 0) && (z_1699 > 0) && (z_1967 > 0) && (z_711 > 0) && (z_715 > 0) && (z_763 > 0) && (z_775 > 0) && (z_887 > 0) && (z_895 > 0));
																																																																													:pid_77:cl = (z_1699 + z_1967 + z_2043);
																																																																													:pid_83:e = 2;
																																																																													:pid_83:tau = 8;
																																																																													:pid_83:t = t_2719;
																																																																													:pid_83:cl = 0;
																																																																													:pid_88:cl = (z_1051 + z_1159 + z_1567 + z_1591 + z_1699 + z_1967 + z_2043 + z_711 + z_715 + z_763 + z_775 + z_887 + z_895);
																																																																												}
																																																																												EC:<Id:9201;Ev:529;H:76;W:8686>{ SC: ( pid_21:o#17 , ( pid_30:cp2 , pid_34:dp1 , pid_40:dp2 ) , ( pid_48:cp3 , pid_53:dp3 , pid_56:dp1 ) , ( pid_64:cp2 , pid_69:dp2 , pid_73:dp1 ) , ( pid_81:cp2 , pid_85:dp1 , pid_89:dp0 ) )
																					
																						
																						
															EXE: { |;| (:pid_25 , 
	run) (:pid_26 , run) (:pid_30 , run) (:pid_30 , cp2_receiveCM_consistent) 
	(:pid_2 , run) }
																					
																						
																						
															TRACE: { |;| (:pid_25 , 
	${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_2052 }) (:pid_30 , ${ 
	input inst::Trickle.Node.ControlMsg [ 1 , 1 ] ${ + param::Trickle.Node.z_186 
	param::Trickle.Node.z_198 param::Trickle.Node.z_270 param::Trickle.Node.z_330 
	param::Trickle.Node.z_386 param::Trickle.Node.z_550 param::Trickle.Node.z_570 
	param::Trickle.Node.z_602 param::Trickle.Node.z_62 param::Trickle.Node.z_622 
	param::Trickle.Node.z_658 param::Trickle.Node.z_670 param::Trickle.Node.z_70 } } 
	@ (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_1596 + z_1640 + z_1804 + 
	z_1836 + z_1900 + z_1972 + z_20 + z_2036 + z_2052 + z_228 + z_4 + z_96)) }
																																																																													DATA{
																																																																														:pid_2:uncoveredExit = 33;
																																																																														:pid_25:$time = (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_1596 + z_1640 + z_1804 + z_1836 + z_1900 + z_1972 + z_20 + z_2036 + z_2052 + z_228 + z_4 + z_96);
																																																																														:pid_25:z = z_2052;
																																																																														:pid_25:seq_buff[1] = 1;
																																																																														:pid_25:localTime = (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_1596 + z_1640 + z_1804 + z_1836 + z_1900 + z_1972 + z_20 + z_2036 + z_2052 + z_228 + z_4 + z_96);
																																																																														:pid_25:localPC = ((t_1465 < 8) && (t_1556 < 4) && (t_1865 < 4) && (t_8 < 4) && (t_1579 < 8) && (t_2078 < 8) && (t_235 < 4) && (t_2463 < 4) && (t_2710 < 8) && (t_8 < 4) && (0 <= (t_1465 + -4)) && (0 <= (t_1556 + -2)) && (0 <= (t_1865 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_1579 + -4)) && (0 <= (t_2078 + -4)) && (0 <= (t_235 + -2)) && (0 <= (t_2463 + -2)) && (0 <= (t_2710 + -4)) && (0 <= (t_8 + -2)));
																																																																														:pid_25:localPtC = (((z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_20 + z_228 + z_4 + z_96) == 4) && ((z_1092 + z_1204 + z_132 + z_20 + z_228 + z_96) == 4) && ((z_1092 + z_228) == 4) && ((z_1596 + z_1640 + z_1804 + z_1836) == t_2078) && ((z_1596 + z_1640 + z_1804 + z_1836 + z_1900 + z_1972 + z_2036) == 8) && ((z_1836 + z_1900 + z_1972) == t_2463) && ((z_20 + z_4 + z_96) == t_8) && (z_1640 == t_1865) && (z_20 == t_8) && (z_228 == t_235) && ((z_1204 + z_1264 + z_1480 + z_1596 + z_1640 + z_1804) < t_1579) && ((z_1480 + z_1596) < t_1556) && ((z_1596 + z_1640 + z_1804 + z_1836 + z_1900) < 8) && ((z_1640 + z_1804 + z_1836 + z_1900 + z_1972 + z_2036 + z_2052) < 4) && (z_1264 < t_1465) && ((z_1022 + z_1298 + z_1422 + z_1442 + z_1530 + z_1538 + z_1682 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862) <= (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_1596 + z_1640 + z_1804 + z_1836 + z_1900 + z_20 + z_228 + z_4 + z_96)) && ((z_1022 + z_1298 + z_1422 + z_1442 + z_1530 + z_1538 + z_1682 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862) <= (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_1596 + z_1640 + z_1804 + z_20 + z_228 + z_4 + z_96)) && ((z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70) <= (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_1596 + z_1640 + z_1804 + z_1836 + z_1900 + z_1972 + z_20 + z_2036 + z_2052 + z_228 + z_4 + z_96)) && ((z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_62 + z_70) <= (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_1596 + z_20 + z_228 + z_4 + z_96)) && ((z_186 + z_198 + z_270 + z_62 + z_70) <= (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_20 + z_228 + z_4 + z_96)) && ((z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_20 + z_228 + z_4 + z_96) > t_8) && ((z_1092 + z_1204 + z_132 + z_20 + z_228 + z_96) > t_8) && ((z_1092 + z_228) > t_235) && ((z_1596 + z_1640 + z_1804 + z_1836 + z_1900 + z_1972 + z_2036) > t_2078) && ($delta#initial > 0) && (z_0 > 0) && (z_1092 > 0) && (z_1204 > 0) && (z_1264 > 0) && (z_132 > 0) && (z_1480 > 0) && (z_1596 > 0) && (z_1640 > 0) && (z_1804 > 0) && (z_1836 > 0) && (z_1900 > 0) && (z_1972 > 0) && (z_20 > 0) && (z_2036 > 0) && (z_228 > 0) && (z_4 > 0) && (z_96 > 0));
																																																																														:pid_25:timeEmit = (z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70);
																																																																														:pid_26:c = 1;
																																																																														:pid_26:i = 2;
																																																																														:pid_26:consistent = true;
																																																																														:pid_26:cl = (z_1640 + z_1804 + z_1836 + z_1900 + z_1972 + z_2036 + z_2052);
																																																																														:pid_32:cl = z_2052;
																																																																														:pid_37:cl = (z_1836 + z_1900 + z_1972 + z_2036 + z_2052);
																																																																													}
																																																																													BUFFER{
																																																																														:pid_25:bufferCM:<FIFO>#0{
																																																																															:pid_59:ControlMsg([ 1 , 1 ] , (z_1022 + z_1298 + z_1422 + z_1442 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862));
																																																																														}
																																																																													}
																																																																													EC:<Id:9426;Ev:544;H:77;W:8897>{ SC: ( pid_21:o#17 , ( pid_30:cp2 , pid_34:dp1 , pid_39:dp1 ) , ( pid_48:cp3 , pid_53:dp3 , pid_56:dp1 ) , ( pid_64:cp2 , pid_69:dp2 , pid_73:dp1 ) , ( pid_81:cp2 , pid_85:dp1 , pid_89:dp0 ) )
																					
																						
																						
																EXE: { |;| (:pid_25 
	, run) (:pid_37 , run) (:pid_40 , run) (:pid_40 , dp_resetTau) (:pid_2 , run) }
																					
																						
																						
																TRACE: { |;| 
	(:pid_25 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_2108 }) 
	(:pid_40 , ${ newfresh inst::Trickle.Node.DataProcess.t 
	param::Trickle.Node.DataProcess.t_2801 }) }
																					
																						
																						
																NC: ((t_2801 < 8) && 
	(0 <= (t_2801 + -4)))
																																																																														PC: ((t_1206 < 8) && (t_1465 < 8) && (t_1506 < 8) && (t_1556 < 4) && (t_1722 < 4) && 
	(t_1860 < 4) && (t_1865 < 4) && (t_233 < 8) && (t_242 < 8) && (t_33 < 4) && 
	(t_44 < 4) && (t_557 < 4) && (t_59 < 4) && (t_630 < 4) && (t_636 < 4) && (t_64 < 
	4) && (t_8 < 4) && (t_907 < 4) && (t_1002 < 4) && (t_1191 < 4) && (t_1399 < 8) 
	&& (t_1579 < 8) && (t_1667 < 8) && (t_2078 < 8) && (t_2161 < 4) && (t_2174 < 4) 
	&& (t_2206 < 8) && (t_235 < 4) && (t_2420 < 4) && (t_2463 < 4) && (t_249 < 4) && 
	(t_2544 < 8) && (t_2710 < 8) && (t_2719 < 8) && (t_2801 < 8) && (t_325 < 4) && 
	(t_452 < 4) && (t_662 < 4) && (t_759 < 4) && (t_8 < 4) && (t_839 < 4) && (t_934 
	< 4) && (0 <= (t_1206 + -4)) && (0 <= (t_1465 + -4)) && (0 <= (t_1506 + -4)) && 
	(0 <= (t_1556 + -2)) && (0 <= (t_1722 + -2)) && (0 <= (t_1860 + -2)) && (0 <= 
	(t_1865 + -2)) && (0 <= (t_233 + -4)) && (0 <= (t_242 + -4)) && (0 <= (t_33 + -2)
	) && (0 <= (t_44 + -2)) && (0 <= (t_557 + -2)) && (0 <= (t_59 + -2)) && (0 <= 
	(t_630 + -2)) && (0 <= (t_636 + -2)) && (0 <= (t_64 + -2)) && (0 <= (t_8 + -2)) 
	&& (0 <= (t_907 + -2)) && (0 <= (t_1002 + -2)) && (0 <= (t_1191 + -2)) && (0 <= 
	(t_1399 + -4)) && (0 <= (t_1579 + -4)) && (0 <= (t_1667 + -4)) && (0 <= (t_2078 
	+ -4)) && (0 <= (t_2161 + -2)) && (0 <= (t_2174 + -2)) && (0 <= (t_2206 + -4)) 
	&& (0 <= (t_235 + -2)) && (0 <= (t_2420 + -2)) && (0 <= (t_2463 + -2)) && (0 <= 
	(t_249 + -2)) && (0 <= (t_2544 + -4)) && (0 <= (t_2710 + -4)) && (0 <= (t_2719 + 
	-4)) && (0 <= (t_2801 + -4)) && (0 <= (t_325 + -2)) && (0 <= (t_452 + -2)) && (0 
	<= (t_662 + -2)) && (0 <= (t_759 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_839 + 
	-2)) && (0 <= (t_934 + -2)))
																																																																														DATA{
																																																																															:pid_2:uncoveredExit = 34;
																																																																															:pid_25:$time = (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_1596 + z_1640 + z_1804 + z_1836 + z_1900 + z_1972 + z_20 + z_2036 + z_2052 + z_2108 + z_228 + z_4 + z_96);
																																																																															:pid_25:z = z_2108;
																																																																															:pid_25:localTime = (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_1596 + z_1640 + z_1804 + z_1836 + z_1900 + z_1972 + z_20 + z_2036 + z_2052 + z_2108 + z_228 + z_4 + z_96);
																																																																															:pid_25:localPC = ((t_1465 < 8) && (t_1556 < 4) && (t_1865 < 4) && (t_8 < 4) && (t_1579 < 8) && (t_2078 < 8) && (t_235 < 4) && (t_2463 < 4) && (t_2710 < 8) && (t_2801 < 8) && (t_8 < 4) && (0 <= (t_1465 + -4)) && (0 <= (t_1556 + -2)) && (0 <= (t_1865 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_1579 + -4)) && (0 <= (t_2078 + -4)) && (0 <= (t_235 + -2)) && (0 <= (t_2463 + -2)) && (0 <= (t_2710 + -4)) && (0 <= (t_2801 + -4)) && (0 <= (t_8 + -2)));
																																																																															:pid_25:localPtC = (((z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_20 + z_228 + z_4 + z_96) == 4) && ((z_1092 + z_1204 + z_132 + z_20 + z_228 + z_96) == 4) && ((z_1092 + z_228) == 4) && ((z_1596 + z_1640 + z_1804 + z_1836) == t_2078) && ((z_1596 + z_1640 + z_1804 + z_1836 + z_1900 + z_1972 + z_2036) == 8) && ((z_1836 + z_1900 + z_1972) == t_2463) && ((z_1836 + z_1900 + z_1972 + z_2036 + z_2052 + z_2108) == 4) && ((z_20 + z_4 + z_96) == t_8) && (z_1640 == t_1865) && (z_20 == t_8) && (z_228 == t_235) && ((z_1204 + z_1264 + z_1480 + z_1596 + z_1640 + z_1804) < t_1579) && ((z_1480 + z_1596) < t_1556) && ((z_1596 + z_1640 + z_1804 + z_1836 + z_1900) < 8) && ((z_1640 + z_1804 + z_1836 + z_1900 + z_1972 + z_2036 + z_2052) < 4) && (z_1264 < t_1465) && ((z_1022 + z_1298 + z_1422 + z_1442 + z_1530 + z_1538 + z_1682 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862) <= (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_1596 + z_1640 + z_1804 + z_1836 + z_1900 + z_20 + z_228 + z_4 + z_96)) && ((z_1022 + z_1298 + z_1422 + z_1442 + z_1530 + z_1538 + z_1682 + z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70 + z_862) <= (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_1596 + z_1640 + z_1804 + z_20 + z_228 + z_4 + z_96)) && ((z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70) <= (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_1596 + z_1640 + z_1804 + z_1836 + z_1900 + z_1972 + z_20 + z_2036 + z_2052 + z_228 + z_4 + z_96)) && ((z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_62 + z_70) <= (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_1596 + z_20 + z_228 + z_4 + z_96)) && ((z_186 + z_198 + z_270 + z_62 + z_70) <= (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_20 + z_228 + z_4 + z_96)) && ((z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_20 + z_228 + z_4 + z_96) > t_8) && ((z_1092 + z_1204 + z_132 + z_20 + z_228 + z_96) > t_8) && ((z_1092 + z_228) > t_235) && ((z_1596 + z_1640 + z_1804 + z_1836 + z_1900 + z_1972 + z_2036) > t_2078) && ((z_1836 + z_1900 + z_1972 + z_2036 + z_2052 + z_2108) > t_2463) && ($delta#initial > 0) && (z_0 > 0) && (z_1092 > 0) && (z_1204 > 0) && (z_1264 > 0) && (z_132 > 0) && (z_1480 > 0) && (z_1596 > 0) && (z_1640 > 0) && (z_1804 > 0) && (z_1836 > 0) && (z_1900 > 0) && (z_1972 > 0) && (z_20 > 0) && (z_2036 > 0) && (z_2052 > 0) && (z_228 > 0) && (z_4 > 0) && (z_96 > 0));
																																																																															:pid_26:cl = (z_1640 + z_1804 + z_1836 + z_1900 + z_1972 + z_2036 + z_2052 + z_2108);
																																																																															:pid_32:cl = (z_2052 + z_2108);
																																																																															:pid_37:e = 1;
																																																																															:pid_37:c = 0;
																																																																															:pid_37:tau = 8;
																																																																															:pid_37:t = t_2801;
																																																																															:pid_37:cl = 0;
																																																																														}
																																																																														EC:<Id:9635;Ev:545;H:78;W:8897>{ SC: ( pid_21:o#17 , ( pid_30:cp2 , pid_34:dp1 , pid_39:dp1 ) , ( pid_48:cp3 , pid_53:dp3 , pid_56:dp1 ) , ( pid_64:cp2 , pid_69:dp2 , pid_73:dp1 ) , ( pid_80:cp1 , pid_85:dp1 , pid_89:dp0 ) )
																					
																						
																						
																	EXE: { |;| 
	(:pid_76 , run) (:pid_77 , run) (:pid_81 , run) (:pid_81 , cp_resetTau) (:pid_2 
	, run) }
																					
																						
																						
																	TRACE: { |;| 
	(:pid_76 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_2171 }) 
	(:pid_81 , ${ newfresh inst::Trickle.Node.ControlProcess.t 
	param::Trickle.Node.ControlProcess.t_2349 }) }
																					
																						
																						
																	NC: ((t_2349 < 8)
	 && (0 <= (t_2349 + -4)))
																																																																															PC: ((t_1206 < 8) && (t_1465 < 8) && (t_1506 < 8) && (t_1556 < 4) && (t_1722 < 4) && 
	(t_1860 < 4) && (t_1865 < 4) && (t_233 < 8) && (t_2349 < 8) && (t_242 < 8) && 
	(t_33 < 4) && (t_44 < 4) && (t_557 < 4) && (t_59 < 4) && (t_630 < 4) && (t_636 < 
	4) && (t_64 < 4) && (t_8 < 4) && (t_907 < 4) && (t_1002 < 4) && (t_1191 < 4) && 
	(t_1399 < 8) && (t_1579 < 8) && (t_1667 < 8) && (t_2078 < 8) && (t_2161 < 4) && 
	(t_2174 < 4) && (t_2206 < 8) && (t_235 < 4) && (t_2420 < 4) && (t_2463 < 4) && 
	(t_249 < 4) && (t_2544 < 8) && (t_2710 < 8) && (t_2719 < 8) && (t_2801 < 8) && 
	(t_325 < 4) && (t_452 < 4) && (t_662 < 4) && (t_759 < 4) && (t_8 < 4) && (t_839 
	< 4) && (t_934 < 4) && (0 <= (t_1206 + -4)) && (0 <= (t_1465 + -4)) && (0 <= 
	(t_1506 + -4)) && (0 <= (t_1556 + -2)) && (0 <= (t_1722 + -2)) && (0 <= (t_1860 
	+ -2)) && (0 <= (t_1865 + -2)) && (0 <= (t_233 + -4)) && (0 <= (t_2349 + -4)) && 
	(0 <= (t_242 + -4)) && (0 <= (t_33 + -2)) && (0 <= (t_44 + -2)) && (0 <= (t_557 
	+ -2)) && (0 <= (t_59 + -2)) && (0 <= (t_630 + -2)) && (0 <= (t_636 + -2)) && (0 
	<= (t_64 + -2)) && (0 <= (t_8 + -2)) && (0 <= (t_907 + -2)) && (0 <= (t_1002 + 
	-2)) && (0 <= (t_1191 + -2)) && (0 <= (t_1399 + -4)) && (0 <= (t_1579 + -4)) && 
	(0 <= (t_1667 + -4)) && (0 <= (t_2078 + -4)) && (0 <= (t_2161 + -2)) && (0 <= 
	(t_2174 + -2)) && (0 <= (t_2206 + -4)) && (0 <= (t_235 + -2)) && (0 <= (t_2420 + 
	-2)) && (0 <= (t_2463 + -2)) && (0 <= (t_249 + -2)) && (0 <= (t_2544 + -4)) && 
	(0 <= (t_2710 + -4)) && (0 <= (t_2719 + -4)) && (0 <= (t_2801 + -4)) && (0 <= 
	(t_325 + -2)) && (0 <= (t_452 + -2)) && (0 <= (t_662 + -2)) && (0 <= (t_759 + -2)
	) && (0 <= (t_8 + -2)) && (0 <= (t_839 + -2)) && (0 <= (t_934 + -2)))
																																																																															DATA{
																																																																																:pid_2:uncoveredExit = 35;
																																																																																:pid_76:$time = (z_1051 + z_1159 + z_1567 + z_1591 + z_1699 + z_1967 + z_2043 + z_2171 + z_711 + z_715 + z_763 + z_775 + z_887 + z_895);
																																																																																:pid_76:z = z_2171;
																																																																																:pid_76:reach_DATA_EXPIR_DM2 = (e_7 == 2);
																																																																																:pid_76:localTime = (z_1051 + z_1159 + z_1567 + z_1591 + z_1699 + z_1967 + z_2043 + z_2171 + z_711 + z_715 + z_763 + z_775 + z_887 + z_895);
																																																																																:pid_76:localPC = ((t_1206 < 8) && (t_1860 < 4) && (t_2349 < 8) && (t_630 < 4) && (t_636 < 4) && (t_907 < 4) && (t_1191 < 4) && (t_2206 < 8) && (t_2719 < 8) && (0 <= (t_1206 + -4)) && (0 <= (t_1860 + -2)) && (0 <= (t_2349 + -4)) && (0 <= (t_630 + -2)) && (0 <= (t_636 + -2)) && (0 <= (t_907 + -2)) && (0 <= (t_1191 + -2)) && (0 <= (t_2206 + -4)) && (0 <= (t_2719 + -4)));
																																																																																:pid_76:localPtC = (((z_1051 + z_1159 + z_1567 + z_775 + z_887 + z_895) == 4) && ((z_1051 + z_1159 + z_775 + z_887 + z_895) == t_1191) && ((z_1051 + z_895) == 4) && ((z_1591 + z_1699 + z_1967) == t_2206) && ((z_1591 + z_1699 + z_1967 + z_2043) == 8) && ((z_1699 + z_1967 + z_2043 + z_2171) == 4) && ((z_763 + z_775) == t_636) && (z_1699 == t_1860) && (z_895 == t_907) && ((z_1159 + z_1567 + z_1591) < t_1206) && ((z_763 + z_775 + z_887) < 4) && (z_715 < t_630) && ((z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70) <= (z_1051 + z_1159 + z_1567 + z_1591 + z_711 + z_715 + z_763 + z_775 + z_887 + z_895)) && ((z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_62 + z_70) <= (z_711 + z_715 + z_763 + z_775 + z_887)) && ((z_186 + z_198 + z_270 + z_62 + z_70) <= (z_711 + z_715)) && ((z_1051 + z_1159 + z_1567 + z_775 + z_887 + z_895) > t_1191) && ((z_1051 + z_895) > t_907) && ((z_1591 + z_1699 + z_1967 + z_2043) > t_2206) && ((z_1699 + z_1967 + z_2043 + z_2171) > t_1860) && ($delta#initial > 0) && (z_1051 > 0) && (z_1159 > 0) && (z_1567 > 0) && (z_1591 > 0) && (z_1699 > 0) && (z_1967 > 0) && (z_2043 > 0) && (z_711 > 0) && (z_715 > 0) && (z_763 > 0) && (z_775 > 0) && (z_887 > 0) && (z_895 > 0));
																																																																																:pid_77:e = 1;
																																																																																:pid_77:c = 0;
																																																																																:pid_77:tau = 8;
																																																																																:pid_77:t = t_2349;
																																																																																:pid_77:cl = 0;
																																																																																:pid_83:cl = z_2171;
																																																																																:pid_88:cl = (z_1051 + z_1159 + z_1567 + z_1591 + z_1699 + z_1967 + z_2043 + z_2171 + z_711 + z_715 + z_763 + z_775 + z_887 + z_895);
																																																																															}
																																																																															EC:<Id:9650;Ev:546;H:79;W:8897>{ SC: ( pid_21:o#17 , ( pid_30:cp2 , pid_34:dp1 , pid_39:dp1 ) , ( pid_48:cp3 , pid_53:dp3 , pid_56:dp1 ) , ( pid_64:cp2 , pid_69:dp2 , pid_73:dp1 ) , ( pid_81:cp2 , pid_85:dp1 , pid_89:dp0 ) )
																					
																						
																						
																		EXE: { |;| 
	(:pid_76 , run) (:pid_77 , run) (:pid_80 , run) (:pid_80 , cp_sendCM) (:pid_2 , 
	run) }
																					
																						
																						
																		TRACE: { |;| 
	(:pid_76 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_2175 }) 
	(:pid_80 , ${ output inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + 
	param::Trickle.Node.z_1051 param::Trickle.Node.z_1159 param::Trickle.Node.z_1567 
	param::Trickle.Node.z_1591 param::Trickle.Node.z_1699 param::Trickle.Node.z_1967 
	param::Trickle.Node.z_2043 param::Trickle.Node.z_2171 param::Trickle.Node.z_2175 
	param::Trickle.Node.z_711 param::Trickle.Node.z_715 param::Trickle.Node.z_763 
	param::Trickle.Node.z_775 param::Trickle.Node.z_887 param::Trickle.Node.z_895 } }
	 @ (z_1051 + z_1159 + z_1567 + z_1591 + z_1699 + z_1967 + z_2043 + z_2171 + 
	z_2175 + z_711 + z_715 + z_763 + z_775 + z_887 + z_895)) }
																																																																																DATA{
																																																																																	:pid_2:uncoveredExit = 36;
																																																																																	:pid_76:$time = (z_1051 + z_1159 + z_1567 + z_1591 + z_1699 + z_1967 + z_2043 + z_2171 + z_2175 + z_711 + z_715 + z_763 + z_775 + z_887 + z_895);
																																																																																	:pid_76:z = z_2175;
																																																																																	:pid_76:reach_DATA_EXPIR_DM2 = (e_7 == 2);
																																																																																	:pid_76:localTime = (z_1051 + z_1159 + z_1567 + z_1591 + z_1699 + z_1967 + z_2043 + z_2171 + z_2175 + z_711 + z_715 + z_763 + z_775 + z_887 + z_895);
																																																																																	:pid_76:localPC = ((t_1206 < 8) && (t_1860 < 4) && (t_2349 < 8) && (t_630 < 4) && (t_636 < 4) && (t_907 < 4) && (t_1191 < 4) && (t_2206 < 8) && (t_2719 < 8) && (0 <= (t_1206 + -4)) && (0 <= (t_1860 + -2)) && (0 <= (t_2349 + -4)) && (0 <= (t_630 + -2)) && (0 <= (t_636 + -2)) && (0 <= (t_907 + -2)) && (0 <= (t_1191 + -2)) && (0 <= (t_2206 + -4)) && (0 <= (t_2719 + -4)));
																																																																																	:pid_76:localPtC = (((z_1051 + z_1159 + z_1567 + z_775 + z_887 + z_895) == 4) && ((z_1051 + z_1159 + z_775 + z_887 + z_895) == t_1191) && ((z_1051 + z_895) == 4) && ((z_1591 + z_1699 + z_1967) == t_2206) && ((z_1591 + z_1699 + z_1967 + z_2043) == 8) && ((z_1699 + z_1967 + z_2043 + z_2171) == 4) && ((z_763 + z_775) == t_636) && (z_1699 == t_1860) && (z_2175 == t_2349) && (z_895 == t_907) && ((z_1159 + z_1567 + z_1591) < t_1206) && ((z_763 + z_775 + z_887) < 4) && (z_715 < t_630) && ((z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70) <= (z_1051 + z_1159 + z_1567 + z_1591 + z_711 + z_715 + z_763 + z_775 + z_887 + z_895)) && ((z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_62 + z_70) <= (z_711 + z_715 + z_763 + z_775 + z_887)) && ((z_186 + z_198 + z_270 + z_62 + z_70) <= (z_711 + z_715)) && ((z_1051 + z_1159 + z_1567 + z_775 + z_887 + z_895) > t_1191) && ((z_1051 + z_895) > t_907) && ((z_1591 + z_1699 + z_1967 + z_2043) > t_2206) && ((z_1699 + z_1967 + z_2043 + z_2171) > t_1860) && ($delta#initial > 0) && (z_1051 > 0) && (z_1159 > 0) && (z_1567 > 0) && (z_1591 > 0) && (z_1699 > 0) && (z_1967 > 0) && (z_2043 > 0) && (z_2171 > 0) && (z_711 > 0) && (z_715 > 0) && (z_763 > 0) && (z_775 > 0) && (z_887 > 0) && (z_895 > 0));
																																																																																	:pid_77:cl = z_2175;
																																																																																	:pid_83:cl = (z_2171 + z_2175);
																																																																																	:pid_88:cl = (z_1051 + z_1159 + z_1567 + z_1591 + z_1699 + z_1967 + z_2043 + z_2171 + z_2175 + z_711 + z_715 + z_763 + z_775 + z_887 + z_895);
																																																																																}
																																																																																BUFFER{
																																																																																	:pid_42:bufferCM:<FIFO>#0{
																																																																																		:pid_76:ControlMsg([ 0 , 0 ] , (z_711 + z_715 + z_763 + z_775));
																																																																																		:pid_76:ControlMsg([ 0 , 0 ] , (z_711 + z_715 + z_763 + z_775 + z_887 + z_895));
																																																																																		:pid_25:ControlMsg([ 1 , 1 ] , (z_0 + z_1092 + z_1204 + z_1264 + z_132 + z_1480 + z_1596 + z_1640 + z_20 + z_228 + z_4 + z_96));
																																																																																		:pid_76:ControlMsg([ 0 , 0 ] , (z_1051 + z_1159 + z_1567 + z_1591 + z_1699 + z_711 + z_715 + z_763 + z_775 + z_887 + z_895));
																																																																																		:pid_76:ControlMsg([ 0 , 0 ] , (z_1051 + z_1159 + z_1567 + z_1591 + z_1699 + z_1967 + z_2043 + z_2171 + z_2175 + z_711 + z_715 + z_763 + z_775 + z_887 + z_895));
																																																																																	}
																																																																																}
																																																																																EC:<Id:9665;Ev:561;H:80;W:8897>{ SC: ( pid_22:o#18 , ( pid_30:cp2 , pid_34:dp1 , pid_39:dp1 ) , ( pid_48:cp3 , pid_53:dp3 , pid_56:dp1 ) , ( pid_64:cp2 , pid_69:dp2 , pid_73:dp1 ) , ( pid_80:cp1 , pid_85:dp1 , pid_89:dp0 ) )
																					
																						
																						
																			EXE: { 
	|;| (:pid_76 , run) (:pid_77 , run) (:pid_81 , run) (:pid_81 , cp_resetTau) 
	(:pid_2 , run) (:pid_21 , run) (:pid_21 , not_all_updated) }
																					
																						
																						
																			TRACE: { 
	|;| (:pid_76 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_2179 }) 
	(:pid_81 , ${ newfresh inst::Trickle.Node.ControlProcess.t 
	param::Trickle.Node.ControlProcess.t_2356 }) }
																																																																																	/*FLAGS{ COVERAGE-ELEMENT }*/
																																																																																	INFO{
																																																																																		<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#19->run::pid_22:Trickle.Observer.o#18->prot::Trickle.Observer.o#18" as trace="tpid#19->run::pid_22:Trickle.Observer.o#18->prot::Trickle.Observer.o#18">
																																																																																	}
																					
																						
																						
																			NC: 
	((e_7 == 2) && (t_2356 < 8) && (0 <= (t_2356 + -4)))
																																																																																	PC: ((e_7 == 2) && (t_1206 < 8) && (t_1465 < 8) && (t_1506 < 8) && (t_1556 < 4) && 
	(t_1722 < 4) && (t_1860 < 4) && (t_1865 < 4) && (t_233 < 8) && (t_2349 < 8) && 
	(t_2356 < 8) && (t_242 < 8) && (t_33 < 4) && (t_44 < 4) && (t_557 < 4) && (t_59 
	< 4) && (t_630 < 4) && (t_636 < 4) && (t_64 < 4) && (t_8 < 4) && (t_907 < 4) && 
	(t_1002 < 4) && (t_1191 < 4) && (t_1399 < 8) && (t_1579 < 8) && (t_1667 < 8) && 
	(t_2078 < 8) && (t_2161 < 4) && (t_2174 < 4) && (t_2206 < 8) && (t_235 < 4) && 
	(t_2420 < 4) && (t_2463 < 4) && (t_249 < 4) && (t_2544 < 8) && (t_2710 < 8) && 
	(t_2719 < 8) && (t_2801 < 8) && (t_325 < 4) && (t_452 < 4) && (t_662 < 4) && 
	(t_759 < 4) && (t_8 < 4) && (t_839 < 4) && (t_934 < 4) && (0 <= (t_1206 + -4)) 
	&& (0 <= (t_1465 + -4)) && (0 <= (t_1506 + -4)) && (0 <= (t_1556 + -2)) && (0 <= 
	(t_1722 + -2)) && (0 <= (t_1860 + -2)) && (0 <= (t_1865 + -2)) && (0 <= (t_233 + 
	-4)) && (0 <= (t_2349 + -4)) && (0 <= (t_2356 + -4)) && (0 <= (t_242 + -4)) && 
	(0 <= (t_33 + -2)) && (0 <= (t_44 + -2)) && (0 <= (t_557 + -2)) && (0 <= (t_59 + 
	-2)) && (0 <= (t_630 + -2)) && (0 <= (t_636 + -2)) && (0 <= (t_64 + -2)) && (0 
	<= (t_8 + -2)) && (0 <= (t_907 + -2)) && (0 <= (t_1002 + -2)) && (0 <= (t_1191 + 
	-2)) && (0 <= (t_1399 + -4)) && (0 <= (t_1579 + -4)) && (0 <= (t_1667 + -4)) && 
	(0 <= (t_2078 + -4)) && (0 <= (t_2161 + -2)) && (0 <= (t_2174 + -2)) && (0 <= 
	(t_2206 + -4)) && (0 <= (t_235 + -2)) && (0 <= (t_2420 + -2)) && (0 <= (t_2463 + 
	-2)) && (0 <= (t_249 + -2)) && (0 <= (t_2544 + -4)) && (0 <= (t_2710 + -4)) && 
	(0 <= (t_2719 + -4)) && (0 <= (t_2801 + -4)) && (0 <= (t_325 + -2)) && (0 <= 
	(t_452 + -2)) && (0 <= (t_662 + -2)) && (0 <= (t_759 + -2)) && (0 <= (t_8 + -2)) 
	&& (0 <= (t_839 + -2)) && (0 <= (t_934 + -2)))
																																																																																	DATA{
																																																																																		:pid_2:uncoveredExit = 0;
																																																																																		:pid_76:$time = (z_1051 + z_1159 + z_1567 + z_1591 + z_1699 + z_1967 + z_2043 + z_2171 + z_2175 + z_2179 + z_711 + z_715 + z_763 + z_775 + z_887 + z_895);
																																																																																		:pid_76:z = z_2179;
																																																																																		:pid_76:reach_DATA_EXPIR_DM2 = true;
																																																																																		:pid_76:reach_CTRL_EXPIR = true;
																																																																																		:pid_76:localTime = (z_1051 + z_1159 + z_1567 + z_1591 + z_1699 + z_1967 + z_2043 + z_2171 + z_2175 + z_2179 + z_711 + z_715 + z_763 + z_775 + z_887 + z_895);
																																																																																		:pid_76:localPC = ((t_1206 < 8) && (t_1860 < 4) && (t_2349 < 8) && (t_2356 < 8) && (t_630 < 4) && (t_636 < 4) && (t_907 < 4) && (t_1191 < 4) && (t_2206 < 8) && (t_2719 < 8) && (0 <= (t_1206 + -4)) && (0 <= (t_1860 + -2)) && (0 <= (t_2349 + -4)) && (0 <= (t_2356 + -4)) && (0 <= (t_630 + -2)) && (0 <= (t_636 + -2)) && (0 <= (t_907 + -2)) && (0 <= (t_1191 + -2)) && (0 <= (t_2206 + -4)) && (0 <= (t_2719 + -4)));
																																																																																		:pid_76:localPtC = (((z_1051 + z_1159 + z_1567 + z_775 + z_887 + z_895) == 4) && ((z_1051 + z_1159 + z_775 + z_887 + z_895) == t_1191) && ((z_1051 + z_895) == 4) && ((z_1591 + z_1699 + z_1967) == t_2206) && ((z_1591 + z_1699 + z_1967 + z_2043) == 8) && ((z_1699 + z_1967 + z_2043 + z_2171) == 4) && ((z_2175 + z_2179) == 8) && ((z_763 + z_775) == t_636) && (z_1699 == t_1860) && (z_2175 == t_2349) && (z_895 == t_907) && ((z_1159 + z_1567 + z_1591) < t_1206) && ((z_763 + z_775 + z_887) < 4) && (z_715 < t_630) && ((z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70) <= (z_1051 + z_1159 + z_1567 + z_1591 + z_711 + z_715 + z_763 + z_775 + z_887 + z_895)) && ((z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_62 + z_70) <= (z_711 + z_715 + z_763 + z_775 + z_887)) && ((z_186 + z_198 + z_270 + z_62 + z_70) <= (z_711 + z_715)) && ((z_1051 + z_1159 + z_1567 + z_775 + z_887 + z_895) > t_1191) && ((z_1051 + z_895) > t_907) && ((z_1591 + z_1699 + z_1967 + z_2043) > t_2206) && ((z_1699 + z_1967 + z_2043 + z_2171) > t_1860) && ((z_2175 + z_2179) > t_2349) && ($delta#initial > 0) && (z_1051 > 0) && (z_1159 > 0) && (z_1567 > 0) && (z_1591 > 0) && (z_1699 > 0) && (z_1967 > 0) && (z_2043 > 0) && (z_2171 > 0) && (z_2175 > 0) && (z_711 > 0) && (z_715 > 0) && (z_763 > 0) && (z_775 > 0) && (z_887 > 0) && (z_895 > 0));
																																																																																		:pid_77:e = 2;
																																																																																		:pid_77:tau = 8;
																																																																																		:pid_77:t = t_2356;
																																																																																		:pid_77:cl = 0;
																																																																																		:pid_83:cl = (z_2171 + z_2175 + z_2179);
																																																																																		:pid_88:cl = (z_1051 + z_1159 + z_1567 + z_1591 + z_1699 + z_1967 + z_2043 + z_2171 + z_2175 + z_2179 + z_711 + z_715 + z_763 + z_775 + z_887 + z_895);
																																																																																	}
																																																																																	EC:<Id:9903;Ev:0;H:81;W:9342>{ SC: ( pid_23:PASS , ( pid_30:cp2 , pid_34:dp1 , pid_39:dp1 ) , ( pid_48:cp3 , pid_53:dp3 , pid_56:dp1 ) , ( pid_64:cp2 , pid_69:dp2 , pid_73:dp1 ) , ( pid_82:cp3 , pid_85:dp1 , pid_89:dp0 ) )
																					
																						
																						
																				EXE: 
	{ |;| (:pid_76 , run) (:pid_77 , run) (:pid_80 , run) (:pid_80 , cp_CTRL_EXPIR) 
	(:pid_2 , run) (:pid_22 , run) (:pid_22 , n4_out_TERMIN) }
																					
																						
																						
																				
	TRACE: { |;| (:pid_76 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_2239 }) (:pid_80 , ${ output#env inst::Trickle.Node.Log 1 }
	 @ (z_1051 + z_1159 + z_1567 + z_1591 + z_1699 + z_1967 + z_2043 + z_2171 + 
	z_2175 + z_2179 + z_2239 + z_711 + z_715 + z_763 + z_775 + z_887 + z_895)) }
																																																																																		/*FLAGS{ USER_IRQ & COVERAGE-ELEMENT & OBJECTIVE-ACHIEVED }*/
																																																																																		INFO{
																																																																																			<ID:"@EXIT_ALL",kind="@EXIT_ALL">
																																																																																			<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#20->run::pid_23:Trickle.Observer.PASS->prot::Trickle.Observer.PASS" as trace="tpid#20->run::pid_23:Trickle.Observer.PASS->prot::Trickle.Observer.PASS">
																																																																																		}
																																																																																		DATA{
																																																																																			:pid_2:uncoveredExit = 1;
																																																																																			:pid_2:mess = TERMIN;
																																																																																			:pid_76:$time = (z_1051 + z_1159 + z_1567 + z_1591 + z_1699 + z_1967 + z_2043 + z_2171 + z_2175 + z_2179 + z_2239 + z_711 + z_715 + z_763 + z_775 + z_887 + z_895);
																																																																																			:pid_76:z = z_2239;
																																																																																			:pid_76:reach_DATA_EXPIR_DM2 = (e_7 == 2);
																																																																																			:pid_76:localTime = (z_1051 + z_1159 + z_1567 + z_1591 + z_1699 + z_1967 + z_2043 + z_2171 + z_2175 + z_2179 + z_2239 + z_711 + z_715 + z_763 + z_775 + z_887 + z_895);
																																																																																			:pid_76:localPC = ((t_1206 < 8) && (t_1860 < 4) && (t_2349 < 8) && (t_2356 < 8) && (t_630 < 4) && (t_636 < 4) && (t_907 < 4) && (t_1191 < 4) && (t_2206 < 8) && (t_2719 < 8) && (0 <= (t_1206 + -4)) && (0 <= (t_1860 + -2)) && (0 <= (t_2349 + -4)) && (0 <= (t_2356 + -4)) && (0 <= (t_630 + -2)) && (0 <= (t_636 + -2)) && (0 <= (t_907 + -2)) && (0 <= (t_1191 + -2)) && (0 <= (t_2206 + -4)) && (0 <= (t_2719 + -4)));
																																																																																			:pid_76:localPtC = (((z_1051 + z_1159 + z_1567 + z_775 + z_887 + z_895) == 4) && ((z_1051 + z_1159 + z_775 + z_887 + z_895) == t_1191) && ((z_1051 + z_895) == 4) && ((z_1591 + z_1699 + z_1967) == t_2206) && ((z_1591 + z_1699 + z_1967 + z_2043) == 8) && ((z_1699 + z_1967 + z_2043 + z_2171) == 4) && ((z_2175 + z_2179) == 8) && ((z_763 + z_775) == t_636) && (z_1699 == t_1860) && (z_2175 == t_2349) && (z_895 == t_907) && ((z_1159 + z_1567 + z_1591) < t_1206) && ((z_763 + z_775 + z_887) < 4) && (z_715 < t_630) && ((z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_602 + z_62 + z_622 + z_658 + z_670 + z_70) <= (z_1051 + z_1159 + z_1567 + z_1591 + z_711 + z_715 + z_763 + z_775 + z_887 + z_895)) && ((z_186 + z_198 + z_270 + z_330 + z_386 + z_550 + z_570 + z_62 + z_70) <= (z_711 + z_715 + z_763 + z_775 + z_887)) && ((z_186 + z_198 + z_270 + z_62 + z_70) <= (z_711 + z_715)) && ((z_1051 + z_1159 + z_1567 + z_775 + z_887 + z_895) > t_1191) && ((z_1051 + z_895) > t_907) && ((z_1591 + z_1699 + z_1967 + z_2043) > t_2206) && ((z_1699 + z_1967 + z_2043 + z_2171) > t_1860) && ((z_2175 + z_2179) > t_2349) && ($delta#initial > 0) && (z_1051 > 0) && (z_1159 > 0) && (z_1567 > 0) && (z_1591 > 0) && (z_1699 > 0) && (z_1967 > 0) && (z_2043 > 0) && (z_2171 > 0) && (z_2175 > 0) && (z_2179 > 0) && (z_711 > 0) && (z_715 > 0) && (z_763 > 0) && (z_775 > 0) && (z_887 > 0) && (z_895 > 0));
																																																																																			:pid_77:e = 2;
																																																																																			:pid_77:cl = z_2239;
																																																																																			:pid_83:cl = (z_2171 + z_2175 + z_2179 + z_2239);
																																																																																			:pid_88:cl = (z_1051 + z_1159 + z_1567 + z_1591 + z_1699 + z_1967 + z_2043 + z_2171 + z_2175 + z_2179 + z_2239 + z_711 + z_715 + z_763 + z_775 + z_887 + z_895);
																																																																																		}
																																																																																	}
																																																																																}
																																																																															}
																																																																														}
																																																																													}
																																																																												}
																																																																											}
																																																																										}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
