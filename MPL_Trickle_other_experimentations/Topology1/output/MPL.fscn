EC:<Id:1;Ev:1;H:0;W:1>{ SC: ( pid_3:initialstate , ( pid_8:cp0 , pid_14:dp0 , pid_19:dp0 ) , ( pid_25:cp0 , pid_31:dp0 , pid_36:dp0 ) , ( pid_42:cp0 , pid_48:dp0 , pid_53:dp0 ) , ( pid_59:cp0 , pid_65:dp0 , pid_70:dp0 ) )
	ALIAS{
		:ppid_-1:pid_0 = run::#PARAMETERS#; // model is spec::Trickle;
		:ppid_-1:pid_1 = spec::Trickle;
		:ppid_1:pid_2 = spec::Trickle.Observer;
			DATA{
				:ppid_1:pid_2:$time = spec::Trickle.Observer.$time;
				:ppid_1:pid_2:z = spec::Trickle.Observer.z;
				:ppid_1:pid_2:cl_o = spec::Trickle.Observer.cl_o;
			}
		:ppid_2:pid_3 = spec::Trickle.Observer.initialstate;
		:ppid_2:pid_4 = spec::Trickle.Observer.o0;
		:ppid_2:pid_5 = spec::Trickle.Observer.OK;
		:ppid_1:pid_6 = run::Trickle.n1; // model is spec::Trickle.Node;
			BUFFER NUMBER = 1;
			/*BUFFER{
				:ppid_1:pid_6:bufferNode = spec::Trickle.Node.bufferNode;
			}*/
			DATA{
				:ppid_1:pid_6:my_buff[0].seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_6:my_buff[0].fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_6:my_buff[0].offset = spec::Trickle.DATA_MESSAGE.offset;
				:ppid_1:pid_6:my_buff[1].seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_6:my_buff[1].fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_6:my_buff[1].offset = spec::Trickle.DATA_MESSAGE.offset;
				:ppid_1:pid_6:firmware[0] = spec::Trickle.Node.firmware;
				:ppid_1:pid_6:firmware[1] = spec::Trickle.Node.firmware;
				:ppid_1:pid_6:myseq_buff[0] = spec::Trickle.Node.myseq_buff;
				:ppid_1:pid_6:myseq_buff[1] = spec::Trickle.Node.myseq_buff;
				:ppid_1:pid_6:mydp_run[0] = spec::Trickle.Node.mydp_run;
				:ppid_1:pid_6:mydp_run[1] = spec::Trickle.Node.mydp_run;
				:ppid_1:pid_6:$time = spec::Trickle.Node.$time;
				:ppid_1:pid_6:z = spec::Trickle.Node.z;
				:ppid_1:pid_6:coverageProp = spec::Trickle.Node.coverageProp;
				:ppid_1:pid_6:seq_buff[0] = spec::Trickle.Node.seq_buff;
				:ppid_1:pid_6:seq_buff[1] = spec::Trickle.Node.seq_buff;
				:ppid_1:pid_6:i = spec::Trickle.Node.i;
				:ppid_1:pid_6:localTime = spec::Trickle.Node.localTime;
				:ppid_1:pid_6:localPC = spec::Trickle.Node.localPC;
				:ppid_1:pid_6:localPtC = spec::Trickle.Node.localPtC;
				:ppid_1:pid_6:new_seq_buff = spec::Trickle.Node.new_seq_buff;
				:ppid_1:pid_6:new_seq = spec::Trickle.Node.new_seq;
				:ppid_1:pid_6:new_fragment = spec::Trickle.Node.new_fragment;
				:ppid_1:pid_6:new_offset = spec::Trickle.Node.new_offset;
				:ppid_1:pid_6:timeEmit = spec::Trickle.Node.timeEmit;
			}
			INTERFACE{
				:ppid_1:pid_6:ControlMsg = spec::Trickle.Node.ControlMsg;
				:ppid_1:pid_6:DataMsg = spec::Trickle.Node.DataMsg;
				:ppid_1:pid_6:Log = spec::Trickle.Node.Log;
			}
		:ppid_6:pid_7 = spec::Trickle.Node.ControlProcess;
			DATA{
				:ppid_6:pid_7:k = spec::Trickle.Node.ControlProcess.k;
				:ppid_6:pid_7:c = spec::Trickle.Node.ControlProcess.c;
				:ppid_6:pid_7:e = spec::Trickle.Node.ControlProcess.e;
				:ppid_6:pid_7:tau = spec::Trickle.Node.ControlProcess.tau;
				:ppid_6:pid_7:tau_l = spec::Trickle.Node.ControlProcess.tau_l;
				:ppid_6:pid_7:tau_h = spec::Trickle.Node.ControlProcess.tau_h;
				:ppid_6:pid_7:i = spec::Trickle.Node.ControlProcess.i;
				:ppid_6:pid_7:t = spec::Trickle.Node.ControlProcess.t;
				:ppid_6:pid_7:consistent = spec::Trickle.Node.ControlProcess.consistent;
				:ppid_6:pid_7:cl = spec::Trickle.Node.ControlProcess.cl;
			}
		:ppid_7:pid_8 = spec::Trickle.Node.ControlProcess.cp0;
		:ppid_7:pid_9 = spec::Trickle.Node.ControlProcess.cp0_init;
		:ppid_7:pid_10 = spec::Trickle.Node.ControlProcess.cp1;
		:ppid_7:pid_11 = spec::Trickle.Node.ControlProcess.cp2;
		:ppid_7:pid_12 = spec::Trickle.Node.ControlProcess.cp3;
		:ppid_6:pid_13 = run::Trickle.n1.DataProcess1; // model is spec::Trickle.Node.DataProcess;
			DATA{
				:ppid_6:pid_13:mySeq = spec::Trickle.Node.DataProcess.mySeq;
				:ppid_6:pid_13:k = spec::Trickle.Node.DataProcess.k;
				:ppid_6:pid_13:c = spec::Trickle.Node.DataProcess.c;
				:ppid_6:pid_13:e = spec::Trickle.Node.DataProcess.e;
				:ppid_6:pid_13:tau = spec::Trickle.Node.DataProcess.tau;
				:ppid_6:pid_13:tau_l = spec::Trickle.Node.DataProcess.tau_l;
				:ppid_6:pid_13:tau_h = spec::Trickle.Node.DataProcess.tau_h;
				:ppid_6:pid_13:i = spec::Trickle.Node.DataProcess.i;
				:ppid_6:pid_13:t = spec::Trickle.Node.DataProcess.t;
				:ppid_6:pid_13:consistent = spec::Trickle.Node.DataProcess.consistent;
				:ppid_6:pid_13:cl = spec::Trickle.Node.DataProcess.cl;
				:ppid_6:pid_13:d.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_6:pid_13:d.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_6:pid_13:d.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_13:pid_14 = spec::Trickle.Node.DataProcess.dp0;
		:ppid_13:pid_15 = spec::Trickle.Node.DataProcess.dp1;
		:ppid_13:pid_16 = spec::Trickle.Node.DataProcess.dp2;
		:ppid_13:pid_17 = spec::Trickle.Node.DataProcess.dp3;
		:ppid_6:pid_18 = run::Trickle.n1.DataProcess2; // model is spec::Trickle.Node.DataProcess;
			DATA{
				:ppid_6:pid_18:mySeq = spec::Trickle.Node.DataProcess.mySeq;
				:ppid_6:pid_18:k = spec::Trickle.Node.DataProcess.k;
				:ppid_6:pid_18:c = spec::Trickle.Node.DataProcess.c;
				:ppid_6:pid_18:e = spec::Trickle.Node.DataProcess.e;
				:ppid_6:pid_18:tau = spec::Trickle.Node.DataProcess.tau;
				:ppid_6:pid_18:tau_l = spec::Trickle.Node.DataProcess.tau_l;
				:ppid_6:pid_18:tau_h = spec::Trickle.Node.DataProcess.tau_h;
				:ppid_6:pid_18:i = spec::Trickle.Node.DataProcess.i;
				:ppid_6:pid_18:t = spec::Trickle.Node.DataProcess.t;
				:ppid_6:pid_18:consistent = spec::Trickle.Node.DataProcess.consistent;
				:ppid_6:pid_18:cl = spec::Trickle.Node.DataProcess.cl;
				:ppid_6:pid_18:d.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_6:pid_18:d.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_6:pid_18:d.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_18:pid_19 = spec::Trickle.Node.DataProcess.dp0;
		:ppid_18:pid_20 = spec::Trickle.Node.DataProcess.dp1;
		:ppid_18:pid_21 = spec::Trickle.Node.DataProcess.dp2;
		:ppid_18:pid_22 = spec::Trickle.Node.DataProcess.dp3;
		:ppid_1:pid_23 = run::Trickle.n2; // model is spec::Trickle.Node;
			BUFFER NUMBER = 1;
			/*BUFFER{
				:ppid_1:pid_23:bufferNode = spec::Trickle.Node.bufferNode;
			}*/
			DATA{
				:ppid_1:pid_23:my_buff[0].seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_23:my_buff[0].fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_23:my_buff[0].offset = spec::Trickle.DATA_MESSAGE.offset;
				:ppid_1:pid_23:my_buff[1].seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_23:my_buff[1].fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_23:my_buff[1].offset = spec::Trickle.DATA_MESSAGE.offset;
				:ppid_1:pid_23:firmware[0] = spec::Trickle.Node.firmware;
				:ppid_1:pid_23:firmware[1] = spec::Trickle.Node.firmware;
				:ppid_1:pid_23:myseq_buff[0] = spec::Trickle.Node.myseq_buff;
				:ppid_1:pid_23:myseq_buff[1] = spec::Trickle.Node.myseq_buff;
				:ppid_1:pid_23:mydp_run[0] = spec::Trickle.Node.mydp_run;
				:ppid_1:pid_23:mydp_run[1] = spec::Trickle.Node.mydp_run;
				:ppid_1:pid_23:$time = spec::Trickle.Node.$time;
				:ppid_1:pid_23:z = spec::Trickle.Node.z;
				:ppid_1:pid_23:coverageProp = spec::Trickle.Node.coverageProp;
				:ppid_1:pid_23:seq_buff[0] = spec::Trickle.Node.seq_buff;
				:ppid_1:pid_23:seq_buff[1] = spec::Trickle.Node.seq_buff;
				:ppid_1:pid_23:i = spec::Trickle.Node.i;
				:ppid_1:pid_23:localTime = spec::Trickle.Node.localTime;
				:ppid_1:pid_23:localPC = spec::Trickle.Node.localPC;
				:ppid_1:pid_23:localPtC = spec::Trickle.Node.localPtC;
				:ppid_1:pid_23:new_seq_buff = spec::Trickle.Node.new_seq_buff;
				:ppid_1:pid_23:new_seq = spec::Trickle.Node.new_seq;
				:ppid_1:pid_23:new_fragment = spec::Trickle.Node.new_fragment;
				:ppid_1:pid_23:new_offset = spec::Trickle.Node.new_offset;
				:ppid_1:pid_23:timeEmit = spec::Trickle.Node.timeEmit;
			}
			INTERFACE{
				:ppid_1:pid_23:ControlMsg = spec::Trickle.Node.ControlMsg;
				:ppid_1:pid_23:DataMsg = spec::Trickle.Node.DataMsg;
				:ppid_1:pid_23:Log = spec::Trickle.Node.Log;
			}
		:ppid_23:pid_24 = spec::Trickle.Node.ControlProcess;
			DATA{
				:ppid_23:pid_24:k = spec::Trickle.Node.ControlProcess.k;
				:ppid_23:pid_24:c = spec::Trickle.Node.ControlProcess.c;
				:ppid_23:pid_24:e = spec::Trickle.Node.ControlProcess.e;
				:ppid_23:pid_24:tau = spec::Trickle.Node.ControlProcess.tau;
				:ppid_23:pid_24:tau_l = spec::Trickle.Node.ControlProcess.tau_l;
				:ppid_23:pid_24:tau_h = spec::Trickle.Node.ControlProcess.tau_h;
				:ppid_23:pid_24:i = spec::Trickle.Node.ControlProcess.i;
				:ppid_23:pid_24:t = spec::Trickle.Node.ControlProcess.t;
				:ppid_23:pid_24:consistent = spec::Trickle.Node.ControlProcess.consistent;
				:ppid_23:pid_24:cl = spec::Trickle.Node.ControlProcess.cl;
			}
		:ppid_24:pid_25 = spec::Trickle.Node.ControlProcess.cp0;
		:ppid_24:pid_26 = spec::Trickle.Node.ControlProcess.cp0_init;
		:ppid_24:pid_27 = spec::Trickle.Node.ControlProcess.cp1;
		:ppid_24:pid_28 = spec::Trickle.Node.ControlProcess.cp2;
		:ppid_24:pid_29 = spec::Trickle.Node.ControlProcess.cp3;
		:ppid_23:pid_30 = run::Trickle.n2.DataProcess1; // model is spec::Trickle.Node.DataProcess;
			DATA{
				:ppid_23:pid_30:mySeq = spec::Trickle.Node.DataProcess.mySeq;
				:ppid_23:pid_30:k = spec::Trickle.Node.DataProcess.k;
				:ppid_23:pid_30:c = spec::Trickle.Node.DataProcess.c;
				:ppid_23:pid_30:e = spec::Trickle.Node.DataProcess.e;
				:ppid_23:pid_30:tau = spec::Trickle.Node.DataProcess.tau;
				:ppid_23:pid_30:tau_l = spec::Trickle.Node.DataProcess.tau_l;
				:ppid_23:pid_30:tau_h = spec::Trickle.Node.DataProcess.tau_h;
				:ppid_23:pid_30:i = spec::Trickle.Node.DataProcess.i;
				:ppid_23:pid_30:t = spec::Trickle.Node.DataProcess.t;
				:ppid_23:pid_30:consistent = spec::Trickle.Node.DataProcess.consistent;
				:ppid_23:pid_30:cl = spec::Trickle.Node.DataProcess.cl;
				:ppid_23:pid_30:d.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_23:pid_30:d.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_23:pid_30:d.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_30:pid_31 = spec::Trickle.Node.DataProcess.dp0;
		:ppid_30:pid_32 = spec::Trickle.Node.DataProcess.dp1;
		:ppid_30:pid_33 = spec::Trickle.Node.DataProcess.dp2;
		:ppid_30:pid_34 = spec::Trickle.Node.DataProcess.dp3;
		:ppid_23:pid_35 = run::Trickle.n2.DataProcess2; // model is spec::Trickle.Node.DataProcess;
			DATA{
				:ppid_23:pid_35:mySeq = spec::Trickle.Node.DataProcess.mySeq;
				:ppid_23:pid_35:k = spec::Trickle.Node.DataProcess.k;
				:ppid_23:pid_35:c = spec::Trickle.Node.DataProcess.c;
				:ppid_23:pid_35:e = spec::Trickle.Node.DataProcess.e;
				:ppid_23:pid_35:tau = spec::Trickle.Node.DataProcess.tau;
				:ppid_23:pid_35:tau_l = spec::Trickle.Node.DataProcess.tau_l;
				:ppid_23:pid_35:tau_h = spec::Trickle.Node.DataProcess.tau_h;
				:ppid_23:pid_35:i = spec::Trickle.Node.DataProcess.i;
				:ppid_23:pid_35:t = spec::Trickle.Node.DataProcess.t;
				:ppid_23:pid_35:consistent = spec::Trickle.Node.DataProcess.consistent;
				:ppid_23:pid_35:cl = spec::Trickle.Node.DataProcess.cl;
				:ppid_23:pid_35:d.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_23:pid_35:d.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_23:pid_35:d.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_35:pid_36 = spec::Trickle.Node.DataProcess.dp0;
		:ppid_35:pid_37 = spec::Trickle.Node.DataProcess.dp1;
		:ppid_35:pid_38 = spec::Trickle.Node.DataProcess.dp2;
		:ppid_35:pid_39 = spec::Trickle.Node.DataProcess.dp3;
		:ppid_1:pid_40 = run::Trickle.n3; // model is spec::Trickle.Node;
			BUFFER NUMBER = 1;
			/*BUFFER{
				:ppid_1:pid_40:bufferNode = spec::Trickle.Node.bufferNode;
			}*/
			DATA{
				:ppid_1:pid_40:my_buff[0].seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_40:my_buff[0].fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_40:my_buff[0].offset = spec::Trickle.DATA_MESSAGE.offset;
				:ppid_1:pid_40:my_buff[1].seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_40:my_buff[1].fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_40:my_buff[1].offset = spec::Trickle.DATA_MESSAGE.offset;
				:ppid_1:pid_40:firmware[0] = spec::Trickle.Node.firmware;
				:ppid_1:pid_40:firmware[1] = spec::Trickle.Node.firmware;
				:ppid_1:pid_40:myseq_buff[0] = spec::Trickle.Node.myseq_buff;
				:ppid_1:pid_40:myseq_buff[1] = spec::Trickle.Node.myseq_buff;
				:ppid_1:pid_40:mydp_run[0] = spec::Trickle.Node.mydp_run;
				:ppid_1:pid_40:mydp_run[1] = spec::Trickle.Node.mydp_run;
				:ppid_1:pid_40:$time = spec::Trickle.Node.$time;
				:ppid_1:pid_40:z = spec::Trickle.Node.z;
				:ppid_1:pid_40:coverageProp = spec::Trickle.Node.coverageProp;
				:ppid_1:pid_40:seq_buff[0] = spec::Trickle.Node.seq_buff;
				:ppid_1:pid_40:seq_buff[1] = spec::Trickle.Node.seq_buff;
				:ppid_1:pid_40:i = spec::Trickle.Node.i;
				:ppid_1:pid_40:localTime = spec::Trickle.Node.localTime;
				:ppid_1:pid_40:localPC = spec::Trickle.Node.localPC;
				:ppid_1:pid_40:localPtC = spec::Trickle.Node.localPtC;
				:ppid_1:pid_40:new_seq_buff = spec::Trickle.Node.new_seq_buff;
				:ppid_1:pid_40:new_seq = spec::Trickle.Node.new_seq;
				:ppid_1:pid_40:new_fragment = spec::Trickle.Node.new_fragment;
				:ppid_1:pid_40:new_offset = spec::Trickle.Node.new_offset;
				:ppid_1:pid_40:timeEmit = spec::Trickle.Node.timeEmit;
			}
			INTERFACE{
				:ppid_1:pid_40:ControlMsg = spec::Trickle.Node.ControlMsg;
				:ppid_1:pid_40:DataMsg = spec::Trickle.Node.DataMsg;
				:ppid_1:pid_40:Log = spec::Trickle.Node.Log;
			}
		:ppid_40:pid_41 = spec::Trickle.Node.ControlProcess;
			DATA{
				:ppid_40:pid_41:k = spec::Trickle.Node.ControlProcess.k;
				:ppid_40:pid_41:c = spec::Trickle.Node.ControlProcess.c;
				:ppid_40:pid_41:e = spec::Trickle.Node.ControlProcess.e;
				:ppid_40:pid_41:tau = spec::Trickle.Node.ControlProcess.tau;
				:ppid_40:pid_41:tau_l = spec::Trickle.Node.ControlProcess.tau_l;
				:ppid_40:pid_41:tau_h = spec::Trickle.Node.ControlProcess.tau_h;
				:ppid_40:pid_41:i = spec::Trickle.Node.ControlProcess.i;
				:ppid_40:pid_41:t = spec::Trickle.Node.ControlProcess.t;
				:ppid_40:pid_41:consistent = spec::Trickle.Node.ControlProcess.consistent;
				:ppid_40:pid_41:cl = spec::Trickle.Node.ControlProcess.cl;
			}
		:ppid_41:pid_42 = spec::Trickle.Node.ControlProcess.cp0;
		:ppid_41:pid_43 = spec::Trickle.Node.ControlProcess.cp0_init;
		:ppid_41:pid_44 = spec::Trickle.Node.ControlProcess.cp1;
		:ppid_41:pid_45 = spec::Trickle.Node.ControlProcess.cp2;
		:ppid_41:pid_46 = spec::Trickle.Node.ControlProcess.cp3;
		:ppid_40:pid_47 = run::Trickle.n3.DataProcess1; // model is spec::Trickle.Node.DataProcess;
			DATA{
				:ppid_40:pid_47:mySeq = spec::Trickle.Node.DataProcess.mySeq;
				:ppid_40:pid_47:k = spec::Trickle.Node.DataProcess.k;
				:ppid_40:pid_47:c = spec::Trickle.Node.DataProcess.c;
				:ppid_40:pid_47:e = spec::Trickle.Node.DataProcess.e;
				:ppid_40:pid_47:tau = spec::Trickle.Node.DataProcess.tau;
				:ppid_40:pid_47:tau_l = spec::Trickle.Node.DataProcess.tau_l;
				:ppid_40:pid_47:tau_h = spec::Trickle.Node.DataProcess.tau_h;
				:ppid_40:pid_47:i = spec::Trickle.Node.DataProcess.i;
				:ppid_40:pid_47:t = spec::Trickle.Node.DataProcess.t;
				:ppid_40:pid_47:consistent = spec::Trickle.Node.DataProcess.consistent;
				:ppid_40:pid_47:cl = spec::Trickle.Node.DataProcess.cl;
				:ppid_40:pid_47:d.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_40:pid_47:d.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_40:pid_47:d.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_47:pid_48 = spec::Trickle.Node.DataProcess.dp0;
		:ppid_47:pid_49 = spec::Trickle.Node.DataProcess.dp1;
		:ppid_47:pid_50 = spec::Trickle.Node.DataProcess.dp2;
		:ppid_47:pid_51 = spec::Trickle.Node.DataProcess.dp3;
		:ppid_40:pid_52 = run::Trickle.n3.DataProcess2; // model is spec::Trickle.Node.DataProcess;
			DATA{
				:ppid_40:pid_52:mySeq = spec::Trickle.Node.DataProcess.mySeq;
				:ppid_40:pid_52:k = spec::Trickle.Node.DataProcess.k;
				:ppid_40:pid_52:c = spec::Trickle.Node.DataProcess.c;
				:ppid_40:pid_52:e = spec::Trickle.Node.DataProcess.e;
				:ppid_40:pid_52:tau = spec::Trickle.Node.DataProcess.tau;
				:ppid_40:pid_52:tau_l = spec::Trickle.Node.DataProcess.tau_l;
				:ppid_40:pid_52:tau_h = spec::Trickle.Node.DataProcess.tau_h;
				:ppid_40:pid_52:i = spec::Trickle.Node.DataProcess.i;
				:ppid_40:pid_52:t = spec::Trickle.Node.DataProcess.t;
				:ppid_40:pid_52:consistent = spec::Trickle.Node.DataProcess.consistent;
				:ppid_40:pid_52:cl = spec::Trickle.Node.DataProcess.cl;
				:ppid_40:pid_52:d.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_40:pid_52:d.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_40:pid_52:d.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_52:pid_53 = spec::Trickle.Node.DataProcess.dp0;
		:ppid_52:pid_54 = spec::Trickle.Node.DataProcess.dp1;
		:ppid_52:pid_55 = spec::Trickle.Node.DataProcess.dp2;
		:ppid_52:pid_56 = spec::Trickle.Node.DataProcess.dp3;
		:ppid_1:pid_57 = run::Trickle.n4; // model is spec::Trickle.Node;
			BUFFER NUMBER = 1;
			/*BUFFER{
				:ppid_1:pid_57:bufferNode = spec::Trickle.Node.bufferNode;
			}*/
			DATA{
				:ppid_1:pid_57:my_buff[0].seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_57:my_buff[0].fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_57:my_buff[0].offset = spec::Trickle.DATA_MESSAGE.offset;
				:ppid_1:pid_57:my_buff[1].seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_1:pid_57:my_buff[1].fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_1:pid_57:my_buff[1].offset = spec::Trickle.DATA_MESSAGE.offset;
				:ppid_1:pid_57:firmware[0] = spec::Trickle.Node.firmware;
				:ppid_1:pid_57:firmware[1] = spec::Trickle.Node.firmware;
				:ppid_1:pid_57:myseq_buff[0] = spec::Trickle.Node.myseq_buff;
				:ppid_1:pid_57:myseq_buff[1] = spec::Trickle.Node.myseq_buff;
				:ppid_1:pid_57:mydp_run[0] = spec::Trickle.Node.mydp_run;
				:ppid_1:pid_57:mydp_run[1] = spec::Trickle.Node.mydp_run;
				:ppid_1:pid_57:$time = spec::Trickle.Node.$time;
				:ppid_1:pid_57:z = spec::Trickle.Node.z;
				:ppid_1:pid_57:coverageProp = spec::Trickle.Node.coverageProp;
				:ppid_1:pid_57:seq_buff[0] = spec::Trickle.Node.seq_buff;
				:ppid_1:pid_57:seq_buff[1] = spec::Trickle.Node.seq_buff;
				:ppid_1:pid_57:i = spec::Trickle.Node.i;
				:ppid_1:pid_57:localTime = spec::Trickle.Node.localTime;
				:ppid_1:pid_57:localPC = spec::Trickle.Node.localPC;
				:ppid_1:pid_57:localPtC = spec::Trickle.Node.localPtC;
				:ppid_1:pid_57:new_seq_buff = spec::Trickle.Node.new_seq_buff;
				:ppid_1:pid_57:new_seq = spec::Trickle.Node.new_seq;
				:ppid_1:pid_57:new_fragment = spec::Trickle.Node.new_fragment;
				:ppid_1:pid_57:new_offset = spec::Trickle.Node.new_offset;
				:ppid_1:pid_57:timeEmit = spec::Trickle.Node.timeEmit;
			}
			INTERFACE{
				:ppid_1:pid_57:ControlMsg = spec::Trickle.Node.ControlMsg;
				:ppid_1:pid_57:DataMsg = spec::Trickle.Node.DataMsg;
				:ppid_1:pid_57:Log = spec::Trickle.Node.Log;
			}
		:ppid_57:pid_58 = spec::Trickle.Node.ControlProcess;
			DATA{
				:ppid_57:pid_58:k = spec::Trickle.Node.ControlProcess.k;
				:ppid_57:pid_58:c = spec::Trickle.Node.ControlProcess.c;
				:ppid_57:pid_58:e = spec::Trickle.Node.ControlProcess.e;
				:ppid_57:pid_58:tau = spec::Trickle.Node.ControlProcess.tau;
				:ppid_57:pid_58:tau_l = spec::Trickle.Node.ControlProcess.tau_l;
				:ppid_57:pid_58:tau_h = spec::Trickle.Node.ControlProcess.tau_h;
				:ppid_57:pid_58:i = spec::Trickle.Node.ControlProcess.i;
				:ppid_57:pid_58:t = spec::Trickle.Node.ControlProcess.t;
				:ppid_57:pid_58:consistent = spec::Trickle.Node.ControlProcess.consistent;
				:ppid_57:pid_58:cl = spec::Trickle.Node.ControlProcess.cl;
			}
		:ppid_58:pid_59 = spec::Trickle.Node.ControlProcess.cp0;
		:ppid_58:pid_60 = spec::Trickle.Node.ControlProcess.cp0_init;
		:ppid_58:pid_61 = spec::Trickle.Node.ControlProcess.cp1;
		:ppid_58:pid_62 = spec::Trickle.Node.ControlProcess.cp2;
		:ppid_58:pid_63 = spec::Trickle.Node.ControlProcess.cp3;
		:ppid_57:pid_64 = run::Trickle.n4.DataProcess1; // model is spec::Trickle.Node.DataProcess;
			DATA{
				:ppid_57:pid_64:mySeq = spec::Trickle.Node.DataProcess.mySeq;
				:ppid_57:pid_64:k = spec::Trickle.Node.DataProcess.k;
				:ppid_57:pid_64:c = spec::Trickle.Node.DataProcess.c;
				:ppid_57:pid_64:e = spec::Trickle.Node.DataProcess.e;
				:ppid_57:pid_64:tau = spec::Trickle.Node.DataProcess.tau;
				:ppid_57:pid_64:tau_l = spec::Trickle.Node.DataProcess.tau_l;
				:ppid_57:pid_64:tau_h = spec::Trickle.Node.DataProcess.tau_h;
				:ppid_57:pid_64:i = spec::Trickle.Node.DataProcess.i;
				:ppid_57:pid_64:t = spec::Trickle.Node.DataProcess.t;
				:ppid_57:pid_64:consistent = spec::Trickle.Node.DataProcess.consistent;
				:ppid_57:pid_64:cl = spec::Trickle.Node.DataProcess.cl;
				:ppid_57:pid_64:d.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_57:pid_64:d.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_57:pid_64:d.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_64:pid_65 = spec::Trickle.Node.DataProcess.dp0;
		:ppid_64:pid_66 = spec::Trickle.Node.DataProcess.dp1;
		:ppid_64:pid_67 = spec::Trickle.Node.DataProcess.dp2;
		:ppid_64:pid_68 = spec::Trickle.Node.DataProcess.dp3;
		:ppid_57:pid_69 = run::Trickle.n4.DataProcess2; // model is spec::Trickle.Node.DataProcess;
			DATA{
				:ppid_57:pid_69:mySeq = spec::Trickle.Node.DataProcess.mySeq;
				:ppid_57:pid_69:k = spec::Trickle.Node.DataProcess.k;
				:ppid_57:pid_69:c = spec::Trickle.Node.DataProcess.c;
				:ppid_57:pid_69:e = spec::Trickle.Node.DataProcess.e;
				:ppid_57:pid_69:tau = spec::Trickle.Node.DataProcess.tau;
				:ppid_57:pid_69:tau_l = spec::Trickle.Node.DataProcess.tau_l;
				:ppid_57:pid_69:tau_h = spec::Trickle.Node.DataProcess.tau_h;
				:ppid_57:pid_69:i = spec::Trickle.Node.DataProcess.i;
				:ppid_57:pid_69:t = spec::Trickle.Node.DataProcess.t;
				:ppid_57:pid_69:consistent = spec::Trickle.Node.DataProcess.consistent;
				:ppid_57:pid_69:cl = spec::Trickle.Node.DataProcess.cl;
				:ppid_57:pid_69:d.seq = spec::Trickle.DATA_MESSAGE.seq;
				:ppid_57:pid_69:d.fragment = spec::Trickle.DATA_MESSAGE.fragment;
				:ppid_57:pid_69:d.offset = spec::Trickle.DATA_MESSAGE.offset;
			}
		:ppid_69:pid_70 = spec::Trickle.Node.DataProcess.dp0;
		:ppid_69:pid_71 = spec::Trickle.Node.DataProcess.dp1;
		:ppid_69:pid_72 = spec::Trickle.Node.DataProcess.dp2;
		:ppid_69:pid_73 = spec::Trickle.Node.DataProcess.dp3;
	}
	PC: true
	PtC: true
	DATA{
		:pid_2:$time = 0;
		:pid_2:z = $delta#initial;
		:pid_2:cl_o = 0;
		:pid_6:my_buff[0].seq = 1;
		:pid_6:my_buff[0].fragment = FRAGMENT_0;
		:pid_6:my_buff[0].offset = 0;
		:pid_6:my_buff[1].seq = 2;
		:pid_6:my_buff[1].fragment = FRAGMENT_1;
		:pid_6:my_buff[1].offset = 1;
		:pid_6:firmware[0] = FRAGMENT_0;
		:pid_6:firmware[1] = UNDEF_FRAGMENT;
		:pid_6:myseq_buff[0] = 1;
		:pid_6:myseq_buff[1] = 1;
		:pid_6:mydp_run[0] = true;
		:pid_6:mydp_run[1] = true;
		:pid_6:$time = 0;
		:pid_6:z = $delta#initial;
		:pid_6:coverageProp = false;
		:pid_6:seq_buff[0] = seq_buff[0]_0;
		:pid_6:seq_buff[1] = seq_buff[1]_0;
		:pid_6:i = i_0;
		:pid_6:localTime = 0;
		:pid_6:localPC = true;
		:pid_6:localPtC = true;
		:pid_6:new_seq_buff = new_seq_buff_0;
		:pid_6:new_seq = new_seq_0;
		:pid_6:new_fragment = new_fragment_0;
		:pid_6:new_offset = new_offset_0;
		:pid_6:timeEmit = timeEmit_0;
		:pid_7:k = k_0;
		:pid_7:c = c_0;
		:pid_7:e = e_0;
		:pid_7:tau = tau_0;
		:pid_7:tau_l = tau_l_0;
		:pid_7:tau_h = tau_h_0;
		:pid_7:i = i_0;
		:pid_7:t = t_0;
		:pid_7:consistent = consistent_0;
		:pid_7:cl = 0;
		:pid_13:mySeq = 1;
		:pid_13:k = k_0;
		:pid_13:c = c_0;
		:pid_13:e = e_0;
		:pid_13:tau = tau_0;
		:pid_13:tau_l = tau_l_0;
		:pid_13:tau_h = tau_h_0;
		:pid_13:i = i_0;
		:pid_13:t = t_0;
		:pid_13:consistent = consistent_0;
		:pid_13:cl = 0;
		:pid_13:d.seq = d.seq_0;
		:pid_13:d.fragment = d.fragment_0;
		:pid_13:d.offset = d.offset_0;
		:pid_18:mySeq = 2;
		:pid_18:k = k_1;
		:pid_18:c = c_1;
		:pid_18:e = e_1;
		:pid_18:tau = tau_1;
		:pid_18:tau_l = tau_l_1;
		:pid_18:tau_h = tau_h_1;
		:pid_18:i = i_1;
		:pid_18:t = t_1;
		:pid_18:consistent = consistent_1;
		:pid_18:cl = 0;
		:pid_18:d.seq = d.seq_1;
		:pid_18:d.fragment = d.fragment_1;
		:pid_18:d.offset = d.offset_1;
		:pid_23:my_buff[0].seq = 0;
		:pid_23:my_buff[0].fragment = UNDEF_FRAGMENT;
		:pid_23:my_buff[0].offset = 0;
		:pid_23:my_buff[1].seq = 0;
		:pid_23:my_buff[1].fragment = UNDEF_FRAGMENT;
		:pid_23:my_buff[1].offset = 1;
		:pid_23:firmware[0] = UNDEF_FRAGMENT;
		:pid_23:firmware[1] = UNDEF_FRAGMENT;
		:pid_23:myseq_buff[0] = 0;
		:pid_23:myseq_buff[1] = 0;
		:pid_23:mydp_run[0] = false;
		:pid_23:mydp_run[1] = false;
		:pid_23:$time = 0;
		:pid_23:z = $delta#initial;
		:pid_23:coverageProp = false;
		:pid_23:seq_buff[0] = seq_buff[0]_1;
		:pid_23:seq_buff[1] = seq_buff[1]_1;
		:pid_23:i = i_1;
		:pid_23:localTime = 0;
		:pid_23:localPC = true;
		:pid_23:localPtC = true;
		:pid_23:new_seq_buff = new_seq_buff_1;
		:pid_23:new_seq = new_seq_1;
		:pid_23:new_fragment = new_fragment_1;
		:pid_23:new_offset = new_offset_1;
		:pid_23:timeEmit = timeEmit_1;
		:pid_24:k = k_1;
		:pid_24:c = c_1;
		:pid_24:e = e_1;
		:pid_24:tau = tau_1;
		:pid_24:tau_l = tau_l_1;
		:pid_24:tau_h = tau_h_1;
		:pid_24:i = i_1;
		:pid_24:t = t_1;
		:pid_24:consistent = consistent_1;
		:pid_24:cl = 0;
		:pid_30:mySeq = 1;
		:pid_30:k = k_2;
		:pid_30:c = c_2;
		:pid_30:e = e_2;
		:pid_30:tau = tau_2;
		:pid_30:tau_l = tau_l_2;
		:pid_30:tau_h = tau_h_2;
		:pid_30:i = i_2;
		:pid_30:t = t_2;
		:pid_30:consistent = consistent_2;
		:pid_30:cl = 0;
		:pid_30:d.seq = d.seq_2;
		:pid_30:d.fragment = d.fragment_2;
		:pid_30:d.offset = d.offset_2;
		:pid_35:mySeq = 2;
		:pid_35:k = k_3;
		:pid_35:c = c_3;
		:pid_35:e = e_3;
		:pid_35:tau = tau_3;
		:pid_35:tau_l = tau_l_3;
		:pid_35:tau_h = tau_h_3;
		:pid_35:i = i_3;
		:pid_35:t = t_3;
		:pid_35:consistent = consistent_3;
		:pid_35:cl = 0;
		:pid_35:d.seq = d.seq_3;
		:pid_35:d.fragment = d.fragment_3;
		:pid_35:d.offset = d.offset_3;
		:pid_40:my_buff[0].seq = 0;
		:pid_40:my_buff[0].fragment = UNDEF_FRAGMENT;
		:pid_40:my_buff[0].offset = 0;
		:pid_40:my_buff[1].seq = 0;
		:pid_40:my_buff[1].fragment = UNDEF_FRAGMENT;
		:pid_40:my_buff[1].offset = 1;
		:pid_40:firmware[0] = UNDEF_FRAGMENT;
		:pid_40:firmware[1] = UNDEF_FRAGMENT;
		:pid_40:myseq_buff[0] = 0;
		:pid_40:myseq_buff[1] = 0;
		:pid_40:mydp_run[0] = false;
		:pid_40:mydp_run[1] = false;
		:pid_40:$time = 0;
		:pid_40:z = $delta#initial;
		:pid_40:coverageProp = false;
		:pid_40:seq_buff[0] = seq_buff[0]_2;
		:pid_40:seq_buff[1] = seq_buff[1]_2;
		:pid_40:i = i_2;
		:pid_40:localTime = 0;
		:pid_40:localPC = true;
		:pid_40:localPtC = true;
		:pid_40:new_seq_buff = new_seq_buff_2;
		:pid_40:new_seq = new_seq_2;
		:pid_40:new_fragment = new_fragment_2;
		:pid_40:new_offset = new_offset_2;
		:pid_40:timeEmit = timeEmit_2;
		:pid_41:k = k_2;
		:pid_41:c = c_2;
		:pid_41:e = e_2;
		:pid_41:tau = tau_2;
		:pid_41:tau_l = tau_l_2;
		:pid_41:tau_h = tau_h_2;
		:pid_41:i = i_2;
		:pid_41:t = t_2;
		:pid_41:consistent = consistent_2;
		:pid_41:cl = 0;
		:pid_47:mySeq = 1;
		:pid_47:k = k_4;
		:pid_47:c = c_4;
		:pid_47:e = e_4;
		:pid_47:tau = tau_4;
		:pid_47:tau_l = tau_l_4;
		:pid_47:tau_h = tau_h_4;
		:pid_47:i = i_4;
		:pid_47:t = t_4;
		:pid_47:consistent = consistent_4;
		:pid_47:cl = 0;
		:pid_47:d.seq = d.seq_4;
		:pid_47:d.fragment = d.fragment_4;
		:pid_47:d.offset = d.offset_4;
		:pid_52:mySeq = 2;
		:pid_52:k = k_5;
		:pid_52:c = c_5;
		:pid_52:e = e_5;
		:pid_52:tau = tau_5;
		:pid_52:tau_l = tau_l_5;
		:pid_52:tau_h = tau_h_5;
		:pid_52:i = i_5;
		:pid_52:t = t_5;
		:pid_52:consistent = consistent_5;
		:pid_52:cl = 0;
		:pid_52:d.seq = d.seq_5;
		:pid_52:d.fragment = d.fragment_5;
		:pid_52:d.offset = d.offset_5;
		:pid_57:my_buff[0].seq = 0;
		:pid_57:my_buff[0].fragment = UNDEF_FRAGMENT;
		:pid_57:my_buff[0].offset = 0;
		:pid_57:my_buff[1].seq = 0;
		:pid_57:my_buff[1].fragment = UNDEF_FRAGMENT;
		:pid_57:my_buff[1].offset = 1;
		:pid_57:firmware[0] = UNDEF_FRAGMENT;
		:pid_57:firmware[1] = UNDEF_FRAGMENT;
		:pid_57:myseq_buff[0] = 0;
		:pid_57:myseq_buff[1] = 0;
		:pid_57:mydp_run[0] = false;
		:pid_57:mydp_run[1] = false;
		:pid_57:$time = 0;
		:pid_57:z = $delta#initial;
		:pid_57:coverageProp = false;
		:pid_57:seq_buff[0] = seq_buff[0]_3;
		:pid_57:seq_buff[1] = seq_buff[1]_3;
		:pid_57:i = i_3;
		:pid_57:localTime = 0;
		:pid_57:localPC = true;
		:pid_57:localPtC = true;
		:pid_57:new_seq_buff = new_seq_buff_3;
		:pid_57:new_seq = new_seq_3;
		:pid_57:new_fragment = new_fragment_3;
		:pid_57:new_offset = new_offset_3;
		:pid_57:timeEmit = timeEmit_3;
		:pid_58:k = k_3;
		:pid_58:c = c_3;
		:pid_58:e = e_3;
		:pid_58:tau = tau_3;
		:pid_58:tau_l = tau_l_3;
		:pid_58:tau_h = tau_h_3;
		:pid_58:i = i_3;
		:pid_58:t = t_3;
		:pid_58:consistent = consistent_3;
		:pid_58:cl = 0;
		:pid_64:mySeq = 1;
		:pid_64:k = k_6;
		:pid_64:c = c_6;
		:pid_64:e = e_6;
		:pid_64:tau = tau_6;
		:pid_64:tau_l = tau_l_6;
		:pid_64:tau_h = tau_h_6;
		:pid_64:i = i_6;
		:pid_64:t = t_6;
		:pid_64:consistent = consistent_6;
		:pid_64:cl = 0;
		:pid_64:d.seq = d.seq_6;
		:pid_64:d.fragment = d.fragment_6;
		:pid_64:d.offset = d.offset_6;
		:pid_69:mySeq = 2;
		:pid_69:k = k_7;
		:pid_69:c = c_7;
		:pid_69:e = e_7;
		:pid_69:tau = tau_7;
		:pid_69:tau_l = tau_l_7;
		:pid_69:tau_h = tau_h_7;
		:pid_69:i = i_7;
		:pid_69:t = t_7;
		:pid_69:consistent = consistent_7;
		:pid_69:cl = 0;
		:pid_69:d.seq = d.seq_7;
		:pid_69:d.fragment = d.fragment_7;
		:pid_69:d.offset = d.offset_7;
	}
	BUFFER{
		:pid_6:bufferNode:<FIFO>#0{ }
		:pid_23:bufferNode:<FIFO>#0{ }
		:pid_40:bufferNode:<FIFO>#0{ }
		:pid_57:bufferNode:<FIFO>#0{ }
	}
	EC:<Id:2;Ev:2;H:1;W:1>{ SC: ( pid_4:o0 , ( pid_9:cp0_init , pid_14:dp0 , pid_19:dp0 ) , ( pid_26:cp0_init , pid_31:dp0 , pid_36:dp0 ) , ( pid_43:cp0_init , pid_48:dp0 , pid_53:dp0 ) , ( pid_60:cp0_init , pid_65:dp0 , pid_70:dp0 ) )
		EXE: { |,| { |;| (:pid_59 , run) (:pid_59 , cp_init) } { |;| (:pid_42 , 
	run) (:pid_42 , cp_init) } { |;| (:pid_25 , run) (:pid_25 , cp_init) } { |;| 
	(:pid_8 , run) (:pid_8 , cp_init) } { |;| (:pid_3 , run) (:pid_3 , o_startup) } }
		DATA{
			:pid_2:cl_o = 0;
			:pid_7:k = 2;
			:pid_7:c = 0;
			:pid_7:e = 0;
			:pid_7:tau = 4;
			:pid_7:tau_l = 4;
			:pid_7:tau_h = 8;
			:pid_24:k = 2;
			:pid_24:c = 0;
			:pid_24:e = 0;
			:pid_24:tau = 4;
			:pid_24:tau_l = 4;
			:pid_24:tau_h = 8;
			:pid_41:k = 2;
			:pid_41:c = 0;
			:pid_41:e = 0;
			:pid_41:tau = 4;
			:pid_41:tau_l = 4;
			:pid_41:tau_h = 8;
			:pid_58:k = 2;
			:pid_58:c = 0;
			:pid_58:e = 0;
			:pid_58:tau = 4;
			:pid_58:tau_l = 4;
			:pid_58:tau_h = 8;
		}
		EC:<Id:6;Ev:3;H:2;W:4>{ SC: ( pid_4:o0 , ( pid_9:cp0_init , pid_14:dp0 , pid_19:dp0 ) , ( pid_27:cp1 , pid_31:dp0 , pid_36:dp0 ) , ( pid_43:cp0_init , pid_48:dp0 , pid_53:dp0 ) , ( pid_60:cp0_init , pid_65:dp0 , pid_70:dp0 ) )
			EXE: { |;| (:pid_23 , run) (:pid_24 , run) (:pid_26 , run) (:pid_26 
	, cp_init) }
			TRACE: { |;| (:pid_23 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_1 }) (:pid_26 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_5 }) 
	(:pid_26 , ${ output#env inst::Trickle.Node.Log 0 } @ z_1) }
			NC: ((t_5 < 4) && (0 <= (t_5 + -2)))
			PC: ((t_5 < 4) && (0 <= (t_5 + -2)))
			DATA{
				:pid_23:$time = z_1;
				:pid_23:z = z_1;
				:pid_23:localTime = z_1;
				:pid_23:localPC = ((t_5 < 4) && (0 <= (t_5 + -2)));
				:pid_23:localPtC = ($delta#initial > 0);
				:pid_24:t = t_5;
				:pid_24:cl = 0;
				:pid_30:cl = z_1;
				:pid_35:cl = z_1;
			}
			EC:<Id:13;Ev:9;H:3;W:10>{ SC: ( pid_4:o0 , ( pid_9:cp0_init , pid_14:dp0 , pid_19:dp0 ) , ( pid_27:cp1 , pid_31:dp0 , pid_36:dp0 ) , ( pid_44:cp1 , pid_48:dp0 , pid_53:dp0 ) , ( pid_60:cp0_init , pid_65:dp0 , pid_70:dp0 ) )
				EXE: { |;| (:pid_40 , run) (:pid_41 , run) (:pid_43 , run) 
	(:pid_43 , cp_init) }
				TRACE: { |;| (:pid_40 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_6 }) (:pid_43 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_9 }) 
	(:pid_43 , ${ output#env inst::Trickle.Node.Log 0 } @ z_6) }
				NC: ((t_9 < 4) && (0 <= (t_9 + -2)))
				PC: ((t_5 < 4) && (t_9 < 4) && (0 <= (t_5 + -2)) && (0 <= (t_9 + -2)))
				DATA{
					:pid_40:$time = z_6;
					:pid_40:z = z_6;
					:pid_40:localTime = z_6;
					:pid_40:localPC = ((t_9 < 4) && (0 <= (t_9 + -2)));
					:pid_40:localPtC = ($delta#initial > 0);
					:pid_41:t = t_9;
					:pid_41:cl = 0;
					:pid_47:cl = z_6;
					:pid_52:cl = z_6;
				}
				EC:<Id:47;Ev:17;H:4;W:38>{ SC: ( pid_4:o0 , ( pid_9:cp0_init , pid_14:dp0 , pid_19:dp0 ) , ( pid_27:cp1 , pid_31:dp0 , pid_36:dp0 ) , ( pid_45:cp2 , pid_48:dp0 , pid_53:dp0 ) , ( pid_60:cp0_init , pid_65:dp0 , pid_70:dp0 ) )
					EXE: { |;| (:pid_40 , run) (:pid_41 , run) (:pid_44 , run) 
	(:pid_44 , cp_sendCM) }
					TRACE: { |;| (:pid_40 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_30 }) (:pid_44 , ${ output inst::Trickle.Node.ControlMsg [ 
	0 , 0 ] ${ + param::Trickle.Node.z_30 param::Trickle.Node.z_6 } } @ (z_30 + z_6))
	 }
					/*FLAGS{ COVERAGE-ELEMENT }*/
					INFO{
						<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#1->inst::Trickle.n3->ControlMsg" as trace="tpid#1->inst::Trickle.n3->ControlMsg">
					}
					DATA{
						:pid_40:$time = (z_30 + z_6);
						:pid_40:z = z_30;
						:pid_40:localTime = (z_30 + z_6);
						:pid_40:localPC = ((t_9 < 4) && (0 <= (t_9 + -2)));
						:pid_40:localPtC = ((z_30 == t_9) && ($delta#initial > 0) && (z_6 > 0));
						:pid_41:cl = z_30;
						:pid_47:cl = (z_30 + z_6);
						:pid_52:cl = (z_30 + z_6);
					}
					BUFFER{
						:pid_6:bufferNode:<FIFO>#0{
							:pid_40:ControlMsg([ 0 , 0 ] , (z_30 + z_6));
						}
						:pid_23:bufferNode:<FIFO>#0{
							:pid_40:ControlMsg([ 0 , 0 ] , (z_30 + z_6));
						}
						:pid_57:bufferNode:<FIFO>#0{
							:pid_40:ControlMsg([ 0 , 0 ] , (z_30 + z_6));
						}
					}
					EC:<Id:92;Ev:21;H:5;W:75>{ SC: ( pid_4:o0 , ( pid_10:cp1 , pid_14:dp0 , pid_19:dp0 ) , ( pid_27:cp1 , pid_31:dp0 , pid_36:dp0 ) , ( pid_45:cp2 , pid_48:dp0 , pid_53:dp0 ) , ( pid_60:cp0_init , pid_65:dp0 , pid_70:dp0 ) )
						EXE: { |;| (:pid_6 , run) (:pid_7 , run) (:pid_9 , run) 
	(:pid_9 , cp_init) }
						TRACE: { |;| (:pid_6 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_60 }) (:pid_9 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_51 }) 
	(:pid_9 , ${ output#env inst::Trickle.Node.Log 0 } @ z_60) }
						NC: ((t_51 < 4) && (0 <= (t_51 + -2)))
						PC: ((t_5 < 4) && (t_51 < 4) && (t_9 < 4) && (0 <= (t_5 + -2)) && (0 <= (t_51 + -2)) 
	&& (0 <= (t_9 + -2)))
						DATA{
							:pid_6:mydp_run[0] = false;
							:pid_6:mydp_run[1] = false;
							:pid_6:$time = z_60;
							:pid_6:z = z_60;
							:pid_6:coverageProp = true;
							:pid_6:localTime = z_60;
							:pid_6:localPC = ((t_51 < 4) && (0 <= (t_51 + -2)));
							:pid_6:localPtC = ($delta#initial > 0);
							:pid_7:t = t_51;
							:pid_7:cl = 0;
							:pid_13:cl = z_60;
							:pid_18:cl = z_60;
						}
						EC:<Id:117;Ev:32;H:6;W:75>{ SC: ( pid_4:o0 , ( pid_10:cp1 , pid_14:dp0 , pid_19:dp0 ) , ( pid_27:cp1 , pid_31:dp0 , pid_36:dp0 ) , ( pid_45:cp2 , pid_48:dp0 , pid_53:dp0 ) , ( pid_60:cp0_init , pid_65:dp0 , pid_70:dp0 ) )
							EXE: { |;| (:pid_6 , run) (:pid_7 , run) (:pid_10 , 
	run) (:pid_10 , cp1_receiveCM_inconsistent) }
							TRACE: { |;| (:pid_6 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_76 }) (:pid_10 , ${ input 
	inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + param::Trickle.Node.z_30 
	param::Trickle.Node.z_6 } } @ (z_60 + z_76)) (:pid_10 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_64 }) }
							/*FLAGS{ COVERAGE-ELEMENT }*/
							INFO{
								<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#2->inst::Trickle.n1->ControlMsg" as trace="tpid#2->inst::Trickle.n1->ControlMsg">
							}
							NC: ((t_64 < 4) && (0 <= (t_64 + -2)))
							PC: ((t_5 < 4) && (t_51 < 4) && (t_64 < 4) && (t_9 < 4) && (0 <= (t_5 + -2)) && (0 
	<= (t_51 + -2)) && (0 <= (t_64 + -2)) && (0 <= (t_9 + -2)))
							DATA{
								:pid_6:mydp_run[0] = true;
								:pid_6:mydp_run[1] = true;
								:pid_6:$time = (z_60 + z_76);
								:pid_6:z = z_76;
								:pid_6:seq_buff[0] = 0;
								:pid_6:seq_buff[1] = 0;
								:pid_6:localTime = (z_60 + z_76);
								:pid_6:localPC = ((t_51 < 4) && (t_64 < 4) && (0 <= (t_51 + -2)) && (0 <= (t_64 + -2)));
								:pid_6:localPtC = ((z_76 < t_51) && ((z_30 + z_6) <= (z_60 + z_76)) && ($delta#initial > 0) && (z_60 > 0));
								:pid_6:timeEmit = (z_30 + z_6);
								:pid_7:c = 0;
								:pid_7:e = 0;
								:pid_7:i = 2;
								:pid_7:t = t_64;
								:pid_7:consistent = false;
								:pid_7:cl = 0;
								:pid_13:cl = (z_60 + z_76);
								:pid_18:cl = (z_60 + z_76);
							}
							BUFFER{
								:pid_6:bufferNode:<FIFO>#0{ }
							}
							EC:<Id:193;Ev:37;H:7;W:161>{ SC: ( pid_4:o0 , ( pid_10:cp1 , pid_14:dp0 , pid_19:dp0 ) , ( pid_27:cp1 , pid_31:dp0 , pid_36:dp0 ) , ( pid_45:cp2 , pid_48:dp0 , pid_53:dp0 ) , ( pid_60:cp0_init , pid_65:dp0 , pid_70:dp0 ) )
								EXE: { |;| (:pid_23 , run) (:pid_24 , run) 
	(:pid_27 , run) (:pid_27 , cp1_receiveCM_consistent) }
								TRACE: { |;| (:pid_23 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_121 }) (:pid_27 , ${ input 
	inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + param::Trickle.Node.z_30 
	param::Trickle.Node.z_6 } } @ (z_1 + z_121)) }
								/*FLAGS{ COVERAGE-ELEMENT }*/
								INFO{
									<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#3->inst::Trickle.n2->ControlMsg" as trace="tpid#3->inst::Trickle.n2->ControlMsg">
								}
								DATA{
									:pid_23:$time = (z_1 + z_121);
									:pid_23:z = z_121;
									:pid_23:seq_buff[0] = 0;
									:pid_23:seq_buff[1] = 0;
									:pid_23:localTime = (z_1 + z_121);
									:pid_23:localPC = ((t_5 < 4) && (0 <= (t_5 + -2)));
									:pid_23:localPtC = ((z_121 < t_5) && ((z_30 + z_6) <= (z_1 + z_121)) && ($delta#initial > 0) && (z_1 > 0));
									:pid_23:timeEmit = (z_30 + z_6);
									:pid_24:c = 1;
									:pid_24:i = 2;
									:pid_24:consistent = true;
									:pid_24:cl = z_121;
									:pid_30:cl = (z_1 + z_121);
									:pid_35:cl = (z_1 + z_121);
								}
								BUFFER{
									:pid_23:bufferNode:<FIFO>#0{ }
								}
								EC:<Id:230;Ev:47;H:8;W:193>{ SC: ( pid_4:o0 , ( pid_10:cp1 , pid_14:dp0 , pid_19:dp0 ) , ( pid_27:cp1 , pid_31:dp0 , pid_36:dp0 ) , ( pid_45:cp2 , pid_48:dp0 , pid_53:dp0 ) , ( pid_61:cp1 , pid_65:dp0 , pid_70:dp0 ) )
									EXE: { |;| (:pid_57 , run) (:pid_58 , run) 
	(:pid_60 , run) (:pid_60 , cp_init) }
									TRACE: { |;| (:pid_57 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_143 }) (:pid_60 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_113 }) 
	(:pid_60 , ${ output#env inst::Trickle.Node.Log 0 } @ z_143) }
									NC: ((t_113 < 4) && (0 <= (t_113 + -2)))
									PC: ((t_113 < 4) && (t_5 < 4) && (t_51 < 4) && (t_64 < 4) && (t_9 < 4) && (0 <= 
	(t_113 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_51 + -2)) && (0 <= (t_64 + -2)) 
	&& (0 <= (t_9 + -2)))
									DATA{
										:pid_57:$time = z_143;
										:pid_57:z = z_143;
										:pid_57:localTime = z_143;
										:pid_57:localPC = ((t_113 < 4) && (0 <= (t_113 + -2)));
										:pid_57:localPtC = ($delta#initial > 0);
										:pid_58:t = t_113;
										:pid_58:cl = 0;
										:pid_64:cl = z_143;
										:pid_69:cl = z_143;
									}
									EC:<Id:298;Ev:54;H:9;W:251>{ SC: ( pid_4:o0 , ( pid_10:cp1 , pid_14:dp0 , pid_19:dp0 ) , ( pid_27:cp1 , pid_31:dp0 , pid_36:dp0 ) , ( pid_45:cp2 , pid_48:dp0 , pid_53:dp0 ) , ( pid_61:cp1 , pid_65:dp0 , pid_70:dp0 ) )
										EXE: { |;| (:pid_57 , run) (:pid_58 , 
	run) (:pid_61 , run) (:pid_61 , cp1_receiveCM_consistent) }
										TRACE: { |;| (:pid_57 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_183 }) (:pid_61 , ${ input 
	inst::Trickle.Node.ControlMsg [ 0 , 0 ] ${ + param::Trickle.Node.z_30 
	param::Trickle.Node.z_6 } } @ (z_143 + z_183)) }
										/*FLAGS{ COVERAGE-ELEMENT }*/
										INFO{
											<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#4->inst::Trickle.n4->ControlMsg" as trace="tpid#4->inst::Trickle.n4->ControlMsg">
										}
										DATA{
											:pid_57:$time = (z_143 + z_183);
											:pid_57:z = z_183;
											:pid_57:seq_buff[0] = 0;
											:pid_57:seq_buff[1] = 0;
											:pid_57:localTime = (z_143 + z_183);
											:pid_57:localPC = ((t_113 < 4) && (0 <= (t_113 + -2)));
											:pid_57:localPtC = ((z_183 < t_113) && ((z_30 + z_6) <= (z_143 + z_183)) && ($delta#initial > 0) && (z_143 > 0));
											:pid_57:timeEmit = (z_30 + z_6);
											:pid_58:c = 1;
											:pid_58:i = 2;
											:pid_58:consistent = true;
											:pid_58:cl = z_183;
											:pid_64:cl = (z_143 + z_183);
											:pid_69:cl = (z_143 + z_183);
										}
										BUFFER{
											:pid_57:bufferNode:<FIFO>#0{ }
										}
										EC:<Id:348;Ev:64;H:10;W:294>{ SC: ( pid_4:o0 , ( pid_11:cp2 , pid_14:dp0 , pid_19:dp0 ) , ( pid_27:cp1 , pid_31:dp0 , pid_36:dp0 ) , ( pid_45:cp2 , pid_48:dp0 , pid_53:dp0 ) , ( pid_61:cp1 , pid_65:dp0 , pid_70:dp0 ) )
											EXE: { |;| (:pid_6 , run) (:pid_7 , 
	run) (:pid_10 , run) (:pid_10 , cp_sendCM) }
											TRACE: { |;| (:pid_6 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_208 }) (:pid_10 , ${ output 
	inst::Trickle.Node.ControlMsg [ 1 , 1 ] ${ + param::Trickle.Node.z_208 
	param::Trickle.Node.z_60 param::Trickle.Node.z_76 } } @ (z_208 + z_60 + z_76)) }
											/*FLAGS{ COVERAGE-ELEMENT }*/
											INFO{
												<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#5->inst::Trickle.n1->ControlMsg" as trace="tpid#5->inst::Trickle.n1->ControlMsg">
											}
											DATA{
												:pid_6:$time = (z_208 + z_60 + z_76);
												:pid_6:z = z_208;
												:pid_6:localTime = (z_208 + z_60 + z_76);
												:pid_6:localPC = ((t_51 < 4) && (t_64 < 4) && (0 <= (t_51 + -2)) && (0 <= (t_64 + -2)));
												:pid_6:localPtC = ((z_208 == t_64) && (z_76 < t_51) && ((z_30 + z_6) <= (z_60 + z_76)) && ($delta#initial > 0) && (z_60 > 0) && (z_76 > 0));
												:pid_7:cl = z_208;
												:pid_13:cl = (z_208 + z_60 + z_76);
												:pid_18:cl = (z_208 + z_60 + z_76);
											}
											BUFFER{
												:pid_23:bufferNode:<FIFO>#0{
													:pid_6:ControlMsg([ 1 , 1 ] , (z_208 + z_60 + z_76));
												}
												:pid_40:bufferNode:<FIFO>#0{
													:pid_6:ControlMsg([ 1 , 1 ] , (z_208 + z_60 + z_76));
												}
											}
											EC:<Id:430;Ev:68;H:11;W:366>{ SC: ( pid_4:o0 , ( pid_11:cp2 , pid_14:dp0 , pid_19:dp0 ) , ( pid_27:cp1 , pid_31:dp0 , pid_36:dp0 ) , ( pid_45:cp2 , pid_48:dp0 , pid_53:dp0 ) , ( pid_61:cp1 , pid_65:dp0 , pid_70:dp0 ) )
												EXE: { |;| (:pid_23 , run) 
	(:pid_24 , run) (:pid_27 , run) (:pid_27 , cp1_receiveCM_inconsistent) }
												TRACE: { |;| (:pid_23 , ${ 
	newfresh inst::Trickle.Node.z param::Trickle.Node.z_249 }) (:pid_27 , ${ input 
	inst::Trickle.Node.ControlMsg [ 1 , 1 ] ${ + param::Trickle.Node.z_208 
	param::Trickle.Node.z_60 param::Trickle.Node.z_76 } } @ (z_1 + z_121 + z_249)) 
	(:pid_27 , ${ newfresh inst::Trickle.Node.ControlProcess.t 
	param::Trickle.Node.ControlProcess.t_189 }) }
												/*FLAGS{ COVERAGE-ELEMENT }*/
												INFO{
													<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#6->inst::Trickle.n2->ControlMsg" as trace="tpid#6->inst::Trickle.n2->ControlMsg">
												}
												NC: ((t_189 < 4) && (0 <= (t_189 
	+ -2)))
												PC: ((t_113 < 4) && (t_189 < 4) && (t_5 < 4) && (t_51 < 4) && (t_64 < 4) && (t_9 < 4)
	 && (0 <= (t_113 + -2)) && (0 <= (t_189 + -2)) && (0 <= (t_5 + -2)) && (0 <= 
	(t_51 + -2)) && (0 <= (t_64 + -2)) && (0 <= (t_9 + -2)))
												DATA{
													:pid_23:mydp_run[0] = true;
													:pid_23:mydp_run[1] = true;
													:pid_23:$time = (z_1 + z_121 + z_249);
													:pid_23:z = z_249;
													:pid_23:seq_buff[0] = 1;
													:pid_23:seq_buff[1] = 1;
													:pid_23:localTime = (z_1 + z_121 + z_249);
													:pid_23:localPC = ((t_189 < 4) && (t_5 < 4) && (0 <= (t_189 + -2)) && (0 <= (t_5 + -2)));
													:pid_23:localPtC = (((z_121 + z_249) < t_5) && (z_121 < t_5) && ((z_208 + z_60 + z_76) <= (z_1 + z_121 + z_249)) && ((z_30 + z_6) <= (z_1 + z_121)) && ($delta#initial > 0) && (z_1 > 0) && (z_121 > 0));
													:pid_23:timeEmit = (z_208 + z_60 + z_76);
													:pid_24:c = 0;
													:pid_24:e = 0;
													:pid_24:i = 2;
													:pid_24:t = t_189;
													:pid_24:consistent = false;
													:pid_24:cl = 0;
													:pid_30:cl = (z_1 + z_121 + z_249);
													:pid_35:cl = (z_1 + z_121 + z_249);
												}
												BUFFER{
													:pid_23:bufferNode:<FIFO>#0{ }
												}
												EC:<Id:465;Ev:73;H:12;W:397>{ SC: ( pid_4:o0 , ( pid_11:cp2 , pid_14:dp0 , pid_19:dp0 ) , ( pid_27:cp1 , pid_31:dp0 , pid_36:dp0 ) , ( pid_44:cp1 , pid_48:dp0 , pid_53:dp0 ) , ( pid_61:cp1 , pid_65:dp0 , pid_70:dp0 ) )
													EXE: { |;| (:pid_40 , run) 
	(:pid_41 , run) (:pid_45 , run) (:pid_45 , cp2_receiveCM_inconsistent) }
													TRACE: { |;| (:pid_40 , ${ 
	newfresh inst::Trickle.Node.z param::Trickle.Node.z_266 }) (:pid_45 , ${ input 
	inst::Trickle.Node.ControlMsg [ 1 , 1 ] ${ + param::Trickle.Node.z_208 
	param::Trickle.Node.z_60 param::Trickle.Node.z_76 } } @ (z_266 + z_30 + z_6)) 
	(:pid_45 , ${ newfresh inst::Trickle.Node.ControlProcess.t 
	param::Trickle.Node.ControlProcess.t_205 }) }
													/*FLAGS{ COVERAGE-ELEMENT }*/
													INFO{
														<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#7->inst::Trickle.n3->ControlMsg" as trace="tpid#7->inst::Trickle.n3->ControlMsg">
													}
													NC: ((t_205 < 4) && (0 <= 
	(t_205 + -2)))
													PC: ((t_113 < 4) && (t_189 < 4) && (t_205 < 4) && (t_5 < 4) && (t_51 < 4) && (t_64 < 
	4) && (t_9 < 4) && (0 <= (t_113 + -2)) && (0 <= (t_189 + -2)) && (0 <= (t_205 + 
	-2)) && (0 <= (t_5 + -2)) && (0 <= (t_51 + -2)) && (0 <= (t_64 + -2)) && (0 <= 
	(t_9 + -2)))
													DATA{
														:pid_40:mydp_run[0] = true;
														:pid_40:mydp_run[1] = true;
														:pid_40:$time = (z_266 + z_30 + z_6);
														:pid_40:z = z_266;
														:pid_40:seq_buff[0] = 1;
														:pid_40:seq_buff[1] = 1;
														:pid_40:localTime = (z_266 + z_30 + z_6);
														:pid_40:localPC = ((t_205 < 4) && (t_9 < 4) && (0 <= (t_205 + -2)) && (0 <= (t_9 + -2)));
														:pid_40:localPtC = ((z_30 == t_9) && ((z_266 + z_30) < 4) && ((z_208 + z_60 + z_76) <= (z_266 + z_30 + z_6)) && ($delta#initial > 0) && (z_30 > 0) && (z_6 > 0));
														:pid_40:timeEmit = (z_208 + z_60 + z_76);
														:pid_41:c = 0;
														:pid_41:e = 0;
														:pid_41:i = 2;
														:pid_41:t = t_205;
														:pid_41:consistent = false;
														:pid_41:cl = 0;
														:pid_47:cl = (z_266 + z_30 + z_6);
														:pid_52:cl = (z_266 + z_30 + z_6);
													}
													BUFFER{
														:pid_40:bufferNode:<FIFO>#0{ }
													}
													EC:<Id:502;Ev:75;H:13;W:429>{ SC: ( pid_4:o0 , ( pid_11:cp2 , pid_15:dp1 , pid_19:dp0 ) , ( pid_27:cp1 , pid_31:dp0 , pid_36:dp0 ) , ( pid_44:cp1 , pid_48:dp0 , pid_53:dp0 ) , ( pid_61:cp1 , pid_65:dp0 , pid_70:dp0 ) )
														EXE: { |;| (:pid_6 , run)
	 (:pid_13 , run) (:pid_14 , run) (:pid_14 , dp_init) }
														TRACE: { |;| (:pid_6 , 
	${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_284 }) (:pid_14 , ${ 
	newfresh inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_543 }
	) }
														/*FLAGS{ COVERAGE-ELEMENT }*/
														INFO{
															<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#8->Node.DataProcess1->dp0.dp_init" as trace="tpid#8->Node.DataProcess1->dp0.dp_init">
														}
														NC: ((t_543 < 4) && (0 
	<= (t_543 + -2)))
														PC: ((t_113 < 4) && (t_189 < 4) && (t_205 < 4) && (t_5 < 4) && (t_51 < 4) && (t_64 < 
	4) && (t_9 < 4) && (t_543 < 4) && (0 <= (t_113 + -2)) && (0 <= (t_189 + -2)) && 
	(0 <= (t_205 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_51 + -2)) && (0 <= (t_64 + 
	-2)) && (0 <= (t_9 + -2)) && (0 <= (t_543 + -2)))
														DATA{
															:pid_6:$time = (z_208 + z_284 + z_60 + z_76);
															:pid_6:z = z_284;
															:pid_6:localTime = (z_208 + z_284 + z_60 + z_76);
															:pid_6:localPC = ((t_51 < 4) && (t_64 < 4) && (t_543 < 4) && (0 <= (t_51 + -2)) && (0 <= (t_64 + -2)) && (0 <= (t_543 + -2)));
															:pid_6:localPtC = ((z_208 == t_64) && (z_76 < t_51) && ((z_30 + z_6) <= (z_60 + z_76)) && ($delta#initial > 0) && (z_208 > 0) && (z_60 > 0) && (z_76 > 0));
															:pid_7:cl = (z_208 + z_284);
															:pid_13:k = 2;
															:pid_13:c = 0;
															:pid_13:e = 0;
															:pid_13:tau = 4;
															:pid_13:tau_l = 4;
															:pid_13:tau_h = 8;
															:pid_13:t = t_543;
															:pid_13:cl = 0;
															:pid_18:cl = (z_208 + z_284 + z_60 + z_76);
														}
														EC:<Id:522;Ev:84;H:14;W:447>{ SC: ( pid_4:o0 , ( pid_11:cp2 , pid_16:dp2 , pid_19:dp0 ) , ( pid_27:cp1 , pid_31:dp0 , pid_36:dp0 ) , ( pid_44:cp1 , pid_48:dp0 , pid_53:dp0 ) , ( pid_61:cp1 , pid_65:dp0 , pid_70:dp0 ) )
															EXE: { |;| (:pid_6 , 
	run) (:pid_13 , run) (:pid_15 , run) (:pid_15 , dp_sendDM) }
															TRACE: { |;| (:pid_6 
	, ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_292 }) (:pid_15 , ${ 
	output inst::Trickle.Node.DataMsg [ 1 , 1 , 0 ] ${ + param::Trickle.Node.z_208 
	param::Trickle.Node.z_284 param::Trickle.Node.z_292 param::Trickle.Node.z_60 
	param::Trickle.Node.z_76 } } @ (z_208 + z_284 + z_292 + z_60 + z_76)) }
															/*FLAGS{ COVERAGE-ELEMENT }*/
															INFO{
																<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#9->inst::Trickle.n1->DataMsg" as trace="tpid#9->inst::Trickle.n1->DataMsg">
															}
															DATA{
																:pid_6:$time = (z_208 + z_284 + z_292 + z_60 + z_76);
																:pid_6:z = z_292;
																:pid_6:localTime = (z_208 + z_284 + z_292 + z_60 + z_76);
																:pid_6:localPC = ((t_51 < 4) && (t_64 < 4) && (t_543 < 4) && (0 <= (t_51 + -2)) && (0 <= (t_64 + -2)) && (0 <= (t_543 + -2)));
																:pid_6:localPtC = ((z_208 == t_64) && (z_292 == t_543) && (z_76 < t_51) && ((z_30 + z_6) <= (z_60 + z_76)) && ($delta#initial > 0) && (z_208 > 0) && (z_284 > 0) && (z_60 > 0) && (z_76 > 0));
																:pid_7:cl = (z_208 + z_284 + z_292);
																:pid_13:cl = z_292;
																:pid_18:cl = (z_208 + z_284 + z_292 + z_60 + z_76);
															}
															BUFFER{
																:pid_23:bufferNode:<FIFO>#0{
																	:pid_6:DataMsg([ 1 , 1 , 0 ] , (z_208 + z_284 + z_292 + z_60 + z_76));
																}
																:pid_40:bufferNode:<FIFO>#0{
																	:pid_6:DataMsg([ 1 , 1 , 0 ] , (z_208 + z_284 + z_292 + z_60 + z_76));
																}
															}
															EC:<Id:612;Ev:85;H:15;W:447>{ SC: ( pid_4:o0 , ( pid_11:cp2 , pid_16:dp2 , pid_20:dp1 ) , ( pid_27:cp1 , pid_31:dp0 , pid_36:dp0 ) , ( pid_44:cp1 , pid_48:dp0 , pid_53:dp0 ) , ( pid_61:cp1 , pid_65:dp0 , pid_70:dp0 ) )
																EXE: { |;| 
	(:pid_6 , run) (:pid_18 , run) (:pid_19 , run) (:pid_19 , dp_init) }
																TRACE: { |;| 
	(:pid_6 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_328 }) (:pid_19 
	, ${ newfresh inst::Trickle.Node.DataProcess.t 
	param::Trickle.Node.DataProcess.t_626 }) }
																/*FLAGS{ COVERAGE-ELEMENT }*/
																INFO{
																	<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#10->Node.DataProcess2->dp0.dp_init" as trace="tpid#10->Node.DataProcess2->dp0.dp_init">
																}
																NC: ((t_626 < 4) 
	&& (0 <= (t_626 + -2)))
																PC: ((t_113 < 4) && (t_189 < 4) && (t_205 < 4) && (t_5 < 4) && (t_51 < 4) && (t_64 < 
	4) && (t_9 < 4) && (t_543 < 4) && (t_626 < 4) && (0 <= (t_113 + -2)) && (0 <= 
	(t_189 + -2)) && (0 <= (t_205 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_51 + -2)) 
	&& (0 <= (t_64 + -2)) && (0 <= (t_9 + -2)) && (0 <= (t_543 + -2)) && (0 <= 
	(t_626 + -2)))
																DATA{
																	:pid_6:$time = (z_208 + z_284 + z_292 + z_328 + z_60 + z_76);
																	:pid_6:z = z_328;
																	:pid_6:localTime = (z_208 + z_284 + z_292 + z_328 + z_60 + z_76);
																	:pid_6:localPC = ((t_51 < 4) && (t_64 < 4) && (t_543 < 4) && (t_626 < 4) && (0 <= (t_51 + -2)) && (0 <= (t_64 + -2)) && (0 <= (t_543 + -2)) && (0 <= (t_626 + -2)));
																	:pid_6:localPtC = ((z_208 == t_64) && (z_292 == t_543) && (z_76 < t_51) && ((z_30 + z_6) <= (z_60 + z_76)) && ($delta#initial > 0) && (z_208 > 0) && (z_284 > 0) && (z_292 > 0) && (z_60 > 0) && (z_76 > 0));
																	:pid_7:cl = (z_208 + z_284 + z_292 + z_328);
																	:pid_13:cl = (z_292 + z_328);
																	:pid_18:k = 2;
																	:pid_18:c = 0;
																	:pid_18:e = 0;
																	:pid_18:tau = 4;
																	:pid_18:tau_l = 4;
																	:pid_18:tau_h = 8;
																	:pid_18:t = t_626;
																	:pid_18:cl = 0;
																}
																EC:<Id:622;Ev:95;H:16;W:447>{ SC: ( pid_4:o0 , ( pid_11:cp2 , pid_16:dp2 , pid_21:dp2 ) , ( pid_27:cp1 , pid_31:dp0 , pid_36:dp0 ) , ( pid_44:cp1 , pid_48:dp0 , pid_53:dp0 ) , ( pid_61:cp1 , pid_65:dp0 , pid_70:dp0 ) )
																	EXE: { |;| 
	(:pid_6 , run) (:pid_18 , run) (:pid_20 , run) (:pid_20 , dp_sendDM) }
																	TRACE: { |;| 
	(:pid_6 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_332 }) (:pid_20 
	, ${ output inst::Trickle.Node.DataMsg [ 2 , 2 , 1 ] ${ + 
	param::Trickle.Node.z_208 param::Trickle.Node.z_284 param::Trickle.Node.z_292 
	param::Trickle.Node.z_328 param::Trickle.Node.z_332 param::Trickle.Node.z_60 
	param::Trickle.Node.z_76 } } @ (z_208 + z_284 + z_292 + z_328 + z_332 + z_60 + 
	z_76)) }
																	/*FLAGS{ COVERAGE-ELEMENT }*/
																	INFO{
																		<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#11->inst::Trickle.n1->DataMsg" as trace="tpid#11->inst::Trickle.n1->DataMsg">
																	}
																	DATA{
																		:pid_6:$time = (z_208 + z_284 + z_292 + z_328 + z_332 + z_60 + z_76);
																		:pid_6:z = z_332;
																		:pid_6:localTime = (z_208 + z_284 + z_292 + z_328 + z_332 + z_60 + z_76);
																		:pid_6:localPC = ((t_51 < 4) && (t_64 < 4) && (t_543 < 4) && (t_626 < 4) && (0 <= (t_51 + -2)) && (0 <= (t_64 + -2)) && (0 <= (t_543 + -2)) && (0 <= (t_626 + -2)));
																		:pid_6:localPtC = ((z_208 == t_64) && (z_292 == t_543) && (z_332 == t_626) && (z_76 < t_51) && ((z_30 + z_6) <= (z_60 + z_76)) && ($delta#initial > 0) && (z_208 > 0) && (z_284 > 0) && (z_292 > 0) && (z_328 > 0) && (z_60 > 0) && (z_76 > 0));
																		:pid_7:cl = (z_208 + z_284 + z_292 + z_328 + z_332);
																		:pid_13:cl = (z_292 + z_328 + z_332);
																		:pid_18:cl = z_332;
																	}
																	BUFFER{
																		:pid_23:bufferNode:<FIFO>#0{
																			:pid_6:DataMsg([ 1 , 1 , 0 ] , (z_208 + z_284 + z_292 + z_60 + z_76));
																			:pid_6:DataMsg([ 2 , 2 , 1 ] , (z_208 + z_284 + z_292 + z_328 + z_332 + z_60 + z_76));
																		}
																		:pid_40:bufferNode:<FIFO>#0{
																			:pid_6:DataMsg([ 1 , 1 , 0 ] , (z_208 + z_284 + z_292 + z_60 + z_76));
																			:pid_6:DataMsg([ 2 , 2 , 1 ] , (z_208 + z_284 + z_292 + z_328 + z_332 + z_60 + z_76));
																		}
																	}
																	EC:<Id:728;Ev:100;H:17;W:633>{ SC: ( pid_4:o0 , ( pid_11:cp2 , pid_16:dp2 , pid_21:dp2 ) , ( pid_27:cp1 , pid_32:dp1 , pid_36:dp0 ) , ( pid_44:cp1 , pid_48:dp0 , pid_53:dp0 ) , ( pid_61:cp1 , pid_65:dp0 , pid_70:dp0 ) )
																		EXE: { 
	|;| (:pid_23 , run) (:pid_30 , run) (:pid_31 , run) (:pid_31 , dp_init) }
																		TRACE: { 
	|;| (:pid_23 , ${ newfresh inst::Trickle.Node.z param::Trickle.Node.z_373 }) 
	(:pid_31 , ${ newfresh inst::Trickle.Node.DataProcess.t 
	param::Trickle.Node.DataProcess.t_711 }) }
																		/*FLAGS{ COVERAGE-ELEMENT }*/
																		INFO{
																			<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#12->Node.DataProcess1->dp0.dp_init" as trace="tpid#12->Node.DataProcess1->dp0.dp_init">
																		}
																		NC: 
	((t_711 < 4) && (0 <= (t_711 + -2)))
																		PC: ((t_113 < 4) && (t_189 < 4) && (t_205 < 4) && (t_5 < 4) && (t_51 < 4) && (t_64 < 
	4) && (t_9 < 4) && (t_543 < 4) && (t_626 < 4) && (t_711 < 4) && (0 <= (t_113 + 
	-2)) && (0 <= (t_189 + -2)) && (0 <= (t_205 + -2)) && (0 <= (t_5 + -2)) && (0 <= 
	(t_51 + -2)) && (0 <= (t_64 + -2)) && (0 <= (t_9 + -2)) && (0 <= (t_543 + -2)) 
	&& (0 <= (t_626 + -2)) && (0 <= (t_711 + -2)))
																		DATA{
																			:pid_23:$time = (z_1 + z_121 + z_249 + z_373);
																			:pid_23:z = z_373;
																			:pid_23:localTime = (z_1 + z_121 + z_249 + z_373);
																			:pid_23:localPC = ((t_189 < 4) && (t_5 < 4) && (t_711 < 4) && (0 <= (t_189 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_711 + -2)));
																			:pid_23:localPtC = (((z_121 + z_249) < t_5) && (z_121 < t_5) && ((z_208 + z_60 + z_76) <= (z_1 + z_121 + z_249)) && ((z_30 + z_6) <= (z_1 + z_121)) && ($delta#initial > 0) && (z_1 > 0) && (z_121 > 0) && (z_249 > 0));
																			:pid_24:cl = z_373;
																			:pid_30:k = 2;
																			:pid_30:c = 0;
																			:pid_30:e = 0;
																			:pid_30:tau = 4;
																			:pid_30:tau_l = 4;
																			:pid_30:tau_h = 8;
																			:pid_30:t = t_711;
																			:pid_30:cl = 0;
																			:pid_35:cl = (z_1 + z_121 + z_249 + z_373);
																		}
																		EC:<Id:778;Ev:106;H:18;W:678>{ SC: ( pid_4:o0 , ( pid_11:cp2 , pid_16:dp2 , pid_21:dp2 ) , ( pid_27:cp1 , pid_32:dp1 , pid_36:dp0 ) , ( pid_44:cp1 , pid_48:dp0 , pid_53:dp0 ) , ( pid_61:cp1 , pid_65:dp0 , pid_70:dp0 ) )
																			EXE: 
	{ |;| (:pid_23 , run) (:pid_30 , run) (:pid_32 , run) (:pid_32 , 
	dp1_receiveDM_consistent) }
																			
	TRACE: { |;| (:pid_23 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_393 }) (:pid_32 , ${ input inst::Trickle.Node.DataMsg [ 1 
	, 1 , 0 ] ${ + param::Trickle.Node.z_208 param::Trickle.Node.z_284 
	param::Trickle.Node.z_292 param::Trickle.Node.z_60 param::Trickle.Node.z_76 } } 
	@ (z_1 + z_121 + z_249 + z_373 + z_393)) }
																			/*FLAGS{ COVERAGE-ELEMENT }*/
																			INFO{
																				<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#13->inst::Trickle.n2->DataMsg" as trace="tpid#13->inst::Trickle.n2->DataMsg">
																			}
																			DATA{
																				:pid_23:my_buff[0].seq = 1;
																				:pid_23:my_buff[0].fragment = FRAGMENT_0;
																				:pid_23:my_buff[0].offset = 0;
																				:pid_23:firmware[0] = FRAGMENT_0;
																				:pid_23:myseq_buff[0] = 1;
																				:pid_23:$time = (z_1 + z_121 + z_249 + z_373 + z_393);
																				:pid_23:z = z_393;
																				:pid_23:localTime = (z_1 + z_121 + z_249 + z_373 + z_393);
																				:pid_23:localPC = ((t_189 < 4) && (t_5 < 4) && (t_711 < 4) && (0 <= (t_189 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_711 + -2)));
																				:pid_23:localPtC = (((z_121 + z_249) < t_5) && (z_121 < t_5) && (z_393 < t_711) && ((z_208 + z_284 + z_292 + z_60 + z_76) <= (z_1 + z_121 + z_249 + z_373 + z_393)) && ((z_208 + z_60 + z_76) <= (z_1 + z_121 + z_249)) && ((z_30 + z_6) <= (z_1 + z_121)) && ($delta#initial > 0) && (z_1 > 0) && (z_121 > 0) && (z_249 > 0) && (z_373 > 0));
																				:pid_23:timeEmit = (z_208 + z_284 + z_292 + z_60 + z_76);
																				:pid_24:cl = (z_373 + z_393);
																				:pid_30:c = 1;
																				:pid_30:consistent = true;
																				:pid_30:cl = z_393;
																				:pid_30:d.seq = 1;
																				:pid_30:d.fragment = FRAGMENT_0;
																				:pid_30:d.offset = 0;
																				:pid_35:cl = (z_1 + z_121 + z_249 + z_373 + z_393);
																			}
																			BUFFER{
																				:pid_23:bufferNode:<FIFO>#0{
																					:pid_6:DataMsg([ 2 , 2 , 1 ] , (z_208 + z_284 + z_292 + z_328 + z_332 + z_60 + z_76));
																				}
																			}
																			EC:<Id:844;Ev:115;H:19;W:738>{ SC: ( pid_4:o0 , ( pid_11:cp2 , pid_16:dp2 , pid_21:dp2 ) , ( pid_27:cp1 , pid_32:dp1 , pid_36:dp0 ) , ( pid_44:cp1 , pid_49:dp1 , pid_53:dp0 ) , ( pid_61:cp1 , pid_65:dp0 , pid_70:dp0 ) )
																				
	EXE: { |;| (:pid_40 , run) (:pid_47 , run) (:pid_48 , run) (:pid_48 , dp_init) }
																				
	TRACE: { |;| (:pid_40 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_418 }) (:pid_48 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_797 }) }
																				/*FLAGS{ COVERAGE-ELEMENT }*/
																				INFO{
																					<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#14->Node.DataProcess1->dp0.dp_init" as trace="tpid#14->Node.DataProcess1->dp0.dp_init">
																				}
																				
	NC: ((t_797 < 4) && (0 <= (t_797 + -2)))
																				PC: ((t_113 < 4) && (t_189 < 4) && (t_205 < 4) && (t_5 < 4) && (t_51 < 4) && (t_64 < 
	4) && (t_9 < 4) && (t_543 < 4) && (t_626 < 4) && (t_711 < 4) && (t_797 < 4) && 
	(0 <= (t_113 + -2)) && (0 <= (t_189 + -2)) && (0 <= (t_205 + -2)) && (0 <= (t_5 
	+ -2)) && (0 <= (t_51 + -2)) && (0 <= (t_64 + -2)) && (0 <= (t_9 + -2)) && (0 <= 
	(t_543 + -2)) && (0 <= (t_626 + -2)) && (0 <= (t_711 + -2)) && (0 <= (t_797 + -2)
	))
																				DATA{
																					:pid_40:$time = (z_266 + z_30 + z_418 + z_6);
																					:pid_40:z = z_418;
																					:pid_40:localTime = (z_266 + z_30 + z_418 + z_6);
																					:pid_40:localPC = ((t_205 < 4) && (t_9 < 4) && (t_797 < 4) && (0 <= (t_205 + -2)) && (0 <= (t_9 + -2)) && (0 <= (t_797 + -2)));
																					:pid_40:localPtC = ((z_30 == t_9) && ((z_266 + z_30) < 4) && ((z_208 + z_60 + z_76) <= (z_266 + z_30 + z_6)) && ($delta#initial > 0) && (z_266 > 0) && (z_30 > 0) && (z_6 > 0));
																					:pid_41:cl = z_418;
																					:pid_47:k = 2;
																					:pid_47:c = 0;
																					:pid_47:e = 0;
																					:pid_47:tau = 4;
																					:pid_47:tau_l = 4;
																					:pid_47:tau_h = 8;
																					:pid_47:t = t_797;
																					:pid_47:cl = 0;
																					:pid_52:cl = (z_266 + z_30 + z_418 + z_6);
																				}
																				EC:<Id:942;Ev:118;H:20;W:827>{ SC: ( pid_4:o0 , ( pid_11:cp2 , pid_16:dp2 , pid_21:dp2 ) , ( pid_27:cp1 , pid_32:dp1 , pid_36:dp0 ) , ( pid_44:cp1 , pid_49:dp1 , pid_53:dp0 ) , ( pid_61:cp1 , pid_65:dp0 , pid_70:dp0 ) )
																					
	EXE: { |;| (:pid_40 , run) (:pid_47 , run) (:pid_49 , run) (:pid_49 , 
	dp1_receiveDM_consistent) }
																					
	TRACE: { |;| (:pid_40 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_454 }) (:pid_49 , ${ input inst::Trickle.Node.DataMsg [ 1 
	, 1 , 0 ] ${ + param::Trickle.Node.z_208 param::Trickle.Node.z_284 
	param::Trickle.Node.z_292 param::Trickle.Node.z_60 param::Trickle.Node.z_76 } } 
	@ (z_266 + z_30 + z_418 + z_454 + z_6)) }
																					/*FLAGS{ COVERAGE-ELEMENT }*/
																					INFO{
																						<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#15->inst::Trickle.n3->DataMsg" as trace="tpid#15->inst::Trickle.n3->DataMsg">
																					}
																					DATA{
																						:pid_40:my_buff[0].seq = 1;
																						:pid_40:my_buff[0].fragment = FRAGMENT_0;
																						:pid_40:my_buff[0].offset = 0;
																						:pid_40:firmware[0] = FRAGMENT_0;
																						:pid_40:myseq_buff[0] = 1;
																						:pid_40:$time = (z_266 + z_30 + z_418 + z_454 + z_6);
																						:pid_40:z = z_454;
																						:pid_40:localTime = (z_266 + z_30 + z_418 + z_454 + z_6);
																						:pid_40:localPC = ((t_205 < 4) && (t_9 < 4) && (t_797 < 4) && (0 <= (t_205 + -2)) && (0 <= (t_9 + -2)) && (0 <= (t_797 + -2)));
																						:pid_40:localPtC = ((z_30 == t_9) && ((z_266 + z_30) < 4) && (z_454 < t_797) && ((z_208 + z_284 + z_292 + z_60 + z_76) <= (z_266 + z_30 + z_418 + z_454 + z_6)) && ((z_208 + z_60 + z_76) <= (z_266 + z_30 + z_6)) && ($delta#initial > 0) && (z_266 > 0) && (z_30 > 0) && (z_418 > 0) && (z_6 > 0));
																						:pid_40:timeEmit = (z_208 + z_284 + z_292 + z_60 + z_76);
																						:pid_41:cl = (z_418 + z_454);
																						:pid_47:c = 1;
																						:pid_47:consistent = true;
																						:pid_47:cl = z_454;
																						:pid_47:d.seq = 1;
																						:pid_47:d.fragment = FRAGMENT_0;
																						:pid_47:d.offset = 0;
																						:pid_52:cl = (z_266 + z_30 + z_418 + z_454 + z_6);
																					}
																					BUFFER{
																						:pid_40:bufferNode:<FIFO>#0{
																							:pid_6:DataMsg([ 2 , 2 , 1 ] , (z_208 + z_284 + z_292 + z_328 + z_332 + z_60 + z_76));
																						}
																					}
																					EC:<Id:972;Ev:122;H:21;W:854>{ SC: ( pid_4:o0 , ( pid_11:cp2 , pid_16:dp2 , pid_21:dp2 ) , ( pid_27:cp1 , pid_32:dp1 , pid_37:dp1 ) , ( pid_44:cp1 , pid_49:dp1 , pid_53:dp0 ) , ( pid_61:cp1 , pid_65:dp0 , pid_70:dp0 ) )
																					
		EXE: { |;| (:pid_23 , run) (:pid_35 , run) (:pid_36 , run) (:pid_36 , 
	dp_init) }
																					
		TRACE: { |;| (:pid_23 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_465 }) (:pid_36 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_888 }) }
																						/*FLAGS{ COVERAGE-ELEMENT }*/
																						INFO{
																							<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#16->Node.DataProcess2->dp0.dp_init" as trace="tpid#16->Node.DataProcess2->dp0.dp_init">
																						}
																					
		NC: ((t_888 < 4) && (0 <= (t_888 + -2)))
																						PC: ((t_113 < 4) && (t_189 < 4) && (t_205 < 4) && (t_5 < 4) && (t_51 < 4) && (t_64 < 
	4) && (t_9 < 4) && (t_543 < 4) && (t_626 < 4) && (t_711 < 4) && (t_797 < 4) && 
	(t_888 < 4) && (0 <= (t_113 + -2)) && (0 <= (t_189 + -2)) && (0 <= (t_205 + -2)) 
	&& (0 <= (t_5 + -2)) && (0 <= (t_51 + -2)) && (0 <= (t_64 + -2)) && (0 <= (t_9 + 
	-2)) && (0 <= (t_543 + -2)) && (0 <= (t_626 + -2)) && (0 <= (t_711 + -2)) && (0 
	<= (t_797 + -2)) && (0 <= (t_888 + -2)))
																						DATA{
																							:pid_23:$time = (z_1 + z_121 + z_249 + z_373 + z_393 + z_465);
																							:pid_23:z = z_465;
																							:pid_23:localTime = (z_1 + z_121 + z_249 + z_373 + z_393 + z_465);
																							:pid_23:localPC = ((t_189 < 4) && (t_5 < 4) && (t_711 < 4) && (t_888 < 4) && (0 <= (t_189 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_711 + -2)) && (0 <= (t_888 + -2)));
																							:pid_23:localPtC = (((z_121 + z_249) < t_5) && (z_121 < t_5) && (z_393 < t_711) && ((z_208 + z_284 + z_292 + z_60 + z_76) <= (z_1 + z_121 + z_249 + z_373 + z_393)) && ((z_208 + z_60 + z_76) <= (z_1 + z_121 + z_249)) && ((z_30 + z_6) <= (z_1 + z_121)) && ($delta#initial > 0) && (z_1 > 0) && (z_121 > 0) && (z_249 > 0) && (z_373 > 0) && (z_393 > 0));
																							:pid_24:cl = (z_373 + z_393 + z_465);
																							:pid_30:cl = (z_393 + z_465);
																							:pid_35:k = 2;
																							:pid_35:c = 0;
																							:pid_35:e = 0;
																							:pid_35:tau = 4;
																							:pid_35:tau_l = 4;
																							:pid_35:tau_h = 8;
																							:pid_35:t = t_888;
																							:pid_35:cl = 0;
																						}
																						EC:<Id:1020;Ev:131;H:22;W:898>{ SC: ( pid_4:o0 , ( pid_11:cp2 , pid_16:dp2 , pid_21:dp2 ) , ( pid_27:cp1 , pid_32:dp1 , pid_37:dp1 ) , ( pid_44:cp1 , pid_49:dp1 , pid_53:dp0 ) , ( pid_61:cp1 , pid_65:dp0 , pid_70:dp0 ) )
																					
			EXE: { |;| (:pid_23 , run) (:pid_35 , run) (:pid_37 , run) (:pid_37 , 
	dp1_receiveDM_consistent) }
																					
			TRACE: { |;| (:pid_23 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_481 }) (:pid_37 , ${ input inst::Trickle.Node.DataMsg [ 2 
	, 2 , 1 ] ${ + param::Trickle.Node.z_208 param::Trickle.Node.z_284 
	param::Trickle.Node.z_292 param::Trickle.Node.z_328 param::Trickle.Node.z_332 
	param::Trickle.Node.z_60 param::Trickle.Node.z_76 } } @ (z_1 + z_121 + z_249 + 
	z_373 + z_393 + z_465 + z_481)) }
																							/*FLAGS{ COVERAGE-ELEMENT }*/
																							INFO{
																								<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#17->inst::Trickle.n2->DataMsg" as trace="tpid#17->inst::Trickle.n2->DataMsg">
																							}
																							DATA{
																								:pid_23:my_buff[1].seq = 2;
																								:pid_23:my_buff[1].fragment = FRAGMENT_1;
																								:pid_23:my_buff[1].offset = 1;
																								:pid_23:firmware[1] = FRAGMENT_1;
																								:pid_23:myseq_buff[1] = 1;
																								:pid_23:$time = (z_1 + z_121 + z_249 + z_373 + z_393 + z_465 + z_481);
																								:pid_23:z = z_481;
																								:pid_23:coverageProp = true;
																								:pid_23:localTime = (z_1 + z_121 + z_249 + z_373 + z_393 + z_465 + z_481);
																								:pid_23:localPC = ((t_189 < 4) && (t_5 < 4) && (t_711 < 4) && (t_888 < 4) && (0 <= (t_189 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_711 + -2)) && (0 <= (t_888 + -2)));
																								:pid_23:localPtC = (((z_121 + z_249) < t_5) && (z_121 < t_5) && (z_393 < t_711) && (z_481 < t_888) && ((z_208 + z_284 + z_292 + z_328 + z_332 + z_60 + z_76) <= (z_1 + z_121 + z_249 + z_373 + z_393 + z_465 + z_481)) && ((z_208 + z_284 + z_292 + z_60 + z_76) <= (z_1 + z_121 + z_249 + z_373 + z_393)) && ((z_208 + z_60 + z_76) <= (z_1 + z_121 + z_249)) && ((z_30 + z_6) <= (z_1 + z_121)) && ($delta#initial > 0) && (z_1 > 0) && (z_121 > 0) && (z_249 > 0) && (z_373 > 0) && (z_393 > 0) && (z_465 > 0));
																								:pid_23:timeEmit = (z_208 + z_284 + z_292 + z_328 + z_332 + z_60 + z_76);
																								:pid_24:cl = (z_373 + z_393 + z_465 + z_481);
																								:pid_30:cl = (z_393 + z_465 + z_481);
																								:pid_35:c = 1;
																								:pid_35:consistent = true;
																								:pid_35:cl = z_481;
																								:pid_35:d.seq = 2;
																								:pid_35:d.fragment = FRAGMENT_1;
																								:pid_35:d.offset = 1;
																							}
																							BUFFER{
																								:pid_23:bufferNode:<FIFO>#0{ }
																							}
																							EC:<Id:1133;Ev:139;H:23;W:1002>{ SC: ( pid_4:o0 , ( pid_11:cp2 , pid_16:dp2 , pid_21:dp2 ) , ( pid_27:cp1 , pid_32:dp1 , pid_37:dp1 ) , ( pid_44:cp1 , pid_49:dp1 , pid_54:dp1 ) , ( pid_61:cp1 , pid_65:dp0 , pid_70:dp0 ) )
																					
				EXE: { |;| (:pid_40 , run) (:pid_52 , run) (:pid_53 , run) (:pid_53 
	, dp_init) }
																					
				TRACE: { |;| (:pid_40 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_518 }) (:pid_53 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_989 }) }
																								/*FLAGS{ COVERAGE-ELEMENT }*/
																								INFO{
																									<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#18->Node.DataProcess2->dp0.dp_init" as trace="tpid#18->Node.DataProcess2->dp0.dp_init">
																								}
																					
				NC: ((t_989 < 4) && (0 <= (t_989 + -2)))
																								PC: ((t_113 < 4) && (t_189 < 4) && (t_205 < 4) && (t_5 < 4) && (t_51 < 4) && (t_64 < 
	4) && (t_9 < 4) && (t_543 < 4) && (t_626 < 4) && (t_711 < 4) && (t_797 < 4) && 
	(t_888 < 4) && (t_989 < 4) && (0 <= (t_113 + -2)) && (0 <= (t_189 + -2)) && (0 
	<= (t_205 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_51 + -2)) && (0 <= (t_64 + -2))
	 && (0 <= (t_9 + -2)) && (0 <= (t_543 + -2)) && (0 <= (t_626 + -2)) && (0 <= 
	(t_711 + -2)) && (0 <= (t_797 + -2)) && (0 <= (t_888 + -2)) && (0 <= (t_989 + -2)
	))
																								DATA{
																									:pid_40:$time = (z_266 + z_30 + z_418 + z_454 + z_518 + z_6);
																									:pid_40:z = z_518;
																									:pid_40:localTime = (z_266 + z_30 + z_418 + z_454 + z_518 + z_6);
																									:pid_40:localPC = ((t_205 < 4) && (t_9 < 4) && (t_797 < 4) && (t_989 < 4) && (0 <= (t_205 + -2)) && (0 <= (t_9 + -2)) && (0 <= (t_797 + -2)) && (0 <= (t_989 + -2)));
																									:pid_40:localPtC = ((z_30 == t_9) && ((z_266 + z_30) < 4) && (z_454 < t_797) && ((z_208 + z_284 + z_292 + z_60 + z_76) <= (z_266 + z_30 + z_418 + z_454 + z_6)) && ((z_208 + z_60 + z_76) <= (z_266 + z_30 + z_6)) && ($delta#initial > 0) && (z_266 > 0) && (z_30 > 0) && (z_418 > 0) && (z_454 > 0) && (z_6 > 0));
																									:pid_41:cl = (z_418 + z_454 + z_518);
																									:pid_47:cl = (z_454 + z_518);
																									:pid_52:k = 2;
																									:pid_52:c = 0;
																									:pid_52:e = 0;
																									:pid_52:tau = 4;
																									:pid_52:tau_l = 4;
																									:pid_52:tau_h = 8;
																									:pid_52:t = t_989;
																									:pid_52:cl = 0;
																								}
																								EC:<Id:1220;Ev:155;H:24;W:1081>{ SC: ( pid_4:o0 , ( pid_11:cp2 , pid_16:dp2 , pid_21:dp2 ) , ( pid_27:cp1 , pid_32:dp1 , pid_37:dp1 ) , ( pid_44:cp1 , pid_49:dp1 , pid_54:dp1 ) , ( pid_61:cp1 , pid_65:dp0 , pid_70:dp0 ) )
																					
					EXE: { |;| (:pid_40 , run) (:pid_52 , run) (:pid_54 , run) 
	(:pid_54 , dp1_receiveDM_consistent) }
																					
					TRACE: { |;| (:pid_40 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_550 }) (:pid_54 , ${ input inst::Trickle.Node.DataMsg [ 2 
	, 2 , 1 ] ${ + param::Trickle.Node.z_208 param::Trickle.Node.z_284 
	param::Trickle.Node.z_292 param::Trickle.Node.z_328 param::Trickle.Node.z_332 
	param::Trickle.Node.z_60 param::Trickle.Node.z_76 } } @ (z_266 + z_30 + z_418 + 
	z_454 + z_518 + z_550 + z_6)) }
																									/*FLAGS{ COVERAGE-ELEMENT }*/
																									INFO{
																										<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#19->inst::Trickle.n3->DataMsg" as trace="tpid#19->inst::Trickle.n3->DataMsg">
																									}
																									DATA{
																										:pid_40:my_buff[1].seq = 2;
																										:pid_40:my_buff[1].fragment = FRAGMENT_1;
																										:pid_40:my_buff[1].offset = 1;
																										:pid_40:firmware[1] = FRAGMENT_1;
																										:pid_40:myseq_buff[1] = 1;
																										:pid_40:$time = (z_266 + z_30 + z_418 + z_454 + z_518 + z_550 + z_6);
																										:pid_40:z = z_550;
																										:pid_40:coverageProp = true;
																										:pid_40:localTime = (z_266 + z_30 + z_418 + z_454 + z_518 + z_550 + z_6);
																										:pid_40:localPC = ((t_205 < 4) && (t_9 < 4) && (t_797 < 4) && (t_989 < 4) && (0 <= (t_205 + -2)) && (0 <= (t_9 + -2)) && (0 <= (t_797 + -2)) && (0 <= (t_989 + -2)));
																										:pid_40:localPtC = ((z_30 == t_9) && ((z_266 + z_30) < 4) && (z_454 < t_797) && (z_550 < t_989) && ((z_208 + z_284 + z_292 + z_328 + z_332 + z_60 + z_76) <= (z_266 + z_30 + z_418 + z_454 + z_518 + z_550 + z_6)) && ((z_208 + z_284 + z_292 + z_60 + z_76) <= (z_266 + z_30 + z_418 + z_454 + z_6)) && ((z_208 + z_60 + z_76) <= (z_266 + z_30 + z_6)) && ($delta#initial > 0) && (z_266 > 0) && (z_30 > 0) && (z_418 > 0) && (z_454 > 0) && (z_518 > 0) && (z_6 > 0));
																										:pid_40:timeEmit = (z_208 + z_284 + z_292 + z_328 + z_332 + z_60 + z_76);
																										:pid_41:cl = (z_418 + z_454 + z_518 + z_550);
																										:pid_47:cl = (z_454 + z_518 + z_550);
																										:pid_52:c = 1;
																										:pid_52:consistent = true;
																										:pid_52:cl = z_550;
																										:pid_52:d.seq = 2;
																										:pid_52:d.fragment = FRAGMENT_1;
																										:pid_52:d.offset = 1;
																									}
																									BUFFER{
																										:pid_40:bufferNode:<FIFO>#0{ }
																									}
																									EC:<Id:1400;Ev:173;H:25;W:1245>{ SC: ( pid_4:o0 , ( pid_11:cp2 , pid_16:dp2 , pid_21:dp2 ) , ( pid_27:cp1 , pid_32:dp1 , pid_37:dp1 ) , ( pid_45:cp2 , pid_49:dp1 , pid_54:dp1 ) , ( pid_61:cp1 , pid_65:dp0 , pid_70:dp0 ) )
																					
						EXE: { |;| (:pid_40 , run) (:pid_41 , run) (:pid_44 , run) 
	(:pid_44 , cp_sendCM) }
																					
						TRACE: { |;| (:pid_40 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_614 }) (:pid_44 , ${ output inst::Trickle.Node.ControlMsg 
	[ 1 , 1 ] ${ + param::Trickle.Node.z_266 param::Trickle.Node.z_30 
	param::Trickle.Node.z_418 param::Trickle.Node.z_454 param::Trickle.Node.z_518 
	param::Trickle.Node.z_550 param::Trickle.Node.z_6 param::Trickle.Node.z_614 } } 
	@ (z_266 + z_30 + z_418 + z_454 + z_518 + z_550 + z_6 + z_614)) }
																										/*FLAGS{ COVERAGE-ELEMENT }*/
																										INFO{
																											<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#20->inst::Trickle.n3->ControlMsg" as trace="tpid#20->inst::Trickle.n3->ControlMsg">
																										}
																										DATA{
																											:pid_40:$time = (z_266 + z_30 + z_418 + z_454 + z_518 + z_550 + z_6 + z_614);
																											:pid_40:z = z_614;
																											:pid_40:localTime = (z_266 + z_30 + z_418 + z_454 + z_518 + z_550 + z_6 + z_614);
																											:pid_40:localPC = ((t_205 < 4) && (t_9 < 4) && (t_797 < 4) && (t_989 < 4) && (0 <= (t_205 + -2)) && (0 <= (t_9 + -2)) && (0 <= (t_797 + -2)) && (0 <= (t_989 + -2)));
																											:pid_40:localPtC = (((z_418 + z_454 + z_518 + z_550 + z_614) == t_205) && (z_30 == t_9) && ((z_266 + z_30) < 4) && (z_454 < t_797) && (z_550 < t_989) && ((z_208 + z_284 + z_292 + z_328 + z_332 + z_60 + z_76) <= (z_266 + z_30 + z_418 + z_454 + z_518 + z_550 + z_6)) && ((z_208 + z_284 + z_292 + z_60 + z_76) <= (z_266 + z_30 + z_418 + z_454 + z_6)) && ((z_208 + z_60 + z_76) <= (z_266 + z_30 + z_6)) && ($delta#initial > 0) && (z_266 > 0) && (z_30 > 0) && (z_418 > 0) && (z_454 > 0) && (z_518 > 0) && (z_550 > 0) && (z_6 > 0));
																											:pid_41:cl = (z_418 + z_454 + z_518 + z_550 + z_614);
																											:pid_47:cl = (z_454 + z_518 + z_550 + z_614);
																											:pid_52:cl = (z_550 + z_614);
																										}
																										BUFFER{
																											:pid_6:bufferNode:<FIFO>#0{
																												:pid_40:ControlMsg([ 1 , 1 ] , (z_266 + z_30 + z_418 + z_454 + z_518 + z_550 + z_6 + z_614));
																											}
																											:pid_23:bufferNode:<FIFO>#0{
																												:pid_40:ControlMsg([ 1 , 1 ] , (z_266 + z_30 + z_418 + z_454 + z_518 + z_550 + z_6 + z_614));
																											}
																											:pid_57:bufferNode:<FIFO>#0{
																												:pid_40:ControlMsg([ 1 , 1 ] , (z_266 + z_30 + z_418 + z_454 + z_518 + z_550 + z_6 + z_614));
																											}
																										}
																										EC:<Id:1600;Ev:176;H:26;W:1427>{ SC: ( pid_4:o0 , ( pid_11:cp2 , pid_16:dp2 , pid_21:dp2 ) , ( pid_27:cp1 , pid_32:dp1 , pid_37:dp1 ) , ( pid_45:cp2 , pid_49:dp1 , pid_54:dp1 ) , ( pid_61:cp1 , pid_65:dp0 , pid_70:dp0 ) )
																					
							EXE: { |;| (:pid_57 , run) (:pid_58 , run) (:pid_61 , 
	run) (:pid_61 , cp1_receiveCM_inconsistent) }
																					
							TRACE: { |;| (:pid_57 , ${ newfresh inst::Trickle.Node.z 
	param::Trickle.Node.z_687 }) (:pid_61 , ${ input inst::Trickle.Node.ControlMsg [ 
	1 , 1 ] ${ + param::Trickle.Node.z_266 param::Trickle.Node.z_30 
	param::Trickle.Node.z_418 param::Trickle.Node.z_454 param::Trickle.Node.z_518 
	param::Trickle.Node.z_550 param::Trickle.Node.z_6 param::Trickle.Node.z_614 } } 
	@ (z_143 + z_183 + z_687)) (:pid_61 , ${ newfresh 
	inst::Trickle.Node.ControlProcess.t param::Trickle.Node.ControlProcess.t_357 }) }
																											/*FLAGS{ COVERAGE-ELEMENT }*/
																											INFO{
																												<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#21->inst::Trickle.n4->ControlMsg" as trace="tpid#21->inst::Trickle.n4->ControlMsg">
																											}
																					
							NC: ((t_357 < 4) && (0 <= (t_357 + -2)))
																											PC: ((t_113 < 4) && (t_189 < 4) && (t_205 < 4) && (t_357 < 4) && (t_5 < 4) && (t_51 
	< 4) && (t_64 < 4) && (t_9 < 4) && (t_543 < 4) && (t_626 < 4) && (t_711 < 4) && 
	(t_797 < 4) && (t_888 < 4) && (t_989 < 4) && (0 <= (t_113 + -2)) && (0 <= (t_189 
	+ -2)) && (0 <= (t_205 + -2)) && (0 <= (t_357 + -2)) && (0 <= (t_5 + -2)) && (0 
	<= (t_51 + -2)) && (0 <= (t_64 + -2)) && (0 <= (t_9 + -2)) && (0 <= (t_543 + -2))
	 && (0 <= (t_626 + -2)) && (0 <= (t_711 + -2)) && (0 <= (t_797 + -2)) && (0 <= 
	(t_888 + -2)) && (0 <= (t_989 + -2)))
																											DATA{
																												:pid_57:mydp_run[0] = true;
																												:pid_57:mydp_run[1] = true;
																												:pid_57:$time = (z_143 + z_183 + z_687);
																												:pid_57:z = z_687;
																												:pid_57:seq_buff[0] = 1;
																												:pid_57:seq_buff[1] = 1;
																												:pid_57:localTime = (z_143 + z_183 + z_687);
																												:pid_57:localPC = ((t_113 < 4) && (t_357 < 4) && (0 <= (t_113 + -2)) && (0 <= (t_357 + -2)));
																												:pid_57:localPtC = (((z_183 + z_687) < t_113) && (z_183 < t_113) && ((z_266 + z_30 + z_418 + z_454 + z_518 + z_550 + z_6 + z_614) <= (z_143 + z_183 + z_687)) && ((z_30 + z_6) <= (z_143 + z_183)) && ($delta#initial > 0) && (z_143 > 0) && (z_183 > 0));
																												:pid_57:timeEmit = (z_266 + z_30 + z_418 + z_454 + z_518 + z_550 + z_6 + z_614);
																												:pid_58:c = 0;
																												:pid_58:e = 0;
																												:pid_58:i = 2;
																												:pid_58:t = t_357;
																												:pid_58:consistent = false;
																												:pid_58:cl = 0;
																												:pid_64:cl = (z_143 + z_183 + z_687);
																												:pid_69:cl = (z_143 + z_183 + z_687);
																											}
																											BUFFER{
																												:pid_57:bufferNode:<FIFO>#0{ }
																											}
																											EC:<Id:1637;Ev:201;H:27;W:1461>{ SC: ( pid_4:o0 , ( pid_11:cp2 , pid_16:dp2 , pid_21:dp2 ) , ( pid_27:cp1 , pid_32:dp1 , pid_37:dp1 ) , ( pid_45:cp2 , pid_49:dp1 , pid_54:dp1 ) , ( pid_61:cp1 , pid_66:dp1 , pid_70:dp0 ) )
																					
								EXE: { |;| (:pid_57 , run) (:pid_64 , run) (:pid_65 
	, run) (:pid_65 , dp_init) }
																					
								TRACE: { |;| (:pid_57 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_699 }) (:pid_65 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_1228 }) }
																												/*FLAGS{ COVERAGE-ELEMENT }*/
																												INFO{
																													<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#22->Node.DataProcess1->dp0.dp_init" as trace="tpid#22->Node.DataProcess1->dp0.dp_init">
																												}
																					
								NC: ((t_1228 < 4) && (0 <= (t_1228 + -2)))
																												PC: ((t_113 < 4) && (t_189 < 4) && (t_205 < 4) && (t_357 < 4) && (t_5 < 4) && (t_51 
	< 4) && (t_64 < 4) && (t_9 < 4) && (t_1228 < 4) && (t_543 < 4) && (t_626 < 4) && 
	(t_711 < 4) && (t_797 < 4) && (t_888 < 4) && (t_989 < 4) && (0 <= (t_113 + -2)) 
	&& (0 <= (t_189 + -2)) && (0 <= (t_205 + -2)) && (0 <= (t_357 + -2)) && (0 <= 
	(t_5 + -2)) && (0 <= (t_51 + -2)) && (0 <= (t_64 + -2)) && (0 <= (t_9 + -2)) && 
	(0 <= (t_1228 + -2)) && (0 <= (t_543 + -2)) && (0 <= (t_626 + -2)) && (0 <= 
	(t_711 + -2)) && (0 <= (t_797 + -2)) && (0 <= (t_888 + -2)) && (0 <= (t_989 + -2)
	))
																												DATA{
																													:pid_57:$time = (z_143 + z_183 + z_687 + z_699);
																													:pid_57:z = z_699;
																													:pid_57:localTime = (z_143 + z_183 + z_687 + z_699);
																													:pid_57:localPC = ((t_113 < 4) && (t_357 < 4) && (t_1228 < 4) && (0 <= (t_113 + -2)) && (0 <= (t_357 + -2)) && (0 <= (t_1228 + -2)));
																													:pid_57:localPtC = (((z_183 + z_687) < t_113) && (z_183 < t_113) && ((z_266 + z_30 + z_418 + z_454 + z_518 + z_550 + z_6 + z_614) <= (z_143 + z_183 + z_687)) && ((z_30 + z_6) <= (z_143 + z_183)) && ($delta#initial > 0) && (z_143 > 0) && (z_183 > 0) && (z_687 > 0));
																													:pid_58:cl = z_699;
																													:pid_64:k = 2;
																													:pid_64:c = 0;
																													:pid_64:e = 0;
																													:pid_64:tau = 4;
																													:pid_64:tau_l = 4;
																													:pid_64:tau_h = 8;
																													:pid_64:t = t_1228;
																													:pid_64:cl = 0;
																													:pid_69:cl = (z_143 + z_183 + z_687 + z_699);
																												}
																												EC:<Id:1966;Ev:203;H:28;W:1765>{ SC: ( pid_4:o0 , ( pid_11:cp2 , pid_16:dp2 , pid_21:dp2 ) , ( pid_27:cp1 , pid_32:dp1 , pid_37:dp1 ) , ( pid_45:cp2 , pid_49:dp1 , pid_54:dp1 ) , ( pid_61:cp1 , pid_66:dp1 , pid_71:dp1 ) )
																					
									EXE: { |;| (:pid_57 , run) (:pid_69 , run) 
	(:pid_70 , run) (:pid_70 , dp_init) }
																					
									TRACE: { |;| (:pid_57 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_799 }) (:pid_70 , ${ newfresh 
	inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_1333 }) }
																													/*FLAGS{ COVERAGE-ELEMENT }*/
																													INFO{
																														<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#23->Node.DataProcess2->dp0.dp_init" as trace="tpid#23->Node.DataProcess2->dp0.dp_init">
																													}
																					
									NC: ((t_1333 < 4) && (0 <= (t_1333 + -2)))
																													PC: ((t_113 < 4) && (t_189 < 4) && (t_205 < 4) && (t_357 < 4) && (t_5 < 4) && (t_51 
	< 4) && (t_64 < 4) && (t_9 < 4) && (t_1228 < 4) && (t_1333 < 4) && (t_543 < 4) 
	&& (t_626 < 4) && (t_711 < 4) && (t_797 < 4) && (t_888 < 4) && (t_989 < 4) && (0 
	<= (t_113 + -2)) && (0 <= (t_189 + -2)) && (0 <= (t_205 + -2)) && (0 <= (t_357 + 
	-2)) && (0 <= (t_5 + -2)) && (0 <= (t_51 + -2)) && (0 <= (t_64 + -2)) && (0 <= 
	(t_9 + -2)) && (0 <= (t_1228 + -2)) && (0 <= (t_1333 + -2)) && (0 <= (t_543 + -2)
	) && (0 <= (t_626 + -2)) && (0 <= (t_711 + -2)) && (0 <= (t_797 + -2)) && (0 <= 
	(t_888 + -2)) && (0 <= (t_989 + -2)))
																													DATA{
																														:pid_57:$time = (z_143 + z_183 + z_687 + z_699 + z_799);
																														:pid_57:z = z_799;
																														:pid_57:localTime = (z_143 + z_183 + z_687 + z_699 + z_799);
																														:pid_57:localPC = ((t_113 < 4) && (t_357 < 4) && (t_1228 < 4) && (t_1333 < 4) && (0 <= (t_113 + -2)) && (0 <= (t_357 + -2)) && (0 <= (t_1228 + -2)) && (0 <= (t_1333 + -2)));
																														:pid_57:localPtC = (((z_183 + z_687) < t_113) && (z_183 < t_113) && ((z_266 + z_30 + z_418 + z_454 + z_518 + z_550 + z_6 + z_614) <= (z_143 + z_183 + z_687)) && ((z_30 + z_6) <= (z_143 + z_183)) && ($delta#initial > 0) && (z_143 > 0) && (z_183 > 0) && (z_687 > 0) && (z_699 > 0));
																														:pid_58:cl = (z_699 + z_799);
																														:pid_64:cl = z_799;
																														:pid_69:k = 2;
																														:pid_69:c = 0;
																														:pid_69:e = 0;
																														:pid_69:tau = 4;
																														:pid_69:tau_l = 4;
																														:pid_69:tau_h = 8;
																														:pid_69:t = t_1333;
																														:pid_69:cl = 0;
																													}
																													EC:<Id:1990;Ev:212;H:29;W:1787>{ SC: ( pid_4:o0 , ( pid_11:cp2 , pid_16:dp2 , pid_21:dp2 ) , ( pid_27:cp1 , pid_32:dp1 , pid_37:dp1 ) , ( pid_45:cp2 , pid_49:dp1 , pid_55:dp2 ) , ( pid_61:cp1 , pid_66:dp1 , pid_71:dp1 ) )
																					
										EXE: { |;| (:pid_40 , run) (:pid_52 , run) 
	(:pid_54 , run) (:pid_54 , dp_sendDM) }
																					
										TRACE: { |;| (:pid_40 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_806 }) (:pid_54 , ${ output 
	inst::Trickle.Node.DataMsg [ 2 , 2 , 1 ] ${ + param::Trickle.Node.z_266 
	param::Trickle.Node.z_30 param::Trickle.Node.z_418 param::Trickle.Node.z_454 
	param::Trickle.Node.z_518 param::Trickle.Node.z_550 param::Trickle.Node.z_6 
	param::Trickle.Node.z_614 param::Trickle.Node.z_806 } } @ (z_266 + z_30 + z_418 
	+ z_454 + z_518 + z_550 + z_6 + z_614 + z_806)) }
																														/*FLAGS{ COVERAGE-ELEMENT }*/
																														INFO{
																															<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#24->inst::Trickle.n3->DataMsg" as trace="tpid#24->inst::Trickle.n3->DataMsg">
																														}
																														DATA{
																															:pid_40:$time = (z_266 + z_30 + z_418 + z_454 + z_518 + z_550 + z_6 + z_614 + z_806);
																															:pid_40:z = z_806;
																															:pid_40:localTime = (z_266 + z_30 + z_418 + z_454 + z_518 + z_550 + z_6 + z_614 + z_806);
																															:pid_40:localPC = ((t_205 < 4) && (t_9 < 4) && (t_797 < 4) && (t_989 < 4) && (0 <= (t_205 + -2)) && (0 <= (t_9 + -2)) && (0 <= (t_797 + -2)) && (0 <= (t_989 + -2)));
																															:pid_40:localPtC = (((z_418 + z_454 + z_518 + z_550 + z_614) == t_205) && ((z_550 + z_614 + z_806) == t_989) && (z_30 == t_9) && ((z_266 + z_30) < 4) && (z_454 < t_797) && (z_550 < t_989) && ((z_208 + z_284 + z_292 + z_328 + z_332 + z_60 + z_76) <= (z_266 + z_30 + z_418 + z_454 + z_518 + z_550 + z_6)) && ((z_208 + z_284 + z_292 + z_60 + z_76) <= (z_266 + z_30 + z_418 + z_454 + z_6)) && ((z_208 + z_60 + z_76) <= (z_266 + z_30 + z_6)) && ($delta#initial > 0) && (z_266 > 0) && (z_30 > 0) && (z_418 > 0) && (z_454 > 0) && (z_518 > 0) && (z_550 > 0) && (z_6 > 0) && (z_614 > 0));
																															:pid_41:cl = (z_418 + z_454 + z_518 + z_550 + z_614 + z_806);
																															:pid_47:cl = (z_454 + z_518 + z_550 + z_614 + z_806);
																															:pid_52:cl = (z_550 + z_614 + z_806);
																														}
																														BUFFER{
																															:pid_6:bufferNode:<FIFO>#0{
																																:pid_40:ControlMsg([ 1 , 1 ] , (z_266 + z_30 + z_418 + z_454 + z_518 + z_550 + z_6 + z_614));
																																:pid_40:DataMsg([ 2 , 2 , 1 ] , (z_266 + z_30 + z_418 + z_454 + z_518 + z_550 + z_6 + z_614 + z_806));
																															}
																															:pid_23:bufferNode:<FIFO>#0{
																																:pid_40:ControlMsg([ 1 , 1 ] , (z_266 + z_30 + z_418 + z_454 + z_518 + z_550 + z_6 + z_614));
																																:pid_40:DataMsg([ 2 , 2 , 1 ] , (z_266 + z_30 + z_418 + z_454 + z_518 + z_550 + z_6 + z_614 + z_806));
																															}
																															:pid_57:bufferNode:<FIFO>#0{
																																:pid_40:DataMsg([ 2 , 2 , 1 ] , (z_266 + z_30 + z_418 + z_454 + z_518 + z_550 + z_6 + z_614 + z_806));
																															}
																														}
																														EC:<Id:2104;Ev:216;H:30;W:1892>{ SC: ( pid_4:o0 , ( pid_11:cp2 , pid_16:dp2 , pid_21:dp2 ) , ( pid_27:cp1 , pid_32:dp1 , pid_37:dp1 ) , ( pid_45:cp2 , pid_49:dp1 , pid_55:dp2 ) , ( pid_61:cp1 , pid_66:dp1 , pid_71:dp1 ) )
																					
											EXE: { |;| (:pid_57 , run) (:pid_69 , 
	run) (:pid_71 , run) (:pid_71 , dp1_receiveDM_consistent) }
																					
											TRACE: { |;| (:pid_57 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_843 }) (:pid_71 , ${ input 
	inst::Trickle.Node.DataMsg [ 2 , 2 , 1 ] ${ + param::Trickle.Node.z_266 
	param::Trickle.Node.z_30 param::Trickle.Node.z_418 param::Trickle.Node.z_454 
	param::Trickle.Node.z_518 param::Trickle.Node.z_550 param::Trickle.Node.z_6 
	param::Trickle.Node.z_614 param::Trickle.Node.z_806 } } @ (z_143 + z_183 + z_687 
	+ z_699 + z_799 + z_843)) }
																															/*FLAGS{ COVERAGE-ELEMENT }*/
																															INFO{
																																<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#25->inst::Trickle.n4->DataMsg" as trace="tpid#25->inst::Trickle.n4->DataMsg">
																															}
																															DATA{
																																:pid_57:my_buff[1].seq = 2;
																																:pid_57:my_buff[1].fragment = FRAGMENT_1;
																																:pid_57:my_buff[1].offset = 1;
																																:pid_57:firmware[1] = FRAGMENT_1;
																																:pid_57:myseq_buff[1] = 1;
																																:pid_57:$time = (z_143 + z_183 + z_687 + z_699 + z_799 + z_843);
																																:pid_57:z = z_843;
																																:pid_57:localTime = (z_143 + z_183 + z_687 + z_699 + z_799 + z_843);
																																:pid_57:localPC = ((t_113 < 4) && (t_357 < 4) && (t_1228 < 4) && (t_1333 < 4) && (0 <= (t_113 + -2)) && (0 <= (t_357 + -2)) && (0 <= (t_1228 + -2)) && (0 <= (t_1333 + -2)));
																																:pid_57:localPtC = (((z_183 + z_687) < t_113) && (z_183 < t_113) && (z_843 < t_1333) && ((z_266 + z_30 + z_418 + z_454 + z_518 + z_550 + z_6 + z_614) <= (z_143 + z_183 + z_687)) && ((z_266 + z_30 + z_418 + z_454 + z_518 + z_550 + z_6 + z_614 + z_806) <= (z_143 + z_183 + z_687 + z_699 + z_799 + z_843)) && ((z_30 + z_6) <= (z_143 + z_183)) && ($delta#initial > 0) && (z_143 > 0) && (z_183 > 0) && (z_687 > 0) && (z_699 > 0) && (z_799 > 0));
																																:pid_57:timeEmit = (z_266 + z_30 + z_418 + z_454 + z_518 + z_550 + z_6 + z_614 + z_806);
																																:pid_58:cl = (z_699 + z_799 + z_843);
																																:pid_64:cl = (z_799 + z_843);
																																:pid_69:c = 1;
																																:pid_69:consistent = true;
																																:pid_69:cl = z_843;
																																:pid_69:d.seq = 2;
																																:pid_69:d.fragment = FRAGMENT_1;
																																:pid_69:d.offset = 1;
																															}
																															BUFFER{
																																:pid_57:bufferNode:<FIFO>#0{ }
																															}
																															EC:<Id:2154;Ev:227;H:31;W:1938>{ SC: ( pid_4:o0 , ( pid_11:cp2 , pid_16:dp2 , pid_21:dp2 ) , ( pid_27:cp1 , pid_32:dp1 , pid_37:dp1 ) , ( pid_45:cp2 , pid_50:dp2 , pid_55:dp2 ) , ( pid_61:cp1 , pid_66:dp1 , pid_71:dp1 ) )
																					
												EXE: { |;| (:pid_40 , run) (:pid_47 
	, run) (:pid_49 , run) (:pid_49 , dp_sendDM) }
																					
												TRACE: { |;| (:pid_40 , ${ newfresh 
	inst::Trickle.Node.z param::Trickle.Node.z_858 }) (:pid_49 , ${ output 
	inst::Trickle.Node.DataMsg [ 1 , 1 , 0 ] ${ + param::Trickle.Node.z_266 
	param::Trickle.Node.z_30 param::Trickle.Node.z_418 param::Trickle.Node.z_454 
	param::Trickle.Node.z_518 param::Trickle.Node.z_550 param::Trickle.Node.z_6 
	param::Trickle.Node.z_614 param::Trickle.Node.z_806 param::Trickle.Node.z_858 } }
	 @ (z_266 + z_30 + z_418 + z_454 + z_518 + z_550 + z_6 + z_614 + z_806 + z_858)) 
	}
																																/*FLAGS{ COVERAGE-ELEMENT }*/
																																INFO{
																																	<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#26->inst::Trickle.n3->DataMsg" as trace="tpid#26->inst::Trickle.n3->DataMsg">
																																}
																																DATA{
																																	:pid_40:$time = (z_266 + z_30 + z_418 + z_454 + z_518 + z_550 + z_6 + z_614 + z_806 + z_858);
																																	:pid_40:z = z_858;
																																	:pid_40:localTime = (z_266 + z_30 + z_418 + z_454 + z_518 + z_550 + z_6 + z_614 + z_806 + z_858);
																																	:pid_40:localPC = ((t_205 < 4) && (t_9 < 4) && (t_797 < 4) && (t_989 < 4) && (0 <= (t_205 + -2)) && (0 <= (t_9 + -2)) && (0 <= (t_797 + -2)) && (0 <= (t_989 + -2)));
																																	:pid_40:localPtC = (((z_418 + z_454 + z_518 + z_550 + z_614) == t_205) && ((z_454 + z_518 + z_550 + z_614 + z_806 + z_858) == t_797) && ((z_550 + z_614 + z_806) == t_989) && (z_30 == t_9) && ((z_266 + z_30) < 4) && (z_454 < t_797) && (z_550 < t_989) && ((z_208 + z_284 + z_292 + z_328 + z_332 + z_60 + z_76) <= (z_266 + z_30 + z_418 + z_454 + z_518 + z_550 + z_6)) && ((z_208 + z_284 + z_292 + z_60 + z_76) <= (z_266 + z_30 + z_418 + z_454 + z_6)) && ((z_208 + z_60 + z_76) <= (z_266 + z_30 + z_6)) && ($delta#initial > 0) && (z_266 > 0) && (z_30 > 0) && (z_418 > 0) && (z_454 > 0) && (z_518 > 0) && (z_550 > 0) && (z_6 > 0) && (z_614 > 0) && (z_806 > 0));
																																	:pid_41:cl = (z_418 + z_454 + z_518 + z_550 + z_614 + z_806 + z_858);
																																	:pid_47:cl = (z_454 + z_518 + z_550 + z_614 + z_806 + z_858);
																																	:pid_52:cl = (z_550 + z_614 + z_806 + z_858);
																																}
																																BUFFER{
																																	:pid_6:bufferNode:<FIFO>#0{
																																		:pid_40:ControlMsg([ 1 , 1 ] , (z_266 + z_30 + z_418 + z_454 + z_518 + z_550 + z_6 + z_614));
																																		:pid_40:DataMsg([ 2 , 2 , 1 ] , (z_266 + z_30 + z_418 + z_454 + z_518 + z_550 + z_6 + z_614 + z_806));
																																		:pid_40:DataMsg([ 1 , 1 , 0 ] , (z_266 + z_30 + z_418 + z_454 + z_518 + z_550 + z_6 + z_614 + z_806 + z_858));
																																	}
																																	:pid_23:bufferNode:<FIFO>#0{
																																		:pid_40:ControlMsg([ 1 , 1 ] , (z_266 + z_30 + z_418 + z_454 + z_518 + z_550 + z_6 + z_614));
																																		:pid_40:DataMsg([ 2 , 2 , 1 ] , (z_266 + z_30 + z_418 + z_454 + z_518 + z_550 + z_6 + z_614 + z_806));
																																		:pid_40:DataMsg([ 1 , 1 , 0 ] , (z_266 + z_30 + z_418 + z_454 + z_518 + z_550 + z_6 + z_614 + z_806 + z_858));
																																	}
																																	:pid_57:bufferNode:<FIFO>#0{
																																		:pid_40:DataMsg([ 1 , 1 , 0 ] , (z_266 + z_30 + z_418 + z_454 + z_518 + z_550 + z_6 + z_614 + z_806 + z_858));
																																	}
																																}
																																EC:<Id:2306;Ev:0;H:32;W:2079>{ SC: ( pid_4:o0 , ( pid_11:cp2 , pid_16:dp2 , pid_21:dp2 ) , ( pid_27:cp1 , pid_32:dp1 , pid_37:dp1 ) , ( pid_45:cp2 , pid_50:dp2 , pid_55:dp2 ) , ( pid_61:cp1 , pid_66:dp1 , pid_71:dp1 ) )
																					
													EXE: { |;| (:pid_57 , run) 
	(:pid_69 , run) (:pid_71 , run) (:pid_71 , dp1_receiveDM_inconsistent) }
																					
													TRACE: { |;| (:pid_57 , ${ 
	newfresh inst::Trickle.Node.z param::Trickle.Node.z_903 }) (:pid_71 , ${ input 
	inst::Trickle.Node.DataMsg [ 1 , 1 , 0 ] ${ + param::Trickle.Node.z_266 
	param::Trickle.Node.z_30 param::Trickle.Node.z_418 param::Trickle.Node.z_454 
	param::Trickle.Node.z_518 param::Trickle.Node.z_550 param::Trickle.Node.z_6 
	param::Trickle.Node.z_614 param::Trickle.Node.z_806 param::Trickle.Node.z_858 } }
	 @ (z_143 + z_183 + z_687 + z_699 + z_799 + z_843 + z_903)) (:pid_71 , ${ 
	newfresh inst::Trickle.Node.DataProcess.t param::Trickle.Node.DataProcess.t_1410 
	}) }
																																	/*FLAGS{ COVERAGE-ELEMENT & OBJECTIVE-ACHIEVED & OBJECTIVE-FAILED }*/
																																	INFO{
																																		<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#27->inst::Trickle.n4->DataMsg" as trace="tpid#27->inst::Trickle.n4->DataMsg">
																																	}
																					
													NC: ((t_1410 < 4) && (0 <= 
	(t_1410 + -2)))
																																	PC: ((t_113 < 4) && (t_189 < 4) && (t_205 < 4) && (t_357 < 4) && (t_5 < 4) && (t_51 
	< 4) && (t_64 < 4) && (t_9 < 4) && (t_1228 < 4) && (t_1333 < 4) && (t_1410 < 4) 
	&& (t_543 < 4) && (t_626 < 4) && (t_711 < 4) && (t_797 < 4) && (t_888 < 4) && 
	(t_989 < 4) && (0 <= (t_113 + -2)) && (0 <= (t_189 + -2)) && (0 <= (t_205 + -2)) 
	&& (0 <= (t_357 + -2)) && (0 <= (t_5 + -2)) && (0 <= (t_51 + -2)) && (0 <= (t_64 
	+ -2)) && (0 <= (t_9 + -2)) && (0 <= (t_1228 + -2)) && (0 <= (t_1333 + -2)) && 
	(0 <= (t_1410 + -2)) && (0 <= (t_543 + -2)) && (0 <= (t_626 + -2)) && (0 <= 
	(t_711 + -2)) && (0 <= (t_797 + -2)) && (0 <= (t_888 + -2)) && (0 <= (t_989 + -2)
	))
																																	DATA{
																																		:pid_57:$time = (z_143 + z_183 + z_687 + z_699 + z_799 + z_843 + z_903);
																																		:pid_57:z = z_903;
																																		:pid_57:localTime = (z_143 + z_183 + z_687 + z_699 + z_799 + z_843 + z_903);
																																		:pid_57:localPC = ((t_113 < 4) && (t_357 < 4) && (t_1228 < 4) && (t_1333 < 4) && (t_1410 < 4) && (0 <= (t_113 + -2)) && (0 <= (t_357 + -2)) && (0 <= (t_1228 + -2)) && (0 <= (t_1333 + -2)) && (0 <= (t_1410 + -2)));
																																		:pid_57:localPtC = (((z_183 + z_687) < t_113) && ((z_843 + z_903) < t_1333) && (z_183 < t_113) && (z_843 < t_1333) && ((z_266 + z_30 + z_418 + z_454 + z_518 + z_550 + z_6 + z_614) <= (z_143 + z_183 + z_687)) && ((z_266 + z_30 + z_418 + z_454 + z_518 + z_550 + z_6 + z_614 + z_806) <= (z_143 + z_183 + z_687 + z_699 + z_799 + z_843)) && ((z_266 + z_30 + z_418 + z_454 + z_518 + z_550 + z_6 + z_614 + z_806 + z_858) <= (z_143 + z_183 + z_687 + z_699 + z_799 + z_843 + z_903)) && ((z_30 + z_6) <= (z_143 + z_183)) && ($delta#initial > 0) && (z_143 > 0) && (z_183 > 0) && (z_687 > 0) && (z_699 > 0) && (z_799 > 0) && (z_843 > 0));
																																		:pid_57:timeEmit = (z_266 + z_30 + z_418 + z_454 + z_518 + z_550 + z_6 + z_614 + z_806 + z_858);
																																		:pid_58:cl = (z_699 + z_799 + z_843 + z_903);
																																		:pid_64:cl = (z_799 + z_843 + z_903);
																																		:pid_69:c = 0;
																																		:pid_69:e = 0;
																																		:pid_69:t = t_1410;
																																		:pid_69:consistent = false;
																																		:pid_69:cl = 0;
																																		:pid_69:d.seq = 1;
																																		:pid_69:d.fragment = FRAGMENT_0;
																																		:pid_69:d.offset = 0;
																																	}
																																	BUFFER{
																																		:pid_57:bufferNode:<FIFO>#0{ }
																																	}
																																}
																																EC:<Id:2308;Ev:0;H:32;W:2081>{ SC: ( pid_4:o0 , ( pid_11:cp2 , pid_16:dp2 , pid_21:dp2 ) , ( pid_27:cp1 , pid_32:dp1 , pid_37:dp1 ) , ( pid_45:cp2 , pid_50:dp2 , pid_55:dp2 ) , ( pid_61:cp1 , pid_66:dp1 , pid_71:dp1 ) )
																					
													EXE: { |;| (:pid_57 , run) 
	(:pid_64 , run) (:pid_66 , run) (:pid_66 , dp1_receiveDM_consistent) }
																					
													TRACE: { |;| (:pid_57 , ${ 
	newfresh inst::Trickle.Node.z param::Trickle.Node.z_903 }) (:pid_66 , ${ input 
	inst::Trickle.Node.DataMsg [ 1 , 1 , 0 ] ${ + param::Trickle.Node.z_266 
	param::Trickle.Node.z_30 param::Trickle.Node.z_418 param::Trickle.Node.z_454 
	param::Trickle.Node.z_518 param::Trickle.Node.z_550 param::Trickle.Node.z_6 
	param::Trickle.Node.z_614 param::Trickle.Node.z_806 param::Trickle.Node.z_858 } }
	 @ (z_143 + z_183 + z_687 + z_699 + z_799 + z_843 + z_903)) }
																																	/*FLAGS{ COVERAGE-ELEMENT & OBJECTIVE-ACHIEVED & OBJECTIVE-FAILED }*/
																																	INFO{
																																		<ID:"sew:/workflow.behavior#selection.behavior_coverage",kind="tpid#27->inst::Trickle.n4->DataMsg" as trace="tpid#27->inst::Trickle.n4->DataMsg">
																																	}
																																	DATA{
																																		:pid_57:my_buff[0].seq = 1;
																																		:pid_57:my_buff[0].fragment = FRAGMENT_0;
																																		:pid_57:my_buff[0].offset = 0;
																																		:pid_57:firmware[0] = FRAGMENT_0;
																																		:pid_57:myseq_buff[0] = 1;
																																		:pid_57:$time = (z_143 + z_183 + z_687 + z_699 + z_799 + z_843 + z_903);
																																		:pid_57:z = z_903;
																																		:pid_57:coverageProp = true;
																																		:pid_57:localTime = (z_143 + z_183 + z_687 + z_699 + z_799 + z_843 + z_903);
																																		:pid_57:localPC = ((t_113 < 4) && (t_357 < 4) && (t_1228 < 4) && (t_1333 < 4) && (0 <= (t_113 + -2)) && (0 <= (t_357 + -2)) && (0 <= (t_1228 + -2)) && (0 <= (t_1333 + -2)));
																																		:pid_57:localPtC = (((z_183 + z_687) < t_113) && ((z_799 + z_843 + z_903) < t_1228) && (z_183 < t_113) && (z_843 < t_1333) && ((z_266 + z_30 + z_418 + z_454 + z_518 + z_550 + z_6 + z_614) <= (z_143 + z_183 + z_687)) && ((z_266 + z_30 + z_418 + z_454 + z_518 + z_550 + z_6 + z_614 + z_806) <= (z_143 + z_183 + z_687 + z_699 + z_799 + z_843)) && ((z_266 + z_30 + z_418 + z_454 + z_518 + z_550 + z_6 + z_614 + z_806 + z_858) <= (z_143 + z_183 + z_687 + z_699 + z_799 + z_843 + z_903)) && ((z_30 + z_6) <= (z_143 + z_183)) && ($delta#initial > 0) && (z_143 > 0) && (z_183 > 0) && (z_687 > 0) && (z_699 > 0) && (z_799 > 0) && (z_843 > 0));
																																		:pid_57:timeEmit = (z_266 + z_30 + z_418 + z_454 + z_518 + z_550 + z_6 + z_614 + z_806 + z_858);
																																		:pid_58:cl = (z_699 + z_799 + z_843 + z_903);
																																		:pid_64:c = 1;
																																		:pid_64:consistent = true;
																																		:pid_64:cl = (z_799 + z_843 + z_903);
																																		:pid_64:d.seq = 1;
																																		:pid_64:d.fragment = FRAGMENT_0;
																																		:pid_64:d.offset = 0;
																																		:pid_69:cl = (z_843 + z_903);
																																	}
																																	BUFFER{
																																		:pid_57:bufferNode:<FIFO>#0{ }
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
