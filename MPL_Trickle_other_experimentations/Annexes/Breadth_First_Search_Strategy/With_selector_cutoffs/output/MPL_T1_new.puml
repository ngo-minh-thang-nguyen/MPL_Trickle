@startuml

skinparam backgroundColor White

skinparam state {
	StartColor Green
	EndColor Red

	'Attribut pour les transitions
	ArrowColor Black
	ArrowColor<< Else >> Orange

	'Attribut par défaut pour les états
	BorderColor Gray
	BackgroundColor Wheat

	'Attribut pour les états composites
	BackgroundColor<< Composite >> SpringGreen

	'Attribut pour les états simples
	BackgroundColor<< Simple >> PaleTurquoise
	BackgroundColor<< Start >> Green
	BackgroundColor<< Final >> Red
	BackgroundColor<< Sync >> Aqua

	'Attribut pour les pseudo-états
	BackgroundColor<< Pseudo >> Lavender
	BackgroundColor<< Initial >> GreenYellow
	BackgroundColor<< Junction >> GreenYellow
	BackgroundColor<< Choice >> Orange
	BackgroundColor<< Fork >> SpringGreen
	BackgroundColor<< Junction >> SpringGreen
	BackgroundColor<< DeepHistory >> SpringGreen
	BackgroundColor<< ShallowHistory >> SpringGreen
	BackgroundColor<< Return >>  OrangeRed
	BackgroundColor<< Terminal >> Red

	FontColor Black
	FontName Times
	FontSize 14
}

state "System Trickle" as Trickle_273267304 {
	state "Node" as Node_273555672 {
		Node_273555672 : Parameters 		Node_273555672 : \tinputDATA_MESSAGE[ 2 ] my_buff
		Node_273555672 : \tinputFRAGMENT[ 2 ] firmware
		Node_273555672 : \tinputinteger[ 2 ] myseq_buff
		Node_273555672 : \tinputboolean[ 2 ] mydp_run
		state "ControlProcess" as ControlProcess_274467368 {
			state "cp0" as cp0_276555256 << Initial >>

			cp0_276555256--> cp0_init_276599000
			note on link #white
				**cp_init:**
				{ |;|
					ControlProcess.k := 2;
					ControlProcess.c := 0;
					ControlProcess.e := 0;
					ControlProcess.tau_l := 4;
					ControlProcess.tau_h := 8;
					ControlProcess.tau := ControlProcess.tau_l;
				}
			end note

			state "cp0_init" as cp0_init_276599000 << Simple >>

			cp0_init_276599000--> cp1_276643784
			note on link #white
				**cp_init:**
				{ |;|
					invoke#method ControlProcess.t newfresh;
					{ |;|
						guard (((ControlProcess.tau / 2) <= ControlProcess.t) && (ControlProcess.t < ControlProcess.tau));
						Node.localPC := (Node.localPC && (((ControlProcess.tau / 2) <= ControlProcess.t) && (ControlProcess.t < ControlProcess.tau)));
					}
					output Node.Log(INIT, Node.localTime);
					spec::Trickle.cptOutput := (+ 1);
					ControlProcess.cl := 0;
				}
			end note

			state "cp1" as cp1_276643784 << Simple >>

			cp1_276643784--> cp2_276740200
			note on link #white
				**cp_sendCM:**
				{ |;|
					Node.localPtC := (Node.localPtC && (ControlProcess.cl == ControlProcess.t));
					{ |;|
						guard ((ControlProcess.c < ControlProcess.k) && (ControlProcess.e < Node.CTRL_EXPIR));
						Node.localPC := (Node.localPC && ((ControlProcess.c < ControlProcess.k) && (ControlProcess.e < Node.CTRL_EXPIR)));
					}
					output Node.ControlMsg(Node.myseq_buff, Node.localTime);
					spec::Trickle.cptOutput := (+ 1);
				}
			end note

			cp1_276643784--> cp1_276643784
			note on link #white
				**cp1_receiveCM_consistent:**
				{ |;|
					Node.localPtC := (Node.localPtC && (ControlProcess.cl < ControlProcess.t));
					{ |;|
						{ |;|
							guard (ControlProcess.e < Node.CTRL_EXPIR);
							Node.localPC := (Node.localPC && (ControlProcess.e < Node.CTRL_EXPIR));
						}
						input Node.ControlMsg(Node.seq_buff, Node.timeEmit);
						spec::Trickle.cptInput := (+ 1);
						Node.localPtC := (Node.localPtC && (Node.timeEmit <= Node.localTime));
						ControlProcess.consistent := true;
						for( ControlProcess.i := 0 ; (ControlProcess.i < spec::Trickle.BUFF_SIZE) ; ControlProcess.i := (+ 1) )
						{
							if (&spec::Trickle.Node.myseq_buff[&spec::Trickle.Node.ControlProcess.i] != &spec::Trickle.Node.seq_buff[&spec::Trickle.Node.ControlProcess.i])
							{ |;|
								ControlProcess.consistent := false;
								if (! &spec::Trickle.Node.mydp_run[&spec::Trickle.Node.ControlProcess.i])
								{
									&spec::Trickle.Node.mydp_run[&spec::Trickle.Node.ControlProcess.i] := true;
								}
							}
						}
					}
					guard ControlProcess.consistent;
					ControlProcess.c := (+ 1);
				}
			end note

			cp1_276643784--> cp1_276643784
			note on link #white
				**cp1_receiveCM_inconsistent:**
				{ |;|
					Node.localPtC := (Node.localPtC && (ControlProcess.cl < ControlProcess.t));
					{ |;|
						{ |;|
							guard (ControlProcess.e < Node.CTRL_EXPIR);
							Node.localPC := (Node.localPC && (ControlProcess.e < Node.CTRL_EXPIR));
						}
						input Node.ControlMsg(Node.seq_buff, Node.timeEmit);
						spec::Trickle.cptInput := (+ 1);
						Node.localPtC := (Node.localPtC && (Node.timeEmit <= Node.localTime));
						ControlProcess.consistent := true;
						for( ControlProcess.i := 0 ; (ControlProcess.i < spec::Trickle.BUFF_SIZE) ; ControlProcess.i := (+ 1) )
						{
							if (&spec::Trickle.Node.myseq_buff[&spec::Trickle.Node.ControlProcess.i] != &spec::Trickle.Node.seq_buff[&spec::Trickle.Node.ControlProcess.i])
							{ |;|
								ControlProcess.consistent := false;
								if (! &spec::Trickle.Node.mydp_run[&spec::Trickle.Node.ControlProcess.i])
								{
									&spec::Trickle.Node.mydp_run[&spec::Trickle.Node.ControlProcess.i] := true;
								}
							}
						}
					}
					guard (! ControlProcess.consistent);
					ControlProcess.tau := ControlProcess.tau_l;
					invoke#method ControlProcess.t newfresh;
					{ |;|
						guard (((ControlProcess.tau / 2) <= ControlProcess.t) && (ControlProcess.t < ControlProcess.tau));
						Node.localPC := (Node.localPC && (((ControlProcess.tau / 2) <= ControlProcess.t) && (ControlProcess.t < ControlProcess.tau)));
					}
					ControlProcess.cl := 0;
					ControlProcess.c := 0;
					ControlProcess.e := 0;
				}
			end note

			cp1_276643784--> cp3_276828600
			note on link #white
				**cp_CTRL_EXPIR:**
				{ |;|
					{ |;|
						guard (ControlProcess.e == Node.CTRL_EXPIR);
						Node.localPC := (Node.localPC && (ControlProcess.e == Node.CTRL_EXPIR));
					}
					output Node.Log(TERMIN);
					spec::Trickle.cptOutput := (+ 1);
				}
			end note

			cp1_276643784--> cp2_276740200
			note on link #white
				**cp1_reach_k:**
				{ |;|
					Node.localPtC := (Node.localPtC && (ControlProcess.cl == ControlProcess.t));
					{ |;|
						guard ((ControlProcess.c >= ControlProcess.k) && (ControlProcess.e < Node.CTRL_EXPIR));
						Node.localPC := (Node.localPC && ((ControlProcess.c >= ControlProcess.k) && (ControlProcess.e < Node.CTRL_EXPIR)));
					}
				}
			end note

			state "cp2" as cp2_276740200 << Simple >>

			cp2_276740200--> cp1_276643784
			note on link #white
				**cp_resetTau:**
				{ |;|
					Node.localPtC := (Node.localPtC && ((ControlProcess.cl > ControlProcess.t) && (ControlProcess.cl == ControlProcess.tau)));
					{ |;|
						guard (ControlProcess.e < Node.CTRL_EXPIR);
						Node.localPC := (Node.localPC && (ControlProcess.e < Node.CTRL_EXPIR));
					}
					if ((2 * ControlProcess.tau) <= ControlProcess.tau_h)
					{
						ControlProcess.tau := (2 * ControlProcess.tau);
					}
					else
					{
						if ((2 * ControlProcess.tau) > ControlProcess.tau_h)
						{
							ControlProcess.tau := ControlProcess.tau_h;
						}
					}
					invoke#method ControlProcess.t newfresh;
					{ |;|
						guard (((ControlProcess.tau / 2) <= ControlProcess.t) && (ControlProcess.t < ControlProcess.tau));
						Node.localPC := (Node.localPC && (((ControlProcess.tau / 2) <= ControlProcess.t) && (ControlProcess.t < ControlProcess.tau)));
					}
					ControlProcess.e := (+ 1);
					ControlProcess.cl := 0;
					ControlProcess.c := 0;
				}
			end note

			cp2_276740200--> cp2_276740200
			note on link #white
				**cp2_receiveCM_consistent:**
				{ |;|
					Node.localPtC := (Node.localPtC && (ControlProcess.cl < ControlProcess.tau));
					{ |;|
						{ |;|
							guard (ControlProcess.e < Node.CTRL_EXPIR);
							Node.localPC := (Node.localPC && (ControlProcess.e < Node.CTRL_EXPIR));
						}
						input Node.ControlMsg(Node.seq_buff, Node.timeEmit);
						spec::Trickle.cptInput := (+ 1);
						Node.localPtC := (Node.localPtC && (Node.timeEmit <= Node.localTime));
						ControlProcess.consistent := true;
						for( ControlProcess.i := 0 ; (ControlProcess.i < spec::Trickle.BUFF_SIZE) ; ControlProcess.i := (+ 1) )
						{
							if (&spec::Trickle.Node.myseq_buff[&spec::Trickle.Node.ControlProcess.i] != &spec::Trickle.Node.seq_buff[&spec::Trickle.Node.ControlProcess.i])
							{ |;|
								ControlProcess.consistent := false;
								if (! &spec::Trickle.Node.mydp_run[&spec::Trickle.Node.ControlProcess.i])
								{
									&spec::Trickle.Node.mydp_run[&spec::Trickle.Node.ControlProcess.i] := true;
								}
							}
						}
					}
					guard ControlProcess.consistent;
					ControlProcess.c := (+ 1);
				}
			end note

			cp2_276740200--> cp1_276643784
			note on link #white
				**cp2_receiveCM_inconsistent:**
				{ |;|
					Node.localPtC := (Node.localPtC && (ControlProcess.cl < ControlProcess.tau));
					{ |;|
						{ |;|
							guard (ControlProcess.e < Node.CTRL_EXPIR);
							Node.localPC := (Node.localPC && (ControlProcess.e < Node.CTRL_EXPIR));
						}
						input Node.ControlMsg(Node.seq_buff, Node.timeEmit);
						spec::Trickle.cptInput := (+ 1);
						Node.localPtC := (Node.localPtC && (Node.timeEmit <= Node.localTime));
						ControlProcess.consistent := true;
						for( ControlProcess.i := 0 ; (ControlProcess.i < spec::Trickle.BUFF_SIZE) ; ControlProcess.i := (+ 1) )
						{
							if (&spec::Trickle.Node.myseq_buff[&spec::Trickle.Node.ControlProcess.i] != &spec::Trickle.Node.seq_buff[&spec::Trickle.Node.ControlProcess.i])
							{ |;|
								ControlProcess.consistent := false;
								if (! &spec::Trickle.Node.mydp_run[&spec::Trickle.Node.ControlProcess.i])
								{
									&spec::Trickle.Node.mydp_run[&spec::Trickle.Node.ControlProcess.i] := true;
								}
							}
						}
					}
					guard (! ControlProcess.consistent);
					ControlProcess.tau := ControlProcess.tau_l;
					invoke#method ControlProcess.t newfresh;
					{ |;|
						guard (((ControlProcess.tau / 2) <= ControlProcess.t) && (ControlProcess.t < ControlProcess.tau));
						Node.localPC := (Node.localPC && (((ControlProcess.tau / 2) <= ControlProcess.t) && (ControlProcess.t < ControlProcess.tau)));
					}
					ControlProcess.cl := 0;
					ControlProcess.c := 0;
					ControlProcess.e := 0;
				}
			end note

			state "cp3" as cp3_276828600 << Final >>

		}

		state "DataProcess" as DataProcess_276831544 {
			DataProcess_276831544 : Parameters 			DataProcess_276831544 : \tinputinteger mySeq
			state "dp0" as dp0_277068200 << Start >>

			dp0_277068200--> dp1_276685992
			note on link #white
				**dp_init:**
				{ |;|
					DataProcess.k := 2;
					DataProcess.c := 0;
					DataProcess.e := 0;
					DataProcess.tau_l := 4;
					DataProcess.tau_h := 8;
					DataProcess.tau := DataProcess.tau_l;
					invoke#method DataProcess.t newfresh;
					{ |;|
						guard (((DataProcess.tau / 2) <= DataProcess.t) && (DataProcess.t < DataProcess.tau));
						Node.localPC := (Node.localPC && (((DataProcess.tau / 2) <= DataProcess.t) && (DataProcess.t < DataProcess.tau)));
					}
					guard &spec::Trickle.Node.mydp_run[(DataProcess.mySeq + (- Node.MIN_SEQ))];
					DataProcess.cl := 0;
				}
			end note

			state "dp1" as dp1_276685992 << Simple >>

			dp1_276685992--> dp2_277253096
			note on link #white
				**dp_sendDM:**
				{ |;|
					Node.localPtC := (Node.localPtC && (DataProcess.cl == DataProcess.t));
					{ |;|
						guard ((DataProcess.c < DataProcess.k) && (DataProcess.e < Node.DATA_EXPIR) && (&spec::Trickle.Node.my_buff[(DataProcess.mySeq + (- Node.MIN_SEQ))].fragment != UNDEF_FRAGMENT));
						Node.localPC := (Node.localPC && ((DataProcess.c < DataProcess.k) && (DataProcess.e < Node.DATA_EXPIR) && (&spec::Trickle.Node.my_buff[(DataProcess.mySeq + (- Node.MIN_SEQ))].fragment != UNDEF_FRAGMENT)));
					}
					{ |;|
						if (DataProcess.mySeq == 1)
						{
							output Node.DataMsg1(&spec::Trickle.Node.my_buff[(DataProcess.mySeq + (- Node.MIN_SEQ))], Node.localTime);
						}
						else
						{
							if (DataProcess.mySeq == 2)
							{
								output Node.DataMsg2(&spec::Trickle.Node.my_buff[(DataProcess.mySeq + (- Node.MIN_SEQ))], Node.localTime);
							}
						}
						spec::Trickle.cptOutput := (+ 1);
					}
				}
			end note

			dp1_276685992--> dp1_276685992
			note on link #white
				**dp1_receiveDM_consistent:**
				{ |;|
					Node.localPtC := (Node.localPtC && (DataProcess.cl < DataProcess.t));
					{ |;|
						{ |;|
							guard (DataProcess.e < Node.DATA_EXPIR);
							Node.localPC := (Node.localPC && (DataProcess.e < Node.DATA_EXPIR));
						}
						{ |;|
							if (DataProcess.mySeq == 1)
							{
								input Node.DataMsg1(DataProcess.d, Node.timeEmit);
							}
							else
							{
								input Node.DataMsg2(DataProcess.d, Node.timeEmit);
							}
							spec::Trickle.cptInput := (+ 1);
						}
						Node.localPtC := (Node.localPtC && (Node.timeEmit <= Node.localTime));
						DataProcess.consistent := true;
						if (DataProcess.mySeq == &spec::Trickle.Node.DataProcess.d.seq)
						{ |;|
							&spec::Trickle.Node.my_buff[(&spec::Trickle.Node.DataProcess.d.seq + (- Node.MIN_SEQ))] := DataProcess.d;
							&spec::Trickle.Node.myseq_buff[(&spec::Trickle.Node.DataProcess.d.seq + (- Node.MIN_SEQ))] := 1;
							&spec::Trickle.Node.firmware[&spec::Trickle.Node.DataProcess.d.offset] := &spec::Trickle.Node.DataProcess.d.fragment;
						}
						else
						{
							DataProcess.consistent := false;
						}
					}
					guard DataProcess.consistent;
					DataProcess.c := (+ 1);
				}
			end note

			dp1_276685992--> dp1_276685992
			note on link #white
				**dp1_receiveDM_inconsistent:**
				{ |;|
					Node.localPtC := (Node.localPtC && (DataProcess.cl < DataProcess.t));
					{ |;|
						{ |;|
							guard (DataProcess.e < Node.DATA_EXPIR);
							Node.localPC := (Node.localPC && (DataProcess.e < Node.DATA_EXPIR));
						}
						{ |;|
							if (DataProcess.mySeq == 1)
							{
								input Node.DataMsg1(DataProcess.d, Node.timeEmit);
							}
							else
							{
								input Node.DataMsg2(DataProcess.d, Node.timeEmit);
							}
							spec::Trickle.cptInput := (+ 1);
						}
						Node.localPtC := (Node.localPtC && (Node.timeEmit <= Node.localTime));
						DataProcess.consistent := true;
						if (DataProcess.mySeq == &spec::Trickle.Node.DataProcess.d.seq)
						{ |;|
							&spec::Trickle.Node.my_buff[(&spec::Trickle.Node.DataProcess.d.seq + (- Node.MIN_SEQ))] := DataProcess.d;
							&spec::Trickle.Node.myseq_buff[(&spec::Trickle.Node.DataProcess.d.seq + (- Node.MIN_SEQ))] := 1;
							&spec::Trickle.Node.firmware[&spec::Trickle.Node.DataProcess.d.offset] := &spec::Trickle.Node.DataProcess.d.fragment;
						}
						else
						{
							DataProcess.consistent := false;
						}
					}
					guard (! DataProcess.consistent);
					DataProcess.tau := DataProcess.tau_l;
					invoke#method DataProcess.t newfresh;
					{ |;|
						guard (((DataProcess.tau / 2) <= DataProcess.t) && (DataProcess.t < DataProcess.tau));
						Node.localPC := (Node.localPC && (((DataProcess.tau / 2) <= DataProcess.t) && (DataProcess.t < DataProcess.tau)));
					}
					DataProcess.cl := 0;
					DataProcess.c := 0;
					DataProcess.e := 0;
				}
			end note

			dp1_276685992--> dp3_277347816
			note on link #white
				**dp_DATA_EXPIR:**
				{ |;|
					guard (DataProcess.e == Node.DATA_EXPIR);
					Node.localPC := (Node.localPC && (DataProcess.e == Node.DATA_EXPIR));
				}
			end note

			dp1_276685992--> dp2_277253096
			note on link #white
				**dp1_reach_k:**
				{ |;|
					Node.localPtC := (Node.localPtC && (DataProcess.cl == DataProcess.t));
					{ |;|
						guard (((DataProcess.c >= DataProcess.k) || (&spec::Trickle.Node.my_buff[(DataProcess.mySeq + (- Node.MIN_SEQ))].fragment == UNDEF_FRAGMENT)) && (DataProcess.e < Node.DATA_EXPIR));
						Node.localPC := (Node.localPC && (((DataProcess.c >= DataProcess.k) || (&spec::Trickle.Node.my_buff[(DataProcess.mySeq + (- Node.MIN_SEQ))].fragment == UNDEF_FRAGMENT)) && (DataProcess.e < Node.DATA_EXPIR)));
					}
				}
			end note

			state "dp2" as dp2_277253096 << Simple >>

			dp2_277253096--> dp1_276685992
			note on link #white
				**dp_resetTau:**
				{ |;|
					Node.localPtC := (Node.localPtC && ((DataProcess.cl > DataProcess.t) && (DataProcess.cl == DataProcess.tau)));
					{ |;|
						guard (DataProcess.e < Node.DATA_EXPIR);
						Node.localPC := (Node.localPC && (DataProcess.e < Node.DATA_EXPIR));
					}
					if ((2 * DataProcess.tau) <= DataProcess.tau_h)
					{
						DataProcess.tau := (2 * DataProcess.tau);
					}
					else
					{
						if ((2 * DataProcess.tau) > DataProcess.tau_h)
						{
							DataProcess.tau := DataProcess.tau_h;
						}
					}
					invoke#method DataProcess.t newfresh;
					{ |;|
						guard (((DataProcess.tau / 2) <= DataProcess.t) && (DataProcess.t < DataProcess.tau));
						Node.localPC := (Node.localPC && (((DataProcess.tau / 2) <= DataProcess.t) && (DataProcess.t < DataProcess.tau)));
					}
					DataProcess.e := (+ 1);
					DataProcess.cl := 0;
					DataProcess.c := 0;
				}
			end note

			dp2_277253096--> dp2_277253096
			note on link #white
				**dp2_receiveDM_consistent:**
				{ |;|
					Node.localPtC := (Node.localPtC && (DataProcess.cl < DataProcess.tau));
					{ |;|
						{ |;|
							guard (DataProcess.e < Node.DATA_EXPIR);
							Node.localPC := (Node.localPC && (DataProcess.e < Node.DATA_EXPIR));
						}
						{ |;|
							if (DataProcess.mySeq == 1)
							{
								input Node.DataMsg1(DataProcess.d, Node.timeEmit);
							}
							else
							{
								input Node.DataMsg2(DataProcess.d, Node.timeEmit);
							}
							spec::Trickle.cptInput := (+ 1);
						}
						Node.localPtC := (Node.localPtC && (Node.timeEmit <= Node.localTime));
						DataProcess.consistent := true;
						if (DataProcess.mySeq == &spec::Trickle.Node.DataProcess.d.seq)
						{ |;|
							&spec::Trickle.Node.my_buff[(&spec::Trickle.Node.DataProcess.d.seq + (- Node.MIN_SEQ))] := DataProcess.d;
							&spec::Trickle.Node.myseq_buff[(&spec::Trickle.Node.DataProcess.d.seq + (- Node.MIN_SEQ))] := 1;
							&spec::Trickle.Node.firmware[&spec::Trickle.Node.DataProcess.d.offset] := &spec::Trickle.Node.DataProcess.d.fragment;
						}
						else
						{
							DataProcess.consistent := false;
						}
					}
					guard DataProcess.consistent;
					DataProcess.c := (+ 1);
				}
			end note

			dp2_277253096--> dp1_276685992
			note on link #white
				**dp2_receiveDM_inconsistent:**
				{ |;|
					Node.localPtC := (Node.localPtC && (DataProcess.cl < DataProcess.tau));
					{ |;|
						{ |;|
							guard (DataProcess.e < Node.DATA_EXPIR);
							Node.localPC := (Node.localPC && (DataProcess.e < Node.DATA_EXPIR));
						}
						{ |;|
							if (DataProcess.mySeq == 1)
							{
								input Node.DataMsg1(DataProcess.d, Node.timeEmit);
							}
							else
							{
								input Node.DataMsg2(DataProcess.d, Node.timeEmit);
							}
							spec::Trickle.cptInput := (+ 1);
						}
						Node.localPtC := (Node.localPtC && (Node.timeEmit <= Node.localTime));
						DataProcess.consistent := true;
						if (DataProcess.mySeq == &spec::Trickle.Node.DataProcess.d.seq)
						{ |;|
							&spec::Trickle.Node.my_buff[(&spec::Trickle.Node.DataProcess.d.seq + (- Node.MIN_SEQ))] := DataProcess.d;
							&spec::Trickle.Node.myseq_buff[(&spec::Trickle.Node.DataProcess.d.seq + (- Node.MIN_SEQ))] := 1;
							&spec::Trickle.Node.firmware[&spec::Trickle.Node.DataProcess.d.offset] := &spec::Trickle.Node.DataProcess.d.fragment;
						}
						else
						{
							DataProcess.consistent := false;
						}
					}
					guard (! DataProcess.consistent);
					DataProcess.tau := DataProcess.tau_l;
					invoke#method DataProcess.t newfresh;
					{ |;|
						guard (((DataProcess.tau / 2) <= DataProcess.t) && (DataProcess.t < DataProcess.tau));
						Node.localPC := (Node.localPC && (((DataProcess.tau / 2) <= DataProcess.t) && (DataProcess.t < DataProcess.tau)));
					}
					DataProcess.cl := 0;
					DataProcess.c := 0;
					DataProcess.e := 0;
				}
			end note

			state "dp3" as dp3_277347816 << Final >>

		}

		state "DataProcess1" as DataProcess1_277350488
		DataProcess1_277350488 : model DataProcess
		state "DataProcess2" as DataProcess2_277380424
		DataProcess2_277380424 : model DataProcess
	}
	--
	state "Observer" as Observer_277492632 {
		state "startup" as startup_277501800 << Initial >>

		startup_277501800--> o#0_277529912 : o_startup


		state "o#0" as o#0_277529912 << Simple >>

		o#0_277529912--> o#1_277569128
		note on link #white
			**n1_out_Log:**
			{ |;|
				@observe( ctx: spec::Trickle ) {
					output spec::Trickle.n1.Log(Observer.mess, Observer.timeStamp);
				} [ (Observer.mess == INIT) ];
				@debug \"Couverture o#1\" }
			}
		end note

		o#0_277529912--> FAILED_278324552
		note on link #orange
			**n1_out_CM_failed:**
			{ |;|
				guard (Observer.uncoveredExit > Observer.L);
				exit \"Unfound Trace point< output n1->Log >\";
			}
		end note

		state "o#1" as o#1_277569128 << Simple >>

		o#1_277569128--> o#2_277607832
		note on link #white
			**n2_out_Log:**
			{ |;|
				@observe( ctx: spec::Trickle ) {
					output spec::Trickle.n2.Log(Observer.mess);
				} [ (Observer.mess == INIT) ];
				@debug \"Couverture o#2\" }
			}
		end note

		o#1_277569128--> FAILED_278324552
		note on link #orange
			**n2_out_CM_failed:**
			{ |;|
				guard (Observer.uncoveredExit > Observer.L);
				exit \"Unfound Trace point< output n2->Log >\";
			}
		end note

		state "o#2" as o#2_277607832 << Simple >>

		o#2_277607832--> o#3_277646440
		note on link #white
			**n3_out_Log:**
			{ |;|
				@observe( ctx: spec::Trickle ) {
					output spec::Trickle.n3.Log(Observer.mess);
				} [ (Observer.mess == INIT) ];
				@debug \"Couverture o#3\" }
			}
		end note

		o#2_277607832--> FAILED_278324552
		note on link #orange
			**n3_out_CM_failed:**
			{ |;|
				guard (Observer.uncoveredExit > Observer.L);
				exit \"Unfound Trace point< output n3->Log >\";
			}
		end note

		state "o#3" as o#3_277646440 << Simple >>

		o#3_277646440--> o#4_277685240
		note on link #white
			**n4_out_Log:**
			{ |;|
				@observe( ctx: spec::Trickle ) {
					output spec::Trickle.n4.Log(Observer.mess);
				} [ (Observer.mess == INIT) ];
				@debug \"Couverture o#4\" }
			}
		end note

		o#3_277646440--> FAILED_278324552
		note on link #orange
			**n4_out_CM_failed:**
			{ |;|
				guard (Observer.uncoveredExit > Observer.L);
				exit \"Unfound Trace point< output n4->Log >\";
			}
		end note

		state "o#4" as o#4_277685240 << Simple >>

		o#4_277685240--> o#5_277743448
		note on link #white
			**n1_out_CM:**
			{ |;|
				@observe( ctx: spec::Trickle ) {
					output spec::Trickle.n1.ControlMsg(Observer.seqBuff);
				} [ ((&spec::Trickle.Observer.seqBuff[0] == 1) && (&spec::Trickle.Observer.seqBuff[1] == 1) && ((spec::Trickle.n1.localTime + (- Observer.timeStamp)) > (spec::Trickle.n1.ControlProcess.tau_l / 2))) ];
				@debug \"Couverture o#5\" }
			}
		end note

		o#4_277685240--> FAILED_278324552
		note on link #orange
			**n4_out_CM_failed:**
			{ |;|
				guard (Observer.uncoveredExit > Observer.L);
				exit \"Unfound Trace point< output n4->ControlMsg >\";
			}
		end note

		state "o#5" as o#5_277743448 << Simple >>

		o#5_277743448--> o#6_277805752
		note on link #white
			**n2_in_CM:**
			{ |;|
				@observe( ctx: spec::Trickle ) {
					input spec::Trickle.n2.ControlMsg(Observer.seqBuff);
				} [ ((&spec::Trickle.Observer.seqBuff[0] == 1) && (&spec::Trickle.Observer.seqBuff[1] == 1)) ];
				tguard ((spec::Trickle.n2.localTime + (- Observer.timeStamp)) <= spec::Trickle.n2.ControlProcess.tau_l);
				@debug \"Couverture o#6\" }
			}
		end note

		o#5_277743448--> FAILED_278324552
		note on link #orange
			**n2_in_CM_failed:**
			{ |;|
				guard (Observer.uncoveredExit > Observer.L);
				exit \"Unfound Trace point< input n2->ControlMsg >\";
			}
		end note

		o#5_277743448--> FAILED_278324552
		note on link #orange
			**n2_in_CM_failed:**
			{ |;|
				tguard ((spec::Trickle.n2.localTime + (- Observer.timeStamp)) > spec::Trickle.n2.ControlProcess.tau_l);
				exit \"Timeout Trace point< input n2->ControlMsg >\";
			}
		end note

		state "o#6" as o#6_277805752 << Simple >>

		o#6_277805752--> o#7_277867896
		note on link #white
			**n3_in_CM:**
			{ |;|
				@observe( ctx: spec::Trickle ) {
					input spec::Trickle.n3.ControlMsg(Observer.seqBuff);
				} [ ((&spec::Trickle.Observer.seqBuff[0] == 1) && (&spec::Trickle.Observer.seqBuff[1] == 1)) ];
				tguard ((spec::Trickle.n3.localTime + (- Observer.timeStamp)) <= spec::Trickle.n3.ControlProcess.tau_l);
				@debug \"Couverture o#7\" }
			}
		end note

		o#6_277805752--> FAILED_278324552
		note on link #orange
			**n3_in_CM_failed:**
			{ |;|
				guard (Observer.uncoveredExit > Observer.L);
				exit \"Unfound Trace point< output n3->ControlMsg >\";
			}
		end note

		o#6_277805752--> FAILED_278324552
		note on link #orange
			**n3_in_CM_failed:**
			{ |;|
				tguard ((spec::Trickle.n3.localTime + (- Observer.timeStamp)) > spec::Trickle.n3.ControlProcess.tau_l);
				exit \"Timeout Trace point< output n3->ControlMsg >\";
			}
		end note

		state "o#7" as o#7_277867896 << Simple >>

		o#7_277867896--> o#8_277910392
		note on link #white
			**n1_out_DM1:**
			{ |;|
				@observe( ctx: spec::Trickle ) {
					output spec::Trickle.n1.DataMsg1(Observer.dataMessage);
				} [ (&spec::Trickle.Observer.dataMessage.seq == 1) ];
				@debug \"Couverture o#8\" }
			}
		end note

		o#7_277867896--> FAILED_278324552
		note on link #orange
			**n1_out_DM1_failed:**
			{ |;|
				guard (Observer.uncoveredExit > Observer.L);
				exit \"Unfound Trace point< output n1->DataMsg1 >\";
			}
		end note

		state "o#8" as o#8_277910392 << Simple >>

		o#8_277910392--> o#9_277951384
		note on link #white
			**n2_in_DM1:**
			{ |;|
				@observe( ctx: spec::Trickle ) {
					input spec::Trickle.n2.DataMsg1(Observer.dataMessage);
				} [ (&spec::Trickle.Observer.dataMessage.seq == 1) ];
				@debug \"Couverture o#9\" }
				@debug \"cptInput = \" spec::Trickle.cptInput }
				@debug \"cptOutput = \" spec::Trickle.cptOutput }
			}
		end note

		o#8_277910392--> FAILED_278324552
		note on link #orange
			**n2_in_DM1_failed:**
			{ |;|
				guard (Observer.uncoveredExit > Observer.L);
				exit \"Unfound Trace point< input n2->DataMsg1 >\";
			}
		end note

		state "o#9" as o#9_277951384 << Simple >>

		o#9_277951384--> o#10_277992376
		note on link #white
			**n3_in_DM1:**
			{ |;|
				@observe( ctx: spec::Trickle ) {
					input spec::Trickle.n3.DataMsg1(Observer.dataMessage);
				} [ (&spec::Trickle.Observer.dataMessage.seq == 1) ];
				@debug \"Couverture o#10\" }
				@debug \"cptInput = \" spec::Trickle.cptInput }
				@debug \"cptOutput = \" spec::Trickle.cptOutput }
			}
		end note

		o#9_277951384--> FAILED_278324552
		note on link #orange
			**n3_in_DM1_failed:**
			{ |;|
				guard (Observer.uncoveredExit > Observer.L);
				exit \"Unfound Trace point< input n3->DataMsg1 >\";
			}
		end note

		state "o#10" as o#10_277992376 << Simple >>

		o#10_277992376--> o#11_277129272
		note on link #white
			**n1_out_DM2:**
			{ |;|
				@observe( ctx: spec::Trickle ) {
					output spec::Trickle.n1.DataMsg2(Observer.dataMessage);
				} [ (&spec::Trickle.Observer.dataMessage.seq == 2) ];
				@debug \"Couverture o#11\" }
				@debug \"cptInput = \" spec::Trickle.cptInput }
				@debug \"cptOutput = \" spec::Trickle.cptOutput }
			}
		end note

		o#10_277992376--> FAILED_278324552
		note on link #orange
			**n1_out_DM1_failed:**
			{ |;|
				guard (Observer.uncoveredExit > Observer.L);
				exit \"Unfound Trace point< output n1->DataMsg2 >\";
			}
		end note

		state "o#11" as o#11_277129272 << Simple >>

		o#11_277129272--> o#12_278093448
		note on link #white
			**n2_in_DM2:**
			{ |;|
				@observe( ctx: spec::Trickle ) {
					input spec::Trickle.n2.DataMsg2(Observer.dataMessage);
				} [ (&spec::Trickle.Observer.dataMessage.seq == 2) ];
				@debug \"Couverture o#12\" }
				@debug \"cptInput = \" spec::Trickle.cptInput }
				@debug \"cptOutput = \" spec::Trickle.cptOutput }
			}
		end note

		o#11_277129272--> FAILED_278324552
		note on link #orange
			**n2_in_DM1_failed:**
			{ |;|
				guard (Observer.uncoveredExit > Observer.L);
				exit \"Unfound Trace point< input n2->DataMsg2 >\";
			}
		end note

		state "o#12" as o#12_278093448 << Simple >>

		o#12_278093448--> o#13_278134456
		note on link #white
			**n3_in_DM2:**
			{ |;|
				@observe( ctx: spec::Trickle ) {
					input spec::Trickle.n3.DataMsg2(Observer.dataMessage);
				} [ (&spec::Trickle.Observer.dataMessage.seq == 2) ];
				@debug \"Couverture o#13\" }
				@debug \"cptInput = \" spec::Trickle.cptInput }
				@debug \"cptOutput = \" spec::Trickle.cptOutput }
			}
		end note

		o#12_278093448--> FAILED_278324552
		note on link #orange
			**n3_in_DM2_failed:**
			{ |;|
				guard (Observer.uncoveredExit > Observer.L);
				exit \"Unfound Trace point< input n3->DataMsg2 >\";
			}
		end note

		state "o#13" as o#13_278134456 << Simple >>

		o#13_278134456--> o#14_278175400
		note on link #white
			**n3_out_DM2:**
			{ |;|
				@observe( ctx: spec::Trickle ) {
					output spec::Trickle.n3.DataMsg2;
				} [ true ];
				@debug \"Couverture o#14\" }
				@debug \"cptInput = \" spec::Trickle.cptInput }
				@debug \"cptOutput = \" spec::Trickle.cptOutput }
			}
		end note

		o#13_278134456--> FAILED_278324552
		note on link #orange
			**n3_out_DM2_failed:**
			{ |;|
				guard (Observer.uncoveredExit > Observer.L);
				exit \"Unfound Trace point< output n3->DataMsg2 >\";
			}
		end note

		state "o#14" as o#14_278175400 << Simple >>

		o#14_278175400--> o#15_278216600
		note on link #white
			**n4_in_DM2:**
			{ |;|
				@observe( ctx: spec::Trickle ) {
					input spec::Trickle.n4.DataMsg2(Observer.dataMessage);
				} [ true ];
				@debug \"Couverture o#15\" }
				@debug \"cptInput = \" spec::Trickle.cptInput }
				@debug \"cptOutput = \" spec::Trickle.cptOutput }
			}
		end note

		o#14_278175400--> FAILED_278324552
		note on link #orange
			**n4_in_DM2_failed:**
			{ |;|
				guard (Observer.uncoveredExit > Observer.L);
				exit \"Unfound Trace point< input n4->DataMsg2 >\";
			}
		end note

		state "o#15" as o#15_278216600 << Simple >>

		o#15_278216600--> o#16_278256168
		note on link #white
			**n3_out_DM1:**
			{ |;|
				@observe( ctx: spec::Trickle ) {
					output spec::Trickle.n3.DataMsg1(Observer.dataMessage, Observer.timeStamp);
				} [ true ];
				@debug \"Couverture o#16\" }
				@debug \"cptInput = \" spec::Trickle.cptInput }
				@debug \"cptOutput = \" spec::Trickle.cptOutput }
			}
		end note

		o#15_278216600--> FAILED_278324552
		note on link #orange
			**n3_out_DM1_failed:**
			{ |;|
				guard (Observer.uncoveredExit > Observer.L);
				exit \"Unfound Trace point< output n3->DataMsg1 >\";
			}
		end note

		state "o#16" as o#16_278256168 << Simple >>

		o#16_278256168--> PASS_278297368
		note on link #white
			**n4_in_DM1:**
			{ |;|
				@observe( ctx: spec::Trickle ) {
					input spec::Trickle.n4.DataMsg1(Observer.dataMessage);
				} [ true ];
				@debug \"Couverture PASS\" }
				@debug \"cptInput = \" spec::Trickle.cptInput }
				@debug \"cptOutput = \" spec::Trickle.cptOutput }
			}
		end note

		o#16_278256168--> FAILED_278324552
		note on link #orange
			**n4_in_DM1_failed:**
			{ |;|
				guard (Observer.uncoveredExit > Observer.L);
				exit \"Unfound Trace point< input n3->DataMsg1 >\";
			}
		end note

		state "PASS" as PASS_278297368 << Final >>

		state "FAILED" as FAILED_278324552 << Final >>

	}
	--
	state "n1" as n1_278355384
	n1_278355384 : model Node	--
	state "n2" as n2_278412712
	n2_278412712 : model Node	--
	state "n3" as n3_278469944
	n3_278469944 : model Node	--
	state "n4" as n4_278527336
	n4_278527336 : model Node
}
@enduml

